/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RewardsDistributorInterface extends utils.Interface {
  functions: {
    "INITIAL_INDEX()": FunctionFragment;
    "MAX_REWARD_TOKENS()": FunctionFragment;
    "accountIndexOf(address,address)": FunctionFragment;
    "claimRewards(address,address[])": FunctionFragment;
    "claimRewards(address[],address[])": FunctionFragment;
    "claimRewards(address)": FunctionFragment;
    "controller()": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setController(address)": FunctionFragment;
    "sweep(address,address,uint256)": FunctionFragment;
    "tokenSpeeds(address)": FunctionFragment;
    "tokenStates(address)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "tokensAccruedOf(address)": FunctionFragment;
    "updateBeforeMintOrBurn(address,address)": FunctionFragment;
    "updateBeforeTransfer(address,address,address)": FunctionFragment;
    "updateTokenSpeed(address,uint256)": FunctionFragment;
    "updateTokenSpeeds(address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INITIAL_INDEX"
      | "MAX_REWARD_TOKENS"
      | "accountIndexOf"
      | "claimRewards(address,address[])"
      | "claimRewards(address[],address[])"
      | "claimRewards(address)"
      | "controller"
      | "governor"
      | "initialize"
      | "rewardToken"
      | "setController"
      | "sweep"
      | "tokenSpeeds"
      | "tokenStates"
      | "tokens"
      | "tokensAccruedOf"
      | "updateBeforeMintOrBurn"
      | "updateBeforeTransfer"
      | "updateTokenSpeed"
      | "updateTokenSpeeds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "INITIAL_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REWARD_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountIndexOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards(address,address[])",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards(address[],address[])",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSpeeds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenStates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensAccruedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBeforeMintOrBurn",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBeforeTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenSpeed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenSpeeds",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "INITIAL_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REWARD_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards(address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards(address[],address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensAccruedOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBeforeMintOrBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBeforeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenSpeeds",
    data: BytesLike
  ): Result;

  events: {
    "RewardClaimed(address,uint256)": EventFragment;
    "TokenSpeedUpdated(address,uint256,uint256)": EventFragment;
    "TokensAccruedUpdated(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSpeedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensAccruedUpdated"): EventFragment;
}

export interface RewardClaimedEventObject {
  account: string;
  amount: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface TokenSpeedUpdatedEventObject {
  token: string;
  oldSpeed: BigNumber;
  newSpeed: BigNumber;
}
export type TokenSpeedUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TokenSpeedUpdatedEventObject
>;

export type TokenSpeedUpdatedEventFilter =
  TypedEventFilter<TokenSpeedUpdatedEvent>;

export interface TokensAccruedUpdatedEventObject {
  token: string;
  account: string;
  tokensDelta: BigNumber;
  supplyIndex: BigNumber;
}
export type TokensAccruedUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TokensAccruedUpdatedEventObject
>;

export type TokensAccruedUpdatedEventFilter =
  TypedEventFilter<TokensAccruedUpdatedEvent>;

export interface RewardsDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardsDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INITIAL_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_REWARD_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    accountIndexOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimRewards(address,address[])"(
      _account: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimRewards(address[],address[])"(
      _accounts: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimRewards(address)"(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    governor(
      overrides?: CallOverrides
    ): Promise<[string] & { _governor: string }>;

    initialize(
      _controller: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenSpeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenStates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; timestamp: number }>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokensAccruedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateBeforeMintOrBurn(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBeforeTransfer(
      _token: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTokenSpeed(
      _token: PromiseOrValue<string>,
      _newSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTokenSpeeds(
      _tokens: PromiseOrValue<string>[],
      _speeds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  INITIAL_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_REWARD_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  accountIndexOf(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimRewards(address,address[])"(
    _account: PromiseOrValue<string>,
    _tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimRewards(address[],address[])"(
    _accounts: PromiseOrValue<string>[],
    _tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimRewards(address)"(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  initialize(
    _controller: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setController(
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sweep(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenSpeeds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenStates(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { index: BigNumber; timestamp: number }>;

  tokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokensAccruedOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateBeforeMintOrBurn(
    _token: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBeforeTransfer(
    _token: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTokenSpeed(
    _token: PromiseOrValue<string>,
    _newSpeed: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTokenSpeeds(
    _tokens: PromiseOrValue<string>[],
    _speeds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    INITIAL_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REWARD_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    accountIndexOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimRewards(address,address[])"(
      _account: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimRewards(address[],address[])"(
      _accounts: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimRewards(address)"(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    initialize(
      _controller: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenSpeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenStates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; timestamp: number }>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokensAccruedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateBeforeMintOrBurn(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBeforeTransfer(
      _token: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenSpeed(
      _token: PromiseOrValue<string>,
      _newSpeed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenSpeeds(
      _tokens: PromiseOrValue<string>[],
      _speeds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RewardClaimed(address,uint256)"(
      account?: null,
      amount?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(account?: null, amount?: null): RewardClaimedEventFilter;

    "TokenSpeedUpdated(address,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      oldSpeed?: null,
      newSpeed?: null
    ): TokenSpeedUpdatedEventFilter;
    TokenSpeedUpdated(
      token?: PromiseOrValue<string> | null,
      oldSpeed?: null,
      newSpeed?: null
    ): TokenSpeedUpdatedEventFilter;

    "TokensAccruedUpdated(address,address,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      tokensDelta?: null,
      supplyIndex?: null
    ): TokensAccruedUpdatedEventFilter;
    TokensAccruedUpdated(
      token?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      tokensDelta?: null,
      supplyIndex?: null
    ): TokensAccruedUpdatedEventFilter;
  };

  estimateGas: {
    INITIAL_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REWARD_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    accountIndexOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimRewards(address,address[])"(
      _account: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimRewards(address[],address[])"(
      _accounts: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimRewards(address)"(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _controller: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenSpeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenStates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensAccruedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateBeforeMintOrBurn(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBeforeTransfer(
      _token: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTokenSpeed(
      _token: PromiseOrValue<string>,
      _newSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTokenSpeeds(
      _tokens: PromiseOrValue<string>[],
      _speeds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INITIAL_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_REWARD_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountIndexOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimRewards(address,address[])"(
      _account: PromiseOrValue<string>,
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimRewards(address[],address[])"(
      _accounts: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimRewards(address)"(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _controller: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenSpeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenStates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensAccruedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateBeforeMintOrBurn(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBeforeTransfer(
      _token: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenSpeed(
      _token: PromiseOrValue<string>,
      _newSpeed: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenSpeeds(
      _tokens: PromiseOrValue<string>[],
      _speeds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
