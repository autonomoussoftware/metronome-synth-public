/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace FixedPoint {
  export type Uq112x112Struct = { _x: PromiseOrValue<BigNumberish> };

  export type Uq112x112StructOutput = [BigNumber] & { _x: BigNumber };
}

export interface UniswapV2LikePriceProviderInterface extends utils.Interface {
  functions: {
    "NATIVE_TOKEN()": FunctionFragment;
    "acceptGovernorship()": FunctionFragment;
    "factory()": FunctionFragment;
    "getPriceInUsd(address)": FunctionFragment;
    "governor()": FunctionFragment;
    "oracleDataOf(address)": FunctionFragment;
    "proposedGovernor()": FunctionFragment;
    "sweep(address,address,uint256)": FunctionFragment;
    "transferGovernorship(address)": FunctionFragment;
    "twapPeriod()": FunctionFragment;
    "update(address)": FunctionFragment;
    "updateTwapPeriod(uint256)": FunctionFragment;
    "usdToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NATIVE_TOKEN"
      | "acceptGovernorship"
      | "factory"
      | "getPriceInUsd"
      | "governor"
      | "oracleDataOf"
      | "proposedGovernor"
      | "sweep"
      | "transferGovernorship"
      | "twapPeriod"
      | "update"
      | "updateTwapPeriod"
      | "usdToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "NATIVE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGovernorship",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPriceInUsd",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleDataOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovernorship",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "twapPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTwapPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "usdToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "NATIVE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernorship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceInUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleDataOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernorship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twapPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTwapPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdToken", data: BytesLike): Result;

  events: {
    "TwapPeriodUpdated(uint256,uint256)": EventFragment;
    "UpdatedGovernor(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TwapPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedGovernor"): EventFragment;
}

export interface TwapPeriodUpdatedEventObject {
  oldTwapPeriod: BigNumber;
  newTwapPeriod: BigNumber;
}
export type TwapPeriodUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TwapPeriodUpdatedEventObject
>;

export type TwapPeriodUpdatedEventFilter =
  TypedEventFilter<TwapPeriodUpdatedEvent>;

export interface UpdatedGovernorEventObject {
  previousGovernor: string;
  proposedGovernor: string;
}
export type UpdatedGovernorEvent = TypedEvent<
  [string, string],
  UpdatedGovernorEventObject
>;

export type UpdatedGovernorEventFilter = TypedEventFilter<UpdatedGovernorEvent>;

export interface UniswapV2LikePriceProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapV2LikePriceProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NATIVE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    acceptGovernorship(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getPriceInUsd(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _priceInUsd: BigNumber;
        _lastUpdatedAt: BigNumber;
      }
    >;

    governor(overrides?: CallOverrides): Promise<[string]>;

    oracleDataOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        FixedPoint.Uq112x112StructOutput,
        FixedPoint.Uq112x112StructOutput
      ] & {
        token0: string;
        token1: string;
        price0CumulativeLast: BigNumber;
        price1CumulativeLast: BigNumber;
        blockTimestampLast: number;
        price0Average: FixedPoint.Uq112x112StructOutput;
        price1Average: FixedPoint.Uq112x112StructOutput;
      }
    >;

    proposedGovernor(overrides?: CallOverrides): Promise<[string]>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferGovernorship(
      _proposedGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    twapPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    update(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTwapPeriod(
      _newTwapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdToken(overrides?: CallOverrides): Promise<[string]>;
  };

  NATIVE_TOKEN(overrides?: CallOverrides): Promise<string>;

  acceptGovernorship(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getPriceInUsd(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _priceInUsd: BigNumber;
      _lastUpdatedAt: BigNumber;
    }
  >;

  governor(overrides?: CallOverrides): Promise<string>;

  oracleDataOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      FixedPoint.Uq112x112StructOutput,
      FixedPoint.Uq112x112StructOutput
    ] & {
      token0: string;
      token1: string;
      price0CumulativeLast: BigNumber;
      price1CumulativeLast: BigNumber;
      blockTimestampLast: number;
      price0Average: FixedPoint.Uq112x112StructOutput;
      price1Average: FixedPoint.Uq112x112StructOutput;
    }
  >;

  proposedGovernor(overrides?: CallOverrides): Promise<string>;

  sweep(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferGovernorship(
    _proposedGovernor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  twapPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  update(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTwapPeriod(
    _newTwapPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    NATIVE_TOKEN(overrides?: CallOverrides): Promise<string>;

    acceptGovernorship(overrides?: CallOverrides): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getPriceInUsd(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _priceInUsd: BigNumber;
        _lastUpdatedAt: BigNumber;
      }
    >;

    governor(overrides?: CallOverrides): Promise<string>;

    oracleDataOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        FixedPoint.Uq112x112StructOutput,
        FixedPoint.Uq112x112StructOutput
      ] & {
        token0: string;
        token1: string;
        price0CumulativeLast: BigNumber;
        price1CumulativeLast: BigNumber;
        blockTimestampLast: number;
        price0Average: FixedPoint.Uq112x112StructOutput;
        price1Average: FixedPoint.Uq112x112StructOutput;
      }
    >;

    proposedGovernor(overrides?: CallOverrides): Promise<string>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferGovernorship(
      _proposedGovernor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    twapPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    update(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTwapPeriod(
      _newTwapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "TwapPeriodUpdated(uint256,uint256)"(
      oldTwapPeriod?: null,
      newTwapPeriod?: null
    ): TwapPeriodUpdatedEventFilter;
    TwapPeriodUpdated(
      oldTwapPeriod?: null,
      newTwapPeriod?: null
    ): TwapPeriodUpdatedEventFilter;

    "UpdatedGovernor(address,address)"(
      previousGovernor?: PromiseOrValue<string> | null,
      proposedGovernor?: PromiseOrValue<string> | null
    ): UpdatedGovernorEventFilter;
    UpdatedGovernor(
      previousGovernor?: PromiseOrValue<string> | null,
      proposedGovernor?: PromiseOrValue<string> | null
    ): UpdatedGovernorEventFilter;
  };

  estimateGas: {
    NATIVE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernorship(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceInUsd(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    oracleDataOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferGovernorship(
      _proposedGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    twapPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    update(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTwapPeriod(
      _newTwapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NATIVE_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernorship(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceInUsd(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleDataOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferGovernorship(
      _proposedGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    twapPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    update(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTwapPeriod(
      _newTwapPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
