/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MasterOracleInterface extends utils.Interface {
  functions: {
    "acceptGovernorship()": FunctionFragment;
    "addOrUpdate(address[],address[])": FunctionFragment;
    "defaultOracle()": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize(address[],address[],address)": FunctionFragment;
    "oracles(address)": FunctionFragment;
    "proposedGovernor()": FunctionFragment;
    "quote(address,address,uint256)": FunctionFragment;
    "quoteTokenToUsd(address,uint256)": FunctionFragment;
    "quoteUsdToToken(address,uint256)": FunctionFragment;
    "setDefaultOracle(address)": FunctionFragment;
    "sweep(address,address,uint256)": FunctionFragment;
    "transferGovernorship(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptGovernorship"
      | "addOrUpdate"
      | "defaultOracle"
      | "governor"
      | "initialize"
      | "oracles"
      | "proposedGovernor"
      | "quote"
      | "quoteTokenToUsd"
      | "quoteUsdToToken"
      | "setDefaultOracle"
      | "sweep"
      | "transferGovernorship"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptGovernorship",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOrUpdate",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oracles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteTokenToUsd",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteUsdToToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovernorship",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernorship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOrUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokenToUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteUsdToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernorship",
    data: BytesLike
  ): Result;

  events: {
    "DefaultOracleUpdated(address,address)": EventFragment;
    "OracleUpdated(address,address,address)": EventFragment;
    "UpdatedGovernor(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DefaultOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedGovernor"): EventFragment;
}

export interface DefaultOracleUpdatedEventObject {
  oldOracle: string;
  newOracle: string;
}
export type DefaultOracleUpdatedEvent = TypedEvent<
  [string, string],
  DefaultOracleUpdatedEventObject
>;

export type DefaultOracleUpdatedEventFilter =
  TypedEventFilter<DefaultOracleUpdatedEvent>;

export interface OracleUpdatedEventObject {
  asset: string;
  oldOracle: string;
  newOracle: string;
}
export type OracleUpdatedEvent = TypedEvent<
  [string, string, string],
  OracleUpdatedEventObject
>;

export type OracleUpdatedEventFilter = TypedEventFilter<OracleUpdatedEvent>;

export interface UpdatedGovernorEventObject {
  previousGovernor: string;
  proposedGovernor: string;
}
export type UpdatedGovernorEvent = TypedEvent<
  [string, string],
  UpdatedGovernorEventObject
>;

export type UpdatedGovernorEventFilter = TypedEventFilter<UpdatedGovernorEvent>;

export interface MasterOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernorship(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addOrUpdate(
      _assets: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultOracle(overrides?: CallOverrides): Promise<[string]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _assets: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      _defaultOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proposedGovernor(overrides?: CallOverrides): Promise<[string]>;

    quote(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amountOut: BigNumber }>;

    quoteTokenToUsd(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amountInUsd: BigNumber }>;

    quoteUsdToToken(
      _asset: PromiseOrValue<string>,
      _amountInUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    setDefaultOracle(
      _newDefaultOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferGovernorship(
      _proposedGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptGovernorship(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addOrUpdate(
    _assets: PromiseOrValue<string>[],
    _oracles: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultOracle(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  initialize(
    _assets: PromiseOrValue<string>[],
    _oracles: PromiseOrValue<string>[],
    _defaultOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracles(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  proposedGovernor(overrides?: CallOverrides): Promise<string>;

  quote(
    _assetIn: PromiseOrValue<string>,
    _assetOut: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteTokenToUsd(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteUsdToToken(
    _asset: PromiseOrValue<string>,
    _amountInUsd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setDefaultOracle(
    _newDefaultOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sweep(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferGovernorship(
    _proposedGovernor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernorship(overrides?: CallOverrides): Promise<void>;

    addOrUpdate(
      _assets: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    defaultOracle(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    initialize(
      _assets: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      _defaultOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    proposedGovernor(overrides?: CallOverrides): Promise<string>;

    quote(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteTokenToUsd(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteUsdToToken(
      _asset: PromiseOrValue<string>,
      _amountInUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaultOracle(
      _newDefaultOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferGovernorship(
      _proposedGovernor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DefaultOracleUpdated(address,address)"(
      oldOracle?: null,
      newOracle?: null
    ): DefaultOracleUpdatedEventFilter;
    DefaultOracleUpdated(
      oldOracle?: null,
      newOracle?: null
    ): DefaultOracleUpdatedEventFilter;

    "OracleUpdated(address,address,address)"(
      asset?: null,
      oldOracle?: null,
      newOracle?: null
    ): OracleUpdatedEventFilter;
    OracleUpdated(
      asset?: null,
      oldOracle?: null,
      newOracle?: null
    ): OracleUpdatedEventFilter;

    "UpdatedGovernor(address,address)"(
      previousGovernor?: PromiseOrValue<string> | null,
      proposedGovernor?: PromiseOrValue<string> | null
    ): UpdatedGovernorEventFilter;
    UpdatedGovernor(
      previousGovernor?: PromiseOrValue<string> | null,
      proposedGovernor?: PromiseOrValue<string> | null
    ): UpdatedGovernorEventFilter;
  };

  estimateGas: {
    acceptGovernorship(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addOrUpdate(
      _assets: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultOracle(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _assets: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      _defaultOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    quote(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteTokenToUsd(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteUsdToToken(
      _asset: PromiseOrValue<string>,
      _amountInUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDefaultOracle(
      _newDefaultOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferGovernorship(
      _proposedGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernorship(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addOrUpdate(
      _assets: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _assets: PromiseOrValue<string>[],
      _oracles: PromiseOrValue<string>[],
      _defaultOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracles(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quote(
      _assetIn: PromiseOrValue<string>,
      _assetOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteTokenToUsd(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteUsdToToken(
      _asset: PromiseOrValue<string>,
      _amountInUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDefaultOracle(
      _newDefaultOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferGovernorship(
      _proposedGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
