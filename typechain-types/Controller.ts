/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ControllerInterface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "acceptGovernorship()": FunctionFragment;
    "addDepositToken(address)": FunctionFragment;
    "addRewardsDistributor(address)": FunctionFragment;
    "addSyntheticToken(address)": FunctionFragment;
    "addToDebtTokensOfAccount(address)": FunctionFragment;
    "addToDepositTokensOfAccount(address)": FunctionFragment;
    "debtFloorInUsd()": FunctionFragment;
    "debtOf(address)": FunctionFragment;
    "debtPositionOf(address)": FunctionFragment;
    "depositFee()": FunctionFragment;
    "depositOf(address)": FunctionFragment;
    "depositTokenOf(address)": FunctionFragment;
    "everythingStopped()": FunctionFragment;
    "getDebtTokensOfAccount(address)": FunctionFragment;
    "getDepositTokens()": FunctionFragment;
    "getDepositTokensOfAccount(address)": FunctionFragment;
    "getRewardsDistributors()": FunctionFragment;
    "getSyntheticTokens()": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isDepositTokenExists(address)": FunctionFragment;
    "isSyntheticTokenExists(address)": FunctionFragment;
    "issueFee()": FunctionFragment;
    "liquidate(address,address,uint256,address)": FunctionFragment;
    "liquidatorLiquidationFee()": FunctionFragment;
    "masterOracle()": FunctionFragment;
    "maxLiquidable()": FunctionFragment;
    "open()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proposedGovernor()": FunctionFragment;
    "protocolLiquidationFee()": FunctionFragment;
    "removeDepositToken(address)": FunctionFragment;
    "removeFromDebtTokensOfAccount(address)": FunctionFragment;
    "removeFromDepositTokensOfAccount(address)": FunctionFragment;
    "removeSyntheticToken(address)": FunctionFragment;
    "repayFee()": FunctionFragment;
    "shutdown()": FunctionFragment;
    "swap(address,address,uint256)": FunctionFragment;
    "swapFee()": FunctionFragment;
    "sweep(address,address,uint256)": FunctionFragment;
    "transferGovernorship(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateDebtFloor(uint256)": FunctionFragment;
    "updateDepositFee(uint256)": FunctionFragment;
    "updateIssueFee(uint256)": FunctionFragment;
    "updateLiquidatorLiquidationFee(uint256)": FunctionFragment;
    "updateMasterOracle(address)": FunctionFragment;
    "updateMaxLiquidable(uint256)": FunctionFragment;
    "updateProtocolLiquidationFee(uint256)": FunctionFragment;
    "updateRepayFee(uint256)": FunctionFragment;
    "updateSwapFee(uint256)": FunctionFragment;
    "updateTreasury(address)": FunctionFragment;
    "updateWithdrawFee(uint256)": FunctionFragment;
    "withdrawFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "VERSION"
      | "acceptGovernorship"
      | "addDepositToken"
      | "addRewardsDistributor"
      | "addSyntheticToken"
      | "addToDebtTokensOfAccount"
      | "addToDepositTokensOfAccount"
      | "debtFloorInUsd"
      | "debtOf"
      | "debtPositionOf"
      | "depositFee"
      | "depositOf"
      | "depositTokenOf"
      | "everythingStopped"
      | "getDebtTokensOfAccount"
      | "getDepositTokens"
      | "getDepositTokensOfAccount"
      | "getRewardsDistributors"
      | "getSyntheticTokens"
      | "governor"
      | "initialize"
      | "isDepositTokenExists"
      | "isSyntheticTokenExists"
      | "issueFee"
      | "liquidate"
      | "liquidatorLiquidationFee"
      | "masterOracle"
      | "maxLiquidable"
      | "open"
      | "pause"
      | "paused"
      | "proposedGovernor"
      | "protocolLiquidationFee"
      | "removeDepositToken"
      | "removeFromDebtTokensOfAccount"
      | "removeFromDepositTokensOfAccount"
      | "removeSyntheticToken"
      | "repayFee"
      | "shutdown"
      | "swap"
      | "swapFee"
      | "sweep"
      | "transferGovernorship"
      | "treasury"
      | "unpause"
      | "updateDebtFloor"
      | "updateDepositFee"
      | "updateIssueFee"
      | "updateLiquidatorLiquidationFee"
      | "updateMasterOracle"
      | "updateMaxLiquidable"
      | "updateProtocolLiquidationFee"
      | "updateRepayFee"
      | "updateSwapFee"
      | "updateTreasury"
      | "updateWithdrawFee"
      | "withdrawFee"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptGovernorship",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDepositToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardsDistributor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSyntheticToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToDebtTokensOfAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToDepositTokensOfAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "debtFloorInUsd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "debtPositionOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokenOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "everythingStopped",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtTokensOfAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositTokensOfAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsDistributors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSyntheticTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositTokenExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSyntheticTokenExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "issueFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatorLiquidationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "open", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposedGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolLiquidationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeDepositToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromDebtTokensOfAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromDepositTokensOfAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSyntheticToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "repayFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "shutdown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "swapFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovernorship",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDebtFloor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDepositFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIssueFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidatorLiquidationFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMasterOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxLiquidable",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProtocolLiquidationFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRepayFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWithdrawFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernorship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDepositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardsDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSyntheticToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToDebtTokensOfAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToDepositTokensOfAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtFloorInUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtPositionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTokenOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "everythingStopped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtTokensOfAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositTokensOfAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSyntheticTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDepositTokenExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSyntheticTokenExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issueFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatorLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDepositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromDebtTokensOfAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromDepositTokensOfAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSyntheticToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernorship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDebtFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIssueFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidatorLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMasterOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxLiquidable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRepayFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "DebtFloorUpdated(uint256,uint256)": EventFragment;
    "DepositFeeUpdated(uint256,uint256)": EventFragment;
    "DepositTokenAdded(address)": EventFragment;
    "DepositTokenRemoved(address)": EventFragment;
    "IssueFeeUpdated(uint256,uint256)": EventFragment;
    "LiquidatorLiquidationFeeUpdated(uint256,uint256)": EventFragment;
    "MasterOracleUpdated(address,address)": EventFragment;
    "MaxLiquidableUpdated(uint256,uint256)": EventFragment;
    "Open(address)": EventFragment;
    "Paused(address)": EventFragment;
    "PositionLiquidated(address,address,address,uint256,uint256,uint256)": EventFragment;
    "ProtocolLiquidationFeeUpdated(uint256,uint256)": EventFragment;
    "RefinanceFeeUpdated(uint256,uint256)": EventFragment;
    "RepayFeeUpdated(uint256,uint256)": EventFragment;
    "RewardsDistributorAdded(address)": EventFragment;
    "Shutdown(address)": EventFragment;
    "SwapFeeUpdated(uint256,uint256)": EventFragment;
    "SyntheticTokenAdded(address)": EventFragment;
    "SyntheticTokenRemoved(address)": EventFragment;
    "SyntheticTokenSwapped(address,address,address,uint256,uint256,uint256)": EventFragment;
    "TreasuryUpdated(address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdatedGovernor(address,address)": EventFragment;
    "WithdrawFeeUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DebtFloorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssueFeeUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidatorLiquidationFeeUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MasterOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxLiquidableUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Open"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProtocolLiquidationFeeUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefinanceFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Shutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SyntheticTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SyntheticTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SyntheticTokenSwapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFeeUpdated"): EventFragment;
}

export interface DebtFloorUpdatedEventObject {
  oldDebtFloorInUsd: BigNumber;
  newDebtFloorInUsd: BigNumber;
}
export type DebtFloorUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DebtFloorUpdatedEventObject
>;

export type DebtFloorUpdatedEventFilter =
  TypedEventFilter<DebtFloorUpdatedEvent>;

export interface DepositFeeUpdatedEventObject {
  oldDepositFee: BigNumber;
  newDepositFee: BigNumber;
}
export type DepositFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DepositFeeUpdatedEventObject
>;

export type DepositFeeUpdatedEventFilter =
  TypedEventFilter<DepositFeeUpdatedEvent>;

export interface DepositTokenAddedEventObject {
  depositToken: string;
}
export type DepositTokenAddedEvent = TypedEvent<
  [string],
  DepositTokenAddedEventObject
>;

export type DepositTokenAddedEventFilter =
  TypedEventFilter<DepositTokenAddedEvent>;

export interface DepositTokenRemovedEventObject {
  depositToken: string;
}
export type DepositTokenRemovedEvent = TypedEvent<
  [string],
  DepositTokenRemovedEventObject
>;

export type DepositTokenRemovedEventFilter =
  TypedEventFilter<DepositTokenRemovedEvent>;

export interface IssueFeeUpdatedEventObject {
  oldIssueFee: BigNumber;
  newIssueFee: BigNumber;
}
export type IssueFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  IssueFeeUpdatedEventObject
>;

export type IssueFeeUpdatedEventFilter = TypedEventFilter<IssueFeeUpdatedEvent>;

export interface LiquidatorLiquidationFeeUpdatedEventObject {
  oldLiquidatorLiquidationFee: BigNumber;
  newLiquidatorLiquidationFee: BigNumber;
}
export type LiquidatorLiquidationFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LiquidatorLiquidationFeeUpdatedEventObject
>;

export type LiquidatorLiquidationFeeUpdatedEventFilter =
  TypedEventFilter<LiquidatorLiquidationFeeUpdatedEvent>;

export interface MasterOracleUpdatedEventObject {
  oldOracle: string;
  newOracle: string;
}
export type MasterOracleUpdatedEvent = TypedEvent<
  [string, string],
  MasterOracleUpdatedEventObject
>;

export type MasterOracleUpdatedEventFilter =
  TypedEventFilter<MasterOracleUpdatedEvent>;

export interface MaxLiquidableUpdatedEventObject {
  oldMaxLiquidable: BigNumber;
  newMaxLiquidable: BigNumber;
}
export type MaxLiquidableUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaxLiquidableUpdatedEventObject
>;

export type MaxLiquidableUpdatedEventFilter =
  TypedEventFilter<MaxLiquidableUpdatedEvent>;

export interface OpenEventObject {
  account: string;
}
export type OpenEvent = TypedEvent<[string], OpenEventObject>;

export type OpenEventFilter = TypedEventFilter<OpenEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PositionLiquidatedEventObject {
  liquidator: string;
  account: string;
  syntheticToken: string;
  amountRepaid: BigNumber;
  depositSeized: BigNumber;
  fee: BigNumber;
}
export type PositionLiquidatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  PositionLiquidatedEventObject
>;

export type PositionLiquidatedEventFilter =
  TypedEventFilter<PositionLiquidatedEvent>;

export interface ProtocolLiquidationFeeUpdatedEventObject {
  oldProtocolLiquidationFee: BigNumber;
  newProtocolLiquidationFee: BigNumber;
}
export type ProtocolLiquidationFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProtocolLiquidationFeeUpdatedEventObject
>;

export type ProtocolLiquidationFeeUpdatedEventFilter =
  TypedEventFilter<ProtocolLiquidationFeeUpdatedEvent>;

export interface RefinanceFeeUpdatedEventObject {
  oldRefinanceFee: BigNumber;
  newRefinanceFee: BigNumber;
}
export type RefinanceFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RefinanceFeeUpdatedEventObject
>;

export type RefinanceFeeUpdatedEventFilter =
  TypedEventFilter<RefinanceFeeUpdatedEvent>;

export interface RepayFeeUpdatedEventObject {
  oldRepayFee: BigNumber;
  newRepayFee: BigNumber;
}
export type RepayFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RepayFeeUpdatedEventObject
>;

export type RepayFeeUpdatedEventFilter = TypedEventFilter<RepayFeeUpdatedEvent>;

export interface RewardsDistributorAddedEventObject {
  _distributor: string;
}
export type RewardsDistributorAddedEvent = TypedEvent<
  [string],
  RewardsDistributorAddedEventObject
>;

export type RewardsDistributorAddedEventFilter =
  TypedEventFilter<RewardsDistributorAddedEvent>;

export interface ShutdownEventObject {
  account: string;
}
export type ShutdownEvent = TypedEvent<[string], ShutdownEventObject>;

export type ShutdownEventFilter = TypedEventFilter<ShutdownEvent>;

export interface SwapFeeUpdatedEventObject {
  oldSwapFee: BigNumber;
  newSwapFee: BigNumber;
}
export type SwapFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  SwapFeeUpdatedEventObject
>;

export type SwapFeeUpdatedEventFilter = TypedEventFilter<SwapFeeUpdatedEvent>;

export interface SyntheticTokenAddedEventObject {
  syntheticToken: string;
}
export type SyntheticTokenAddedEvent = TypedEvent<
  [string],
  SyntheticTokenAddedEventObject
>;

export type SyntheticTokenAddedEventFilter =
  TypedEventFilter<SyntheticTokenAddedEvent>;

export interface SyntheticTokenRemovedEventObject {
  syntheticToken: string;
}
export type SyntheticTokenRemovedEvent = TypedEvent<
  [string],
  SyntheticTokenRemovedEventObject
>;

export type SyntheticTokenRemovedEventFilter =
  TypedEventFilter<SyntheticTokenRemovedEvent>;

export interface SyntheticTokenSwappedEventObject {
  account: string;
  syntheticTokenIn: string;
  syntheticTokenOut: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
  fee: BigNumber;
}
export type SyntheticTokenSwappedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  SyntheticTokenSwappedEventObject
>;

export type SyntheticTokenSwappedEventFilter =
  TypedEventFilter<SyntheticTokenSwappedEvent>;

export interface TreasuryUpdatedEventObject {
  oldTreasury: string;
  newTreasury: string;
}
export type TreasuryUpdatedEvent = TypedEvent<
  [string, string],
  TreasuryUpdatedEventObject
>;

export type TreasuryUpdatedEventFilter = TypedEventFilter<TreasuryUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpdatedGovernorEventObject {
  previousGovernor: string;
  proposedGovernor: string;
}
export type UpdatedGovernorEvent = TypedEvent<
  [string, string],
  UpdatedGovernorEventObject
>;

export type UpdatedGovernorEventFilter = TypedEventFilter<UpdatedGovernorEvent>;

export interface WithdrawFeeUpdatedEventObject {
  oldWithdrawFee: BigNumber;
  newWithdrawFee: BigNumber;
}
export type WithdrawFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  WithdrawFeeUpdatedEventObject
>;

export type WithdrawFeeUpdatedEventFilter =
  TypedEventFilter<WithdrawFeeUpdatedEvent>;

export interface Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    acceptGovernorship(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addDepositToken(
      _depositToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRewardsDistributor(
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSyntheticToken(
      _syntheticToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToDebtTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToDepositTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    debtFloorInUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _debtInUsd: BigNumber }>;

    debtPositionOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _isHealthy: boolean;
        _depositInUsd: BigNumber;
        _debtInUsd: BigNumber;
        _issuableLimitInUsd: BigNumber;
        _issuableInUsd: BigNumber;
      }
    >;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _depositInUsd: BigNumber;
        _issuableLimitInUsd: BigNumber;
      }
    >;

    depositTokenOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    everythingStopped(overrides?: CallOverrides): Promise<[boolean]>;

    getDebtTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getDepositTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getDepositTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRewardsDistributors(overrides?: CallOverrides): Promise<[string[]]>;

    getSyntheticTokens(overrides?: CallOverrides): Promise<[string[]]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _masterOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isDepositTokenExists(
      _depositToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSyntheticTokenExists(
      _syntheticToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issueFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidate(
      _syntheticToken: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amountToRepay: PromiseOrValue<BigNumberish>,
      _depositToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidatorLiquidationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    masterOracle(overrides?: CallOverrides): Promise<[string]>;

    maxLiquidable(overrides?: CallOverrides): Promise<[BigNumber]>;

    open(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proposedGovernor(overrides?: CallOverrides): Promise<[string]>;

    protocolLiquidationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeDepositToken(
      _depositToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFromDebtTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFromDepositTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSyntheticToken(
      _syntheticToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    shutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      _syntheticTokenIn: PromiseOrValue<string>,
      _syntheticTokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferGovernorship(
      _proposedGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDebtFloor(
      _newDebtFloorInUsd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDepositFee(
      _newDepositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateIssueFee(
      _newIssueFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLiquidatorLiquidationFee(
      _newLiquidatorLiquidationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMasterOracle(
      _newMasterOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMaxLiquidable(
      _newMaxLiquidable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateProtocolLiquidationFee(
      _newProtocolLiquidationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRepayFee(
      _newRepayFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSwapFee(
      _newSwapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWithdrawFee(
      _newWithdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  acceptGovernorship(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addDepositToken(
    _depositToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRewardsDistributor(
    _distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSyntheticToken(
    _syntheticToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToDebtTokensOfAccount(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToDepositTokensOfAccount(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  debtFloorInUsd(overrides?: CallOverrides): Promise<BigNumber>;

  debtOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtPositionOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _isHealthy: boolean;
      _depositInUsd: BigNumber;
      _debtInUsd: BigNumber;
      _issuableLimitInUsd: BigNumber;
      _issuableInUsd: BigNumber;
    }
  >;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  depositOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _depositInUsd: BigNumber;
      _issuableLimitInUsd: BigNumber;
    }
  >;

  depositTokenOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  everythingStopped(overrides?: CallOverrides): Promise<boolean>;

  getDebtTokensOfAccount(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getDepositTokens(overrides?: CallOverrides): Promise<string[]>;

  getDepositTokensOfAccount(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRewardsDistributors(overrides?: CallOverrides): Promise<string[]>;

  getSyntheticTokens(overrides?: CallOverrides): Promise<string[]>;

  governor(overrides?: CallOverrides): Promise<string>;

  initialize(
    _masterOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isDepositTokenExists(
    _depositToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSyntheticTokenExists(
    _syntheticToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issueFee(overrides?: CallOverrides): Promise<BigNumber>;

  liquidate(
    _syntheticToken: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _amountToRepay: PromiseOrValue<BigNumberish>,
    _depositToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidatorLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

  masterOracle(overrides?: CallOverrides): Promise<string>;

  maxLiquidable(overrides?: CallOverrides): Promise<BigNumber>;

  open(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proposedGovernor(overrides?: CallOverrides): Promise<string>;

  protocolLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

  removeDepositToken(
    _depositToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFromDebtTokensOfAccount(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFromDepositTokensOfAccount(
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSyntheticToken(
    _syntheticToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayFee(overrides?: CallOverrides): Promise<BigNumber>;

  shutdown(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    _syntheticTokenIn: PromiseOrValue<string>,
    _syntheticTokenOut: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapFee(overrides?: CallOverrides): Promise<BigNumber>;

  sweep(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferGovernorship(
    _proposedGovernor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDebtFloor(
    _newDebtFloorInUsd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDepositFee(
    _newDepositFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateIssueFee(
    _newIssueFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLiquidatorLiquidationFee(
    _newLiquidatorLiquidationFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMasterOracle(
    _newMasterOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMaxLiquidable(
    _newMaxLiquidable: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateProtocolLiquidationFee(
    _newProtocolLiquidationFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRepayFee(
    _newRepayFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSwapFee(
    _newSwapFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTreasury(
    _newTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWithdrawFee(
    _newWithdrawFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    acceptGovernorship(overrides?: CallOverrides): Promise<void>;

    addDepositToken(
      _depositToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRewardsDistributor(
      _distributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSyntheticToken(
      _syntheticToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToDebtTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToDepositTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    debtFloorInUsd(overrides?: CallOverrides): Promise<BigNumber>;

    debtOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtPositionOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _isHealthy: boolean;
        _depositInUsd: BigNumber;
        _debtInUsd: BigNumber;
        _issuableLimitInUsd: BigNumber;
        _issuableInUsd: BigNumber;
      }
    >;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    depositOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _depositInUsd: BigNumber;
        _issuableLimitInUsd: BigNumber;
      }
    >;

    depositTokenOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    everythingStopped(overrides?: CallOverrides): Promise<boolean>;

    getDebtTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getDepositTokens(overrides?: CallOverrides): Promise<string[]>;

    getDepositTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRewardsDistributors(overrides?: CallOverrides): Promise<string[]>;

    getSyntheticTokens(overrides?: CallOverrides): Promise<string[]>;

    governor(overrides?: CallOverrides): Promise<string>;

    initialize(
      _masterOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isDepositTokenExists(
      _depositToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSyntheticTokenExists(
      _syntheticToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issueFee(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      _syntheticToken: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amountToRepay: PromiseOrValue<BigNumberish>,
      _depositToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatorLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    masterOracle(overrides?: CallOverrides): Promise<string>;

    maxLiquidable(overrides?: CallOverrides): Promise<BigNumber>;

    open(overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proposedGovernor(overrides?: CallOverrides): Promise<string>;

    protocolLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeDepositToken(
      _depositToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromDebtTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromDepositTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSyntheticToken(
      _syntheticToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    repayFee(overrides?: CallOverrides): Promise<BigNumber>;

    shutdown(overrides?: CallOverrides): Promise<void>;

    swap(
      _syntheticTokenIn: PromiseOrValue<string>,
      _syntheticTokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferGovernorship(
      _proposedGovernor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateDebtFloor(
      _newDebtFloorInUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDepositFee(
      _newDepositFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIssueFee(
      _newIssueFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLiquidatorLiquidationFee(
      _newLiquidatorLiquidationFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMasterOracle(
      _newMasterOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxLiquidable(
      _newMaxLiquidable: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProtocolLiquidationFee(
      _newProtocolLiquidationFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRepayFee(
      _newRepayFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSwapFee(
      _newSwapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWithdrawFee(
      _newWithdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DebtFloorUpdated(uint256,uint256)"(
      oldDebtFloorInUsd?: null,
      newDebtFloorInUsd?: null
    ): DebtFloorUpdatedEventFilter;
    DebtFloorUpdated(
      oldDebtFloorInUsd?: null,
      newDebtFloorInUsd?: null
    ): DebtFloorUpdatedEventFilter;

    "DepositFeeUpdated(uint256,uint256)"(
      oldDepositFee?: null,
      newDepositFee?: null
    ): DepositFeeUpdatedEventFilter;
    DepositFeeUpdated(
      oldDepositFee?: null,
      newDepositFee?: null
    ): DepositFeeUpdatedEventFilter;

    "DepositTokenAdded(address)"(
      depositToken?: PromiseOrValue<string> | null
    ): DepositTokenAddedEventFilter;
    DepositTokenAdded(
      depositToken?: PromiseOrValue<string> | null
    ): DepositTokenAddedEventFilter;

    "DepositTokenRemoved(address)"(
      depositToken?: PromiseOrValue<string> | null
    ): DepositTokenRemovedEventFilter;
    DepositTokenRemoved(
      depositToken?: PromiseOrValue<string> | null
    ): DepositTokenRemovedEventFilter;

    "IssueFeeUpdated(uint256,uint256)"(
      oldIssueFee?: null,
      newIssueFee?: null
    ): IssueFeeUpdatedEventFilter;
    IssueFeeUpdated(
      oldIssueFee?: null,
      newIssueFee?: null
    ): IssueFeeUpdatedEventFilter;

    "LiquidatorLiquidationFeeUpdated(uint256,uint256)"(
      oldLiquidatorLiquidationFee?: null,
      newLiquidatorLiquidationFee?: null
    ): LiquidatorLiquidationFeeUpdatedEventFilter;
    LiquidatorLiquidationFeeUpdated(
      oldLiquidatorLiquidationFee?: null,
      newLiquidatorLiquidationFee?: null
    ): LiquidatorLiquidationFeeUpdatedEventFilter;

    "MasterOracleUpdated(address,address)"(
      oldOracle?: PromiseOrValue<string> | null,
      newOracle?: PromiseOrValue<string> | null
    ): MasterOracleUpdatedEventFilter;
    MasterOracleUpdated(
      oldOracle?: PromiseOrValue<string> | null,
      newOracle?: PromiseOrValue<string> | null
    ): MasterOracleUpdatedEventFilter;

    "MaxLiquidableUpdated(uint256,uint256)"(
      oldMaxLiquidable?: null,
      newMaxLiquidable?: null
    ): MaxLiquidableUpdatedEventFilter;
    MaxLiquidableUpdated(
      oldMaxLiquidable?: null,
      newMaxLiquidable?: null
    ): MaxLiquidableUpdatedEventFilter;

    "Open(address)"(account?: null): OpenEventFilter;
    Open(account?: null): OpenEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PositionLiquidated(address,address,address,uint256,uint256,uint256)"(
      liquidator?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      syntheticToken?: PromiseOrValue<string> | null,
      amountRepaid?: null,
      depositSeized?: null,
      fee?: null
    ): PositionLiquidatedEventFilter;
    PositionLiquidated(
      liquidator?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      syntheticToken?: PromiseOrValue<string> | null,
      amountRepaid?: null,
      depositSeized?: null,
      fee?: null
    ): PositionLiquidatedEventFilter;

    "ProtocolLiquidationFeeUpdated(uint256,uint256)"(
      oldProtocolLiquidationFee?: null,
      newProtocolLiquidationFee?: null
    ): ProtocolLiquidationFeeUpdatedEventFilter;
    ProtocolLiquidationFeeUpdated(
      oldProtocolLiquidationFee?: null,
      newProtocolLiquidationFee?: null
    ): ProtocolLiquidationFeeUpdatedEventFilter;

    "RefinanceFeeUpdated(uint256,uint256)"(
      oldRefinanceFee?: null,
      newRefinanceFee?: null
    ): RefinanceFeeUpdatedEventFilter;
    RefinanceFeeUpdated(
      oldRefinanceFee?: null,
      newRefinanceFee?: null
    ): RefinanceFeeUpdatedEventFilter;

    "RepayFeeUpdated(uint256,uint256)"(
      oldRepayFee?: null,
      newRepayFee?: null
    ): RepayFeeUpdatedEventFilter;
    RepayFeeUpdated(
      oldRepayFee?: null,
      newRepayFee?: null
    ): RepayFeeUpdatedEventFilter;

    "RewardsDistributorAdded(address)"(
      _distributor?: null
    ): RewardsDistributorAddedEventFilter;
    RewardsDistributorAdded(
      _distributor?: null
    ): RewardsDistributorAddedEventFilter;

    "Shutdown(address)"(account?: null): ShutdownEventFilter;
    Shutdown(account?: null): ShutdownEventFilter;

    "SwapFeeUpdated(uint256,uint256)"(
      oldSwapFee?: null,
      newSwapFee?: null
    ): SwapFeeUpdatedEventFilter;
    SwapFeeUpdated(
      oldSwapFee?: null,
      newSwapFee?: null
    ): SwapFeeUpdatedEventFilter;

    "SyntheticTokenAdded(address)"(
      syntheticToken?: PromiseOrValue<string> | null
    ): SyntheticTokenAddedEventFilter;
    SyntheticTokenAdded(
      syntheticToken?: PromiseOrValue<string> | null
    ): SyntheticTokenAddedEventFilter;

    "SyntheticTokenRemoved(address)"(
      syntheticToken?: PromiseOrValue<string> | null
    ): SyntheticTokenRemovedEventFilter;
    SyntheticTokenRemoved(
      syntheticToken?: PromiseOrValue<string> | null
    ): SyntheticTokenRemovedEventFilter;

    "SyntheticTokenSwapped(address,address,address,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      syntheticTokenIn?: PromiseOrValue<string> | null,
      syntheticTokenOut?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null,
      fee?: null
    ): SyntheticTokenSwappedEventFilter;
    SyntheticTokenSwapped(
      account?: PromiseOrValue<string> | null,
      syntheticTokenIn?: PromiseOrValue<string> | null,
      syntheticTokenOut?: PromiseOrValue<string> | null,
      amountIn?: null,
      amountOut?: null,
      fee?: null
    ): SyntheticTokenSwappedEventFilter;

    "TreasuryUpdated(address,address)"(
      oldTreasury?: PromiseOrValue<string> | null,
      newTreasury?: PromiseOrValue<string> | null
    ): TreasuryUpdatedEventFilter;
    TreasuryUpdated(
      oldTreasury?: PromiseOrValue<string> | null,
      newTreasury?: PromiseOrValue<string> | null
    ): TreasuryUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UpdatedGovernor(address,address)"(
      previousGovernor?: PromiseOrValue<string> | null,
      proposedGovernor?: PromiseOrValue<string> | null
    ): UpdatedGovernorEventFilter;
    UpdatedGovernor(
      previousGovernor?: PromiseOrValue<string> | null,
      proposedGovernor?: PromiseOrValue<string> | null
    ): UpdatedGovernorEventFilter;

    "WithdrawFeeUpdated(uint256,uint256)"(
      oldWithdrawFee?: null,
      newWithdrawFee?: null
    ): WithdrawFeeUpdatedEventFilter;
    WithdrawFeeUpdated(
      oldWithdrawFee?: null,
      newWithdrawFee?: null
    ): WithdrawFeeUpdatedEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernorship(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addDepositToken(
      _depositToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRewardsDistributor(
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSyntheticToken(
      _syntheticToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToDebtTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToDepositTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    debtFloorInUsd(overrides?: CallOverrides): Promise<BigNumber>;

    debtOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtPositionOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    depositOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositTokenOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    everythingStopped(overrides?: CallOverrides): Promise<BigNumber>;

    getDebtTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsDistributors(overrides?: CallOverrides): Promise<BigNumber>;

    getSyntheticTokens(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _masterOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isDepositTokenExists(
      _depositToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSyntheticTokenExists(
      _syntheticToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueFee(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      _syntheticToken: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amountToRepay: PromiseOrValue<BigNumberish>,
      _depositToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidatorLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    masterOracle(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidable(overrides?: CallOverrides): Promise<BigNumber>;

    open(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proposedGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    protocolLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeDepositToken(
      _depositToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFromDebtTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFromDepositTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSyntheticToken(
      _syntheticToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayFee(overrides?: CallOverrides): Promise<BigNumber>;

    shutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      _syntheticTokenIn: PromiseOrValue<string>,
      _syntheticTokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferGovernorship(
      _proposedGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDebtFloor(
      _newDebtFloorInUsd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDepositFee(
      _newDepositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateIssueFee(
      _newIssueFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLiquidatorLiquidationFee(
      _newLiquidatorLiquidationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMasterOracle(
      _newMasterOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMaxLiquidable(
      _newMaxLiquidable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateProtocolLiquidationFee(
      _newProtocolLiquidationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRepayFee(
      _newRepayFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSwapFee(
      _newSwapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWithdrawFee(
      _newWithdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernorship(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addDepositToken(
      _depositToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRewardsDistributor(
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSyntheticToken(
      _syntheticToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToDebtTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToDepositTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    debtFloorInUsd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtPositionOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositTokenOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    everythingStopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDebtTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsDistributors(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSyntheticTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _masterOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isDepositTokenExists(
      _depositToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSyntheticTokenExists(
      _syntheticToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      _syntheticToken: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amountToRepay: PromiseOrValue<BigNumberish>,
      _depositToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidatorLiquidationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLiquidable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    open(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolLiquidationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeDepositToken(
      _depositToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFromDebtTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFromDepositTokensOfAccount(
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSyntheticToken(
      _syntheticToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      _syntheticTokenIn: PromiseOrValue<string>,
      _syntheticTokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweep(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferGovernorship(
      _proposedGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDebtFloor(
      _newDebtFloorInUsd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDepositFee(
      _newDepositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateIssueFee(
      _newIssueFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLiquidatorLiquidationFee(
      _newLiquidatorLiquidationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMasterOracle(
      _newMasterOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxLiquidable(
      _newMaxLiquidable: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolLiquidationFee(
      _newProtocolLiquidationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRepayFee(
      _newRepayFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSwapFee(
      _newSwapFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWithdrawFee(
      _newWithdrawFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
