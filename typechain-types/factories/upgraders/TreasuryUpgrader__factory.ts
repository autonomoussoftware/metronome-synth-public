/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TreasuryUpgrader,
  TreasuryUpgraderInterface,
} from "../../upgraders/TreasuryUpgrader";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract TransparentUpgradeableProxy",
        name: "proxy",
        type: "address",
      },
      {
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "changeProxyAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract TransparentUpgradeableProxy",
        name: "proxy",
        type: "address",
      },
    ],
    name: "getProxyAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract TransparentUpgradeableProxy",
        name: "proxy",
        type: "address",
      },
    ],
    name: "getProxyImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multicall",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract TransparentUpgradeableProxy",
        name: "_proxy",
        type: "address",
      },
      {
        internalType: "address",
        name: "_implementation",
        type: "address",
      },
    ],
    name: "upgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract TransparentUpgradeableProxy",
        name: "_proxy",
        type: "address",
      },
      {
        internalType: "address",
        name: "_implementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "upgradeAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610d01380380610d0183398101604081905261002f91610167565b61003833610047565b61004181610097565b50610197565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146100f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03811661015b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100ed565b61016481610047565b50565b60006020828403121561017957600080fd5b81516001600160a01b038116811461019057600080fd5b9392505050565b610b5b806101a66000396000f3fe6080604052600436106100765760003560e01c80631cdcf85a1461007b578063204e1c7a146100b9578063715018a6146100d95780637eff275e146100f05780638da5cb5b146101105780639623609d1461012557806399a88ec414610138578063f2fde38b14610158578063f3b7dead14610178575b600080fd5b34801561008757600080fd5b506100a373ca11bde05977b3631167028862be2a173976ca1181565b6040516100b0919061070a565b60405180910390f35b3480156100c557600080fd5b506100a36100d4366004610733565b610198565b3480156100e557600080fd5b506100ee610229565b005b3480156100fc57600080fd5b506100ee61010b366004610757565b61026d565b34801561011c57600080fd5b506100a36102fe565b6100ee610133366004610790565b61030d565b34801561014457600080fd5b506100ee610153366004610757565b6103c5565b34801561016457600080fd5b506100ee610173366004610733565b61046f565b34801561018457600080fd5b506100a3610193366004610733565b61050f565b6000806000836001600160a01b03166040516101be90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101f9576040519150601f19603f3d011682016040523d82523d6000602084013e6101fe565b606091505b50915091508161020d57600080fd5b808060200190518101906102219190610822565b949350505050565b336102326102fe565b6001600160a01b0316146102615760405162461bcd60e51b81526004016102589061083f565b60405180910390fd5b61026b6000610535565b565b336102766102fe565b6001600160a01b03161461029c5760405162461bcd60e51b81526004016102589061083f565b6040516308f2839760e41b81526001600160a01b03831690638f283970906102c890849060040161070a565b600060405180830381600087803b1580156102e257600080fd5b505af11580156102f6573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031690565b336103166102fe565b6001600160a01b03161461033c5760405162461bcd60e51b81526004016102589061083f565b6060600061034a8683610585565b9050856001600160a01b0316634f1ef286348787876040518563ffffffff1660e01b815260040161037d93929190610874565b6000604051808303818588803b15801561039657600080fd5b505af11580156103aa573d6000803e3d6000fd5b505050505060006103bb8784610585565b5050505050505050565b336103ce6102fe565b6001600160a01b0316146103f45760405162461bcd60e51b81526004016102589061083f565b606060006104028483610585565b604051631b2ce7f360e11b81529091506001600160a01b03851690633659cfe69061043190869060040161070a565b600060405180830381600087803b15801561044b57600080fd5b505af115801561045f573d6000803e3d6000fd5b5050505060006102f68584610585565b336104786102fe565b6001600160a01b03161461049e5760405162461bcd60e51b81526004016102589061083f565b6001600160a01b0381166105035760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610258565b61050c81610535565b50565b6000806000836001600160a01b03166040516101be906303e1469160e61b815260040190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805160609060008167ffffffffffffffff8111156105a5576105a56108b4565b6040519080825280602002602001820160405280156105eb57816020015b6040805180820190915260008152606060208201528152602001906001900390816105c35790505b50905060005b82811015610672578582828151811061060c5761060c6108ca565b60209081029190910101516001600160a01b0390911690528451859082908110610638576106386108ca565b6020026020010151828281518110610652576106526108ca565b6020026020010151602001819052508061066b906108e0565b90506105f1565b50604051631296dd2160e11b815273ca11bde05977b3631167028862be2a173976ca119063252dba42906106aa908490600401610939565b600060405180830381600087803b1580156106c457600080fd5b505af11580156106d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107009190810190610a04565b9695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461050c57600080fd5b60006020828403121561074557600080fd5b81356107508161071e565b9392505050565b6000806040838503121561076a57600080fd5b82356107758161071e565b915060208301356107858161071e565b809150509250929050565b600080600080606085870312156107a657600080fd5b84356107b18161071e565b935060208501356107c18161071e565b9250604085013567ffffffffffffffff808211156107de57600080fd5b818701915087601f8301126107f257600080fd5b81358181111561080157600080fd5b88602082850101111561081357600080fd5b95989497505060200194505050565b60006020828403121561083457600080fd5b81516107508161071e565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060001982141561090257634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b8381101561092457818101518382015260200161090c565b83811115610933576000848401525b50505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156109c557888303603f19018552815180516001600160a01b03168452870151878401879052805187850181905260606109a282828801858d01610909565b96890196601f91909101601f191694909401909301925090860190600101610960565b509098975050505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156109fc576109fc6108b4565b604052919050565b6000806040808486031215610a1857600080fd5b8351925060208085015167ffffffffffffffff80821115610a3857600080fd5b8187019150601f8881840112610a4d57600080fd5b825182811115610a5f57610a5f6108b4565b8060051b610a6e8682016109d3565b918252848101860191868101908c841115610a8857600080fd5b87870192505b83831015610b1257825186811115610aa65760008081fd5b8701603f81018e13610ab85760008081fd5b8881015187811115610acc57610acc6108b4565b610add818801601f19168b016109d3565b8181528f8c838501011115610af25760008081fd5b610b01828c83018e8601610909565b845250509187019190870190610a8e565b809950505050505050505050925092905056fea26469706673582212209cbac974ccd3bc119ec892fbcf306da7bb0dcfbbc2d13291e91aa9385299381664736f6c63430008090033";

type TreasuryUpgraderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TreasuryUpgraderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TreasuryUpgrader__factory extends ContractFactory {
  constructor(...args: TreasuryUpgraderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TreasuryUpgrader> {
    return super.deploy(_owner, overrides || {}) as Promise<TreasuryUpgrader>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  override attach(address: string): TreasuryUpgrader {
    return super.attach(address) as TreasuryUpgrader;
  }
  override connect(signer: Signer): TreasuryUpgrader__factory {
    return super.connect(signer) as TreasuryUpgrader__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TreasuryUpgraderInterface {
    return new utils.Interface(_abi) as TreasuryUpgraderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TreasuryUpgrader {
    return new Contract(address, _abi, signerOrProvider) as TreasuryUpgrader;
  }
}
