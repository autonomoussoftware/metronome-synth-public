/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  RewardsDistributorUpgrader,
  RewardsDistributorUpgraderInterface,
} from "../../upgraders/RewardsDistributorUpgrader";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract TransparentUpgradeableProxy",
        name: "proxy",
        type: "address",
      },
      {
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "changeProxyAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract TransparentUpgradeableProxy",
        name: "proxy",
        type: "address",
      },
    ],
    name: "getProxyAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract TransparentUpgradeableProxy",
        name: "proxy",
        type: "address",
      },
    ],
    name: "getProxyImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multicall",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract TransparentUpgradeableProxy",
        name: "_proxy",
        type: "address",
      },
      {
        internalType: "address",
        name: "_implementation",
        type: "address",
      },
    ],
    name: "upgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract TransparentUpgradeableProxy",
        name: "_proxy",
        type: "address",
      },
      {
        internalType: "address",
        name: "_implementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "upgradeAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e9d380380610e9d83398101604081905261002f91610167565b61003833610047565b61004181610097565b50610197565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146100f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03811661015b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100ed565b61016481610047565b50565b60006020828403121561017957600080fd5b81516001600160a01b038116811461019057600080fd5b9392505050565b610cf7806101a66000396000f3fe6080604052600436106100765760003560e01c80631cdcf85a1461007b578063204e1c7a146100b9578063715018a6146100d95780637eff275e146100f05780638da5cb5b146101105780639623609d1461012557806399a88ec414610138578063f2fde38b14610158578063f3b7dead14610178575b600080fd5b34801561008757600080fd5b506100a373ca11bde05977b3631167028862be2a173976ca1181565b6040516100b091906108a6565b60405180910390f35b3480156100c557600080fd5b506100a36100d43660046108cf565b610198565b3480156100e557600080fd5b506100ee610229565b005b3480156100fc57600080fd5b506100ee61010b3660046108f3565b61026d565b34801561011c57600080fd5b506100a36102fe565b6100ee61013336600461092c565b61030d565b34801561014457600080fd5b506100ee6101533660046108f3565b6103da565b34801561016457600080fd5b506100ee6101733660046108cf565b6104a1565b34801561018457600080fd5b506100a36101933660046108cf565b610541565b6000806000836001600160a01b03166040516101be90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101f9576040519150601f19603f3d011682016040523d82523d6000602084013e6101fe565b606091505b50915091508161020d57600080fd5b8080602001905181019061022191906109be565b949350505050565b336102326102fe565b6001600160a01b0316146102615760405162461bcd60e51b8152600401610258906109db565b60405180910390fd5b61026b6000610567565b565b336102766102fe565b6001600160a01b03161461029c5760405162461bcd60e51b8152600401610258906109db565b6040516308f2839760e41b81526001600160a01b03831690638f283970906102c89084906004016108a6565b600060405180830381600087803b1580156102e257600080fd5b505af11580156102f6573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031690565b336103166102fe565b6001600160a01b03161461033c5760405162461bcd60e51b8152600401610258906109db565b60006103466105b7565b905060006103548683610631565b9050856001600160a01b0316634f1ef286348787876040518563ffffffff1660e01b815260040161038793929190610a10565b6000604051808303818588803b1580156103a057600080fd5b505af11580156103b4573d6000803e3d6000fd5b505050505060006103c58784610631565b90506103d182826107b6565b50505050505050565b336103e36102fe565b6001600160a01b0316146104095760405162461bcd60e51b8152600401610258906109db565b60006104136105b7565b905060006104218483610631565b604051631b2ce7f360e11b81529091506001600160a01b03851690633659cfe6906104509086906004016108a6565b600060405180830381600087803b15801561046a57600080fd5b505af115801561047e573d6000803e3d6000fd5b50505050600061048e8584610631565b905061049a82826107b6565b5050505050565b336104aa6102fe565b6001600160a01b0316146104d05760405162461bcd60e51b8152600401610258906109db565b6001600160a01b0381166105355760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610258565b61053e81610567565b50565b6000806000836001600160a01b03166040516101be906303e1469160e61b815260040190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001808252818301909252606091816020015b60608152602001906001900390816105ce579050506040805160048152602481019091526020810180516001600160e01b031663f7c618c160e01b179052815191925090829060009061062357610623610a66565b602002602001018190525090565b805160609060008167ffffffffffffffff81111561065157610651610a50565b60405190808252806020026020018201604052801561069757816020015b60408051808201909152600081526060602082015281526020019060019003908161066f5790505b50905060005b8281101561071e57858282815181106106b8576106b8610a66565b60209081029190910101516001600160a01b03909116905284518590829081106106e4576106e4610a66565b60200260200101518282815181106106fe576106fe610a66565b6020026020010151602001819052508061071790610a7c565b905061069d565b50604051631296dd2160e11b815273ca11bde05977b3631167028862be2a173976ca119063252dba4290610756908490600401610ad5565b600060405180830381600087803b15801561077057600080fd5b505af1158015610784573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107ac9190810190610ba0565b9695505050505050565b6107c382826000806107c7565b5050565b815b81811161049a5760008582815181106107e4576107e4610a66565b60200260200101518060200190518101906107ff91906109be565b9050600085838151811061081557610815610a66565b602002602001015180602001905181019061083091906109be565b9050806001600160a01b0316826001600160a01b0316146108935760405162461bcd60e51b815260206004820152601e60248201527f616e2d616464726573732d73696d706c652d6669656c642d6661696c656400006044820152606401610258565b50508061089f90610a7c565b90506107c9565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461053e57600080fd5b6000602082840312156108e157600080fd5b81356108ec816108ba565b9392505050565b6000806040838503121561090657600080fd5b8235610911816108ba565b91506020830135610921816108ba565b809150509250929050565b6000806000806060858703121561094257600080fd5b843561094d816108ba565b9350602085013561095d816108ba565b9250604085013567ffffffffffffffff8082111561097a57600080fd5b818701915087601f83011261098e57600080fd5b81358181111561099d57600080fd5b8860208285010111156109af57600080fd5b95989497505060200194505050565b6000602082840312156109d057600080fd5b81516108ec816108ba565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415610a9e57634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b83811015610ac0578181015183820152602001610aa8565b83811115610acf576000848401525b50505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610b6157888303603f19018552815180516001600160a01b0316845287015187840187905280518785018190526060610b3e82828801858d01610aa5565b96890196601f91909101601f191694909401909301925090860190600101610afc565b509098975050505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b9857610b98610a50565b604052919050565b6000806040808486031215610bb457600080fd5b8351925060208085015167ffffffffffffffff80821115610bd457600080fd5b8187019150601f8881840112610be957600080fd5b825182811115610bfb57610bfb610a50565b8060051b610c0a868201610b6f565b918252848101860191868101908c841115610c2457600080fd5b87870192505b83831015610cae57825186811115610c425760008081fd5b8701603f81018e13610c545760008081fd5b8881015187811115610c6857610c68610a50565b610c79818801601f19168b01610b6f565b8181528f8c838501011115610c8e5760008081fd5b610c9d828c83018e8601610aa5565b845250509187019190870190610c2a565b809950505050505050505050925092905056fea2646970667358221220a0f71a3ad5d51845949031cddfe9a1f2ece13956b01cff27fe62b192eb4e2e5964736f6c63430008090033";

type RewardsDistributorUpgraderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RewardsDistributorUpgraderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RewardsDistributorUpgrader__factory extends ContractFactory {
  constructor(...args: RewardsDistributorUpgraderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RewardsDistributorUpgrader> {
    return super.deploy(
      _owner,
      overrides || {}
    ) as Promise<RewardsDistributorUpgrader>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  override attach(address: string): RewardsDistributorUpgrader {
    return super.attach(address) as RewardsDistributorUpgrader;
  }
  override connect(signer: Signer): RewardsDistributorUpgrader__factory {
    return super.connect(signer) as RewardsDistributorUpgrader__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RewardsDistributorUpgraderInterface {
    return new utils.Interface(_abi) as RewardsDistributorUpgraderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RewardsDistributorUpgrader {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RewardsDistributorUpgrader;
  }
}
