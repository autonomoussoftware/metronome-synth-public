{
  "address": "0x0CF1923Ff6dE0EBa9c30ef9a1e57476b5511E288",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newActive",
          "type": "bool"
        }
      ],
      "name": "SyntheticTokenActiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue_",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue_",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        },
        {
          "internalType": "contract IPoolRegistry",
          "name": "poolRegistry_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRegistry",
      "outputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7805ed768bf722cb70ca4af29b1d518d36ed463ca0ea20755402d751c22b73aa",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x0CF1923Ff6dE0EBa9c30ef9a1e57476b5511E288",
    "transactionIndex": 15,
    "gasUsed": "1284075",
    "logsBloom": "0x
    "blockHash": "0xfe8052b8adf1675f7ee8c27cfb054b49d2d9384cf8e4e3ee8256a22e8d789c1a",
    "transactionHash": "0x7805ed768bf722cb70ca4af29b1d518d36ed463ca0ea20755402d751c22b73aa",
    "logs": [],
    "blockNumber": 23102966,
    "cumulativeGasUsed": "2456405",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d4de23420259fd811f95bb7990a3cd60",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newActive\",\"type\":\"bool\"}],\"name\":\"SyntheticTokenActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"contract IPoolRegistry\",\"name\":\"poolRegistry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"updateMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(address,uint256)\":{\"params\":{\"amount_\":\"The amount to burn\",\"from_\":\"The account to burn from\"}},\"mint(address,uint256)\":{\"params\":{\"amount_\":\"The amount to mint\",\"to_\":\"The account to mint to\"}},\"seize(address,address,uint256)\":{\"details\":\"Same as _transfer\",\"params\":{\"amount_\":\"The amount to seize\",\"to_\":\"The beneficiary account\"}},\"updateMaxTotalSupply(uint256)\":{\"params\":{\"newMaxTotalSupply_\":\"The new max total supply\"}}},\"title\":\"Synthetic Token contract\",\"version\":1},\"userdoc\":{\"events\":{\"MaxTotalSupplyUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max total supply is updated\"},\"SyntheticTokenActiveUpdated(bool)\":{\"notice\":\"Emitted when active flag is updated\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Set `amount` as the allowance of `spender` over the caller's tokens\"},\"burn(address,uint256)\":{\"notice\":\"Burn synthetic token\"},\"decimals()\":{\"notice\":\"The decimals of the token\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Atomically decrease the allowance granted to `spender` by the caller\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Atomically increase the allowance granted to `spender` by the caller\"},\"isActive()\":{\"notice\":\"If true, disables msAsset minting globally\"},\"maxTotalSupply()\":{\"notice\":\"The supply cap\"},\"mint(address,uint256)\":{\"notice\":\"Mint synthetic token\"},\"name()\":{\"notice\":\"The name of the token\"},\"seize(address,address,uint256)\":{\"notice\":\"Seize synthetic tokens\"},\"symbol()\":{\"notice\":\"The symbol of the token\"},\"toggleIsActive()\":{\"notice\":\"Enable/Disable Synthetic Token\"},\"transfer(address,uint256)\":{\"notice\":\"Move `amount` tokens from the caller's account to `recipient`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Move `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance\"},\"updateMaxTotalSupply(uint256)\":{\"notice\":\"Update max total supply\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SyntheticToken.sol\":\"SyntheticToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IManageable.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./storage/SyntheticTokenStorage.sol\\\";\\n\\n/**\\n * @title Synthetic Token contract\\n */\\ncontract SyntheticToken is Initializable, SyntheticTokenStorageV1 {\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    /// @notice Emitted when active flag is updated\\n    event SyntheticTokenActiveUpdated(bool newActive);\\n\\n    /// @notice Emitted when max total supply is updated\\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupply, uint256 newMaxTotalSupply);\\n\\n    /**\\n     * @notice Throws if caller isn't the governor\\n     */\\n    modifier onlyGovernor() {\\n        require(msg.sender == poolRegistry.governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if sender can't burn\\n     */\\n    modifier onlyIfCanBurn() {\\n        require(_isMsgSenderPool() || _isMsgSenderDebtToken(), \\\"sender-cant-burn\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if sender can't mint\\n     */\\n    modifier onlyIfCanMint() {\\n        require(_isMsgSenderPool() || _isMsgSenderDebtToken(), \\\"sender-cant-mint\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if sender can't seize\\n     */\\n    modifier onlyIfCanSeize() {\\n        require(_isMsgSenderPool() || _isMsgSenderDebtToken(), \\\"sender-cant-seize\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token isn't enabled\\n     */\\n    modifier onlyIfSyntheticTokenIsActive() {\\n        require(isActive, \\\"synthetic-inactive\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        string calldata name_,\\n        string calldata symbol_,\\n        uint8 decimals_,\\n        IPoolRegistry poolRegistry_\\n    ) external initializer {\\n        require(address(poolRegistry_) != address(0), \\\"pool-registry-is-null\\\");\\n\\n        poolRegistry = poolRegistry_;\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n        isActive = true;\\n        maxTotalSupply = type(uint256).max;\\n    }\\n\\n    /**\\n     * @notice Set `amount` as the allowance of `spender` over the caller's tokens\\n     */\\n    function approve(address spender_, uint256 amount_) external override returns (bool) {\\n        _approve(msg.sender, spender_, amount_);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Burn synthetic token\\n     * @param from_ The account to burn from\\n     * @param amount_ The amount to burn\\n     */\\n    function burn(address from_, uint256 amount_) external override onlyIfCanBurn {\\n        _burn(from_, amount_);\\n    }\\n\\n    /**\\n     * @notice Atomically decrease the allowance granted to `spender` by the caller\\n     */\\n    function decreaseAllowance(address spender_, uint256 subtractedValue_) external returns (bool) {\\n        uint256 _currentAllowance = allowance[msg.sender][spender_];\\n        require(_currentAllowance >= subtractedValue_, \\\"decreased-allowance-below-zero\\\");\\n        unchecked {\\n            _approve(msg.sender, spender_, _currentAllowance - subtractedValue_);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Atomically increase the allowance granted to `spender` by the caller\\n     */\\n    function increaseAllowance(address spender_, uint256 addedValue_) external returns (bool) {\\n        _approve(msg.sender, spender_, allowance[msg.sender][spender_] + addedValue_);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mint synthetic token\\n     * @param to_ The account to mint to\\n     * @param amount_ The amount to mint\\n     */\\n    function mint(address to_, uint256 amount_) external override onlyIfCanMint {\\n        _mint(to_, amount_);\\n    }\\n\\n    /**\\n     * @notice Seize synthetic tokens\\n     * @dev Same as _transfer\\n     * @param to_ The account to seize from\\n     * @param to_ The beneficiary account\\n     * @param amount_ The amount to seize\\n     */\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external override onlyIfCanSeize {\\n        _transfer(from_, to_, amount_);\\n    }\\n\\n    /**\\n     * @notice Move `amount` tokens from the caller's account to `recipient`\\n     */\\n    function transfer(address recipient_, uint256 amount_) external override returns (bool) {\\n        _transfer(msg.sender, recipient_, amount_);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Move `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance\\n     */\\n    function transferFrom(\\n        address sender_,\\n        address recipient_,\\n        uint256 amount_\\n    ) external override returns (bool) {\\n        _transfer(sender_, recipient_, amount_);\\n\\n        uint256 _currentAllowance = allowance[sender_][msg.sender];\\n        if (_currentAllowance != type(uint256).max) {\\n            require(_currentAllowance >= amount_, \\\"amount-exceeds-allowance\\\");\\n            unchecked {\\n                _approve(sender_, msg.sender, _currentAllowance - amount_);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Set `amount` as the allowance of `spender` over the `owner` s tokens\\n     */\\n    function _approve(\\n        address owner_,\\n        address spender_,\\n        uint256 amount_\\n    ) private {\\n        require(owner_ != address(0), \\\"approve-from-the-zero-address\\\");\\n        require(spender_ != address(0), \\\"approve-to-the-zero-address\\\");\\n\\n        allowance[owner_][spender_] = amount_;\\n        emit Approval(owner_, spender_, amount_);\\n    }\\n\\n    /**\\n     * @notice Destroy `amount` tokens from `account`, reducing the\\n     * total supply\\n     */\\n    function _burn(address account_, uint256 amount_) private {\\n        require(account_ != address(0), \\\"burn-from-the-zero-address\\\");\\n\\n        uint256 _currentBalance = balanceOf[account_];\\n        require(_currentBalance >= amount_, \\\"burn-amount-exceeds-balance\\\");\\n        unchecked {\\n            balanceOf[account_] = _currentBalance - amount_;\\n            totalSupply -= amount_;\\n        }\\n\\n        emit Transfer(account_, address(0), amount_);\\n    }\\n\\n    /**\\n     * @notice Check if the sender is a valid DebtToken contract\\n     */\\n    function _isMsgSenderDebtToken() private view returns (bool) {\\n        IPool _pool = IManageable(msg.sender).pool();\\n\\n        return\\n            poolRegistry.poolExists(address(_pool)) &&\\n            _pool.isDebtTokenExists(IDebtToken(msg.sender)) &&\\n            IDebtToken(msg.sender).syntheticToken() == this;\\n    }\\n\\n    /**\\n     * @notice Check if the sender is a valid Pool contract\\n     */\\n    function _isMsgSenderPool() private view returns (bool) {\\n        return poolRegistry.poolExists(msg.sender) && IPool(msg.sender).isSyntheticTokenExists(this);\\n    }\\n\\n    /**\\n     * @notice Create `amount` tokens and assigns them to `account`, increasing\\n     * the total supply\\n     */\\n    function _mint(address account_, uint256 amount_) private onlyIfSyntheticTokenIsActive {\\n        require(account_ != address(0), \\\"mint-to-the-zero-address\\\");\\n\\n        totalSupply += amount_;\\n        require(totalSupply <= maxTotalSupply, \\\"surpass-max-synth-supply\\\");\\n        balanceOf[account_] += amount_;\\n        emit Transfer(address(0), account_, amount_);\\n    }\\n\\n    /**\\n     * @notice Move `amount` of tokens from `sender` to `recipient`\\n     */\\n    function _transfer(\\n        address sender_,\\n        address recipient_,\\n        uint256 amount_\\n    ) private {\\n        require(sender_ != address(0), \\\"transfer-from-the-zero-address\\\");\\n        require(recipient_ != address(0), \\\"transfer-to-the-zero-address\\\");\\n\\n        uint256 senderBalance = balanceOf[sender_];\\n        require(senderBalance >= amount_, \\\"transfer-amount-exceeds-balance\\\");\\n        unchecked {\\n            balanceOf[sender_] = senderBalance - amount_;\\n            balanceOf[recipient_] += amount_;\\n        }\\n\\n        emit Transfer(sender_, recipient_, amount_);\\n    }\\n\\n    /**\\n     * @notice Enable/Disable Synthetic Token\\n     */\\n    function toggleIsActive() external override onlyGovernor {\\n        bool _newIsActive = !isActive;\\n        emit SyntheticTokenActiveUpdated(_newIsActive);\\n        isActive = _newIsActive;\\n    }\\n\\n    /**\\n     * @notice Update max total supply\\n     * @param newMaxTotalSupply_ The new max total supply\\n     */\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external override onlyGovernor {\\n        uint256 _currentMaxTotalSupply = maxTotalSupply;\\n        require(newMaxTotalSupply_ != _currentMaxTotalSupply, \\\"new-same-as-current\\\");\\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupply, newMaxTotalSupply_);\\n        maxTotalSupply = newMaxTotalSupply_;\\n    }\\n}\\n\",\"keccak256\":\"0xc11a45e9690cb76a602d1f17bf1f0d19c55f3f7d0de046b79ad546ec41fb08d1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued);\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xe6ee7036f93f31562824dd605f559fa80a315edbdff79d645f2565c6e61a7d7e\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralizationRatio() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn);\\n\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    function updateCollateralizationRatio(uint128 newCollateralizationRatio_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0x813f1b5835a64cddd7bb4bb65c44993c4c4d4d89a7ca12196d23418fd276b9b9\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\",\"keccak256\":\"0xac88e0997a26942cb9cbda1a7dd9756e28ba2025813e5b07e55939fbf8538ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFee() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function isSyntheticTokenExists(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function isDebtTokenExists(IDebtToken debtToken_) external view returns (bool);\\n\\n    function isDepositTokenExists(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(address account_)\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function addDebtToken(IDebtToken debtToken_) external;\\n\\n    function removeDebtToken(IDebtToken debtToken_) external;\\n\\n    function addDepositToken(address depositToken_) external;\\n\\n    function removeDepositToken(IDepositToken depositToken_) external;\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut);\\n\\n    function updateSwapFee(uint256 newSwapFee_) external;\\n\\n    function updateDebtFloor(uint256 newDebtFloorInUsd_) external;\\n\\n    function updateDepositFee(uint256 newDepositFee_) external;\\n\\n    function updateIssueFee(uint256 newIssueFee_) external;\\n\\n    function updateWithdrawFee(uint256 newWithdrawFee_) external;\\n\\n    function updateRepayFee(uint256 newRepayFee_) external;\\n\\n    function updateLiquidatorLiquidationFee(uint128 newLiquidatorLiquidationFee_) external;\\n\\n    function updateProtocolLiquidationFee(uint128 newProtocolLiquidationFee_) external;\\n\\n    function updateMaxLiquidable(uint256 newMaxLiquidable_) external;\\n\\n    function updateTreasury(ITreasury newTreasury_) external;\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function addRewardsDistributor(IRewardsDistributor distributor_) external;\\n\\n    function removeRewardsDistributor(IRewardsDistributor distributor_) external;\\n\\n    function toggleIsSwapActive() external;\\n\\n    function isSwapActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x73f52b38871779fe3f672da0d4d9a0dd6c07d34cfb7c1b7b2c442f0043afbc00\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function poolExists(address pool_) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateMasterOracle(IMasterOracle newOracle_) external;\\n}\\n\",\"keccak256\":\"0x958edd140ecfbe458bfd7f1505f4c1c3f3359adfe1ab6a8f200455f67d159330\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(\\n        IERC20 token_,\\n        address from_,\\n        address to_\\n    ) external;\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n}\\n\",\"keccak256\":\"0xc47213c524b56177843ef6c1b5ba0e4f5dc211eadf77a0b66ed666c0b39aa9c2\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function toggleIsActive() external;\\n\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0x27e7644e788023b54410e27735bf7ffab768df1469d5aff0e0a65e1108830978\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(\\n        address _assetIn,\\n        address _assetOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x711e4ad224403589238cd425781689ac98afc42314a2e6a5a2ac4c6ed5bfa273\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/SyntheticTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/ISyntheticToken.sol\\\";\\nimport \\\"../interfaces/IPoolRegistry.sol\\\";\\n\\nabstract contract SyntheticTokenStorageV1 is ISyntheticToken {\\n    /**\\n     * @notice The name of the token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice The symbol of the token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @dev The amount of tokens owned by `account`\\n     */\\n    mapping(address => uint256) public balanceOf;\\n\\n    /**\\n     * @dev The remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}\\n     */\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /**\\n     * @dev Amount of tokens in existence\\n     */\\n    uint256 public totalSupply;\\n\\n    /**\\n     * @notice The supply cap\\n     */\\n    uint256 public maxTotalSupply;\\n\\n    /**\\n     * @dev The Pool Registry\\n     */\\n    IPoolRegistry public poolRegistry;\\n\\n    /**\\n     * @notice If true, disables msAsset minting globally\\n     */\\n    bool public isActive;\\n\\n    /**\\n     * @notice The decimals of the token\\n     */\\n    uint8 public decimals;\\n}\\n\",\"keccak256\":\"0x4a17c4fc5ad06deadc6f3411e4f4f100769c1882bba36c84918bce7a3122fd93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611645806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806370a08231116100b8578063afcff50f1161007c578063afcff50f14610286578063b2a02ff1146102b1578063d2593329146102c4578063dd62ed3e146102cc578063de7ea79d146102f7578063ffa1ad741461030a57600080fd5b806370a082311461022557806395d89b41146102455780639dc29fac1461024d578063a457c2d714610260578063a9059cbb1461027357600080fd5b806323b872dd116100ff57806323b872dd146101bd5780632ab4d052146101d0578063313ce567146101d957806339509351146101ff57806340c10f191461021257600080fd5b806306fdde031461013c578063095ea7b31461015a578063172f50a41461017d57806318160ddd1461019257806322f3e2d4146101a9575b600080fd5b61014461032e565b604051610151919061133b565b60405180910390f35b61016d6101683660046113a8565b6103bc565b6040519015158152602001610151565b61019061018b3660046113d4565b6103d2565b005b61019b60055481565b604051908152602001610151565b60075461016d90600160a01b900460ff1681565b61016d6101cb3660046113ed565b610534565b61019b60065481565b6007546101ed90600160a81b900460ff1681565b60405160ff9091168152602001610151565b61016d61020d3660046113a8565b6105d6565b6101906102203660046113a8565b610612565b61019b61023336600461142e565b60036020526000908152604090205481565b610144610675565b61019061025b3660046113a8565b610682565b61016d61026e3660046113a8565b6106e1565b61016d6102813660046113a8565b61076c565b600754610299906001600160a01b031681565b6040516001600160a01b039091168152602001610151565b6101906102bf3660046113ed565b610779565b6101906107df565b61019b6102da366004611452565b600460209081526000928352604080842090915290825290205481565b6101906103053660046114d4565b610915565b610144604051806040016040528060058152602001640312e302e360dc1b81525081565b6001805461033b9061156f565b80601f01602080910402602001604051908101604052809291908181526020018280546103679061156f565b80156103b45780601f10610389576101008083540402835291602001916103b4565b820191906000526020600020905b81548152906001019060200180831161039757829003601f168201915b505050505081565b60006103c9338484610a7f565b50600192915050565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561042057600080fd5b505afa158015610434573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045891906115aa565b6001600160a01b0316336001600160a01b0316146104ac5760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b3b7bb32b93737b960a11b60448201526064015b60405180910390fd5b600654818114156104f55760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b60448201526064016104a3565b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150600655565b6000610541848484610b8d565b6001600160a01b038416600090815260046020908152604080832033845290915290205460001981146105cb57828110156105be5760405162461bcd60e51b815260206004820152601860248201527f616d6f756e742d657863656564732d616c6c6f77616e6365000000000000000060448201526064016104a3565b6105cb8533858403610a7f565b506001949350505050565b3360008181526004602090815260408083206001600160a01b038716845290915281205490916103c991859061060d9086906115c7565b610a7f565b61061a610d10565b806106285750610628610e06565b6106675760405162461bcd60e51b815260206004820152601060248201526f1cd95b99195c8b58d85b9d0b5b5a5b9d60821b60448201526064016104a3565b610671828261100a565b5050565b6002805461033b9061156f565b61068a610d10565b806106985750610698610e06565b6106d75760405162461bcd60e51b815260206004820152601060248201526f39b2b73232b916b1b0b73a16b13ab93760811b60448201526064016104a3565b610671828261118b565b3360009081526004602090815260408083206001600160a01b0386168452909152812054828110156107555760405162461bcd60e51b815260206004820152601e60248201527f6465637265617365642d616c6c6f77616e63652d62656c6f772d7a65726f000060448201526064016104a3565b6107623385858403610a7f565b5060019392505050565b60006103c9338484610b8d565b610781610d10565b8061078f575061078f610e06565b6107cf5760405162461bcd60e51b815260206004820152601160248201527073656e6465722d63616e742d7365697a6560781b60448201526064016104a3565b6107da838383610b8d565b505050565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561082d57600080fd5b505afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086591906115aa565b6001600160a01b0316336001600160a01b0316146108b45760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b3b7bb32b93737b960a11b60448201526064016104a3565b600754604051600160a01b90910460ff1615808252907f79e35d0afb37464963b458a448d257d695a4dc4406dc45df01e4c7b38e2732cb9060200160405180910390a160078054911515600160a01b0260ff60a01b19909216919091179055565b600054610100900460ff168061092e575060005460ff16155b6109915760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a3565b600054610100900460ff161580156109b3576000805461ffff19166101011790555b6001600160a01b038216610a015760405162461bcd60e51b81526020600482015260156024820152741c1bdbdb0b5c9959da5cdd1c9e4b5a5ccb5b9d5b1b605a1b60448201526064016104a3565b600780546001600160a01b0319166001600160a01b038416179055610a28600188886112a2565b50610a35600286866112a2565b506007805460ff60a01b1960ff8616600160a81b021661ffff60a01b1990911617600160a01b1790556000196006558015610a76576000805461ff00191690555b50505050505050565b6001600160a01b038316610ad55760405162461bcd60e51b815260206004820152601d60248201527f617070726f76652d66726f6d2d7468652d7a65726f2d6164647265737300000060448201526064016104a3565b6001600160a01b038216610b2b5760405162461bcd60e51b815260206004820152601b60248201527f617070726f76652d746f2d7468652d7a65726f2d61646472657373000000000060448201526064016104a3565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610be35760405162461bcd60e51b815260206004820152601e60248201527f7472616e736665722d66726f6d2d7468652d7a65726f2d61646472657373000060448201526064016104a3565b6001600160a01b038216610c395760405162461bcd60e51b815260206004820152601c60248201527f7472616e736665722d746f2d7468652d7a65726f2d616464726573730000000060448201526064016104a3565b6001600160a01b03831660009081526003602052604090205481811015610ca25760405162461bcd60e51b815260206004820152601f60248201527f7472616e736665722d616d6f756e742d657863656564732d62616c616e63650060448201526064016104a3565b6001600160a01b0380851660008181526003602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d029086815260200190565b60405180910390a350505050565b600754604051631e1c6a0760e01b81523360048201526000916001600160a01b031690631e1c6a079060240160206040518083038186803b158015610d5457600080fd5b505afa158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c91906115ed565b8015610e0157506040516309bf6ca360e31b81523060048201523390634dfb65189060240160206040518083038186803b158015610dc957600080fd5b505afa158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0191906115ed565b905090565b600080336001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4257600080fd5b505afa158015610e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7a91906115aa565b600754604051631e1c6a0760e01b81526001600160a01b038084166004830152929350911690631e1c6a079060240160206040518083038186803b158015610ec157600080fd5b505afa158015610ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef991906115ed565b8015610f77575060405163020484bb60e11b81523360048201526001600160a01b0382169063040909769060240160206040518083038186803b158015610f3f57600080fd5b505afa158015610f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7791906115ed565b80156110045750306001600160a01b0316336001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc157600080fd5b505afa158015610fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff991906115aa565b6001600160a01b0316145b91505090565b600754600160a01b900460ff166110585760405162461bcd60e51b815260206004820152601260248201527173796e7468657469632d696e61637469766560701b60448201526064016104a3565b6001600160a01b0382166110ae5760405162461bcd60e51b815260206004820152601860248201527f6d696e742d746f2d7468652d7a65726f2d61646472657373000000000000000060448201526064016104a3565b80600560008282546110c091906115c7565b909155505060065460055411156111195760405162461bcd60e51b815260206004820152601860248201527f737572706173732d6d61782d73796e74682d737570706c79000000000000000060448201526064016104a3565b6001600160a01b038216600090815260036020526040812080548392906111419084906115c7565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166111e15760405162461bcd60e51b815260206004820152601a60248201527f6275726e2d66726f6d2d7468652d7a65726f2d6164647265737300000000000060448201526064016104a3565b6001600160a01b0382166000908152600360205260409020548181101561124a5760405162461bcd60e51b815260206004820152601b60248201527f6275726e2d616d6f756e742d657863656564732d62616c616e6365000000000060448201526064016104a3565b6001600160a01b03831660008181526003602090815260408083208686039055600580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610b80565b8280546112ae9061156f565b90600052602060002090601f0160209004810192826112d05760008555611316565b82601f106112e95782800160ff19823516178555611316565b82800160010185558215611316579182015b828111156113165782358255916020019190600101906112fb565b50611322929150611326565b5090565b5b808211156113225760008155600101611327565b600060208083528351808285015260005b818110156113685785810183015185820160400152820161134c565b8181111561137a576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146113a557600080fd5b50565b600080604083850312156113bb57600080fd5b82356113c681611390565b946020939093013593505050565b6000602082840312156113e657600080fd5b5035919050565b60008060006060848603121561140257600080fd5b833561140d81611390565b9250602084013561141d81611390565b929592945050506040919091013590565b60006020828403121561144057600080fd5b813561144b81611390565b9392505050565b6000806040838503121561146557600080fd5b823561147081611390565b9150602083013561148081611390565b809150509250929050565b60008083601f84011261149d57600080fd5b50813567ffffffffffffffff8111156114b557600080fd5b6020830191508360208285010111156114cd57600080fd5b9250929050565b600080600080600080608087890312156114ed57600080fd5b863567ffffffffffffffff8082111561150557600080fd5b6115118a838b0161148b565b9098509650602089013591508082111561152a57600080fd5b5061153789828a0161148b565b909550935050604087013560ff8116811461155157600080fd5b9150606087013561156181611390565b809150509295509295509295565b600181811c9082168061158357607f821691505b602082108114156115a457634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156115bc57600080fd5b815161144b81611390565b600082198211156115e857634e487b7160e01b600052601160045260246000fd5b500190565b6000602082840312156115ff57600080fd5b8151801515811461144b57600080fdfea264697066735822122044c78fa5ea00e595632957287f87709d666a92059b77531ba7a0ce43cd5543c764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806370a08231116100b8578063afcff50f1161007c578063afcff50f14610286578063b2a02ff1146102b1578063d2593329146102c4578063dd62ed3e146102cc578063de7ea79d146102f7578063ffa1ad741461030a57600080fd5b806370a082311461022557806395d89b41146102455780639dc29fac1461024d578063a457c2d714610260578063a9059cbb1461027357600080fd5b806323b872dd116100ff57806323b872dd146101bd5780632ab4d052146101d0578063313ce567146101d957806339509351146101ff57806340c10f191461021257600080fd5b806306fdde031461013c578063095ea7b31461015a578063172f50a41461017d57806318160ddd1461019257806322f3e2d4146101a9575b600080fd5b61014461032e565b604051610151919061133b565b60405180910390f35b61016d6101683660046113a8565b6103bc565b6040519015158152602001610151565b61019061018b3660046113d4565b6103d2565b005b61019b60055481565b604051908152602001610151565b60075461016d90600160a01b900460ff1681565b61016d6101cb3660046113ed565b610534565b61019b60065481565b6007546101ed90600160a81b900460ff1681565b60405160ff9091168152602001610151565b61016d61020d3660046113a8565b6105d6565b6101906102203660046113a8565b610612565b61019b61023336600461142e565b60036020526000908152604090205481565b610144610675565b61019061025b3660046113a8565b610682565b61016d61026e3660046113a8565b6106e1565b61016d6102813660046113a8565b61076c565b600754610299906001600160a01b031681565b6040516001600160a01b039091168152602001610151565b6101906102bf3660046113ed565b610779565b6101906107df565b61019b6102da366004611452565b600460209081526000928352604080842090915290825290205481565b6101906103053660046114d4565b610915565b610144604051806040016040528060058152602001640312e302e360dc1b81525081565b6001805461033b9061156f565b80601f01602080910402602001604051908101604052809291908181526020018280546103679061156f565b80156103b45780601f10610389576101008083540402835291602001916103b4565b820191906000526020600020905b81548152906001019060200180831161039757829003601f168201915b505050505081565b60006103c9338484610a7f565b50600192915050565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561042057600080fd5b505afa158015610434573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045891906115aa565b6001600160a01b0316336001600160a01b0316146104ac5760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b3b7bb32b93737b960a11b60448201526064015b60405180910390fd5b600654818114156104f55760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b60448201526064016104a3565b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150600655565b6000610541848484610b8d565b6001600160a01b038416600090815260046020908152604080832033845290915290205460001981146105cb57828110156105be5760405162461bcd60e51b815260206004820152601860248201527f616d6f756e742d657863656564732d616c6c6f77616e6365000000000000000060448201526064016104a3565b6105cb8533858403610a7f565b506001949350505050565b3360008181526004602090815260408083206001600160a01b038716845290915281205490916103c991859061060d9086906115c7565b610a7f565b61061a610d10565b806106285750610628610e06565b6106675760405162461bcd60e51b815260206004820152601060248201526f1cd95b99195c8b58d85b9d0b5b5a5b9d60821b60448201526064016104a3565b610671828261100a565b5050565b6002805461033b9061156f565b61068a610d10565b806106985750610698610e06565b6106d75760405162461bcd60e51b815260206004820152601060248201526f39b2b73232b916b1b0b73a16b13ab93760811b60448201526064016104a3565b610671828261118b565b3360009081526004602090815260408083206001600160a01b0386168452909152812054828110156107555760405162461bcd60e51b815260206004820152601e60248201527f6465637265617365642d616c6c6f77616e63652d62656c6f772d7a65726f000060448201526064016104a3565b6107623385858403610a7f565b5060019392505050565b60006103c9338484610b8d565b610781610d10565b8061078f575061078f610e06565b6107cf5760405162461bcd60e51b815260206004820152601160248201527073656e6465722d63616e742d7365697a6560781b60448201526064016104a3565b6107da838383610b8d565b505050565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561082d57600080fd5b505afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086591906115aa565b6001600160a01b0316336001600160a01b0316146108b45760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b3b7bb32b93737b960a11b60448201526064016104a3565b600754604051600160a01b90910460ff1615808252907f79e35d0afb37464963b458a448d257d695a4dc4406dc45df01e4c7b38e2732cb9060200160405180910390a160078054911515600160a01b0260ff60a01b19909216919091179055565b600054610100900460ff168061092e575060005460ff16155b6109915760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a3565b600054610100900460ff161580156109b3576000805461ffff19166101011790555b6001600160a01b038216610a015760405162461bcd60e51b81526020600482015260156024820152741c1bdbdb0b5c9959da5cdd1c9e4b5a5ccb5b9d5b1b605a1b60448201526064016104a3565b600780546001600160a01b0319166001600160a01b038416179055610a28600188886112a2565b50610a35600286866112a2565b506007805460ff60a01b1960ff8616600160a81b021661ffff60a01b1990911617600160a01b1790556000196006558015610a76576000805461ff00191690555b50505050505050565b6001600160a01b038316610ad55760405162461bcd60e51b815260206004820152601d60248201527f617070726f76652d66726f6d2d7468652d7a65726f2d6164647265737300000060448201526064016104a3565b6001600160a01b038216610b2b5760405162461bcd60e51b815260206004820152601b60248201527f617070726f76652d746f2d7468652d7a65726f2d61646472657373000000000060448201526064016104a3565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610be35760405162461bcd60e51b815260206004820152601e60248201527f7472616e736665722d66726f6d2d7468652d7a65726f2d61646472657373000060448201526064016104a3565b6001600160a01b038216610c395760405162461bcd60e51b815260206004820152601c60248201527f7472616e736665722d746f2d7468652d7a65726f2d616464726573730000000060448201526064016104a3565b6001600160a01b03831660009081526003602052604090205481811015610ca25760405162461bcd60e51b815260206004820152601f60248201527f7472616e736665722d616d6f756e742d657863656564732d62616c616e63650060448201526064016104a3565b6001600160a01b0380851660008181526003602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d029086815260200190565b60405180910390a350505050565b600754604051631e1c6a0760e01b81523360048201526000916001600160a01b031690631e1c6a079060240160206040518083038186803b158015610d5457600080fd5b505afa158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c91906115ed565b8015610e0157506040516309bf6ca360e31b81523060048201523390634dfb65189060240160206040518083038186803b158015610dc957600080fd5b505afa158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0191906115ed565b905090565b600080336001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4257600080fd5b505afa158015610e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7a91906115aa565b600754604051631e1c6a0760e01b81526001600160a01b038084166004830152929350911690631e1c6a079060240160206040518083038186803b158015610ec157600080fd5b505afa158015610ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef991906115ed565b8015610f77575060405163020484bb60e11b81523360048201526001600160a01b0382169063040909769060240160206040518083038186803b158015610f3f57600080fd5b505afa158015610f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7791906115ed565b80156110045750306001600160a01b0316336001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc157600080fd5b505afa158015610fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff991906115aa565b6001600160a01b0316145b91505090565b600754600160a01b900460ff166110585760405162461bcd60e51b815260206004820152601260248201527173796e7468657469632d696e61637469766560701b60448201526064016104a3565b6001600160a01b0382166110ae5760405162461bcd60e51b815260206004820152601860248201527f6d696e742d746f2d7468652d7a65726f2d61646472657373000000000000000060448201526064016104a3565b80600560008282546110c091906115c7565b909155505060065460055411156111195760405162461bcd60e51b815260206004820152601860248201527f737572706173732d6d61782d73796e74682d737570706c79000000000000000060448201526064016104a3565b6001600160a01b038216600090815260036020526040812080548392906111419084906115c7565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166111e15760405162461bcd60e51b815260206004820152601a60248201527f6275726e2d66726f6d2d7468652d7a65726f2d6164647265737300000000000060448201526064016104a3565b6001600160a01b0382166000908152600360205260409020548181101561124a5760405162461bcd60e51b815260206004820152601b60248201527f6275726e2d616d6f756e742d657863656564732d62616c616e6365000000000060448201526064016104a3565b6001600160a01b03831660008181526003602090815260408083208686039055600580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610b80565b8280546112ae9061156f565b90600052602060002090601f0160209004810192826112d05760008555611316565b82601f106112e95782800160ff19823516178555611316565b82800160010185558215611316579182015b828111156113165782358255916020019190600101906112fb565b50611322929150611326565b5090565b5b808211156113225760008155600101611327565b600060208083528351808285015260005b818110156113685785810183015185820160400152820161134c565b8181111561137a576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146113a557600080fd5b50565b600080604083850312156113bb57600080fd5b82356113c681611390565b946020939093013593505050565b6000602082840312156113e657600080fd5b5035919050565b60008060006060848603121561140257600080fd5b833561140d81611390565b9250602084013561141d81611390565b929592945050506040919091013590565b60006020828403121561144057600080fd5b813561144b81611390565b9392505050565b6000806040838503121561146557600080fd5b823561147081611390565b9150602083013561148081611390565b809150509250929050565b60008083601f84011261149d57600080fd5b50813567ffffffffffffffff8111156114b557600080fd5b6020830191508360208285010111156114cd57600080fd5b9250929050565b600080600080600080608087890312156114ed57600080fd5b863567ffffffffffffffff8082111561150557600080fd5b6115118a838b0161148b565b9098509650602089013591508082111561152a57600080fd5b5061153789828a0161148b565b909550935050604087013560ff8116811461155157600080fd5b9150606087013561156181611390565b809150509295509295509295565b600181811c9082168061158357607f821691505b602082108114156115a457634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156115bc57600080fd5b815161144b81611390565b600082198211156115e857634e487b7160e01b600052601160045260246000fd5b500190565b6000602082840312156115ff57600080fd5b8151801515811461144b57600080fdfea264697066735822122044c78fa5ea00e595632957287f87709d666a92059b77531ba7a0ce43cd5543c764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(address,uint256)": {
        "params": {
          "amount_": "The amount to burn",
          "from_": "The account to burn from"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "amount_": "The amount to mint",
          "to_": "The account to mint to"
        }
      },
      "seize(address,address,uint256)": {
        "details": "Same as _transfer",
        "params": {
          "amount_": "The amount to seize",
          "to_": "The beneficiary account"
        }
      },
      "updateMaxTotalSupply(uint256)": {
        "params": {
          "newMaxTotalSupply_": "The new max total supply"
        }
      }
    },
    "title": "Synthetic Token contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MaxTotalSupplyUpdated(uint256,uint256)": {
        "notice": "Emitted when max total supply is updated"
      },
      "SyntheticTokenActiveUpdated(bool)": {
        "notice": "Emitted when active flag is updated"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Set `amount` as the allowance of `spender` over the caller's tokens"
      },
      "burn(address,uint256)": {
        "notice": "Burn synthetic token"
      },
      "decimals()": {
        "notice": "The decimals of the token"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Atomically decrease the allowance granted to `spender` by the caller"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Atomically increase the allowance granted to `spender` by the caller"
      },
      "isActive()": {
        "notice": "If true, disables msAsset minting globally"
      },
      "maxTotalSupply()": {
        "notice": "The supply cap"
      },
      "mint(address,uint256)": {
        "notice": "Mint synthetic token"
      },
      "name()": {
        "notice": "The name of the token"
      },
      "seize(address,address,uint256)": {
        "notice": "Seize synthetic tokens"
      },
      "symbol()": {
        "notice": "The symbol of the token"
      },
      "toggleIsActive()": {
        "notice": "Enable/Disable Synthetic Token"
      },
      "transfer(address,uint256)": {
        "notice": "Move `amount` tokens from the caller's account to `recipient`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Move `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance"
      },
      "updateMaxTotalSupply(uint256)": {
        "notice": "Update max total supply"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6563,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6566,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10429,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 10432,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 10437,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10444,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10447,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10450,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "maxTotalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10454,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "poolRegistry",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IPoolRegistry)8941"
      },
      {
        "astId": 10457,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "isActive",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 10460,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "decimals",
        "offset": 21,
        "slot": "7",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPoolRegistry)8941": {
        "encoding": "inplace",
        "label": "contract IPoolRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}