{
  "address": "0x66F5834C93661516F06C78B03F2296F145Ba036D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "DebtRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newActive",
          "type": "bool"
        }
      ],
      "name": "DebtTokenActiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldInterestRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInterestRate",
          "type": "uint256"
        }
      ],
      "name": "InterestRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SyntheticTokenIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "contract IPool",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interestRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRatePerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        }
      ],
      "name": "issue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_issued",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimestampAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "onBehalfOf_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_repaid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticToken",
      "outputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterestRate_",
          "type": "uint256"
        }
      ],
      "name": "updateInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3fd64fd6c99621d91486d089296ea178f964ced8c02b0d3334a1e6723787383d",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x66F5834C93661516F06C78B03F2296F145Ba036D",
    "transactionIndex": 85,
    "gasUsed": "2631328",
    "logsBloom": "0x
    "blockHash": "0xc05f4aeeca5caf1c77017adacb0ffd8278434feaad5f4b868693afda6671ee2d",
    "transactionHash": "0x3fd64fd6c99621d91486d089296ea178f964ced8c02b0d3334a1e6723787383d",
    "logs": [],
    "blockNumber": 23102977,
    "cumulativeGasUsed": "11074874",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d4de23420259fd811f95bb7990a3cd60",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DebtRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newActive\",\"type\":\"bool\"}],\"name\":\"DebtTokenActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldInterestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInterestRate\",\"type\":\"uint256\"}],\"name\":\"InterestRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SyntheticTokenIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"SECONDS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract IPool\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRatePerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_issued\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimestampAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_repaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticToken\",\"outputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterestRate_\",\"type\":\"uint256\"}],\"name\":\"updateInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"updateMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(address,uint256)\":{\"params\":{\"amount_\":\"The amount to burn\",\"from_\":\"The account to burn from\"}},\"issue(uint256,address)\":{\"params\":{\"amount_\":\"The amount to mint\",\"to_\":\"The beneficiary account\"},\"returns\":{\"_issued\":\"The amount issued after fees\"}},\"repay(address,uint256)\":{\"details\":\"The msg.sender is the payer and the account beneficed\",\"params\":{\"amount_\":\"The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)\",\"onBehalfOf_\":\"The account that will have debt decreased\"},\"returns\":{\"_repaid\":\"The amount repaid after fees\"}},\"sweep(address,address,uint256)\":{\"params\":{\"amount_\":\"The amount to send\",\"to_\":\"The recipient of the transfer\",\"token_\":\"The token to transfer\"}}},\"title\":\"Non-transferable token that represents users' debts\",\"version\":1},\"userdoc\":{\"events\":{\"DebtRepaid(address,address,uint256,uint256)\":{\"notice\":\"Emitted when synthetic's debt is repaid\"},\"DebtTokenActiveUpdated(bool)\":{\"notice\":\"Emitted when active flag is updated\"},\"InterestRateUpdated(uint256,uint256)\":{\"notice\":\"Emitted when interest rate is updated\"},\"MaxTotalSupplyUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max total supply is updated\"},\"SyntheticTokenIssued(address,address,uint256,uint256)\":{\"notice\":\"Emitted when synthetic token is issued\"}},\"kind\":\"user\",\"methods\":{\"accrueInterest()\":{\"notice\":\"Accrue interest over debt supply\"},\"balanceOf(address)\":{\"notice\":\"Get the updated (principal + interest) user's debt\"},\"burn(address,uint256)\":{\"notice\":\"Burn debt token\"},\"debtIndex()\":{\"notice\":\"Accumulator of the total earned interest rate since the beginning\"},\"decimals()\":{\"notice\":\"The decimals of the token\"},\"interestRate()\":{\"notice\":\"Interest rate\"},\"interestRatePerSecond()\":{\"notice\":\"Return interest rate (in percent) per second\"},\"isActive()\":{\"notice\":\"If true, disables msAsset minting on this pool\"},\"issue(uint256,address)\":{\"notice\":\"Lock collateral and mint synthetic token\"},\"lastTimestampAccrued()\":{\"notice\":\"The timestamp when interest accrual was calculated for the last time\"},\"maxTotalSupply()\":{\"notice\":\"The supply cap\"},\"name()\":{\"notice\":\"The name of the token\"},\"pool()\":{\"notice\":\"Pool contract\"},\"repay(address,uint256)\":{\"notice\":\"Send synthetic token to decrease debt\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"},\"symbol()\":{\"notice\":\"The symbol of the token\"},\"syntheticToken()\":{\"notice\":\"The Synthetic token\"},\"toggleIsActive()\":{\"notice\":\"Enable/Disable the Debt Token\"},\"totalSupply()\":{\"notice\":\"Return the total supply\"},\"updateInterestRate(uint256)\":{\"notice\":\"Update interest rate (APR)\"},\"updateMaxTotalSupply(uint256)\":{\"notice\":\"Update max total supply\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DebtToken.sol\":\"DebtToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"./access/Manageable.sol\\\";\\nimport \\\"./storage/DebtTokenStorage.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\n\\n/**\\n * @title Non-transferable token that represents users' debts\\n */\\ncontract DebtToken is ReentrancyGuard, Manageable, DebtTokenStorageV1 {\\n    using WadRayMath for uint256;\\n\\n    uint256 public constant SECONDS_PER_YEAR = 365 days;\\n\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    /// @notice Emitted when synthetic's debt is repaid\\n    event DebtRepaid(address indexed payer, address indexed account, uint256 amount, uint256 fee);\\n\\n    /// @notice Emitted when active flag is updated\\n    event DebtTokenActiveUpdated(bool newActive);\\n\\n    /// @notice Emitted when interest rate is updated\\n    event InterestRateUpdated(uint256 oldInterestRate, uint256 newInterestRate);\\n\\n    /// @notice Emitted when max total supply is updated\\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupply, uint256 newMaxTotalSupply);\\n\\n    /// @notice Emitted when synthetic token is issued\\n    event SyntheticTokenIssued(address indexed account, address indexed to, uint256 amount, uint256 fee);\\n\\n    /**\\n     * @dev Throws if sender can't burn\\n     */\\n    modifier onlyIfCanBurn() {\\n        require(msg.sender == address(pool), \\\"not-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token doesn't exist\\n     */\\n    modifier onlyIfSyntheticTokenExists() {\\n        require(pool.isSyntheticTokenExists(syntheticToken), \\\"synthetic-inexistent\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token isn't enabled\\n     */\\n    modifier onlyIfSyntheticTokenIsActive() {\\n        require(syntheticToken.isActive(), \\\"synthetic-inactive\\\");\\n        require(isActive, \\\"debt-token-inactive\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update reward contracts' states\\n     * @dev Should be called before balance changes (i.e. mint/burn)\\n     */\\n    modifier updateRewardsBeforeMintOrBurn(address account_) {\\n        IRewardsDistributor[] memory _rewardsDistributors = pool.getRewardsDistributors();\\n        ISyntheticToken _syntheticToken = syntheticToken;\\n        uint256 _length = _rewardsDistributors.length;\\n        for (uint256 i; i < _length; ++i) {\\n            _rewardsDistributors[i].updateBeforeMintOrBurn(_syntheticToken, account_);\\n        }\\n        _;\\n    }\\n\\n    function initialize(\\n        string calldata name_,\\n        string calldata symbol_,\\n        IPool pool_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 interestRate_,\\n        uint256 maxTotalSupply_\\n    ) external initializer {\\n        require(address(syntheticToken_) != address(0), \\\"synthetic-is-null\\\");\\n\\n        __ReentrancyGuard_init();\\n        __Manageable_init(pool_);\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = syntheticToken_.decimals();\\n        syntheticToken = syntheticToken_;\\n        lastTimestampAccrued = block.timestamp;\\n        debtIndex = 1e18;\\n        interestRate = interestRate_;\\n        maxTotalSupply = maxTotalSupply_;\\n        isActive = true;\\n    }\\n\\n    /**\\n     * @notice Accrue interest over debt supply\\n     */\\n    function accrueInterest() public {\\n        (\\n            uint256 _interestAmountAccrued,\\n            uint256 _debtIndex,\\n            uint256 _lastTimestampAccrued\\n        ) = _calculateInterestAccrual();\\n\\n        if (block.timestamp == _lastTimestampAccrued) {\\n            return;\\n        }\\n\\n        lastTimestampAccrued = block.timestamp;\\n\\n        if (_interestAmountAccrued > 0) {\\n            totalSupply_ += _interestAmountAccrued;\\n            debtIndex = _debtIndex;\\n            // Note: We could save gas by having an accumulator and a function to mint accumulated fee\\n            syntheticToken.mint(pool.feeCollector(), _interestAmountAccrued);\\n        }\\n    }\\n\\n    function allowance(\\n        address, /*owner_*/\\n        address /*spender_*/\\n    ) external pure override returns (uint256) {\\n        revert(\\\"allowance-not-supported\\\");\\n    }\\n\\n    // solhint-disable-next-line\\n    function approve(\\n        address, /*spender_*/\\n        uint256 /*amount_*/\\n    ) external override returns (bool) {\\n        revert(\\\"approval-not-supported\\\");\\n    }\\n\\n    /**\\n     * @notice Get the updated (principal + interest) user's debt\\n     */\\n    function balanceOf(address account_) public view override returns (uint256) {\\n        uint256 _principal = principalOf[account_];\\n        if (_principal == 0) {\\n            return 0;\\n        }\\n\\n        (, uint256 _debtIndex, ) = _calculateInterestAccrual();\\n\\n        // Note: The `debtIndex / debtIndexOf` gives the interest to apply to the principal amount\\n        return (_principal * _debtIndex) / debtIndexOf[account_];\\n    }\\n\\n    /**\\n     * @notice Burn debt token\\n     * @param from_ The account to burn from\\n     * @param amount_ The amount to burn\\n     */\\n    function burn(address from_, uint256 amount_) external override onlyIfCanBurn {\\n        _burn(from_, amount_);\\n    }\\n\\n    /**\\n     * @notice Lock collateral and mint synthetic token\\n     * @param amount_ The amount to mint\\n     * @param to_ The beneficiary account\\n     * @return _issued The amount issued after fees\\n     */\\n    function issue(uint256 amount_, address to_)\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfSyntheticTokenExists\\n        onlyIfSyntheticTokenIsActive\\n        returns (uint256 _issued)\\n    {\\n        require(amount_ > 0, \\\"amount-is-zero\\\");\\n\\n        accrueInterest();\\n\\n        (, , , , uint256 _issuableInUsd) = pool.debtPositionOf(msg.sender);\\n\\n        IMasterOracle _masterOracle = pool.masterOracle();\\n\\n        require(\\n            amount_ <= _masterOracle.quoteUsdToToken(address(syntheticToken), _issuableInUsd),\\n            \\\"not-enough-collateral\\\"\\n        );\\n\\n        uint256 _debtFloorInUsd = pool.debtFloorInUsd();\\n\\n        if (_debtFloorInUsd > 0) {\\n            require(\\n                _masterOracle.quoteTokenToUsd(address(syntheticToken), balanceOf(msg.sender) + amount_) >=\\n                    _debtFloorInUsd,\\n                \\\"debt-lt-floor\\\"\\n            );\\n        }\\n\\n        uint256 _issueFee = pool.issueFee();\\n        uint256 _feeAmount;\\n        _issued = amount_;\\n        if (_issueFee > 0) {\\n            _feeAmount = amount_.wadMul(_issueFee);\\n            syntheticToken.mint(pool.feeCollector(), _feeAmount);\\n            _issued -= _feeAmount;\\n        }\\n\\n        syntheticToken.mint(to_, _issued);\\n        _mint(msg.sender, amount_);\\n\\n        emit SyntheticTokenIssued(msg.sender, to_, amount_, _feeAmount);\\n    }\\n\\n    /**\\n     * @notice Return interest rate (in percent) per second\\n     */\\n    function interestRatePerSecond() public view override returns (uint256) {\\n        return interestRate / SECONDS_PER_YEAR;\\n    }\\n\\n    /**\\n     * @notice Send synthetic token to decrease debt\\n     * @dev The msg.sender is the payer and the account beneficed\\n     * @param onBehalfOf_ The account that will have debt decreased\\n     * @param amount_ The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)\\n     * @return _repaid The amount repaid after fees\\n     */\\n    function repay(address onBehalfOf_, uint256 amount_)\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        returns (uint256 _repaid)\\n    {\\n        require(amount_ > 0, \\\"amount-is-zero\\\");\\n\\n        accrueInterest();\\n\\n        uint256 _repayFee = pool.repayFee();\\n        uint256 _feeAmount;\\n        _repaid = amount_;\\n        if (_repayFee > 0) {\\n            // Note: `_repaid = _amount - _feeAmount`\\n            _repaid = amount_.wadDiv(1e18 + _repayFee);\\n            _feeAmount = amount_ - _repaid;\\n            syntheticToken.seize(msg.sender, pool.feeCollector(), _feeAmount);\\n        }\\n\\n        uint256 _debtFloorInUsd = pool.debtFloorInUsd();\\n        if (_debtFloorInUsd > 0) {\\n            uint256 _newDebtInUsd = pool.masterOracle().quoteTokenToUsd(\\n                address(syntheticToken),\\n                balanceOf(onBehalfOf_) - _repaid\\n            );\\n            require(_newDebtInUsd == 0 || _newDebtInUsd >= _debtFloorInUsd, \\\"debt-lt-floor\\\");\\n        }\\n\\n        syntheticToken.burn(msg.sender, _repaid);\\n        _burn(onBehalfOf_, _repaid);\\n\\n        emit DebtRepaid(msg.sender, onBehalfOf_, amount_, _feeAmount);\\n    }\\n\\n    /**\\n     * @notice Return the total supply\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        (uint256 _interestAmountAccrued, , ) = _calculateInterestAccrual();\\n        return totalSupply_ + _interestAmountAccrued;\\n    }\\n\\n    // solhint-disable-next-line\\n    function transfer(\\n        address, /*recipient_*/\\n        uint256 /*amount_*/\\n    ) external override returns (bool) {\\n        revert(\\\"transfer-not-supported\\\");\\n    }\\n\\n    // solhint-disable-next-line\\n    function transferFrom(\\n        address, /*sender_*/\\n        address, /*recipient_*/\\n        uint256 /*amount_*/\\n    ) external override returns (bool) {\\n        revert(\\\"transfer-not-supported\\\");\\n    }\\n\\n    /**\\n     * @notice Add this token to the debt tokens list if the recipient is receiving it for the 1st time\\n     */\\n    function _addToDebtTokensOfRecipientIfNeeded(address recipient_, uint256 recipientBalanceBefore_) private {\\n        if (recipientBalanceBefore_ == 0) {\\n            pool.addToDebtTokensOfAccount(recipient_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Destroy `amount` tokens from `account`, reducing the\\n     * total supply\\n     */\\n    function _burn(address account_, uint256 amount_) private updateRewardsBeforeMintOrBurn(account_) {\\n        require(account_ != address(0), \\\"burn-from-the-zero-address\\\");\\n\\n        uint256 _accountBalance = balanceOf(account_);\\n        require(_accountBalance >= amount_, \\\"burn-amount-exceeds-balance\\\");\\n\\n        unchecked {\\n            principalOf[account_] = _accountBalance - amount_;\\n            debtIndexOf[account_] = debtIndex;\\n            totalSupply_ -= amount_;\\n        }\\n\\n        emit Transfer(account_, address(0), amount_);\\n\\n        _removeFromDebtTokensOfSenderIfNeeded(account_, balanceOf(account_));\\n    }\\n\\n    /**\\n     * @notice Calculate interest to accrue\\n     * @dev This util function avoids code duplication across `balanceOf` and `accrueInterest`\\n     * @return _interestAmountAccrued The total amount of debt tokens accrued\\n     * @return _debtIndex The new `debtIndex` value\\n     */\\n\\n    function _calculateInterestAccrual()\\n        private\\n        view\\n        returns (\\n            uint256 _interestAmountAccrued,\\n            uint256 _debtIndex,\\n            uint256 _lastTimestampAccrued\\n        )\\n    {\\n        _lastTimestampAccrued = lastTimestampAccrued;\\n        _debtIndex = debtIndex;\\n\\n        if (block.timestamp > _lastTimestampAccrued) {\\n            uint256 _interestRateToAccrue = interestRatePerSecond() * (block.timestamp - _lastTimestampAccrued);\\n            if (_interestRateToAccrue > 0) {\\n                _interestAmountAccrued = _interestRateToAccrue.wadMul(totalSupply_);\\n                _debtIndex += _interestRateToAccrue.wadMul(debtIndex);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Create `amount` tokens and assigns them to `account`, increasing\\n     * the total supply\\n     */\\n    function _mint(address account_, uint256 amount_) private updateRewardsBeforeMintOrBurn(account_) {\\n        require(account_ != address(0), \\\"mint-to-the-zero-address\\\");\\n\\n        uint256 _balanceBefore = balanceOf(account_);\\n\\n        totalSupply_ += amount_;\\n        require(totalSupply_ <= maxTotalSupply, \\\"surpass-max-debt-supply\\\");\\n\\n        principalOf[account_] += amount_;\\n        debtIndexOf[account_] = debtIndex;\\n        emit Transfer(address(0), account_, amount_);\\n\\n        _addToDebtTokensOfRecipientIfNeeded(account_, _balanceBefore);\\n    }\\n\\n    /**\\n     * @notice Remove this token to the debt tokens list if the sender's balance goes to zero\\n     */\\n    function _removeFromDebtTokensOfSenderIfNeeded(address sender_, uint256 senderBalanceAfter_) private {\\n        if (senderBalanceAfter_ == 0) {\\n            pool.removeFromDebtTokensOfAccount(sender_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update max total supply\\n     */\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external override onlyGovernor {\\n        uint256 _currentMaxTotalSupply = maxTotalSupply;\\n        require(newMaxTotalSupply_ != _currentMaxTotalSupply, \\\"new-same-as-current\\\");\\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupply, newMaxTotalSupply_);\\n        maxTotalSupply = newMaxTotalSupply_;\\n    }\\n\\n    /**\\n     * @notice Update interest rate (APR)\\n     */\\n    function updateInterestRate(uint256 newInterestRate_) external onlyGovernor {\\n        accrueInterest();\\n        uint256 _currentInterestRate = interestRate;\\n        require(newInterestRate_ != _currentInterestRate, \\\"new-same-as-current\\\");\\n        emit InterestRateUpdated(_currentInterestRate, newInterestRate_);\\n        interestRate = newInterestRate_;\\n    }\\n\\n    /**\\n     * @notice Enable/Disable the Debt Token\\n     */\\n    function toggleIsActive() external override onlyGovernor {\\n        bool _newIsActive = !isActive;\\n        emit DebtTokenActiveUpdated(_newIsActive);\\n        isActive = _newIsActive;\\n    }\\n}\\n\",\"keccak256\":\"0x91768533ca9160738abebd0d581eb666f770cfa755c4e55b3543dc10605b7af2\",\"license\":\"MIT\"},\"contracts/access/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/TokenHolder.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\nimport \\\"../interfaces/IManageable.sol\\\";\\n\\n/**\\n * @title Reusable contract that handles accesses\\n */\\nabstract contract Manageable is IManageable, TokenHolder, Initializable {\\n    /**\\n     * @notice Pool contract\\n     */\\n    IPool public pool;\\n\\n    /**\\n     * @notice Requires that the caller is the Pool contract\\n     */\\n    modifier onlyPool() {\\n        require(msg.sender == address(pool), \\\"not-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Requires that the caller is the Pool contract\\n     */\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!pool.paused(), \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotShutdown() {\\n        require(!pool.everythingStopped(), \\\"shutdown\\\");\\n        _;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Manageable_init(IPool pool_) internal initializer {\\n        require(address(pool_) != address(0), \\\"pool-address-is-zero\\\");\\n        pool = pool_;\\n    }\\n\\n    function governor() public view returns (address _governor) {\\n        _governor = IGovernable(address(pool)).governor();\\n    }\\n\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x0dc9eeda21a9a0fb81227a1da7bb873a1cb6a0e406b374ebe0579b416225868e\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xc790f8419ee2c68721d6203ed1b5f81e89eb7e1dca19be3a9f54cb5de44491f1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued);\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xe6ee7036f93f31562824dd605f559fa80a315edbdff79d645f2565c6e61a7d7e\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralizationRatio() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn);\\n\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    function updateCollateralizationRatio(uint128 newCollateralizationRatio_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0x813f1b5835a64cddd7bb4bb65c44993c4c4d4d89a7ca12196d23418fd276b9b9\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\",\"keccak256\":\"0xac88e0997a26942cb9cbda1a7dd9756e28ba2025813e5b07e55939fbf8538ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFee() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function isSyntheticTokenExists(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function isDebtTokenExists(IDebtToken debtToken_) external view returns (bool);\\n\\n    function isDepositTokenExists(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(address account_)\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function addDebtToken(IDebtToken debtToken_) external;\\n\\n    function removeDebtToken(IDebtToken debtToken_) external;\\n\\n    function addDepositToken(address depositToken_) external;\\n\\n    function removeDepositToken(IDepositToken depositToken_) external;\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut);\\n\\n    function updateSwapFee(uint256 newSwapFee_) external;\\n\\n    function updateDebtFloor(uint256 newDebtFloorInUsd_) external;\\n\\n    function updateDepositFee(uint256 newDepositFee_) external;\\n\\n    function updateIssueFee(uint256 newIssueFee_) external;\\n\\n    function updateWithdrawFee(uint256 newWithdrawFee_) external;\\n\\n    function updateRepayFee(uint256 newRepayFee_) external;\\n\\n    function updateLiquidatorLiquidationFee(uint128 newLiquidatorLiquidationFee_) external;\\n\\n    function updateProtocolLiquidationFee(uint128 newProtocolLiquidationFee_) external;\\n\\n    function updateMaxLiquidable(uint256 newMaxLiquidable_) external;\\n\\n    function updateTreasury(ITreasury newTreasury_) external;\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function addRewardsDistributor(IRewardsDistributor distributor_) external;\\n\\n    function removeRewardsDistributor(IRewardsDistributor distributor_) external;\\n\\n    function toggleIsSwapActive() external;\\n\\n    function isSwapActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x73f52b38871779fe3f672da0d4d9a0dd6c07d34cfb7c1b7b2c442f0043afbc00\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function poolExists(address pool_) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateMasterOracle(IMasterOracle newOracle_) external;\\n}\\n\",\"keccak256\":\"0x958edd140ecfbe458bfd7f1505f4c1c3f3359adfe1ab6a8f200455f67d159330\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(\\n        IERC20 token_,\\n        address from_,\\n        address to_\\n    ) external;\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n}\\n\",\"keccak256\":\"0xc47213c524b56177843ef6c1b5ba0e4f5dc211eadf77a0b66ed666c0b39aa9c2\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function toggleIsActive() external;\\n\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0x27e7644e788023b54410e27735bf7ffab768df1469d5aff0e0a65e1108830978\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(\\n        address _assetIn,\\n        address _assetOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x711e4ad224403589238cd425781689ac98afc42314a2e6a5a2ac4c6ed5bfa273\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/DebtTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IDebtToken.sol\\\";\\n\\nabstract contract DebtTokenStorageV1 is IDebtToken {\\n    /**\\n     * @notice The name of the token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice The symbol of the token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice The mapping of the users' minted tokens\\n     * @dev This value changes within the mint and burn operations\\n     */\\n    mapping(address => uint256) internal principalOf;\\n\\n    /**\\n     * @notice The `debtIndex` \\\"snapshot\\\" of the account's latest `principalOf` update (i.e. mint/burn)\\n     */\\n    mapping(address => uint256) internal debtIndexOf;\\n\\n    /**\\n     * @notice The supply cap\\n     */\\n    uint256 public maxTotalSupply;\\n\\n    /**\\n     * @notice The total amount of minted tokens\\n     */\\n    uint256 internal totalSupply_;\\n\\n    /**\\n     * @notice The timestamp when interest accrual was calculated for the last time\\n     */\\n    uint256 public lastTimestampAccrued;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the beginning\\n     */\\n    uint256 public override debtIndex;\\n\\n    /**\\n     * @notice Interest rate\\n     * @dev Use 0.1e18 for 10% APR\\n     */\\n    uint256 public interestRate;\\n\\n    /**\\n     * @notice The Synthetic token\\n     */\\n    ISyntheticToken public syntheticToken;\\n\\n    /**\\n     * @notice If true, disables msAsset minting on this pool\\n     */\\n    bool public isActive;\\n\\n    /**\\n     * @notice The decimals of the token\\n     */\\n    uint8 public decimals;\\n}\\n\",\"keccak256\":\"0xc72decd7ae5091c63f470b875bc6ace68c8eba315bcb2b79c2a02c763e36e6ee\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert(\\\"fallback-not-allowed\\\");\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert(\\\"receive-not-allowed\\\");\\n    }\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param token_ The token to transfer\\n     * @param to_ The recipient of the transfer\\n     * @param amount_ The amount to send\\n     */\\n    function sweep(\\n        IERC20 token_,\\n        address to_,\\n        uint256 amount_\\n    ) external {\\n        _requireCanSweep();\\n\\n        if (address(token_) == address(0)) {\\n            Address.sendValue(payable(to_), amount_);\\n        } else {\\n            token_.safeTransfer(to_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     */\\n    function _requireCanSweep() internal view virtual;\\n}\\n\",\"keccak256\":\"0xfbe591f37ce392a1ce68b05923b997209e9b5612a3d84aa9a503e8eb6375b7a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612ea7806100206000396000f3fe6080604052600436106101c65760003560e01c806374e87e1e116100f7578063a6afed9511610095578063d259332911610064578063d259332914610560578063dd62ed3e14610575578063e6a69ab814610595578063ffa1ad74146105ad5761020e565b8063a6afed95146104fa578063a9059cbb1461050f578063b696a6ad1461052a578063bb8c631f1461054a5761020e565b80638230ecd6116100d15780638230ecd61461049057806395d89b41146104b05780639cc820da146104c55780639dc29fac146104da5761020e565b806374e87e1e1461043a578063752a50a61461045a5780637c3a00fd1461047a5761020e565b806322f3e2d411610164578063313ce5671161013e578063313ce567146103b1578063565f3d4f146103e457806362c06767146103fa57806370a082311461041a5761020e565b806322f3e2d41461035a57806323b872dd1461037b5780632ab4d0521461039b5761020e565b806316f0115b116101a057806316f0115b146102d5578063172f50a4146102f557806318160ddd1461031757806322867d781461033a5761020e565b806306fdde031461024d578063095ea7b3146102785780630c340a24146102a85761020e565b3661020e5760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b6044820152606401610205565b34801561025957600080fd5b506102626105de565b60405161026f9190612900565b60405180910390f35b34801561028457600080fd5b50610298610293366004612948565b61066c565b604051901515815260200161026f565b3480156102b457600080fd5b506102bd6106b0565b6040516001600160a01b03909116815260200161026f565b3480156102e157600080fd5b506002546102bd906001600160a01b031681565b34801561030157600080fd5b50610315610310366004612974565b610732565b005b34801561032357600080fd5b5061032c6107f2565b60405190815260200161026f565b34801561034657600080fd5b5061032c610355366004612948565b610815565b34801561036657600080fd5b50603d5461029890600160a01b900460ff1681565b34801561038757600080fd5b5061029861039636600461298d565b610dc4565b3480156103a757600080fd5b5061032c60385481565b3480156103bd57600080fd5b50603d546103d290600160a81b900460ff1681565b60405160ff909116815260200161026f565b3480156103f057600080fd5b5061032c603a5481565b34801561040657600080fd5b5061031561041536600461298d565b610e08565b34801561042657600080fd5b5061032c6104353660046129ce565b610e41565b34801561044657600080fd5b50610315610455366004612a34565b610ead565b34801561046657600080fd5b50610315610475366004612974565b611061565b34801561048657600080fd5b5061032c603c5481565b34801561049c57600080fd5b50603d546102bd906001600160a01b031681565b3480156104bc57600080fd5b50610262611129565b3480156104d157600080fd5b5061032c611136565b3480156104e657600080fd5b506103156104f5366004612948565b61114a565b34801561050657600080fd5b5061031561119d565b34801561051b57600080fd5b50610298610396366004612948565b34801561053657600080fd5b5061032c610545366004612adb565b6112cf565b34801561055657600080fd5b5061032c603b5481565b34801561056c57600080fd5b50610315611b95565b34801561058157600080fd5b5061032c610590366004612b0b565b611c2e565b3480156105a157600080fd5b5061032c6301e1338081565b3480156105b957600080fd5b50610262604051806040016040528060058152602001640312e302e360dc1b81525081565b603480546105eb90612b39565b80601f016020809104026020016040519081016040528092919081815260200182805461061790612b39565b80156106645780601f1061063957610100808354040283529160200191610664565b820191906000526020600020905b81548152906001019060200180831161064757829003601f168201915b505050505081565b60405162461bcd60e51b8152602060048201526016602482015275185c1c1c9bdd985b0b5b9bdd0b5cdd5c1c1bdc9d195960521b6044820152600090606401610205565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b1580156106f557600080fd5b505afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190612b74565b905090565b61073a6106b0565b6001600160a01b0316336001600160a01b03161461076a5760405162461bcd60e51b815260040161020590612b91565b603854818114156107b35760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b6044820152606401610205565b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603855565b6000806107fd611c79565b505090508060395461080f9190612bcd565b91505090565b6002546040805163ecf3a3f960e01b815290516000926001600160a01b03169163ecf3a3f9916004808301926020929190829003018186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108929190612bfa565b156108ca5760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b6044820152606401610205565b6002600154141561091d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610205565b6002600155816109605760405162461bcd60e51b815260206004820152600e60248201526d616d6f756e742d69732d7a65726f60901b6044820152606401610205565b61096861119d565b60025460408051631f03d67d60e21b815290516000926001600160a01b031691637c0f59f4916004808301926020929190829003018186803b1580156109ad57600080fd5b505afa1580156109c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e59190612c15565b839250905060008115610b0e57610a0e610a0783670de0b6b3a7640000612bcd565b8590611ce9565b9250610a1a8385612c2e565b603d54600254604080516331056e5760e21b815290519394506001600160a01b039283169363b2a02ff1933393169163c415b95c916004808301926020929190829003018186803b158015610a6e57600080fd5b505afa158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa69190612b74565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401600060405180830381600087803b158015610af557600080fd5b505af1158015610b09573d6000803e3d6000fd5b505050505b6002546040805163f609280960e01b815290516000926001600160a01b03169163f6092809916004808301926020929190829003018186803b158015610b5357600080fd5b505afa158015610b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8b9190612c15565b90508015610d035760025460408051637556d1c160e11b815290516000926001600160a01b03169163eaada382916004808301926020929190829003018186803b158015610bd857600080fd5b505afa158015610bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c109190612b74565b603d546001600160a01b0391821691638d0dba00911687610c308b610e41565b610c3a9190612c2e565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610c7e57600080fd5b505afa158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190612c15565b9050801580610cc55750818110155b610d015760405162461bcd60e51b815260206004820152600d60248201526c3232b13a16b63a16b33637b7b960991b6044820152606401610205565b505b603d54604051632770a7eb60e21b8152336004820152602481018690526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015610d4f57600080fd5b505af1158015610d63573d6000803e3d6000fd5b50505050610d718685611d26565b60408051868152602081018490526001600160a01b0388169133917fb2828294ad940d9ae096e368b4f878a8dabf30da36ce9dca5f5ad8eaf6ed052a910160405180910390a35050600180555092915050565b60405162461bcd60e51b81526020600482015260166024820152751d1c985b9cd9995c8b5b9bdd0b5cdd5c1c1bdc9d195960521b6044820152600090606401610205565b610e10611f8d565b6001600160a01b038316610e2d57610e288282611fc7565b505050565b610e286001600160a01b03841683836120e0565b6001600160a01b03811660009081526036602052604081205480610e685750600092915050565b6000610e72611c79565b506001600160a01b0386166000908152603760205260409020549092509050610e9b8284612c45565b610ea59190612c64565b949350505050565b600054610100900460ff1680610ec6575060005460ff16155b610ee25760405162461bcd60e51b815260040161020590612c86565b600054610100900460ff16158015610f04576000805461ffff19166101011790555b6001600160a01b038416610f4e5760405162461bcd60e51b81526020600482015260116024820152701cde5b9d1a195d1a58cb5a5ccb5b9d5b1b607a1b6044820152606401610205565b610f56612132565b610f5f856121a2565b610f6b60348a8a612837565b50610f7860358888612837565b50836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610fb257600080fd5b505afa158015610fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fea9190612cd4565b603d805442603a55670de0b6b3a7640000603b55603c86905560388590556001600160a81b031960ff93909316600160a81b02929092166001600160b01b0319909216919091176001600160a01b03861617600160a01b1790558015611056576000805461ff00191690555b505050505050505050565b6110696106b0565b6001600160a01b0316336001600160a01b0316146110995760405162461bcd60e51b815260040161020590612b91565b6110a161119d565b603c54818114156110ea5760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b6044820152606401610205565b60408051828152602081018490527f41e376fd99913dea7fda140f5c0bd997515b1a181acc58737320322548ec6e72910160405180910390a150603c55565b603580546105eb90612b39565b60006301e13380603c5461072d9190612c64565b6002546001600160a01b0316331461118f5760405162461bcd60e51b81526020600482015260086024820152671b9bdd0b5c1bdbdb60c21b6044820152606401610205565b6111998282611d26565b5050565b60008060006111aa611c79565b925092509250804214156111bd57505050565b42603a558215610e285782603960008282546111d99190612bcd565b9091555050603b829055603d54600254604080516331056e5760e21b815290516001600160a01b03938416936340c10f1993169163c415b95c916004808301926020929190829003018186803b15801561123257600080fd5b505afa158015611246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126a9190612b74565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b1580156112b257600080fd5b505af11580156112c6573d6000803e3d6000fd5b50505050505050565b6002546040805163ecf3a3f960e01b815290516000926001600160a01b03169163ecf3a3f9916004808301926020929190829003018186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190612bfa565b156113845760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b6044820152606401610205565b600260015414156113d75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610205565b6002600181905554603d546040516309bf6ca360e31b81526001600160a01b039182166004820152911690634dfb65189060240160206040518083038186803b15801561142357600080fd5b505afa158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145b9190612bfa565b61149e5760405162461bcd60e51b81526020600482015260146024820152731cde5b9d1a195d1a58cb5a5b995e1a5cdd195b9d60621b6044820152606401610205565b603d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ec57600080fd5b505afa158015611500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115249190612bfa565b6115655760405162461bcd60e51b815260206004820152601260248201527173796e7468657469632d696e61637469766560701b6044820152606401610205565b603d54600160a01b900460ff166115b45760405162461bcd60e51b8152602060048201526013602482015272646562742d746f6b656e2d696e61637469766560681b6044820152606401610205565b600083116115f55760405162461bcd60e51b815260206004820152600e60248201526d616d6f756e742d69732d7a65726f60901b6044820152606401610205565b6115fd61119d565b60025460405163dde3ab9560e01b81523360048201526000916001600160a01b03169063dde3ab959060240160a06040518083038186803b15801561164157600080fd5b505afa158015611655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116799190612cf7565b9450505050506000600260009054906101000a90046001600160a01b03166001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b1580156116cf57600080fd5b505afa1580156116e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117079190612b74565b603d5460405163b5e9bef560e01b81526001600160a01b0391821660048201526024810185905291925082169063b5e9bef59060440160206040518083038186803b15801561175557600080fd5b505afa158015611769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178d9190612c15565b8511156117d45760405162461bcd60e51b81526020600482015260156024820152741b9bdd0b595b9bdd59da0b58dbdb1b185d195c985b605a1b6044820152606401610205565b6002546040805163f609280960e01b815290516000926001600160a01b03169163f6092809916004808301926020929190829003018186803b15801561181957600080fd5b505afa15801561182d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118519190612c15565b9050801561193f57603d5481906001600160a01b0380851691638d0dba0091168961187b33610e41565b6118859190612bcd565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b1580156118c957600080fd5b505afa1580156118dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119019190612c15565b101561193f5760405162461bcd60e51b815260206004820152600d60248201526c3232b13a16b63a16b33637b7b960991b6044820152606401610205565b60025460408051632a9133c160e01b815290516000926001600160a01b031691632a9133c1916004808301926020929190829003018186803b15801561198457600080fd5b505afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc9190612c15565b879550905060008115611acf576119d38883612276565b603d54600254604080516331056e5760e21b815290519394506001600160a01b03928316936340c10f19939092169163c415b95c91600480820192602092909190829003018186803b158015611a2857600080fd5b505afa158015611a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a609190612b74565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015611aa857600080fd5b505af1158015611abc573d6000803e3d6000fd5b505050508086611acc9190612c2e565b95505b603d546040516340c10f1960e01b81526001600160a01b03898116600483015260248201899052909116906340c10f1990604401600060405180830381600087803b158015611b1d57600080fd5b505af1158015611b31573d6000803e3d6000fd5b50505050611b3f33896122ae565b60408051898152602081018390526001600160a01b0389169133917f8ed56bdcd59d676b8a4feb74d858ffa2bc47f80b291f9df3ced2fad3d953f798910160405180910390a35050600180555091949350505050565b611b9d6106b0565b6001600160a01b0316336001600160a01b031614611bcd5760405162461bcd60e51b815260040161020590612b91565b603d54604051600160a01b90910460ff1615808252907fb1d9ceb4467fd05a16930f966760d70eb5926cf0c1c19a7b6bfe59d805c190459060200160405180910390a1603d8054911515600160a01b0260ff60a01b19909216919091179055565b60405162461bcd60e51b815260206004820152601760248201527f616c6c6f77616e63652d6e6f742d737570706f727465640000000000000000006044820152600090606401610205565b603a54603b5460009142811015611ce4576000611c968242612c2e565b611c9e611136565b611ca89190612c45565b90508015611ce257603954611cbe908290612276565b9350611cd5603b548261227690919063ffffffff16565b611cdf9084612bcd565b92505b505b909192565b600081611cf7600282612c64565b611d09670de0b6b3a764000086612c45565b611d139190612bcd565b611d1d9190612c64565b90505b92915050565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611d7757600080fd5b505afa158015611d8b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611db39190810190612d5f565b603d5481519192506001600160a01b03169060005b81811015611e6157838181518110611de257611de2612e24565b6020908102919091010151604051626cc3c360e61b81526001600160a01b038581166004830152878116602483015290911690631b30f0c090604401600060405180830381600087803b158015611e3857600080fd5b505af1158015611e4c573d6000803e3d6000fd5b5050505080611e5a90612e3a565b9050611dc8565b506001600160a01b038616611eb85760405162461bcd60e51b815260206004820152601a60248201527f6275726e2d66726f6d2d7468652d7a65726f2d616464726573730000000000006044820152606401610205565b6000611ec387610e41565b905085811015611f155760405162461bcd60e51b815260206004820152601b60248201527f6275726e2d616d6f756e742d657863656564732d62616c616e636500000000006044820152606401610205565b6001600160a01b03871660008181526036602090815260408083208a86039055603b546037835281842055603980548b90039055518981529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36112c687611f8889610e41565b61254b565b611f956106b0565b6001600160a01b0316336001600160a01b031614611fc55760405162461bcd60e51b815260040161020590612b91565b565b804710156120175760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610205565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612064576040519150601f19603f3d011682016040523d82523d6000602084013e612069565b606091505b5050905080610e285760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610205565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e289084906125b4565b600054610100900460ff168061214b575060005460ff16155b6121675760405162461bcd60e51b815260040161020590612c86565b600054610100900460ff16158015612189576000805461ffff19166101011790555b60018055801561219f576000805461ff00191690555b50565b600054610100900460ff16806121bb575060005460ff16155b6121d75760405162461bcd60e51b815260040161020590612c86565b600054610100900460ff161580156121f9576000805461ffff19166101011790555b6001600160a01b0382166122465760405162461bcd60e51b8152602060048201526014602482015273706f6f6c2d616464726573732d69732d7a65726f60601b6044820152606401610205565b600280546001600160a01b0319166001600160a01b0384161790558015611199576000805461ff00191690555050565b6000821580612283575081155b1561229057506000611d20565b670de0b6b3a76400006122a4600282612c64565b611d098486612c45565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156122ff57600080fd5b505afa158015612313573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261233b9190810190612d5f565b603d5481519192506001600160a01b03169060005b818110156123e95783818151811061236a5761236a612e24565b6020908102919091010151604051626cc3c360e61b81526001600160a01b038581166004830152878116602483015290911690631b30f0c090604401600060405180830381600087803b1580156123c057600080fd5b505af11580156123d4573d6000803e3d6000fd5b50505050806123e290612e3a565b9050612350565b506001600160a01b0386166124405760405162461bcd60e51b815260206004820152601860248201527f6d696e742d746f2d7468652d7a65726f2d6164647265737300000000000000006044820152606401610205565b600061244b87610e41565b9050856039600082825461245f9190612bcd565b909155505060385460395411156124b85760405162461bcd60e51b815260206004820152601760248201527f737572706173732d6d61782d646562742d737570706c790000000000000000006044820152606401610205565b6001600160a01b038716600090815260366020526040812080548892906124e0908490612bcd565b9091555050603b546001600160a01b0388166000818152603760205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612539908a815260200190565b60405180910390a36112c68782612686565b8061119957600254604051631d71be3b60e21b81526001600160a01b038481166004830152909116906375c6f8ec906024015b600060405180830381600087803b15801561259857600080fd5b505af11580156125ac573d6000803e3d6000fd5b505050505050565b6000612609826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126bd9092919063ffffffff16565b805190915015610e2857808060200190518101906126279190612bfa565b610e285760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610205565b8061119957600254604051631dc2da6d60e21b81526001600160a01b0384811660048301529091169063770b69b49060240161257e565b60606126cc84846000856126d6565b90505b9392505050565b6060824710156127375760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610205565b843b6127855760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610205565b600080866001600160a01b031685876040516127a19190612e55565b60006040518083038185875af1925050503d80600081146127de576040519150601f19603f3d011682016040523d82523d6000602084013e6127e3565b606091505b50915091506127f38282866127fe565b979650505050505050565b6060831561280d5750816126cf565b82511561281d5782518084602001fd5b8160405162461bcd60e51b81526004016102059190612900565b82805461284390612b39565b90600052602060002090601f01602090048101928261286557600085556128ab565b82601f1061287e5782800160ff198235161785556128ab565b828001600101855582156128ab579182015b828111156128ab578235825591602001919060010190612890565b506128b79291506128bb565b5090565b5b808211156128b757600081556001016128bc565b60005b838110156128eb5781810151838201526020016128d3565b838111156128fa576000848401525b50505050565b602081526000825180602084015261291f8160408501602087016128d0565b601f01601f19169190910160400192915050565b6001600160a01b038116811461219f57600080fd5b6000806040838503121561295b57600080fd5b823561296681612933565b946020939093013593505050565b60006020828403121561298657600080fd5b5035919050565b6000806000606084860312156129a257600080fd5b83356129ad81612933565b925060208401356129bd81612933565b929592945050506040919091013590565b6000602082840312156129e057600080fd5b81356126cf81612933565b60008083601f8401126129fd57600080fd5b50813567ffffffffffffffff811115612a1557600080fd5b602083019150836020828501011115612a2d57600080fd5b9250929050565b60008060008060008060008060c0898b031215612a5057600080fd5b883567ffffffffffffffff80821115612a6857600080fd5b612a748c838d016129eb565b909a50985060208b0135915080821115612a8d57600080fd5b50612a9a8b828c016129eb565b9097509550506040890135612aae81612933565b93506060890135612abe81612933565b979a969950949793969295929450505060808201359160a0013590565b60008060408385031215612aee57600080fd5b823591506020830135612b0081612933565b809150509250929050565b60008060408385031215612b1e57600080fd5b8235612b2981612933565b91506020830135612b0081612933565b600181811c90821680612b4d57607f821691505b60208210811415612b6e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612b8657600080fd5b81516126cf81612933565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115612be057612be0612bb7565b500190565b80518015158114612bf557600080fd5b919050565b600060208284031215612c0c57600080fd5b611d1d82612be5565b600060208284031215612c2757600080fd5b5051919050565b600082821015612c4057612c40612bb7565b500390565b6000816000190483118215151615612c5f57612c5f612bb7565b500290565b600082612c8157634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215612ce657600080fd5b815160ff811681146126cf57600080fd5b600080600080600060a08688031215612d0f57600080fd5b612d1886612be5565b602087015160408801516060890151608090990151929a91995097965090945092505050565b634e487b7160e01b600052604160045260246000fd5b8051612bf581612933565b60006020808385031215612d7257600080fd5b825167ffffffffffffffff80821115612d8a57600080fd5b818501915085601f830112612d9e57600080fd5b815181811115612db057612db0612d3e565b8060051b604051601f19603f83011681018181108582111715612dd557612dd5612d3e565b604052918252848201925083810185019188831115612df357600080fd5b938501935b82851015612e1857612e0985612d54565b84529385019392850192612df8565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612e4e57612e4e612bb7565b5060010190565b60008251612e678184602087016128d0565b919091019291505056fea2646970667358221220518799ea3f823da5d990399d0f7f7dbbcfbae2506c426b903756601eb5822afa64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101c65760003560e01c806374e87e1e116100f7578063a6afed9511610095578063d259332911610064578063d259332914610560578063dd62ed3e14610575578063e6a69ab814610595578063ffa1ad74146105ad5761020e565b8063a6afed95146104fa578063a9059cbb1461050f578063b696a6ad1461052a578063bb8c631f1461054a5761020e565b80638230ecd6116100d15780638230ecd61461049057806395d89b41146104b05780639cc820da146104c55780639dc29fac146104da5761020e565b806374e87e1e1461043a578063752a50a61461045a5780637c3a00fd1461047a5761020e565b806322f3e2d411610164578063313ce5671161013e578063313ce567146103b1578063565f3d4f146103e457806362c06767146103fa57806370a082311461041a5761020e565b806322f3e2d41461035a57806323b872dd1461037b5780632ab4d0521461039b5761020e565b806316f0115b116101a057806316f0115b146102d5578063172f50a4146102f557806318160ddd1461031757806322867d781461033a5761020e565b806306fdde031461024d578063095ea7b3146102785780630c340a24146102a85761020e565b3661020e5760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b6044820152606401610205565b34801561025957600080fd5b506102626105de565b60405161026f9190612900565b60405180910390f35b34801561028457600080fd5b50610298610293366004612948565b61066c565b604051901515815260200161026f565b3480156102b457600080fd5b506102bd6106b0565b6040516001600160a01b03909116815260200161026f565b3480156102e157600080fd5b506002546102bd906001600160a01b031681565b34801561030157600080fd5b50610315610310366004612974565b610732565b005b34801561032357600080fd5b5061032c6107f2565b60405190815260200161026f565b34801561034657600080fd5b5061032c610355366004612948565b610815565b34801561036657600080fd5b50603d5461029890600160a01b900460ff1681565b34801561038757600080fd5b5061029861039636600461298d565b610dc4565b3480156103a757600080fd5b5061032c60385481565b3480156103bd57600080fd5b50603d546103d290600160a81b900460ff1681565b60405160ff909116815260200161026f565b3480156103f057600080fd5b5061032c603a5481565b34801561040657600080fd5b5061031561041536600461298d565b610e08565b34801561042657600080fd5b5061032c6104353660046129ce565b610e41565b34801561044657600080fd5b50610315610455366004612a34565b610ead565b34801561046657600080fd5b50610315610475366004612974565b611061565b34801561048657600080fd5b5061032c603c5481565b34801561049c57600080fd5b50603d546102bd906001600160a01b031681565b3480156104bc57600080fd5b50610262611129565b3480156104d157600080fd5b5061032c611136565b3480156104e657600080fd5b506103156104f5366004612948565b61114a565b34801561050657600080fd5b5061031561119d565b34801561051b57600080fd5b50610298610396366004612948565b34801561053657600080fd5b5061032c610545366004612adb565b6112cf565b34801561055657600080fd5b5061032c603b5481565b34801561056c57600080fd5b50610315611b95565b34801561058157600080fd5b5061032c610590366004612b0b565b611c2e565b3480156105a157600080fd5b5061032c6301e1338081565b3480156105b957600080fd5b50610262604051806040016040528060058152602001640312e302e360dc1b81525081565b603480546105eb90612b39565b80601f016020809104026020016040519081016040528092919081815260200182805461061790612b39565b80156106645780601f1061063957610100808354040283529160200191610664565b820191906000526020600020905b81548152906001019060200180831161064757829003601f168201915b505050505081565b60405162461bcd60e51b8152602060048201526016602482015275185c1c1c9bdd985b0b5b9bdd0b5cdd5c1c1bdc9d195960521b6044820152600090606401610205565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b1580156106f557600080fd5b505afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190612b74565b905090565b61073a6106b0565b6001600160a01b0316336001600160a01b03161461076a5760405162461bcd60e51b815260040161020590612b91565b603854818114156107b35760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b6044820152606401610205565b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603855565b6000806107fd611c79565b505090508060395461080f9190612bcd565b91505090565b6002546040805163ecf3a3f960e01b815290516000926001600160a01b03169163ecf3a3f9916004808301926020929190829003018186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108929190612bfa565b156108ca5760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b6044820152606401610205565b6002600154141561091d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610205565b6002600155816109605760405162461bcd60e51b815260206004820152600e60248201526d616d6f756e742d69732d7a65726f60901b6044820152606401610205565b61096861119d565b60025460408051631f03d67d60e21b815290516000926001600160a01b031691637c0f59f4916004808301926020929190829003018186803b1580156109ad57600080fd5b505afa1580156109c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e59190612c15565b839250905060008115610b0e57610a0e610a0783670de0b6b3a7640000612bcd565b8590611ce9565b9250610a1a8385612c2e565b603d54600254604080516331056e5760e21b815290519394506001600160a01b039283169363b2a02ff1933393169163c415b95c916004808301926020929190829003018186803b158015610a6e57600080fd5b505afa158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa69190612b74565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401600060405180830381600087803b158015610af557600080fd5b505af1158015610b09573d6000803e3d6000fd5b505050505b6002546040805163f609280960e01b815290516000926001600160a01b03169163f6092809916004808301926020929190829003018186803b158015610b5357600080fd5b505afa158015610b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8b9190612c15565b90508015610d035760025460408051637556d1c160e11b815290516000926001600160a01b03169163eaada382916004808301926020929190829003018186803b158015610bd857600080fd5b505afa158015610bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c109190612b74565b603d546001600160a01b0391821691638d0dba00911687610c308b610e41565b610c3a9190612c2e565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610c7e57600080fd5b505afa158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190612c15565b9050801580610cc55750818110155b610d015760405162461bcd60e51b815260206004820152600d60248201526c3232b13a16b63a16b33637b7b960991b6044820152606401610205565b505b603d54604051632770a7eb60e21b8152336004820152602481018690526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015610d4f57600080fd5b505af1158015610d63573d6000803e3d6000fd5b50505050610d718685611d26565b60408051868152602081018490526001600160a01b0388169133917fb2828294ad940d9ae096e368b4f878a8dabf30da36ce9dca5f5ad8eaf6ed052a910160405180910390a35050600180555092915050565b60405162461bcd60e51b81526020600482015260166024820152751d1c985b9cd9995c8b5b9bdd0b5cdd5c1c1bdc9d195960521b6044820152600090606401610205565b610e10611f8d565b6001600160a01b038316610e2d57610e288282611fc7565b505050565b610e286001600160a01b03841683836120e0565b6001600160a01b03811660009081526036602052604081205480610e685750600092915050565b6000610e72611c79565b506001600160a01b0386166000908152603760205260409020549092509050610e9b8284612c45565b610ea59190612c64565b949350505050565b600054610100900460ff1680610ec6575060005460ff16155b610ee25760405162461bcd60e51b815260040161020590612c86565b600054610100900460ff16158015610f04576000805461ffff19166101011790555b6001600160a01b038416610f4e5760405162461bcd60e51b81526020600482015260116024820152701cde5b9d1a195d1a58cb5a5ccb5b9d5b1b607a1b6044820152606401610205565b610f56612132565b610f5f856121a2565b610f6b60348a8a612837565b50610f7860358888612837565b50836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610fb257600080fd5b505afa158015610fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fea9190612cd4565b603d805442603a55670de0b6b3a7640000603b55603c86905560388590556001600160a81b031960ff93909316600160a81b02929092166001600160b01b0319909216919091176001600160a01b03861617600160a01b1790558015611056576000805461ff00191690555b505050505050505050565b6110696106b0565b6001600160a01b0316336001600160a01b0316146110995760405162461bcd60e51b815260040161020590612b91565b6110a161119d565b603c54818114156110ea5760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b6044820152606401610205565b60408051828152602081018490527f41e376fd99913dea7fda140f5c0bd997515b1a181acc58737320322548ec6e72910160405180910390a150603c55565b603580546105eb90612b39565b60006301e13380603c5461072d9190612c64565b6002546001600160a01b0316331461118f5760405162461bcd60e51b81526020600482015260086024820152671b9bdd0b5c1bdbdb60c21b6044820152606401610205565b6111998282611d26565b5050565b60008060006111aa611c79565b925092509250804214156111bd57505050565b42603a558215610e285782603960008282546111d99190612bcd565b9091555050603b829055603d54600254604080516331056e5760e21b815290516001600160a01b03938416936340c10f1993169163c415b95c916004808301926020929190829003018186803b15801561123257600080fd5b505afa158015611246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126a9190612b74565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b1580156112b257600080fd5b505af11580156112c6573d6000803e3d6000fd5b50505050505050565b6002546040805163ecf3a3f960e01b815290516000926001600160a01b03169163ecf3a3f9916004808301926020929190829003018186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c9190612bfa565b156113845760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b6044820152606401610205565b600260015414156113d75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610205565b6002600181905554603d546040516309bf6ca360e31b81526001600160a01b039182166004820152911690634dfb65189060240160206040518083038186803b15801561142357600080fd5b505afa158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145b9190612bfa565b61149e5760405162461bcd60e51b81526020600482015260146024820152731cde5b9d1a195d1a58cb5a5b995e1a5cdd195b9d60621b6044820152606401610205565b603d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b815260040160206040518083038186803b1580156114ec57600080fd5b505afa158015611500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115249190612bfa565b6115655760405162461bcd60e51b815260206004820152601260248201527173796e7468657469632d696e61637469766560701b6044820152606401610205565b603d54600160a01b900460ff166115b45760405162461bcd60e51b8152602060048201526013602482015272646562742d746f6b656e2d696e61637469766560681b6044820152606401610205565b600083116115f55760405162461bcd60e51b815260206004820152600e60248201526d616d6f756e742d69732d7a65726f60901b6044820152606401610205565b6115fd61119d565b60025460405163dde3ab9560e01b81523360048201526000916001600160a01b03169063dde3ab959060240160a06040518083038186803b15801561164157600080fd5b505afa158015611655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116799190612cf7565b9450505050506000600260009054906101000a90046001600160a01b03166001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b1580156116cf57600080fd5b505afa1580156116e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117079190612b74565b603d5460405163b5e9bef560e01b81526001600160a01b0391821660048201526024810185905291925082169063b5e9bef59060440160206040518083038186803b15801561175557600080fd5b505afa158015611769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178d9190612c15565b8511156117d45760405162461bcd60e51b81526020600482015260156024820152741b9bdd0b595b9bdd59da0b58dbdb1b185d195c985b605a1b6044820152606401610205565b6002546040805163f609280960e01b815290516000926001600160a01b03169163f6092809916004808301926020929190829003018186803b15801561181957600080fd5b505afa15801561182d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118519190612c15565b9050801561193f57603d5481906001600160a01b0380851691638d0dba0091168961187b33610e41565b6118859190612bcd565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b1580156118c957600080fd5b505afa1580156118dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119019190612c15565b101561193f5760405162461bcd60e51b815260206004820152600d60248201526c3232b13a16b63a16b33637b7b960991b6044820152606401610205565b60025460408051632a9133c160e01b815290516000926001600160a01b031691632a9133c1916004808301926020929190829003018186803b15801561198457600080fd5b505afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc9190612c15565b879550905060008115611acf576119d38883612276565b603d54600254604080516331056e5760e21b815290519394506001600160a01b03928316936340c10f19939092169163c415b95c91600480820192602092909190829003018186803b158015611a2857600080fd5b505afa158015611a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a609190612b74565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015611aa857600080fd5b505af1158015611abc573d6000803e3d6000fd5b505050508086611acc9190612c2e565b95505b603d546040516340c10f1960e01b81526001600160a01b03898116600483015260248201899052909116906340c10f1990604401600060405180830381600087803b158015611b1d57600080fd5b505af1158015611b31573d6000803e3d6000fd5b50505050611b3f33896122ae565b60408051898152602081018390526001600160a01b0389169133917f8ed56bdcd59d676b8a4feb74d858ffa2bc47f80b291f9df3ced2fad3d953f798910160405180910390a35050600180555091949350505050565b611b9d6106b0565b6001600160a01b0316336001600160a01b031614611bcd5760405162461bcd60e51b815260040161020590612b91565b603d54604051600160a01b90910460ff1615808252907fb1d9ceb4467fd05a16930f966760d70eb5926cf0c1c19a7b6bfe59d805c190459060200160405180910390a1603d8054911515600160a01b0260ff60a01b19909216919091179055565b60405162461bcd60e51b815260206004820152601760248201527f616c6c6f77616e63652d6e6f742d737570706f727465640000000000000000006044820152600090606401610205565b603a54603b5460009142811015611ce4576000611c968242612c2e565b611c9e611136565b611ca89190612c45565b90508015611ce257603954611cbe908290612276565b9350611cd5603b548261227690919063ffffffff16565b611cdf9084612bcd565b92505b505b909192565b600081611cf7600282612c64565b611d09670de0b6b3a764000086612c45565b611d139190612bcd565b611d1d9190612c64565b90505b92915050565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611d7757600080fd5b505afa158015611d8b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611db39190810190612d5f565b603d5481519192506001600160a01b03169060005b81811015611e6157838181518110611de257611de2612e24565b6020908102919091010151604051626cc3c360e61b81526001600160a01b038581166004830152878116602483015290911690631b30f0c090604401600060405180830381600087803b158015611e3857600080fd5b505af1158015611e4c573d6000803e3d6000fd5b5050505080611e5a90612e3a565b9050611dc8565b506001600160a01b038616611eb85760405162461bcd60e51b815260206004820152601a60248201527f6275726e2d66726f6d2d7468652d7a65726f2d616464726573730000000000006044820152606401610205565b6000611ec387610e41565b905085811015611f155760405162461bcd60e51b815260206004820152601b60248201527f6275726e2d616d6f756e742d657863656564732d62616c616e636500000000006044820152606401610205565b6001600160a01b03871660008181526036602090815260408083208a86039055603b546037835281842055603980548b90039055518981529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36112c687611f8889610e41565b61254b565b611f956106b0565b6001600160a01b0316336001600160a01b031614611fc55760405162461bcd60e51b815260040161020590612b91565b565b804710156120175760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610205565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612064576040519150601f19603f3d011682016040523d82523d6000602084013e612069565b606091505b5050905080610e285760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610205565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e289084906125b4565b600054610100900460ff168061214b575060005460ff16155b6121675760405162461bcd60e51b815260040161020590612c86565b600054610100900460ff16158015612189576000805461ffff19166101011790555b60018055801561219f576000805461ff00191690555b50565b600054610100900460ff16806121bb575060005460ff16155b6121d75760405162461bcd60e51b815260040161020590612c86565b600054610100900460ff161580156121f9576000805461ffff19166101011790555b6001600160a01b0382166122465760405162461bcd60e51b8152602060048201526014602482015273706f6f6c2d616464726573732d69732d7a65726f60601b6044820152606401610205565b600280546001600160a01b0319166001600160a01b0384161790558015611199576000805461ff00191690555050565b6000821580612283575081155b1561229057506000611d20565b670de0b6b3a76400006122a4600282612c64565b611d098486612c45565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156122ff57600080fd5b505afa158015612313573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261233b9190810190612d5f565b603d5481519192506001600160a01b03169060005b818110156123e95783818151811061236a5761236a612e24565b6020908102919091010151604051626cc3c360e61b81526001600160a01b038581166004830152878116602483015290911690631b30f0c090604401600060405180830381600087803b1580156123c057600080fd5b505af11580156123d4573d6000803e3d6000fd5b50505050806123e290612e3a565b9050612350565b506001600160a01b0386166124405760405162461bcd60e51b815260206004820152601860248201527f6d696e742d746f2d7468652d7a65726f2d6164647265737300000000000000006044820152606401610205565b600061244b87610e41565b9050856039600082825461245f9190612bcd565b909155505060385460395411156124b85760405162461bcd60e51b815260206004820152601760248201527f737572706173732d6d61782d646562742d737570706c790000000000000000006044820152606401610205565b6001600160a01b038716600090815260366020526040812080548892906124e0908490612bcd565b9091555050603b546001600160a01b0388166000818152603760205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612539908a815260200190565b60405180910390a36112c68782612686565b8061119957600254604051631d71be3b60e21b81526001600160a01b038481166004830152909116906375c6f8ec906024015b600060405180830381600087803b15801561259857600080fd5b505af11580156125ac573d6000803e3d6000fd5b505050505050565b6000612609826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126bd9092919063ffffffff16565b805190915015610e2857808060200190518101906126279190612bfa565b610e285760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610205565b8061119957600254604051631dc2da6d60e21b81526001600160a01b0384811660048301529091169063770b69b49060240161257e565b60606126cc84846000856126d6565b90505b9392505050565b6060824710156127375760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610205565b843b6127855760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610205565b600080866001600160a01b031685876040516127a19190612e55565b60006040518083038185875af1925050503d80600081146127de576040519150601f19603f3d011682016040523d82523d6000602084013e6127e3565b606091505b50915091506127f38282866127fe565b979650505050505050565b6060831561280d5750816126cf565b82511561281d5782518084602001fd5b8160405162461bcd60e51b81526004016102059190612900565b82805461284390612b39565b90600052602060002090601f01602090048101928261286557600085556128ab565b82601f1061287e5782800160ff198235161785556128ab565b828001600101855582156128ab579182015b828111156128ab578235825591602001919060010190612890565b506128b79291506128bb565b5090565b5b808211156128b757600081556001016128bc565b60005b838110156128eb5781810151838201526020016128d3565b838111156128fa576000848401525b50505050565b602081526000825180602084015261291f8160408501602087016128d0565b601f01601f19169190910160400192915050565b6001600160a01b038116811461219f57600080fd5b6000806040838503121561295b57600080fd5b823561296681612933565b946020939093013593505050565b60006020828403121561298657600080fd5b5035919050565b6000806000606084860312156129a257600080fd5b83356129ad81612933565b925060208401356129bd81612933565b929592945050506040919091013590565b6000602082840312156129e057600080fd5b81356126cf81612933565b60008083601f8401126129fd57600080fd5b50813567ffffffffffffffff811115612a1557600080fd5b602083019150836020828501011115612a2d57600080fd5b9250929050565b60008060008060008060008060c0898b031215612a5057600080fd5b883567ffffffffffffffff80821115612a6857600080fd5b612a748c838d016129eb565b909a50985060208b0135915080821115612a8d57600080fd5b50612a9a8b828c016129eb565b9097509550506040890135612aae81612933565b93506060890135612abe81612933565b979a969950949793969295929450505060808201359160a0013590565b60008060408385031215612aee57600080fd5b823591506020830135612b0081612933565b809150509250929050565b60008060408385031215612b1e57600080fd5b8235612b2981612933565b91506020830135612b0081612933565b600181811c90821680612b4d57607f821691505b60208210811415612b6e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612b8657600080fd5b81516126cf81612933565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115612be057612be0612bb7565b500190565b80518015158114612bf557600080fd5b919050565b600060208284031215612c0c57600080fd5b611d1d82612be5565b600060208284031215612c2757600080fd5b5051919050565b600082821015612c4057612c40612bb7565b500390565b6000816000190483118215151615612c5f57612c5f612bb7565b500290565b600082612c8157634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215612ce657600080fd5b815160ff811681146126cf57600080fd5b600080600080600060a08688031215612d0f57600080fd5b612d1886612be5565b602087015160408801516060890151608090990151929a91995097965090945092505050565b634e487b7160e01b600052604160045260246000fd5b8051612bf581612933565b60006020808385031215612d7257600080fd5b825167ffffffffffffffff80821115612d8a57600080fd5b818501915085601f830112612d9e57600080fd5b815181811115612db057612db0612d3e565b8060051b604051601f19603f83011681018181108582111715612dd557612dd5612d3e565b604052918252848201925083810185019188831115612df357600080fd5b938501935b82851015612e1857612e0985612d54565b84529385019392850192612df8565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612e4e57612e4e612bb7565b5060010190565b60008251612e678184602087016128d0565b919091019291505056fea2646970667358221220518799ea3f823da5d990399d0f7f7dbbcfbae2506c426b903756601eb5822afa64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(address,uint256)": {
        "params": {
          "amount_": "The amount to burn",
          "from_": "The account to burn from"
        }
      },
      "issue(uint256,address)": {
        "params": {
          "amount_": "The amount to mint",
          "to_": "The beneficiary account"
        },
        "returns": {
          "_issued": "The amount issued after fees"
        }
      },
      "repay(address,uint256)": {
        "details": "The msg.sender is the payer and the account beneficed",
        "params": {
          "amount_": "The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)",
          "onBehalfOf_": "The account that will have debt decreased"
        },
        "returns": {
          "_repaid": "The amount repaid after fees"
        }
      },
      "sweep(address,address,uint256)": {
        "params": {
          "amount_": "The amount to send",
          "to_": "The recipient of the transfer",
          "token_": "The token to transfer"
        }
      }
    },
    "title": "Non-transferable token that represents users' debts",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DebtRepaid(address,address,uint256,uint256)": {
        "notice": "Emitted when synthetic's debt is repaid"
      },
      "DebtTokenActiveUpdated(bool)": {
        "notice": "Emitted when active flag is updated"
      },
      "InterestRateUpdated(uint256,uint256)": {
        "notice": "Emitted when interest rate is updated"
      },
      "MaxTotalSupplyUpdated(uint256,uint256)": {
        "notice": "Emitted when max total supply is updated"
      },
      "SyntheticTokenIssued(address,address,uint256,uint256)": {
        "notice": "Emitted when synthetic token is issued"
      }
    },
    "kind": "user",
    "methods": {
      "accrueInterest()": {
        "notice": "Accrue interest over debt supply"
      },
      "balanceOf(address)": {
        "notice": "Get the updated (principal + interest) user's debt"
      },
      "burn(address,uint256)": {
        "notice": "Burn debt token"
      },
      "debtIndex()": {
        "notice": "Accumulator of the total earned interest rate since the beginning"
      },
      "decimals()": {
        "notice": "The decimals of the token"
      },
      "interestRate()": {
        "notice": "Interest rate"
      },
      "interestRatePerSecond()": {
        "notice": "Return interest rate (in percent) per second"
      },
      "isActive()": {
        "notice": "If true, disables msAsset minting on this pool"
      },
      "issue(uint256,address)": {
        "notice": "Lock collateral and mint synthetic token"
      },
      "lastTimestampAccrued()": {
        "notice": "The timestamp when interest accrual was calculated for the last time"
      },
      "maxTotalSupply()": {
        "notice": "The supply cap"
      },
      "name()": {
        "notice": "The name of the token"
      },
      "pool()": {
        "notice": "Pool contract"
      },
      "repay(address,uint256)": {
        "notice": "Send synthetic token to decrease debt"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      },
      "symbol()": {
        "notice": "The symbol of the token"
      },
      "syntheticToken()": {
        "notice": "The Synthetic token"
      },
      "toggleIsActive()": {
        "notice": "Enable/Disable the Debt Token"
      },
      "totalSupply()": {
        "notice": "Return the total supply"
      },
      "updateInterestRate(uint256)": {
        "notice": "Update interest rate (APR)"
      },
      "updateMaxTotalSupply(uint256)": {
        "notice": "Update max total supply"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6563,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6566,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6617,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6448,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPool)8890"
      },
      {
        "astId": 6556,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10183,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "name",
        "offset": 0,
        "slot": "52",
        "type": "t_string_storage"
      },
      {
        "astId": 10186,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "symbol",
        "offset": 0,
        "slot": "53",
        "type": "t_string_storage"
      },
      {
        "astId": 10191,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "principalOf",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10196,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "debtIndexOf",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10199,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "maxTotalSupply",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 10202,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "totalSupply_",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 10205,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "lastTimestampAccrued",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 10209,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "debtIndex",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 10212,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "interestRate",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 10216,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "syntheticToken",
        "offset": 0,
        "slot": "61",
        "type": "t_contract(ISyntheticToken)9052"
      },
      {
        "astId": 10219,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "isActive",
        "offset": 20,
        "slot": "61",
        "type": "t_bool"
      },
      {
        "astId": 10222,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "decimals",
        "offset": 21,
        "slot": "61",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPool)8890": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(ISyntheticToken)9052": {
        "encoding": "inplace",
        "label": "contract ISyntheticToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}