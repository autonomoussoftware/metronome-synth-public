{
  "address": "0x9bF24739310FB7F79af48ECc38557E2172469EEE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AmountExceedsAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveFromTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BeneficiaryIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnFromTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollateralFactorTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollateralFactorTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollateralIsInexistent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DecimalsIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DecreasedAllowanceBelowZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositTokenIsInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackIsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsShutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewValueIsSameAsCurrent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFreeBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolAddressIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReceiveIsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RecipientIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotSmartFarmingManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SurpassMaxDepositSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SymbolIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnderlyingAssetIsNull",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposited",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "CollateralDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralFactor",
          "type": "uint256"
        }
      ],
      "name": "CollateralFactorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newActive",
          "type": "bool"
        }
      ],
      "name": "DepositTokenActiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue_",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf_",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_deposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "flashWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue_",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "underlying_",
          "type": "address"
        },
        {
          "internalType": "contract IPool",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "collateralFactor_",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "lockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lockedBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToDeposit_",
          "type": "uint256"
        }
      ],
      "name": "quoteDepositIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "quoteDepositOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountToDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToWithdraw_",
          "type": "uint256"
        }
      ],
      "name": "quoteWithdrawIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "quoteWithdrawOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountToWithdraw",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "unlockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_unlockedBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newCollateralFactor_",
          "type": "uint128"
        }
      ],
      "name": "updateCollateralFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "withdrawFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9290eac05a07f17d18f32b66b1467087cf52698b7267629e6fdf734fd41ef353",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x9bF24739310FB7F79af48ECc38557E2172469EEE",
    "transactionIndex": 47,
    "gasUsed": "2960910",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x80928859bae02d4df71feadb0ebb42c9b8dc6911a9426a1afebf9e4101b42daa",
    "transactionHash": "0x9290eac05a07f17d18f32b66b1467087cf52698b7267629e6fdf734fd41ef353",
    "logs": [],
    "blockNumber": 14104202,
    "cumulativeGasUsed": "7713598",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "05e4492217f7bda719dac100afeac118",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountExceedsAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeneficiaryIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralFactorTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralFactorTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralIsInexistent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecimalsIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecreasedAllowanceBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositTokenIsInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewValueIsSameAsCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFreeBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceiveIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RecipientIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotSmartFarmingManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SurpassMaxDepositSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SymbolIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnderlyingAssetIsNull\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralFactor\",\"type\":\"uint256\"}],\"name\":\"CollateralFactorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newActive\",\"type\":\"bool\"}],\"name\":\"DepositTokenActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf_\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"flashWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"contract IPool\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"collateralFactor_\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToDeposit_\",\"type\":\"uint256\"}],\"name\":\"quoteDepositIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"quoteDepositOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw_\",\"type\":\"uint256\"}],\"name\":\"quoteWithdrawIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"quoteWithdrawOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newCollateralFactor_\",\"type\":\"uint128\"}],\"name\":\"updateCollateralFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"updateMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,address)\":{\"params\":{\"amount_\":\"The amount of collateral tokens to deposit\",\"onBehalfOf_\":\"The account to deposit to\"},\"returns\":{\"_deposited\":\"The amount deposited after fees\"}},\"flashWithdraw(address,uint256)\":{\"params\":{\"account_\":\"The account where deposit token will be burnt from\",\"amount_\":\"The amount of collateral to withdraw\"},\"returns\":{\"_withdrawn\":\"The amount withdrawn after fees\"}},\"governor()\":{\"returns\":{\"_governor\":\"The governor\"}},\"lockedBalanceOf(address)\":{\"params\":{\"account_\":\"The account to check\"},\"returns\":{\"_lockedBalance\":\"The locked amount\"}},\"quoteDepositIn(uint256)\":{\"params\":{\"amountToDeposit_\":\"Collateral to deposit\"},\"returns\":{\"_amount\":\"Gross amount\",\"_fee\":\"Fee amount to collect\"}},\"quoteDepositOut(uint256)\":{\"params\":{\"amount_\":\"Gross amount\"},\"returns\":{\"_amountToDeposit\":\"Collateral to deposit\",\"_fee\":\"Fee amount to collect\"}},\"quoteWithdrawIn(uint256)\":{\"params\":{\"amountToWithdraw_\":\"Collateral to withdraw\"},\"returns\":{\"_amount\":\"Gross amount\",\"_fee\":\"Fee amount to collect\"}},\"quoteWithdrawOut(uint256)\":{\"params\":{\"amount_\":\"Gross amount\"},\"returns\":{\"_amountToWithdraw\":\"Collateral to withdraw\",\"_fee\":\"Fee amount to collect\"}},\"seize(address,address,uint256)\":{\"details\":\"Same as _transfer\",\"params\":{\"amount_\":\"The amount to seize\",\"from_\":\"The account to seize from\",\"to_\":\"The beneficiary account\"}},\"sweep(address,address,uint256)\":{\"params\":{\"amount_\":\"The amount to send\",\"to_\":\"The recipient of the transfer\",\"token_\":\"The token to transfer\"}},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"unlockedBalanceOf(address)\":{\"params\":{\"account_\":\"The account to check\"},\"returns\":{\"_unlockedBalance\":\"The amount that user can transfer or withdraw\"}},\"updateCollateralFactor(uint128)\":{\"params\":{\"newCollateralFactor_\":\"The new CF value\"}},\"updateMaxTotalSupply(uint256)\":{\"params\":{\"newMaxTotalSupply_\":\"The new max total supply\"}},\"withdraw(uint256,address)\":{\"params\":{\"amount_\":\"The amount of collateral to withdraw\",\"to_\":\"The account that will receive withdrawn collateral\"},\"returns\":{\"_withdrawn\":\"The amount withdrawn after fees\"}},\"withdrawFrom(address,uint256)\":{\"params\":{\"amount_\":\"The amount of collateral to withdraw\",\"from_\":\"The account to withdraw from\"},\"returns\":{\"_withdrawn\":\"The amount withdrawn after fees\"}}},\"title\":\"Represents the users' deposits\",\"version\":1},\"userdoc\":{\"events\":{\"CollateralDeposited(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when collateral is deposited\"},\"CollateralFactorUpdated(uint256,uint256)\":{\"notice\":\"Emitted when CF is updated\"},\"CollateralWithdrawn(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when collateral is withdrawn\"},\"DepositTokenActiveUpdated(bool)\":{\"notice\":\"Emitted when active flag is updated\"},\"MaxTotalSupplyUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max total supply is updated\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Set `amount` as the allowance of `spender` over the caller's tokens\"},\"collateralFactor()\":{\"notice\":\"Collateral factor for the deposit token\"},\"decimals()\":{\"notice\":\"The decimals of the token\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Atomically decrease the allowance granted to `spender` by the caller\"},\"deposit(uint256,address)\":{\"notice\":\"Deposit collateral and mint msdTOKEN (tokenized deposit position)\"},\"flashWithdraw(address,uint256)\":{\"notice\":\"Burn msdTOKEN, withdraw collateral and transfer to `msg.sender` (i.e. SmartFarmingManager)\"},\"governor()\":{\"notice\":\"Get the governor\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Atomically increase the allowance granted to `spender` by the caller\"},\"isActive()\":{\"notice\":\"If a collateral isn't active, it disables minting new tokens\"},\"lockedBalanceOf(address)\":{\"notice\":\"Get the locked balance\"},\"maxTotalSupply()\":{\"notice\":\"The supply cap (in USD)\"},\"name()\":{\"notice\":\"The name of the token\"},\"pool()\":{\"notice\":\"Pool contract\"},\"quoteDepositIn(uint256)\":{\"notice\":\"Quote gross `_amount` to deposit `amountToDeposit_` collateral\"},\"quoteDepositOut(uint256)\":{\"notice\":\"Quote collateral `_amountToDeposit` by using gross `amount_`\"},\"quoteWithdrawIn(uint256)\":{\"notice\":\"Quote gross `_amount` to withdraw `amountToWithdraw_` collateral\"},\"quoteWithdrawOut(uint256)\":{\"notice\":\"Quote collateral `_amountToWithdraw` by using gross `_amount`\"},\"seize(address,address,uint256)\":{\"notice\":\"Seize tokens\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"},\"symbol()\":{\"notice\":\"The symbol of the token\"},\"toggleIsActive()\":{\"notice\":\"Enable/Disable the Deposit Token\"},\"underlying()\":{\"notice\":\"Deposit underlying asset (e.g. MET)\"},\"unlockedBalanceOf(address)\":{\"notice\":\"Get the unlocked balance (i.e. transferable, withdrawable)\"},\"updateCollateralFactor(uint128)\":{\"notice\":\"Update collateral factor\"},\"updateMaxTotalSupply(uint256)\":{\"notice\":\"Update max total supply\"},\"withdraw(uint256,address)\":{\"notice\":\"Burn msdTOKEN and withdraw collateral\"},\"withdrawFrom(address,uint256)\":{\"notice\":\"Burn msdTOKEN and withdraw collateral from a given account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DepositToken.sol\":\"DepositToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/utils/math/Math.sol\\\";\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./utils/TokenHolder.sol\\\";\\nimport \\\"./access/Manageable.sol\\\";\\nimport \\\"./storage/DepositTokenStorage.sol\\\";\\n\\nerror CollateralIsInexistent();\\nerror DepositTokenIsInactive();\\nerror NotEnoughFreeBalance();\\nerror UnderlyingAssetIsNull();\\nerror PoolIsNull();\\nerror SymbolIsNull();\\nerror DecimalsIsNull();\\nerror CollateralFactorTooHigh();\\nerror CollateralFactorTooLow();\\nerror DecreasedAllowanceBelowZero();\\nerror AmountIsZero();\\nerror BeneficiaryIsNull();\\nerror AmountExceedsAllowance();\\nerror RecipientIsNull();\\nerror AmountIsInvalid();\\nerror ApproveFromTheZeroAddress();\\nerror ApproveToTheZeroAddress();\\nerror BurnFromTheZeroAddress();\\nerror BurnAmountExceedsBalance();\\nerror MintToTheZeroAddress();\\nerror SurpassMaxDepositSupply();\\nerror TransferFromTheZeroAddress();\\nerror TransferToTheZeroAddress();\\nerror TransferAmountExceedsBalance();\\nerror NewValueIsSameAsCurrent();\\nerror SenderIsNotSmartFarmingManager();\\n\\n/**\\n * @title Represents the users' deposits\\n */\\ncontract DepositToken is ReentrancyGuard, TokenHolder, Manageable, DepositTokenStorageV1 {\\n    using SafeERC20 for IERC20;\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    /// @notice Emitted when collateral is deposited\\n    event CollateralDeposited(\\n        address indexed from,\\n        address indexed account,\\n        uint256 amount,\\n        uint256 deposited,\\n        uint256 fee\\n    );\\n\\n    /// @notice Emitted when CF is updated\\n    event CollateralFactorUpdated(uint256 oldCollateralFactor, uint256 newCollateralFactor);\\n\\n    /// @notice Emitted when collateral is withdrawn\\n    event CollateralWithdrawn(\\n        address indexed account,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 withdrawn,\\n        uint256 fee\\n    );\\n\\n    /// @notice Emitted when active flag is updated\\n    event DepositTokenActiveUpdated(bool newActive);\\n\\n    /// @notice Emitted when max total supply is updated\\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupply, uint256 newMaxTotalSupply);\\n\\n    /**\\n     * @dev Throws if sender is SmartFarmingManager\\n     */\\n    modifier onlyIfSmartFarmingManager() {\\n        if (msg.sender != address(pool.smartFarmingManager())) revert SenderIsNotSmartFarmingManager();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if sender can't seize\\n     */\\n    modifier onlyIfCanSeize() {\\n        if (msg.sender != address(pool)) revert SenderIsNotPool();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if deposit token doesn't exist\\n     */\\n    modifier onlyIfDepositTokenExists() {\\n        if (!pool.doesDepositTokenExist(this)) revert CollateralIsInexistent();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if deposit token isn't enabled\\n     */\\n    modifier onlyIfDepositTokenIsActive() {\\n        if (!isActive) revert DepositTokenIsInactive();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Requires that amount is lower than the account's unlocked balance\\n     */\\n    modifier onlyIfUnlocked(address account_, uint256 amount_) {\\n        if (unlockedBalanceOf(account_) < amount_) revert NotEnoughFreeBalance();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update reward contracts' states\\n     * @dev Should be called before balance changes (i.e. mint/burn)\\n     */\\n    modifier updateRewardsBeforeMintOrBurn(address account_) {\\n        address[] memory _rewardsDistributors = pool.getRewardsDistributors();\\n        uint256 _length = _rewardsDistributors.length;\\n        for (uint256 i; i < _length; ++i) {\\n            IRewardsDistributor(_rewardsDistributors[i]).updateBeforeMintOrBurn(this, account_);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update reward contracts' states\\n     * @dev Should be called before balance changes (i.e. transfer)\\n     */\\n    modifier updateRewardsBeforeTransfer(address sender_, address recipient_) {\\n        address[] memory _rewardsDistributors = pool.getRewardsDistributors();\\n        uint256 _length = _rewardsDistributors.length;\\n        for (uint256 i; i < _length; ++i) {\\n            IRewardsDistributor(_rewardsDistributors[i]).updateBeforeTransfer(this, sender_, recipient_);\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        IERC20 underlying_,\\n        IPool pool_,\\n        string calldata name_,\\n        string calldata symbol_,\\n        uint8 decimals_,\\n        uint128 collateralFactor_,\\n        uint256 maxTotalSupply_\\n    ) external initializer {\\n        if (address(underlying_) == address(0)) revert UnderlyingAssetIsNull();\\n        if (address(pool_) == address(0)) revert PoolIsNull();\\n        if (bytes(symbol_).length == 0) revert SymbolIsNull();\\n        if (decimals_ == 0) revert DecimalsIsNull();\\n        if (collateralFactor_ == 0) revert CollateralFactorTooLow();\\n        if (collateralFactor_ >= 1e18) revert CollateralFactorTooHigh();\\n\\n        __ReentrancyGuard_init();\\n        __Manageable_init(pool_);\\n\\n        name = name_;\\n        symbol = symbol_;\\n        underlying = underlying_;\\n        isActive = true;\\n        decimals = decimals_;\\n        collateralFactor = collateralFactor_;\\n        maxTotalSupply = maxTotalSupply_;\\n    }\\n\\n    /**\\n     * @notice Set `amount` as the allowance of `spender` over the caller's tokens\\n     */\\n    function approve(address spender_, uint256 amount_) external override returns (bool) {\\n        _approve(msg.sender, spender_, amount_);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Atomically decrease the allowance granted to `spender` by the caller\\n     */\\n    function decreaseAllowance(address spender_, uint256 subtractedValue_) external returns (bool) {\\n        uint256 _currentAllowance = allowance[msg.sender][spender_];\\n        if (_currentAllowance < subtractedValue_) revert DecreasedAllowanceBelowZero();\\n        unchecked {\\n            _approve(msg.sender, spender_, _currentAllowance - subtractedValue_);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deposit collateral and mint msdTOKEN (tokenized deposit position)\\n     * @param amount_ The amount of collateral tokens to deposit\\n     * @param onBehalfOf_ The account to deposit to\\n     * @return _deposited The amount deposited after fees\\n     */\\n    function deposit(\\n        uint256 amount_,\\n        address onBehalfOf_\\n    ) external override whenNotPaused nonReentrant onlyIfDepositTokenExists returns (uint256 _deposited, uint256 _fee) {\\n        if (amount_ == 0) revert AmountIsZero();\\n        if (onBehalfOf_ == address(0)) revert BeneficiaryIsNull();\\n\\n        IPool _pool = pool;\\n        IERC20 _underlying = underlying;\\n\\n        address _treasury = address(_pool.treasury());\\n\\n        uint256 _balanceBefore = _underlying.balanceOf(_treasury);\\n        _underlying.safeTransferFrom(msg.sender, _treasury, amount_);\\n        amount_ = _underlying.balanceOf(_treasury) - _balanceBefore;\\n\\n        (_deposited, _fee) = quoteDepositOut(amount_);\\n        if (_fee > 0) {\\n            _mint(_pool.feeCollector(), _fee);\\n        }\\n\\n        _mint(onBehalfOf_, _deposited);\\n\\n        emit CollateralDeposited(msg.sender, onBehalfOf_, amount_, _deposited, _fee);\\n    }\\n\\n    /**\\n     * @notice Burn msdTOKEN, withdraw collateral and transfer to `msg.sender` (i.e. SmartFarmingManager)\\n     * @param account_ The account where deposit token will be burnt from\\n     * @param amount_ The amount of collateral to withdraw\\n     * @return _withdrawn The amount withdrawn after fees\\n     */\\n    function flashWithdraw(\\n        address account_,\\n        uint256 amount_\\n    ) external override onlyIfSmartFarmingManager returns (uint256 _withdrawn, uint256 _fee) {\\n        return _withdraw({account_: account_, amount_: amount_, to_: msg.sender});\\n    }\\n\\n    /**\\n     * @notice Atomically increase the allowance granted to `spender` by the caller\\n     */\\n    function increaseAllowance(address spender_, uint256 addedValue_) external returns (bool) {\\n        _approve(msg.sender, spender_, allowance[msg.sender][spender_] + addedValue_);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the locked balance\\n     * @param account_ The account to check\\n     * @return _lockedBalance The locked amount\\n     */\\n    function lockedBalanceOf(address account_) external view override returns (uint256 _lockedBalance) {\\n        unchecked {\\n            return balanceOf[account_] - unlockedBalanceOf(account_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Quote gross `_amount` to deposit `amountToDeposit_` collateral\\n     * @param amountToDeposit_ Collateral to deposit\\n     * @return _amount Gross amount\\n     * @return _fee Fee amount to collect\\n     */\\n    function quoteDepositIn(uint256 amountToDeposit_) external view override returns (uint256 _amount, uint256 _fee) {\\n        uint256 _depositFee = pool.feeProvider().depositFee();\\n        if (_depositFee == 0) {\\n            return (amountToDeposit_, _fee);\\n        }\\n\\n        _amount = amountToDeposit_.wadDiv(1e18 - _depositFee);\\n        _fee = _amount - amountToDeposit_;\\n    }\\n\\n    /**\\n     * @notice Quote collateral `_amountToDeposit` by using gross `amount_`\\n     * @param amount_ Gross amount\\n     * @return _amountToDeposit Collateral to deposit\\n     * @return _fee Fee amount to collect\\n     */\\n    function quoteDepositOut(uint256 amount_) public view override returns (uint256 _amountToDeposit, uint256 _fee) {\\n        uint256 _depositFee = pool.feeProvider().depositFee();\\n        if (_depositFee == 0) {\\n            return (amount_, _fee);\\n        }\\n\\n        _fee = amount_.wadMul(_depositFee);\\n        _amountToDeposit = amount_ - _fee;\\n    }\\n\\n    /**\\n     * @notice Quote gross `_amount` to withdraw `amountToWithdraw_` collateral\\n     * @param amountToWithdraw_ Collateral to withdraw\\n     * @return _amount Gross amount\\n     * @return _fee Fee amount to collect\\n     */\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view override returns (uint256 _amount, uint256 _fee) {\\n        uint256 _withdrawFee = pool.feeProvider().withdrawFee();\\n        if (_withdrawFee == 0) {\\n            return (amountToWithdraw_, _fee);\\n        }\\n\\n        _amount = amountToWithdraw_.wadDiv(1e18 - _withdrawFee);\\n        _fee = _amount - amountToWithdraw_;\\n    }\\n\\n    /**\\n     * @notice Quote collateral `_amountToWithdraw` by using gross `_amount`\\n     * @param amount_ Gross amount\\n     * @return _amountToWithdraw Collateral to withdraw\\n     * @return _fee Fee amount to collect\\n     */\\n    function quoteWithdrawOut(uint256 amount_) public view override returns (uint256 _amountToWithdraw, uint256 _fee) {\\n        uint256 _withdrawFee = pool.feeProvider().withdrawFee();\\n        if (_withdrawFee == 0) {\\n            return (amount_, _fee);\\n        }\\n\\n        _fee = amount_.wadMul(_withdrawFee);\\n        _amountToWithdraw = amount_ - _fee;\\n    }\\n\\n    /**\\n     * @notice Seize tokens\\n     * @dev Same as _transfer\\n     * @param from_ The account to seize from\\n     * @param to_ The beneficiary account\\n     * @param amount_ The amount to seize\\n     */\\n    function seize(address from_, address to_, uint256 amount_) external override onlyIfCanSeize {\\n        _transfer(from_, to_, amount_);\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transfer(\\n        address to_,\\n        uint256 amount_\\n    ) external override onlyIfUnlocked(msg.sender, amount_) returns (bool) {\\n        _transfer(msg.sender, to_, amount_);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transferFrom(\\n        address sender_,\\n        address recipient_,\\n        uint256 amount_\\n    ) external override nonReentrant onlyIfUnlocked(sender_, amount_) returns (bool) {\\n        uint256 _currentAllowance = allowance[sender_][msg.sender];\\n        if (_currentAllowance != type(uint256).max) {\\n            if (_currentAllowance < amount_) revert AmountExceedsAllowance();\\n            unchecked {\\n                _approve(sender_, msg.sender, _currentAllowance - amount_);\\n            }\\n        }\\n\\n        _transfer(sender_, recipient_, amount_);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the unlocked balance (i.e. transferable, withdrawable)\\n     * @param account_ The account to check\\n     * @return _unlockedBalance The amount that user can transfer or withdraw\\n     */\\n    function unlockedBalanceOf(address account_) public view override returns (uint256 _unlockedBalance) {\\n        IPool _pool = pool;\\n\\n        (, , uint256 _debtInUsd, , uint256 _issuableInUsd) = _pool.debtPositionOf(account_);\\n\\n        if (_debtInUsd == 0) {\\n            return balanceOf[account_];\\n        }\\n\\n        if (_issuableInUsd > 0) {\\n            _unlockedBalance = Math.min(\\n                balanceOf[account_],\\n                _pool.masterOracle().quoteUsdToToken(address(underlying), _issuableInUsd.wadDiv(collateralFactor))\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Burn msdTOKEN and withdraw collateral\\n     * @param amount_ The amount of collateral to withdraw\\n     * @param to_ The account that will receive withdrawn collateral\\n     * @return _withdrawn The amount withdrawn after fees\\n     */\\n    function withdraw(\\n        uint256 amount_,\\n        address to_\\n    ) external override onlyIfUnlocked(msg.sender, amount_) returns (uint256 _withdrawn, uint256 _fee) {\\n        if (to_ == address(0)) revert RecipientIsNull();\\n        return _withdraw({account_: msg.sender, amount_: amount_, to_: to_});\\n    }\\n\\n    /**\\n     * @notice Burn msdTOKEN and withdraw collateral from a given account\\n     * @param from_ The account to withdraw from\\n     * @param amount_ The amount of collateral to withdraw\\n     * @return _withdrawn The amount withdrawn after fees\\n     */\\n    function withdrawFrom(\\n        address from_,\\n        uint256 amount_\\n    )\\n        external\\n        override\\n        onlyIfSmartFarmingManager\\n        onlyIfUnlocked(from_, amount_)\\n        returns (uint256 _withdrawn, uint256 _fee)\\n    {\\n        return _withdraw({account_: from_, amount_: amount_, to_: msg.sender});\\n    }\\n\\n    /**\\n     * @notice Set `amount` as the allowance of `spender` over the caller's tokens\\n     */\\n    function _approve(address owner_, address spender_, uint256 amount_) private {\\n        if (owner_ == address(0)) revert ApproveFromTheZeroAddress();\\n        if (spender_ == address(0)) revert ApproveToTheZeroAddress();\\n\\n        allowance[owner_][spender_] = amount_;\\n        emit Approval(owner_, spender_, amount_);\\n    }\\n\\n    /**\\n     * @notice Destroy `amount` tokens from `account`, reducing the\\n     * total supply\\n     */\\n    function _burn(address _account, uint256 _amount) private updateRewardsBeforeMintOrBurn(_account) {\\n        if (_account == address(0)) revert BurnFromTheZeroAddress();\\n\\n        uint256 _balanceBefore = balanceOf[_account];\\n        if (_balanceBefore < _amount) revert BurnAmountExceedsBalance();\\n        uint256 _balanceAfter;\\n        unchecked {\\n            _balanceAfter = _balanceBefore - _amount;\\n            totalSupply -= _amount;\\n        }\\n\\n        balanceOf[_account] = _balanceAfter;\\n\\n        emit Transfer(_account, address(0), _amount);\\n\\n        // Remove this token from the deposit tokens list if the sender's balance goes to zero\\n        if (_amount > 0 && _balanceAfter == 0) {\\n            pool.removeFromDepositTokensOfAccount(_account);\\n        }\\n    }\\n\\n    /**\\n     * @notice Create `amount` tokens and assigns them to `account`, increasing\\n     * the total supply\\n     */\\n    function _mint(\\n        address account_,\\n        uint256 amount_\\n    ) private onlyIfDepositTokenIsActive updateRewardsBeforeMintOrBurn(account_) {\\n        if (account_ == address(0)) revert MintToTheZeroAddress();\\n\\n        totalSupply += amount_;\\n        if (totalSupply > maxTotalSupply) revert SurpassMaxDepositSupply();\\n\\n        uint256 _balanceBefore = balanceOf[account_];\\n        unchecked {\\n            balanceOf[account_] = _balanceBefore + amount_;\\n        }\\n\\n        emit Transfer(address(0), account_, amount_);\\n\\n        // Add this token to the deposit tokens list if the recipient is receiving it for the 1st time\\n        if (_balanceBefore == 0 && amount_ > 0) {\\n            pool.addToDepositTokensOfAccount(account_);\\n        }\\n    }\\n\\n    /// @inheritdoc TokenHolder\\n    // solhint-disable-next-line no-empty-blocks\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    /**\\n     * @notice Move `amount` of tokens from `sender` to `recipient`\\n     */\\n    function _transfer(\\n        address sender_,\\n        address recipient_,\\n        uint256 amount_\\n    ) private updateRewardsBeforeTransfer(sender_, recipient_) {\\n        if (sender_ == address(0)) revert TransferFromTheZeroAddress();\\n        if (recipient_ == address(0)) revert TransferToTheZeroAddress();\\n\\n        uint256 _senderBalanceBefore = balanceOf[sender_];\\n        if (_senderBalanceBefore < amount_) revert TransferAmountExceedsBalance();\\n        uint256 _recipientBalanceBefore = balanceOf[recipient_];\\n\\n        unchecked {\\n            balanceOf[sender_] = _senderBalanceBefore - amount_;\\n            balanceOf[recipient_] += amount_;\\n        }\\n\\n        emit Transfer(sender_, recipient_, amount_);\\n\\n        // Add this token to the deposit tokens list if the recipient is receiving it for the 1st time\\n        if (_recipientBalanceBefore == 0 && amount_ > 0) {\\n            pool.addToDepositTokensOfAccount(recipient_);\\n        }\\n\\n        // Remove this token from the deposit tokens list if the sender's balance goes to zero\\n        if (amount_ > 0 && balanceOf[sender_] == 0) {\\n            pool.removeFromDepositTokensOfAccount(sender_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Burn msdTOKEN, withdraw collateral and transfer to `msg.sender` (i.e. Pool)\\n     * @dev This function doesn't check if the amount is unlocked!\\n     * @param account_ The account where deposit token will be burnt from\\n     * @param amount_ The amount of collateral to withdraw\\n     * @param to_ The account that will receive withdrawn collateral\\n     * @return _withdrawn The amount withdrawn after fees\\n     */\\n    function _withdraw(\\n        address account_,\\n        uint256 amount_,\\n        address to_\\n    ) private whenNotShutdown nonReentrant onlyIfDepositTokenExists returns (uint256 _withdrawn, uint256 _fee) {\\n        if (amount_ == 0) revert AmountIsZero();\\n\\n        IPool _pool = pool;\\n\\n        (_withdrawn, _fee) = quoteWithdrawOut(amount_);\\n        if (_fee > 0) {\\n            _transfer(account_, _pool.feeCollector(), _fee);\\n        }\\n\\n        _burn(account_, _withdrawn);\\n        _pool.treasury().pull(to_, _withdrawn);\\n\\n        emit CollateralWithdrawn(account_, to_, amount_, _withdrawn, _fee);\\n    }\\n\\n    /**\\n     * @notice Enable/Disable the Deposit Token\\n     */\\n    function toggleIsActive() external override onlyGovernor {\\n        bool _newIsActive = !isActive;\\n        emit DepositTokenActiveUpdated(_newIsActive);\\n        isActive = _newIsActive;\\n    }\\n\\n    /**\\n     * @notice Update collateral factor\\n     * @param newCollateralFactor_ The new CF value\\n     */\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external override onlyGovernor {\\n        if (newCollateralFactor_ == 0) revert CollateralFactorTooLow();\\n        if (newCollateralFactor_ >= 1e18) revert CollateralFactorTooHigh();\\n        uint256 _currentCollateralFactor = collateralFactor;\\n        if (newCollateralFactor_ == _currentCollateralFactor) revert NewValueIsSameAsCurrent();\\n        emit CollateralFactorUpdated(_currentCollateralFactor, newCollateralFactor_);\\n        collateralFactor = newCollateralFactor_;\\n    }\\n\\n    /**\\n     * @notice Update max total supply\\n     * @param newMaxTotalSupply_ The new max total supply\\n     */\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external override onlyGovernor {\\n        uint256 _currentMaxTotalSupply = maxTotalSupply;\\n        if (newMaxTotalSupply_ == _currentMaxTotalSupply) revert NewValueIsSameAsCurrent();\\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupply, newMaxTotalSupply_);\\n        maxTotalSupply = newMaxTotalSupply_;\\n    }\\n}\\n\",\"keccak256\":\"0xc62e0ce451b1f51f8543b54807aa3236b3ebed14d738161bee0f3906ec5c0416\",\"license\":\"MIT\"},\"contracts/access/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\nimport \\\"../interfaces/IManageable.sol\\\";\\n\\nerror SenderIsNotPool();\\nerror SenderIsNotGovernor();\\nerror IsPaused();\\nerror IsShutdown();\\nerror PoolAddressIsNull();\\n\\n/**\\n * @title Reusable contract that handles accesses\\n */\\nabstract contract Manageable is IManageable, Initializable {\\n    /**\\n     * @notice Pool contract\\n     */\\n    IPool public pool;\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't the pool\\n     */\\n    modifier onlyPool() {\\n        if (msg.sender != address(pool)) revert SenderIsNotPool();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't the governor\\n     */\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor()) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is paused\\n     */\\n    modifier whenNotPaused() {\\n        if (pool.paused()) revert IsPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is shutdown\\n     */\\n    modifier whenNotShutdown() {\\n        if (pool.everythingStopped()) revert IsShutdown();\\n        _;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Manageable_init(IPool pool_) internal onlyInitializing {\\n        if (address(pool_) == address(0)) revert PoolAddressIsNull();\\n        pool = pool_;\\n    }\\n\\n    /**\\n     * @notice Get the governor\\n     * @return _governor The governor\\n     */\\n    function governor() public view returns (address _governor) {\\n        _governor = IGovernable(address(pool)).governor();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x95964544ea9b3a0799e14959d5cd1d33dbf8fd9463260d3bc33358c3945812b9\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/IOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../../../../openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCoreUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"keccak256\":\"0x22651924296f8308db8195d7a86a6781023241c53905418f2d3925e3f693f530\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../IOFTCoreUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the composable OFT core standard\\n */\\ninterface IComposableOFTCoreUpgradeable is IOFTCoreUpgradeable {\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function retryOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n\\n    event CallOFTReceivedFailure(\\n        uint16 indexed _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _from,\\n        address indexed _to,\\n        uint _amount,\\n        bytes _payload,\\n        bytes _reason\\n    );\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event RetryOFTReceivedSuccess(bytes32 _messageHash);\\n\\n    event NonContractAddress(address _address);\\n}\\n\",\"keccak256\":\"0x769b9356ad6019bdabdcfc11762f28d15eb9a4e262efc96835725f6862c5d9e9\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverUpgradeable {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x287036c704c57e34a6fc3f7e67c8dfaaade6eb3667b570576bc491c0f1f89a5b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStargateRouter.sol\\\";\\n\\ninterface IStargateComposer {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function factory() external view returns (address);\\n\\n    function stargateBridge() external view returns (address);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function peers(uint16 _chainId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdfdd1690bf176ac05803534a60227be90cc435b4bdd8fce2348f1a9417a9f63a\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe4d6bf9fa422e5e43dc1b6880f951d06611a4ed12c2dd7dd8c0b6a5d9e06ad0d\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function clearCachedSwap(uint16 _srcChainId, bytes calldata _srcAddress, uint256 _nonce) external;\\n\\n    function factory() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function cachedSwapLookup(\\n        uint16 _chainId_,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (address token, uint256 amountLD, address to, bytes memory payload);\\n}\\n\",\"keccak256\":\"0x92126df8e682b2c5647c7b22e7387da69f9e72480af86948ce5ed17dc2c9e0a7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICrossChainDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateRouter.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface ICrossChainDispatcher is IStargateReceiver, IOFTReceiverUpgradeable {\\n    function crossChainDispatcherOf(uint16 chainId_) external view returns (address);\\n\\n    function triggerFlashRepaySwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function triggerLeverageSwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function isBridgingActive() external view returns (bool);\\n\\n    function flashRepayCallbackTxGasLimit() external view returns (uint64);\\n\\n    function flashRepaySwapTxGasLimit() external view returns (uint64);\\n\\n    function leverageCallbackTxGasLimit() external view returns (uint64);\\n\\n    function leverageSwapTxGasLimit() external view returns (uint64);\\n\\n    function lzBaseGasLimit() external view returns (uint256);\\n\\n    function stargateComposer() external view returns (IStargateComposer);\\n\\n    function stargateSlippage() external view returns (uint256);\\n\\n    function stargatePoolIdOf(address token_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcaf05e625588dcfaa5706acc78a35fa46d50baeb2d28f689036963695a4e39cb\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address to_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xd2f04aa1bee06d6991b10aaf7c03c3ee09d85f8e48ba92feac595ad855881380\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralFactor() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function flashWithdraw(address account_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\\n\\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\\n\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function withdrawFrom(address from_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n}\\n\",\"keccak256\":\"0xb27092f9450d9c48c1a215925007ca9c7282cfe6cf257b34ab3dbe6e745b6bd1\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3b132b42090c167b2c0aef6d78d833c669c43b9e55593a7a21a96ed5d3082700\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\",\"keccak256\":\"0xac88e0997a26942cb9cbda1a7dd9756e28ba2025813e5b07e55939fbf8538ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IFeeProvider.sol\\\";\\nimport \\\"./ISmartFarmingManager.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function feeProvider() external view returns (IFeeProvider);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\\n\\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(\\n        address account_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeized_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _maxAmountToRepay);\\n\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view returns (uint256 _amountIn, uint256 _fee);\\n\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _fee);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _fee);\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function isSwapActive() external view returns (bool);\\n\\n    function smartFarmingManager() external view returns (ISmartFarmingManager);\\n}\\n\",\"keccak256\":\"0x0f0a869451cca858ba52b56970db167360fe161f2450557a053c4da938558816\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"./IQuoter.sol\\\";\\nimport \\\"./ICrossChainDispatcher.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function feeCollector() external view returns (address);\\n\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function quoter() external view returns (IQuoter);\\n\\n    function crossChainDispatcher() external view returns (ICrossChainDispatcher);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool _exists);\\n}\\n\",\"keccak256\":\"0x9ffa9e5fd39a48ac2bda561af7fb4fc9df5f8ffb7a602ef1d4da8c068019e723\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\\\";\\n\\ninterface IProxyOFT is IComposableOFTCoreUpgradeable {\\n    function getProxyOFTOf(uint16 chainId_) external view returns (address _proxyOFT);\\n}\\n\",\"keccak256\":\"0x4041a90eb60de460c9e1631aaedfbf2bff2275b3f91964800b1c774546931cd5\",\"license\":\"MIT\"},\"contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface IQuoter {\\n    function quoteCrossChainFlashRepayNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteCrossChainLeverageNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteLeverageCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function quoteFlashRepayCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function getFlashRepaySwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n\\n    function getLeverageSwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n}\\n\",\"keccak256\":\"0x1e4d2dd779a09dc8ea6b6c244b167deddca3a48e71b73bf940da04113b40c752\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external;\\n\\n    function claimable(address account_) external view returns (uint256 _claimable);\\n\\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\\n\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\\n\\n    function tokens(uint256) external view returns (IERC20);\\n\\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\\n\\n    function accountIndexOf(IERC20, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f527eeae61b6a5bff7d3b48037234ef718ae7f71dc452e8cab3b60581f0d810\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartFarmingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IManageable.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\n/**\\n * @notice SmartFarmingManager interface\\n */\\ninterface ISmartFarmingManager {\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    ) external returns (uint256 _withdrawn, uint256 _repaid);\\n\\n    function crossChainFlashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        IERC20 bridgeToken_,\\n        uint256 bridgeTokenAmountMin_,\\n        uint256 swapAmountOutMin_,\\n        uint256 repayAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 swapAmountOutMin_,\\n        uint256 depositAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverageCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _deposited);\\n\\n    function crossChainFlashRepayCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _repaid);\\n\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    ) external returns (uint256 _deposited, uint256 _issued);\\n}\\n\",\"keccak256\":\"0x7544a9d308a49e24d6984c3cfcfe2c1cfb7d9ce4655408438e1c12f37175a3b0\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/IProxyOFT.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateProxyOFT(IProxyOFT newProxyOFT_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function proxyOFT() external view returns (IProxyOFT);\\n}\\n\",\"keccak256\":\"0xfaeb24d1067e85493a5c8818d6de06fc6dbc72c37e85f82811990d0120f8a0cf\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x2f080adc5880151dc4446ef43b54abab8e3711c5f2e526917ef39a05e3c16a00\",\"license\":\"MIT\"},\"contracts/interfaces/external/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x75f04b225d0c310be7e0a09ee4c1aa6eeeb8d94e02fc0e4160a9597ce2d8d446\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/DepositTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IDepositToken.sol\\\";\\n\\nabstract contract DepositTokenStorageV1 is IDepositToken {\\n    /**\\n     * @dev The amount of tokens owned by `account`\\n     */\\n    mapping(address => uint256) public override balanceOf;\\n\\n    /**\\n     * @dev The remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}\\n     */\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    /**\\n     * @notice The name of the token\\n     */\\n    string public override name;\\n\\n    /**\\n     * @notice The symbol of the token\\n     */\\n    string public override symbol;\\n\\n    /**\\n     * @dev Amount of tokens in existence\\n     */\\n    uint256 public override totalSupply;\\n\\n    /**\\n     * @notice The supply cap (in USD)\\n     */\\n    uint256 public override maxTotalSupply;\\n\\n    /**\\n     * @notice Collateral factor for the deposit token\\n     * @dev Use 18 decimals (e.g. 0.66e18 = 66%)\\n     */\\n    uint256 public override collateralFactor;\\n\\n    /**\\n     * @notice Deposit underlying asset (e.g. MET)\\n     */\\n    IERC20 public override underlying;\\n\\n    /**\\n     * @notice If a collateral isn't active, it disables minting new tokens\\n     */\\n    bool public override isActive;\\n\\n    /**\\n     * @notice The decimals of the token\\n     */\\n    uint8 public override decimals;\\n}\\n\",\"keccak256\":\"0x6cd173fb2e92e0dea36f0d9c0c69576d90eff4d1c59b43b5b36ad3b2575259dc\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x3bf3c3de5a638ca101f25dfcaec5268e9c8a1c29a9a278d70be4459768fb41fe\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nerror FallbackIsNotAllowed();\\nerror ReceiveIsNotAllowed();\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert FallbackIsNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert ReceiveIsNotAllowed();\\n    }\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param token_ The token to transfer\\n     * @param to_ The recipient of the transfer\\n     * @param amount_ The amount to send\\n     */\\n    function sweep(IERC20 token_, address to_, uint256 amount_) external {\\n        _requireCanSweep();\\n\\n        if (address(token_) == address(0)) {\\n            Address.sendValue(payable(to_), amount_);\\n        } else {\\n            token_.safeTransfer(to_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     * @dev Usually requires the owner or governor as the caller\\n     */\\n    function _requireCanSweep() internal view virtual;\\n}\\n\",\"keccak256\":\"0x50e56ed45d496b188d90494d08122fe9621d9e6c8f655679ef334447801ea50d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b62000152565b6200002e60ff62000031565b50565b60008054610100900460ff1615620000ca578160ff1660011480156200006a575062000068306200014360201b62001ac81760201c565b155b620000c25760405162461bcd60e51b815260206004820152602e60248201526000805160206200357983398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001295760405162461bcd60e51b815260206004820152602e60248201526000805160206200357983398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000b9565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b61341780620001626000396000f3fe6080604052600436106101fc5760003560e01c80636f307dc31161010d578063a457c2d7116100a0578063d538a3031161006f578063d538a30314610613578063dd62ed3e14610633578063df011c411461066b578063ffa1ad7414610681578063ffc0e17e146106b25761021a565b8063a457c2d71461059e578063a9059cbb146105be578063b2a02ff1146105de578063d2593329146105fe5761021a565b8063857adc46116100dc578063857adc461461052957806385f1b90a146105495780639470b0bd1461056957806395d89b41146105895761021a565b80636f307dc31461049c57806370a08231146104bc57806382dbc795146104e957806384955c88146105095761021a565b806323b872dd11610190578063542778801161015f57806354277880146103fc578063593557361461041c57806362c067671461043c5780636dc2cd0e1461045c5780636e553f651461047c5761021a565b806323b872dd146103735780632ab4d05214610393578063313ce567146103a957806339509351146103dc5761021a565b806316f0115b116101cc57806316f0115b146102ec578063172f50a41461030c57806318160ddd1461032e57806322f3e2d4146103525761021a565b8062f714ce1461023357806306fdde031461026d578063095ea7b31461028f5780630c340a24146102bf5761021a565b3661021a57604051636436c22d60e11b815260040160405180910390fd5b60405163a0152e6360e01b815260040160405180910390fd5b34801561023f57600080fd5b5061025361024e366004612ddb565b6106d2565b604080519283526020830191909152015b60405180910390f35b34801561027957600080fd5b5061028261073f565b6040516102649190612e37565b34801561029b57600080fd5b506102af6102aa366004612e6a565b6107cd565b6040519015158152602001610264565b3480156102cb57600080fd5b506102d46107e4565b6040516001600160a01b039091168152602001610264565b3480156102f857600080fd5b506002546102d4906001600160a01b031681565b34801561031857600080fd5b5061032c610327366004612e96565b610866565b005b34801561033a57600080fd5b5061034460385481565b604051908152602001610264565b34801561035e57600080fd5b50603b546102af90600160a01b900460ff1681565b34801561037f57600080fd5b506102af61038e366004612eaf565b610902565b34801561039f57600080fd5b5061034460395481565b3480156103b557600080fd5b50603b546103ca90600160a81b900460ff1681565b60405160ff9091168152602001610264565b3480156103e857600080fd5b506102af6103f7366004612e6a565b6109d6565b34801561040857600080fd5b50610253610417366004612e96565b610a12565b34801561042857600080fd5b50610344610437366004612ef0565b610b39565b34801561044857600080fd5b5061032c610457366004612eaf565b610b67565b34801561046857600080fd5b50610253610477366004612e6a565b610ba0565b34801561048857600080fd5b50610253610497366004612ddb565b610c71565b3480156104a857600080fd5b50603b546102d4906001600160a01b031681565b3480156104c857600080fd5b506103446104d7366004612ef0565b60346020526000908152604090205481565b3480156104f557600080fd5b5061032c610504366004612f24565b6110bb565b34801561051557600080fd5b50610344610524366004612ef0565b6111c9565b34801561053557600080fd5b50610253610544366004612e96565b6113cd565b34801561055557600080fd5b50610253610564366004612e96565b611506565b34801561057557600080fd5b50610253610584366004612e6a565b6115c9565b34801561059557600080fd5b506102826116b9565b3480156105aa57600080fd5b506102af6105b9366004612e6a565b6116c6565b3480156105ca57600080fd5b506102af6105d9366004612e6a565b611722565b3480156105ea57600080fd5b5061032c6105f9366004612eaf565b611765565b34801561060a57600080fd5b5061032c61179b565b34801561061f57600080fd5b5061025361062e366004612e96565b611835565b34801561063f57600080fd5b5061034461064e366004612f3f565b603560209081526000928352604080842090915290825290205481565b34801561067757600080fd5b50610344603a5481565b34801561068d57600080fd5b50610282604051806040016040528060058152602001640312e332e360dc1b81525081565b3480156106be57600080fd5b5061032c6106cd366004612faf565b6118f8565b6000803384806106e1836111c9565b101561070057604051631af903f160e11b815260040160405180910390fd5b6001600160a01b03851661072757604051634c96446b60e01b815260040160405180910390fd5b610732338787611ad7565b9350935050509250929050565b6036805461074c90613075565b80601f016020809104026020016040519081016040528092919081815260200182805461077890613075565b80156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b505050505081565b60006107da338484611e35565b5060015b92915050565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b15801561082957600080fd5b505afa15801561083d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086191906130bb565b905090565b61086e6107e4565b6001600160a01b0316336001600160a01b03161461089f57604051634b98449160e11b815260040160405180910390fd5b603954818114156108c357604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603955565b6000600260015414156109305760405162461bcd60e51b8152600401610927906130d8565b60405180910390fd5b6002600155838280610941836111c9565b101561096057604051631af903f160e11b815260040160405180910390fd5b6001600160a01b038616600090815260356020908152604080832033845290915290205460001981146109bb57848110156109ae576040516303814af160e61b815260040160405180910390fd5b6109bb8733878403611e35565b6109c6878787611ee4565b5050600180805595945050505050565b3360008181526035602090815260408083206001600160a01b038716845290915281205490916107da918590610a0d908690613125565b611e35565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6557600080fd5b505afa158015610a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9d91906130bb565b6001600160a01b03166367a527936040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad557600080fd5b505afa158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d919061313d565b905080610b1b575091929050565b610b258482612211565b9150610b318285613156565b925050915091565b6000610b44826111c9565b6001600160a01b0390921660009081526034602052604090205491909103919050565b610b6f612264565b6001600160a01b038316610b8c57610b87828261229f565b505050565b610b876001600160a01b03841683836123b8565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166396aaccfe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf157600080fd5b505afa158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2991906130bb565b6001600160a01b0316336001600160a01b031614610c5a57604051630935fed760e11b815260040160405180910390fd5b610c65848433611ad7565b915091505b9250929050565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc257600080fd5b505afa158015610cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfa919061317d565b15610d1857604051631309a56360e01b815260040160405180910390fd5b60026001541415610d3b5760405162461bcd60e51b8152600401610927906130d8565b6002600181905554604051633e25dee160e21b81523060048201526001600160a01b039091169063f8977b849060240160206040518083038186803b158015610d8357600080fd5b505afa158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb919061317d565b610dd857604051630620bddd60e21b815260040160405180910390fd5b83610df6576040516310eb483f60e21b815260040160405180910390fd5b6001600160a01b038316610e1d5760405163639c77e360e01b815260040160405180910390fd5b600254603b54604080516361d027b360e01b815290516001600160a01b03938416939092169160009184916361d027b391600480820192602092909190829003018186803b158015610e6e57600080fd5b505afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea691906130bb565b6040516370a0823160e01b81526001600160a01b0380831660048301529192506000918416906370a082319060240160206040518083038186803b158015610eed57600080fd5b505afa158015610f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f25919061313d565b9050610f3c6001600160a01b03841633848b61241b565b6040516370a0823160e01b81526001600160a01b0383811660048301528291908516906370a082319060240160206040518083038186803b158015610f8057600080fd5b505afa158015610f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb8919061313d565b610fc29190613156565b9750610fcd88610a12565b9096509450841561105257611052846001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561101457600080fd5b505afa158015611028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104c91906130bb565b86612459565b61105c8787612459565b60408051898152602081018890529081018690526001600160a01b0388169033907f7e387d4929067a5275d9dee7be89865d22cdc9d73f817ad152814a729ba6755e9060600160405180910390a3505060018055509194909350915050565b6110c36107e4565b6001600160a01b0316336001600160a01b0316146110f457604051634b98449160e11b815260040160405180910390fd5b6001600160801b03811661111b576040516311e151d160e31b815260040160405180910390fd5b670de0b6b3a7640000816001600160801b03161061114c57604051639479a57160e01b815260040160405180910390fd5b603a546001600160801b03821681141561117957604051630333a68160e41b815260040160405180910390fd5b604080518281526001600160801b03841660208201527f3b24ab397256b6bca0533c0889430820655a41fa639e1868bcc25404634d6024910160405180910390a1506001600160801b0316603a55565b60025460405163dde3ab9560e01b81526001600160a01b038381166004830152600092169082908190839063dde3ab959060240160a06040518083038186803b15801561121557600080fd5b505afa158015611229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d9190613198565b94505093505050816000141561127c57505050506001600160a01b031660009081526034602052604090205490565b80156113c5576113c260346000876001600160a01b03166001600160a01b0316815260200190815260200160002054846001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b1580156112e457600080fd5b505afa1580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c91906130bb565b603b54603a546001600160a01b039283169263b5e9bef59216906113419087906126e0565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b15801561138557600080fd5b505afa158015611399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bd919061313d565b612700565b93505b505050919050565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561142057600080fd5b505afa158015611434573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145891906130bb565b6001600160a01b03166367a527936040518163ffffffff1660e01b815260040160206040518083038186803b15801561149057600080fd5b505afa1580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c8919061313d565b9050806114d6575091929050565b6114f26114eb82670de0b6b3a7640000613156565b85906126e0565b92506114fe8484613156565b915050915091565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561155957600080fd5b505afa15801561156d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159191906130bb565b6001600160a01b031663e941fa786040518163ffffffff1660e01b815260040160206040518083038186803b15801561149057600080fd5b600080600260009054906101000a90046001600160a01b03166001600160a01b03166396aaccfe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561161a57600080fd5b505afa15801561162e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165291906130bb565b6001600160a01b0316336001600160a01b03161461168357604051630935fed760e11b815260040160405180910390fd5b83838061168f836111c9565b10156116ae57604051631af903f160e11b815260040160405180910390fd5b610732868633611ad7565b6037805461074c90613075565b3360009081526035602090815260408083206001600160a01b03861684529091528120548281101561170b5760405163189dd6af60e31b815260040160405180910390fd5b6117183385858403611e35565b5060019392505050565b6000338280611730836111c9565b101561174f57604051631af903f160e11b815260040160405180910390fd5b61175a338686611ee4565b506001949350505050565b6002546001600160a01b031633146117905760405163531f2aa960e11b815260040160405180910390fd5b610b87838383611ee4565b6117a36107e4565b6001600160a01b0316336001600160a01b0316146117d457604051634b98449160e11b815260040160405180910390fd5b603b54604051600160a01b90910460ff1615808252907fb2f86f872205a47e0890262c11c93dba2270b3f079ada3dbe9cb6f755f4ddc9f9060200160405180910390a1603b8054911515600160a01b0260ff60a01b19909216919091179055565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561188857600080fd5b505afa15801561189c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c091906130bb565b6001600160a01b031663e941fa786040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad557600080fd5b60006119046001612716565b9050801561191c576000805461ff0019166101001790555b6001600160a01b038a1661194357604051630d63ca0f60e41b815260040160405180910390fd5b6001600160a01b03891661196a57604051633cb1fb1f60e11b815260040160405180910390fd5b84611988576040516330507cff60e11b815260040160405180910390fd5b60ff84166119a957604051634dc4784160e11b815260040160405180910390fd5b6001600160801b0383166119d0576040516311e151d160e31b815260040160405180910390fd5b670de0b6b3a7640000836001600160801b031610611a0157604051639479a57160e01b815260040160405180910390fd5b611a096127a3565b611a12896127d2565b611a1e60368989612d2a565b50611a2b60378787612d2a565b50603b805460ff8616600160a81b0260ff60a81b196001600160a81b03199092166001600160a01b038e1617600160a01b17919091161790556001600160801b038316603a5560398290558015611abc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b6001600160a01b03163b151590565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b158015611b2857600080fd5b505afa158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b60919061317d565b15611b7e57604051631b0e923f60e11b815260040160405180910390fd5b60026001541415611ba15760405162461bcd60e51b8152600401610927906130d8565b6002600181905554604051633e25dee160e21b81523060048201526001600160a01b039091169063f8977b849060240160206040518083038186803b158015611be957600080fd5b505afa158015611bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c21919061317d565b611c3e57604051630620bddd60e21b815260040160405180910390fd5b83611c5c576040516310eb483f60e21b815260040160405180910390fd5b6002546001600160a01b0316611c7185611835565b90935091508115611cf757611cf786826001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cb957600080fd5b505afa158015611ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf191906130bb565b84611ee4565b611d018684612842565b806001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3a57600080fd5b505afa158015611d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7291906130bb565b60405163f2d5d56b60e01b81526001600160a01b03868116600483015260248201869052919091169063f2d5d56b90604401600060405180830381600087803b158015611dbe57600080fd5b505af1158015611dd2573d6000803e3d6000fd5b505060408051888152602081018790529081018590526001600160a01b038088169350891691507f900e8de8e8718a6bde86415bf9b8c70e1a4f744314eaef5c60b0705a271035d69060600160405180910390a350600180559094909350915050565b6001600160a01b038316611e5c576040516356fdae6560e11b815260040160405180910390fd5b6001600160a01b038216611e835760405163b2fa1ef360e01b815260040160405180910390fd5b6001600160a01b0383811660008181526035602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b82826000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611f3657600080fd5b505afa158015611f4a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f7291908101906131f5565b805190915060005b8181101561201a57828181518110611f9457611f946132ba565b602090810291909101015160405163058bd91d60e51b81523060048201526001600160a01b03878116602483015286811660448301529091169063b17b23a090606401600060405180830381600087803b158015611ff157600080fd5b505af1158015612005573d6000803e3d6000fd5b5050505080612013906132d0565b9050611f7a565b506001600160a01b03871661204257604051630240531760e41b815260040160405180910390fd5b6001600160a01b0386166120695760405163671d1add60e11b815260040160405180910390fd5b6001600160a01b038716600090815260346020526040902054858110156120a357604051635dd58b8b60e01b815260040160405180910390fd5b6001600160a01b0387811660008181526034602090815260408083208054958e168085528285208d890390559385905280548c019055518a81527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3801580156121165750600087115b1561217b57600254604051633f5fc13160e01b81526001600160a01b038a8116600483015290911690633f5fc13190602401600060405180830381600087803b15801561216257600080fd5b505af1158015612176573d6000803e3d6000fd5b505050505b6000871180156121a157506001600160a01b038916600090815260346020526040902054155b1561220657600254604051630275038d60e41b81526001600160a01b038b811660048301529091169063275038d090602401600060405180830381600087803b1580156121ed57600080fd5b505af1158015612201573d6000803e3d6000fd5b505050505b505050505050505050565b600082158061221e575081155b1561222b575060006107de565b670de0b6b3a764000061223f6002826132eb565b612249848661330d565b6122539190613125565b61225d91906132eb565b9392505050565b61226c6107e4565b6001600160a01b0316336001600160a01b03161461229d57604051634b98449160e11b815260040160405180910390fd5b565b804710156122ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610927565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461233c576040519150601f19603f3d011682016040523d82523d6000602084013e612341565b606091505b5050905080610b875760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610927565b6040516001600160a01b038316602482015260448101829052610b8790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612aaa565b6040516001600160a01b03808516602483015283166044820152606481018290526124539085906323b872dd60e01b906084016123e4565b50505050565b603b54600160a01b900460ff1661248357604051631b9245b960e11b815260040160405180910390fd5b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156124d457600080fd5b505afa1580156124e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261251091908101906131f5565b805190915060005b818110156125af57828181518110612532576125326132ba565b6020908102919091010151604051626cc3c360e61b81523060048201526001600160a01b03868116602483015290911690631b30f0c090604401600060405180830381600087803b15801561258657600080fd5b505af115801561259a573d6000803e3d6000fd5b50505050806125a8906132d0565b9050612518565b506001600160a01b0385166125d75760405163c96c2a0b60e01b815260040160405180910390fd5b83603860008282546125e99190613125565b9091555050603954603854111561261357604051639cad93a160e01b815260040160405180910390fd5b6001600160a01b038516600081815260346020908152604080832080548981019091559051888152909392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3801580156126785750600085115b156126d857600254604051633f5fc13160e01b81526001600160a01b03888116600483015290911690633f5fc13190602401600060405180830381600087803b1580156126c457600080fd5b505af1158015611abc573d6000803e3d6000fd5b505050505050565b6000816126ee6002826132eb565b612249670de0b6b3a76400008661330d565b600081831061270f578161225d565b5090919050565b60008054610100900460ff161561275d578160ff1660011480156127395750303b155b6127555760405162461bcd60e51b81526004016109279061332c565b506000919050565b60005460ff8084169116106127845760405162461bcd60e51b81526004016109279061332c565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166127ca5760405162461bcd60e51b81526004016109279061337a565b61229d612b7c565b600054610100900460ff166127f95760405162461bcd60e51b81526004016109279061337a565b6001600160a01b0381166128205760405163724f500960e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561289357600080fd5b505afa1580156128a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128cf91908101906131f5565b805190915060005b8181101561296e578281815181106128f1576128f16132ba565b6020908102919091010151604051626cc3c360e61b81523060048201526001600160a01b03868116602483015290911690631b30f0c090604401600060405180830381600087803b15801561294557600080fd5b505af1158015612959573d6000803e3d6000fd5b5050505080612967906132d0565b90506128d7565b506001600160a01b038516612996576040516304fca6bd60e41b815260040160405180910390fd5b6001600160a01b038516600090815260346020526040902054848110156129d057604051630bba337f60e11b815260040160405180910390fd5b6038805486900390556001600160a01b03861660008181526034602090815260408083208986039081905590518981529093917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3600086118015612a3c575080155b15612aa157600254604051630275038d60e41b81526001600160a01b0389811660048301529091169063275038d090602401600060405180830381600087803b158015612a8857600080fd5b505af1158015612a9c573d6000803e3d6000fd5b505050505b50505050505050565b6000612aff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ba99092919063ffffffff16565b805190915015610b875780806020019051810190612b1d919061317d565b610b875760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610927565b600054610100900460ff16612ba35760405162461bcd60e51b81526004016109279061337a565b60018055565b6060612bb88484600085612bc0565b949350505050565b606082471015612c215760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610927565b6001600160a01b0385163b612c785760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610927565b600080866001600160a01b03168587604051612c9491906133c5565b60006040518083038185875af1925050503d8060008114612cd1576040519150601f19603f3d011682016040523d82523d6000602084013e612cd6565b606091505b5091509150612ce6828286612cf1565b979650505050505050565b60608315612d0057508161225d565b825115612d105782518084602001fd5b8160405162461bcd60e51b81526004016109279190612e37565b828054612d3690613075565b90600052602060002090601f016020900481019282612d585760008555612d9e565b82601f10612d715782800160ff19823516178555612d9e565b82800160010185558215612d9e579182015b82811115612d9e578235825591602001919060010190612d83565b50612daa929150612dae565b5090565b5b80821115612daa5760008155600101612daf565b6001600160a01b0381168114612dd857600080fd5b50565b60008060408385031215612dee57600080fd5b823591506020830135612e0081612dc3565b809150509250929050565b60005b83811015612e26578181015183820152602001612e0e565b838111156124535750506000910152565b6020815260008251806020840152612e56816040850160208701612e0b565b601f01601f19169190910160400192915050565b60008060408385031215612e7d57600080fd5b8235612e8881612dc3565b946020939093013593505050565b600060208284031215612ea857600080fd5b5035919050565b600080600060608486031215612ec457600080fd5b8335612ecf81612dc3565b92506020840135612edf81612dc3565b929592945050506040919091013590565b600060208284031215612f0257600080fd5b813561225d81612dc3565b80356001600160801b038116811461279e57600080fd5b600060208284031215612f3657600080fd5b61225d82612f0d565b60008060408385031215612f5257600080fd5b8235612f5d81612dc3565b91506020830135612e0081612dc3565b60008083601f840112612f7f57600080fd5b50813567ffffffffffffffff811115612f9757600080fd5b602083019150836020828501011115610c6a57600080fd5b600080600080600080600080600060e08a8c031215612fcd57600080fd5b8935612fd881612dc3565b985060208a0135612fe881612dc3565b975060408a013567ffffffffffffffff8082111561300557600080fd5b6130118d838e01612f6d565b909950975060608c013591508082111561302a57600080fd5b506130378c828d01612f6d565b90965094505060808a013560ff8116811461305157600080fd5b925061305f60a08b01612f0d565b915060c08a013590509295985092959850929598565b600181811c9082168061308957607f821691505b602082108114156130aa57634e487b7160e01b600052602260045260246000fd5b50919050565b805161279e81612dc3565b6000602082840312156130cd57600080fd5b815161225d81612dc3565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156131385761313861310f565b500190565b60006020828403121561314f57600080fd5b5051919050565b6000828210156131685761316861310f565b500390565b8051801515811461279e57600080fd5b60006020828403121561318f57600080fd5b61225d8261316d565b600080600080600060a086880312156131b057600080fd5b6131b98661316d565b602087015160408801516060890151608090990151929a91995097965090945092505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561320857600080fd5b825167ffffffffffffffff8082111561322057600080fd5b818501915085601f83011261323457600080fd5b815181811115613246576132466131df565b8060051b604051601f19603f8301168101818110858211171561326b5761326b6131df565b60405291825284820192508381018501918883111561328957600080fd5b938501935b828510156132ae5761329f856130b0565b8452938501939285019261328e565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156132e4576132e461310f565b5060010190565b60008261330857634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156133275761332761310f565b500290565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082516133d7818460208701612e0b565b919091019291505056fea2646970667358221220220d4af35ed7dfd75e28d9d25e2ce4bae30f5ad6d0110edcde2adea4693efbc264736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x6080604052600436106101fc5760003560e01c80636f307dc31161010d578063a457c2d7116100a0578063d538a3031161006f578063d538a30314610613578063dd62ed3e14610633578063df011c411461066b578063ffa1ad7414610681578063ffc0e17e146106b25761021a565b8063a457c2d71461059e578063a9059cbb146105be578063b2a02ff1146105de578063d2593329146105fe5761021a565b8063857adc46116100dc578063857adc461461052957806385f1b90a146105495780639470b0bd1461056957806395d89b41146105895761021a565b80636f307dc31461049c57806370a08231146104bc57806382dbc795146104e957806384955c88146105095761021a565b806323b872dd11610190578063542778801161015f57806354277880146103fc578063593557361461041c57806362c067671461043c5780636dc2cd0e1461045c5780636e553f651461047c5761021a565b806323b872dd146103735780632ab4d05214610393578063313ce567146103a957806339509351146103dc5761021a565b806316f0115b116101cc57806316f0115b146102ec578063172f50a41461030c57806318160ddd1461032e57806322f3e2d4146103525761021a565b8062f714ce1461023357806306fdde031461026d578063095ea7b31461028f5780630c340a24146102bf5761021a565b3661021a57604051636436c22d60e11b815260040160405180910390fd5b60405163a0152e6360e01b815260040160405180910390fd5b34801561023f57600080fd5b5061025361024e366004612ddb565b6106d2565b604080519283526020830191909152015b60405180910390f35b34801561027957600080fd5b5061028261073f565b6040516102649190612e37565b34801561029b57600080fd5b506102af6102aa366004612e6a565b6107cd565b6040519015158152602001610264565b3480156102cb57600080fd5b506102d46107e4565b6040516001600160a01b039091168152602001610264565b3480156102f857600080fd5b506002546102d4906001600160a01b031681565b34801561031857600080fd5b5061032c610327366004612e96565b610866565b005b34801561033a57600080fd5b5061034460385481565b604051908152602001610264565b34801561035e57600080fd5b50603b546102af90600160a01b900460ff1681565b34801561037f57600080fd5b506102af61038e366004612eaf565b610902565b34801561039f57600080fd5b5061034460395481565b3480156103b557600080fd5b50603b546103ca90600160a81b900460ff1681565b60405160ff9091168152602001610264565b3480156103e857600080fd5b506102af6103f7366004612e6a565b6109d6565b34801561040857600080fd5b50610253610417366004612e96565b610a12565b34801561042857600080fd5b50610344610437366004612ef0565b610b39565b34801561044857600080fd5b5061032c610457366004612eaf565b610b67565b34801561046857600080fd5b50610253610477366004612e6a565b610ba0565b34801561048857600080fd5b50610253610497366004612ddb565b610c71565b3480156104a857600080fd5b50603b546102d4906001600160a01b031681565b3480156104c857600080fd5b506103446104d7366004612ef0565b60346020526000908152604090205481565b3480156104f557600080fd5b5061032c610504366004612f24565b6110bb565b34801561051557600080fd5b50610344610524366004612ef0565b6111c9565b34801561053557600080fd5b50610253610544366004612e96565b6113cd565b34801561055557600080fd5b50610253610564366004612e96565b611506565b34801561057557600080fd5b50610253610584366004612e6a565b6115c9565b34801561059557600080fd5b506102826116b9565b3480156105aa57600080fd5b506102af6105b9366004612e6a565b6116c6565b3480156105ca57600080fd5b506102af6105d9366004612e6a565b611722565b3480156105ea57600080fd5b5061032c6105f9366004612eaf565b611765565b34801561060a57600080fd5b5061032c61179b565b34801561061f57600080fd5b5061025361062e366004612e96565b611835565b34801561063f57600080fd5b5061034461064e366004612f3f565b603560209081526000928352604080842090915290825290205481565b34801561067757600080fd5b50610344603a5481565b34801561068d57600080fd5b50610282604051806040016040528060058152602001640312e332e360dc1b81525081565b3480156106be57600080fd5b5061032c6106cd366004612faf565b6118f8565b6000803384806106e1836111c9565b101561070057604051631af903f160e11b815260040160405180910390fd5b6001600160a01b03851661072757604051634c96446b60e01b815260040160405180910390fd5b610732338787611ad7565b9350935050509250929050565b6036805461074c90613075565b80601f016020809104026020016040519081016040528092919081815260200182805461077890613075565b80156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b505050505081565b60006107da338484611e35565b5060015b92915050565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b15801561082957600080fd5b505afa15801561083d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086191906130bb565b905090565b61086e6107e4565b6001600160a01b0316336001600160a01b03161461089f57604051634b98449160e11b815260040160405180910390fd5b603954818114156108c357604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603955565b6000600260015414156109305760405162461bcd60e51b8152600401610927906130d8565b60405180910390fd5b6002600155838280610941836111c9565b101561096057604051631af903f160e11b815260040160405180910390fd5b6001600160a01b038616600090815260356020908152604080832033845290915290205460001981146109bb57848110156109ae576040516303814af160e61b815260040160405180910390fd5b6109bb8733878403611e35565b6109c6878787611ee4565b5050600180805595945050505050565b3360008181526035602090815260408083206001600160a01b038716845290915281205490916107da918590610a0d908690613125565b611e35565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6557600080fd5b505afa158015610a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9d91906130bb565b6001600160a01b03166367a527936040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad557600080fd5b505afa158015610ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0d919061313d565b905080610b1b575091929050565b610b258482612211565b9150610b318285613156565b925050915091565b6000610b44826111c9565b6001600160a01b0390921660009081526034602052604090205491909103919050565b610b6f612264565b6001600160a01b038316610b8c57610b87828261229f565b505050565b610b876001600160a01b03841683836123b8565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166396aaccfe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf157600080fd5b505afa158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2991906130bb565b6001600160a01b0316336001600160a01b031614610c5a57604051630935fed760e11b815260040160405180910390fd5b610c65848433611ad7565b915091505b9250929050565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc257600080fd5b505afa158015610cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfa919061317d565b15610d1857604051631309a56360e01b815260040160405180910390fd5b60026001541415610d3b5760405162461bcd60e51b8152600401610927906130d8565b6002600181905554604051633e25dee160e21b81523060048201526001600160a01b039091169063f8977b849060240160206040518083038186803b158015610d8357600080fd5b505afa158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb919061317d565b610dd857604051630620bddd60e21b815260040160405180910390fd5b83610df6576040516310eb483f60e21b815260040160405180910390fd5b6001600160a01b038316610e1d5760405163639c77e360e01b815260040160405180910390fd5b600254603b54604080516361d027b360e01b815290516001600160a01b03938416939092169160009184916361d027b391600480820192602092909190829003018186803b158015610e6e57600080fd5b505afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea691906130bb565b6040516370a0823160e01b81526001600160a01b0380831660048301529192506000918416906370a082319060240160206040518083038186803b158015610eed57600080fd5b505afa158015610f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f25919061313d565b9050610f3c6001600160a01b03841633848b61241b565b6040516370a0823160e01b81526001600160a01b0383811660048301528291908516906370a082319060240160206040518083038186803b158015610f8057600080fd5b505afa158015610f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb8919061313d565b610fc29190613156565b9750610fcd88610a12565b9096509450841561105257611052846001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561101457600080fd5b505afa158015611028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104c91906130bb565b86612459565b61105c8787612459565b60408051898152602081018890529081018690526001600160a01b0388169033907f7e387d4929067a5275d9dee7be89865d22cdc9d73f817ad152814a729ba6755e9060600160405180910390a3505060018055509194909350915050565b6110c36107e4565b6001600160a01b0316336001600160a01b0316146110f457604051634b98449160e11b815260040160405180910390fd5b6001600160801b03811661111b576040516311e151d160e31b815260040160405180910390fd5b670de0b6b3a7640000816001600160801b03161061114c57604051639479a57160e01b815260040160405180910390fd5b603a546001600160801b03821681141561117957604051630333a68160e41b815260040160405180910390fd5b604080518281526001600160801b03841660208201527f3b24ab397256b6bca0533c0889430820655a41fa639e1868bcc25404634d6024910160405180910390a1506001600160801b0316603a55565b60025460405163dde3ab9560e01b81526001600160a01b038381166004830152600092169082908190839063dde3ab959060240160a06040518083038186803b15801561121557600080fd5b505afa158015611229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d9190613198565b94505093505050816000141561127c57505050506001600160a01b031660009081526034602052604090205490565b80156113c5576113c260346000876001600160a01b03166001600160a01b0316815260200190815260200160002054846001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b1580156112e457600080fd5b505afa1580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c91906130bb565b603b54603a546001600160a01b039283169263b5e9bef59216906113419087906126e0565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b15801561138557600080fd5b505afa158015611399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bd919061313d565b612700565b93505b505050919050565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561142057600080fd5b505afa158015611434573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145891906130bb565b6001600160a01b03166367a527936040518163ffffffff1660e01b815260040160206040518083038186803b15801561149057600080fd5b505afa1580156114a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c8919061313d565b9050806114d6575091929050565b6114f26114eb82670de0b6b3a7640000613156565b85906126e0565b92506114fe8484613156565b915050915091565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561155957600080fd5b505afa15801561156d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159191906130bb565b6001600160a01b031663e941fa786040518163ffffffff1660e01b815260040160206040518083038186803b15801561149057600080fd5b600080600260009054906101000a90046001600160a01b03166001600160a01b03166396aaccfe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561161a57600080fd5b505afa15801561162e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165291906130bb565b6001600160a01b0316336001600160a01b03161461168357604051630935fed760e11b815260040160405180910390fd5b83838061168f836111c9565b10156116ae57604051631af903f160e11b815260040160405180910390fd5b610732868633611ad7565b6037805461074c90613075565b3360009081526035602090815260408083206001600160a01b03861684529091528120548281101561170b5760405163189dd6af60e31b815260040160405180910390fd5b6117183385858403611e35565b5060019392505050565b6000338280611730836111c9565b101561174f57604051631af903f160e11b815260040160405180910390fd5b61175a338686611ee4565b506001949350505050565b6002546001600160a01b031633146117905760405163531f2aa960e11b815260040160405180910390fd5b610b87838383611ee4565b6117a36107e4565b6001600160a01b0316336001600160a01b0316146117d457604051634b98449160e11b815260040160405180910390fd5b603b54604051600160a01b90910460ff1615808252907fb2f86f872205a47e0890262c11c93dba2270b3f079ada3dbe9cb6f755f4ddc9f9060200160405180910390a1603b8054911515600160a01b0260ff60a01b19909216919091179055565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561188857600080fd5b505afa15801561189c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c091906130bb565b6001600160a01b031663e941fa786040518163ffffffff1660e01b815260040160206040518083038186803b158015610ad557600080fd5b60006119046001612716565b9050801561191c576000805461ff0019166101001790555b6001600160a01b038a1661194357604051630d63ca0f60e41b815260040160405180910390fd5b6001600160a01b03891661196a57604051633cb1fb1f60e11b815260040160405180910390fd5b84611988576040516330507cff60e11b815260040160405180910390fd5b60ff84166119a957604051634dc4784160e11b815260040160405180910390fd5b6001600160801b0383166119d0576040516311e151d160e31b815260040160405180910390fd5b670de0b6b3a7640000836001600160801b031610611a0157604051639479a57160e01b815260040160405180910390fd5b611a096127a3565b611a12896127d2565b611a1e60368989612d2a565b50611a2b60378787612d2a565b50603b805460ff8616600160a81b0260ff60a81b196001600160a81b03199092166001600160a01b038e1617600160a01b17919091161790556001600160801b038316603a5560398290558015611abc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b6001600160a01b03163b151590565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b158015611b2857600080fd5b505afa158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b60919061317d565b15611b7e57604051631b0e923f60e11b815260040160405180910390fd5b60026001541415611ba15760405162461bcd60e51b8152600401610927906130d8565b6002600181905554604051633e25dee160e21b81523060048201526001600160a01b039091169063f8977b849060240160206040518083038186803b158015611be957600080fd5b505afa158015611bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c21919061317d565b611c3e57604051630620bddd60e21b815260040160405180910390fd5b83611c5c576040516310eb483f60e21b815260040160405180910390fd5b6002546001600160a01b0316611c7185611835565b90935091508115611cf757611cf786826001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cb957600080fd5b505afa158015611ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf191906130bb565b84611ee4565b611d018684612842565b806001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3a57600080fd5b505afa158015611d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7291906130bb565b60405163f2d5d56b60e01b81526001600160a01b03868116600483015260248201869052919091169063f2d5d56b90604401600060405180830381600087803b158015611dbe57600080fd5b505af1158015611dd2573d6000803e3d6000fd5b505060408051888152602081018790529081018590526001600160a01b038088169350891691507f900e8de8e8718a6bde86415bf9b8c70e1a4f744314eaef5c60b0705a271035d69060600160405180910390a350600180559094909350915050565b6001600160a01b038316611e5c576040516356fdae6560e11b815260040160405180910390fd5b6001600160a01b038216611e835760405163b2fa1ef360e01b815260040160405180910390fd5b6001600160a01b0383811660008181526035602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b82826000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611f3657600080fd5b505afa158015611f4a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f7291908101906131f5565b805190915060005b8181101561201a57828181518110611f9457611f946132ba565b602090810291909101015160405163058bd91d60e51b81523060048201526001600160a01b03878116602483015286811660448301529091169063b17b23a090606401600060405180830381600087803b158015611ff157600080fd5b505af1158015612005573d6000803e3d6000fd5b5050505080612013906132d0565b9050611f7a565b506001600160a01b03871661204257604051630240531760e41b815260040160405180910390fd5b6001600160a01b0386166120695760405163671d1add60e11b815260040160405180910390fd5b6001600160a01b038716600090815260346020526040902054858110156120a357604051635dd58b8b60e01b815260040160405180910390fd5b6001600160a01b0387811660008181526034602090815260408083208054958e168085528285208d890390559385905280548c019055518a81527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3801580156121165750600087115b1561217b57600254604051633f5fc13160e01b81526001600160a01b038a8116600483015290911690633f5fc13190602401600060405180830381600087803b15801561216257600080fd5b505af1158015612176573d6000803e3d6000fd5b505050505b6000871180156121a157506001600160a01b038916600090815260346020526040902054155b1561220657600254604051630275038d60e41b81526001600160a01b038b811660048301529091169063275038d090602401600060405180830381600087803b1580156121ed57600080fd5b505af1158015612201573d6000803e3d6000fd5b505050505b505050505050505050565b600082158061221e575081155b1561222b575060006107de565b670de0b6b3a764000061223f6002826132eb565b612249848661330d565b6122539190613125565b61225d91906132eb565b9392505050565b61226c6107e4565b6001600160a01b0316336001600160a01b03161461229d57604051634b98449160e11b815260040160405180910390fd5b565b804710156122ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610927565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461233c576040519150601f19603f3d011682016040523d82523d6000602084013e612341565b606091505b5050905080610b875760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610927565b6040516001600160a01b038316602482015260448101829052610b8790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612aaa565b6040516001600160a01b03808516602483015283166044820152606481018290526124539085906323b872dd60e01b906084016123e4565b50505050565b603b54600160a01b900460ff1661248357604051631b9245b960e11b815260040160405180910390fd5b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156124d457600080fd5b505afa1580156124e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261251091908101906131f5565b805190915060005b818110156125af57828181518110612532576125326132ba565b6020908102919091010151604051626cc3c360e61b81523060048201526001600160a01b03868116602483015290911690631b30f0c090604401600060405180830381600087803b15801561258657600080fd5b505af115801561259a573d6000803e3d6000fd5b50505050806125a8906132d0565b9050612518565b506001600160a01b0385166125d75760405163c96c2a0b60e01b815260040160405180910390fd5b83603860008282546125e99190613125565b9091555050603954603854111561261357604051639cad93a160e01b815260040160405180910390fd5b6001600160a01b038516600081815260346020908152604080832080548981019091559051888152909392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3801580156126785750600085115b156126d857600254604051633f5fc13160e01b81526001600160a01b03888116600483015290911690633f5fc13190602401600060405180830381600087803b1580156126c457600080fd5b505af1158015611abc573d6000803e3d6000fd5b505050505050565b6000816126ee6002826132eb565b612249670de0b6b3a76400008661330d565b600081831061270f578161225d565b5090919050565b60008054610100900460ff161561275d578160ff1660011480156127395750303b155b6127555760405162461bcd60e51b81526004016109279061332c565b506000919050565b60005460ff8084169116106127845760405162461bcd60e51b81526004016109279061332c565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166127ca5760405162461bcd60e51b81526004016109279061337a565b61229d612b7c565b600054610100900460ff166127f95760405162461bcd60e51b81526004016109279061337a565b6001600160a01b0381166128205760405163724f500960e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561289357600080fd5b505afa1580156128a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128cf91908101906131f5565b805190915060005b8181101561296e578281815181106128f1576128f16132ba565b6020908102919091010151604051626cc3c360e61b81523060048201526001600160a01b03868116602483015290911690631b30f0c090604401600060405180830381600087803b15801561294557600080fd5b505af1158015612959573d6000803e3d6000fd5b5050505080612967906132d0565b90506128d7565b506001600160a01b038516612996576040516304fca6bd60e41b815260040160405180910390fd5b6001600160a01b038516600090815260346020526040902054848110156129d057604051630bba337f60e11b815260040160405180910390fd5b6038805486900390556001600160a01b03861660008181526034602090815260408083208986039081905590518981529093917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3600086118015612a3c575080155b15612aa157600254604051630275038d60e41b81526001600160a01b0389811660048301529091169063275038d090602401600060405180830381600087803b158015612a8857600080fd5b505af1158015612a9c573d6000803e3d6000fd5b505050505b50505050505050565b6000612aff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ba99092919063ffffffff16565b805190915015610b875780806020019051810190612b1d919061317d565b610b875760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610927565b600054610100900460ff16612ba35760405162461bcd60e51b81526004016109279061337a565b60018055565b6060612bb88484600085612bc0565b949350505050565b606082471015612c215760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610927565b6001600160a01b0385163b612c785760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610927565b600080866001600160a01b03168587604051612c9491906133c5565b60006040518083038185875af1925050503d8060008114612cd1576040519150601f19603f3d011682016040523d82523d6000602084013e612cd6565b606091505b5091509150612ce6828286612cf1565b979650505050505050565b60608315612d0057508161225d565b825115612d105782518084602001fd5b8160405162461bcd60e51b81526004016109279190612e37565b828054612d3690613075565b90600052602060002090601f016020900481019282612d585760008555612d9e565b82601f10612d715782800160ff19823516178555612d9e565b82800160010185558215612d9e579182015b82811115612d9e578235825591602001919060010190612d83565b50612daa929150612dae565b5090565b5b80821115612daa5760008155600101612daf565b6001600160a01b0381168114612dd857600080fd5b50565b60008060408385031215612dee57600080fd5b823591506020830135612e0081612dc3565b809150509250929050565b60005b83811015612e26578181015183820152602001612e0e565b838111156124535750506000910152565b6020815260008251806020840152612e56816040850160208701612e0b565b601f01601f19169190910160400192915050565b60008060408385031215612e7d57600080fd5b8235612e8881612dc3565b946020939093013593505050565b600060208284031215612ea857600080fd5b5035919050565b600080600060608486031215612ec457600080fd5b8335612ecf81612dc3565b92506020840135612edf81612dc3565b929592945050506040919091013590565b600060208284031215612f0257600080fd5b813561225d81612dc3565b80356001600160801b038116811461279e57600080fd5b600060208284031215612f3657600080fd5b61225d82612f0d565b60008060408385031215612f5257600080fd5b8235612f5d81612dc3565b91506020830135612e0081612dc3565b60008083601f840112612f7f57600080fd5b50813567ffffffffffffffff811115612f9757600080fd5b602083019150836020828501011115610c6a57600080fd5b600080600080600080600080600060e08a8c031215612fcd57600080fd5b8935612fd881612dc3565b985060208a0135612fe881612dc3565b975060408a013567ffffffffffffffff8082111561300557600080fd5b6130118d838e01612f6d565b909950975060608c013591508082111561302a57600080fd5b506130378c828d01612f6d565b90965094505060808a013560ff8116811461305157600080fd5b925061305f60a08b01612f0d565b915060c08a013590509295985092959850929598565b600181811c9082168061308957607f821691505b602082108114156130aa57634e487b7160e01b600052602260045260246000fd5b50919050565b805161279e81612dc3565b6000602082840312156130cd57600080fd5b815161225d81612dc3565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156131385761313861310f565b500190565b60006020828403121561314f57600080fd5b5051919050565b6000828210156131685761316861310f565b500390565b8051801515811461279e57600080fd5b60006020828403121561318f57600080fd5b61225d8261316d565b600080600080600060a086880312156131b057600080fd5b6131b98661316d565b602087015160408801516060890151608090990151929a91995097965090945092505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561320857600080fd5b825167ffffffffffffffff8082111561322057600080fd5b818501915085601f83011261323457600080fd5b815181811115613246576132466131df565b8060051b604051601f19603f8301168101818110858211171561326b5761326b6131df565b60405291825284820192508381018501918883111561328957600080fd5b938501935b828510156132ae5761329f856130b0565b8452938501939285019261328e565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156132e4576132e461310f565b5060010190565b60008261330857634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156133275761332761310f565b500290565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082516133d7818460208701612e0b565b919091019291505056fea2646970667358221220220d4af35ed7dfd75e28d9d25e2ce4bae30f5ad6d0110edcde2adea4693efbc264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,address)": {
        "params": {
          "amount_": "The amount of collateral tokens to deposit",
          "onBehalfOf_": "The account to deposit to"
        },
        "returns": {
          "_deposited": "The amount deposited after fees"
        }
      },
      "flashWithdraw(address,uint256)": {
        "params": {
          "account_": "The account where deposit token will be burnt from",
          "amount_": "The amount of collateral to withdraw"
        },
        "returns": {
          "_withdrawn": "The amount withdrawn after fees"
        }
      },
      "governor()": {
        "returns": {
          "_governor": "The governor"
        }
      },
      "lockedBalanceOf(address)": {
        "params": {
          "account_": "The account to check"
        },
        "returns": {
          "_lockedBalance": "The locked amount"
        }
      },
      "quoteDepositIn(uint256)": {
        "params": {
          "amountToDeposit_": "Collateral to deposit"
        },
        "returns": {
          "_amount": "Gross amount",
          "_fee": "Fee amount to collect"
        }
      },
      "quoteDepositOut(uint256)": {
        "params": {
          "amount_": "Gross amount"
        },
        "returns": {
          "_amountToDeposit": "Collateral to deposit",
          "_fee": "Fee amount to collect"
        }
      },
      "quoteWithdrawIn(uint256)": {
        "params": {
          "amountToWithdraw_": "Collateral to withdraw"
        },
        "returns": {
          "_amount": "Gross amount",
          "_fee": "Fee amount to collect"
        }
      },
      "quoteWithdrawOut(uint256)": {
        "params": {
          "amount_": "Gross amount"
        },
        "returns": {
          "_amountToWithdraw": "Collateral to withdraw",
          "_fee": "Fee amount to collect"
        }
      },
      "seize(address,address,uint256)": {
        "details": "Same as _transfer",
        "params": {
          "amount_": "The amount to seize",
          "from_": "The account to seize from",
          "to_": "The beneficiary account"
        }
      },
      "sweep(address,address,uint256)": {
        "params": {
          "amount_": "The amount to send",
          "to_": "The recipient of the transfer",
          "token_": "The token to transfer"
        }
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "unlockedBalanceOf(address)": {
        "params": {
          "account_": "The account to check"
        },
        "returns": {
          "_unlockedBalance": "The amount that user can transfer or withdraw"
        }
      },
      "updateCollateralFactor(uint128)": {
        "params": {
          "newCollateralFactor_": "The new CF value"
        }
      },
      "updateMaxTotalSupply(uint256)": {
        "params": {
          "newMaxTotalSupply_": "The new max total supply"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "amount_": "The amount of collateral to withdraw",
          "to_": "The account that will receive withdrawn collateral"
        },
        "returns": {
          "_withdrawn": "The amount withdrawn after fees"
        }
      },
      "withdrawFrom(address,uint256)": {
        "params": {
          "amount_": "The amount of collateral to withdraw",
          "from_": "The account to withdraw from"
        },
        "returns": {
          "_withdrawn": "The amount withdrawn after fees"
        }
      }
    },
    "title": "Represents the users' deposits",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CollateralDeposited(address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when collateral is deposited"
      },
      "CollateralFactorUpdated(uint256,uint256)": {
        "notice": "Emitted when CF is updated"
      },
      "CollateralWithdrawn(address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when collateral is withdrawn"
      },
      "DepositTokenActiveUpdated(bool)": {
        "notice": "Emitted when active flag is updated"
      },
      "MaxTotalSupplyUpdated(uint256,uint256)": {
        "notice": "Emitted when max total supply is updated"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Set `amount` as the allowance of `spender` over the caller's tokens"
      },
      "collateralFactor()": {
        "notice": "Collateral factor for the deposit token"
      },
      "decimals()": {
        "notice": "The decimals of the token"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Atomically decrease the allowance granted to `spender` by the caller"
      },
      "deposit(uint256,address)": {
        "notice": "Deposit collateral and mint msdTOKEN (tokenized deposit position)"
      },
      "flashWithdraw(address,uint256)": {
        "notice": "Burn msdTOKEN, withdraw collateral and transfer to `msg.sender` (i.e. SmartFarmingManager)"
      },
      "governor()": {
        "notice": "Get the governor"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Atomically increase the allowance granted to `spender` by the caller"
      },
      "isActive()": {
        "notice": "If a collateral isn't active, it disables minting new tokens"
      },
      "lockedBalanceOf(address)": {
        "notice": "Get the locked balance"
      },
      "maxTotalSupply()": {
        "notice": "The supply cap (in USD)"
      },
      "name()": {
        "notice": "The name of the token"
      },
      "pool()": {
        "notice": "Pool contract"
      },
      "quoteDepositIn(uint256)": {
        "notice": "Quote gross `_amount` to deposit `amountToDeposit_` collateral"
      },
      "quoteDepositOut(uint256)": {
        "notice": "Quote collateral `_amountToDeposit` by using gross `amount_`"
      },
      "quoteWithdrawIn(uint256)": {
        "notice": "Quote gross `_amount` to withdraw `amountToWithdraw_` collateral"
      },
      "quoteWithdrawOut(uint256)": {
        "notice": "Quote collateral `_amountToWithdraw` by using gross `_amount`"
      },
      "seize(address,address,uint256)": {
        "notice": "Seize tokens"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      },
      "symbol()": {
        "notice": "The symbol of the token"
      },
      "toggleIsActive()": {
        "notice": "Enable/Disable the Deposit Token"
      },
      "underlying()": {
        "notice": "Deposit underlying asset (e.g. MET)"
      },
      "unlockedBalanceOf(address)": {
        "notice": "Get the unlocked balance (i.e. transferable, withdrawable)"
      },
      "updateCollateralFactor(uint128)": {
        "notice": "Update collateral factor"
      },
      "updateMaxTotalSupply(uint256)": {
        "notice": "Update max total supply"
      },
      "withdraw(uint256,address)": {
        "notice": "Burn msdTOKEN and withdraw collateral"
      },
      "withdrawFrom(address,uint256)": {
        "notice": "Burn msdTOKEN and withdraw collateral from a given account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19718,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 19721,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 33546,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 14219,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPool)27868"
      },
      {
        "astId": 14321,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 30914,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "balanceOf",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 30922,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "allowance",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 30926,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 30930,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 30934,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 30938,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "maxTotalSupply",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 30942,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "collateralFactor",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 30947,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "underlying",
        "offset": 0,
        "slot": "59",
        "type": "t_contract(IERC20)21889"
      },
      {
        "astId": 30951,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "isActive",
        "offset": 20,
        "slot": "59",
        "type": "t_bool"
      },
      {
        "astId": 30955,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "decimals",
        "offset": 21,
        "slot": "59",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)21889": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)27868": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}