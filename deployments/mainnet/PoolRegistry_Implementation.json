{
  "address": "0xbaf4eAED7CC1Cbb3d6f2f3B89493dbb9764E8B44",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IMasterOracle",
          "name": "oldOracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IMasterOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "MasterOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolUnregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Shutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "everythingStopped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "masterOracle_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeCollector_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterOracle",
      "outputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "poolExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "registerPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposedGovernor_",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "unregisterPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeCollector_",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle_",
          "type": "address"
        }
      ],
      "name": "updateMasterOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x19e4399a5839274074fb5103815022dd33177f42f813a2d6b3fd011c47c94607",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xbaf4eAED7CC1Cbb3d6f2f3B89493dbb9764E8B44",
    "transactionIndex": 1,
    "gasUsed": "1429794",
    "logsBloom": "0x
    "blockHash": "0x79030380639b872b0adafbaf7211f43fa8d6795df67577a4d88fdf0f2bcae485",
    "transactionHash": "0x19e4399a5839274074fb5103815022dd33177f42f813a2d6b3fd011c47c94607",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 15695976,
        "transactionHash": "0x19e4399a5839274074fb5103815022dd33177f42f813a2d6b3fd011c47c94607",
        "address": "0xbaf4eAED7CC1Cbb3d6f2f3B89493dbb9764E8B44",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000076d266dfd3754f090488ae12f6bd115cd7e77ebd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x79030380639b872b0adafbaf7211f43fa8d6795df67577a4d88fdf0f2bcae485"
      }
    ],
    "blockNumber": 15695976,
    "cumulativeGasUsed": "1450794",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8f9ac8ece838b75cf20cef638b1903fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IMasterOracle\",\"name\":\"oldOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IMasterOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"MasterOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everythingStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"masterOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeCollector_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterOracle\",\"outputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"poolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedGovernor_\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"unregisterPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeCollector_\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle_\",\"type\":\"address\"}],\"name\":\"updateMasterOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"getPools()\":{\"details\":\"WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees.\"},\"open()\":{\"details\":\"Open contract operations, if contract is in shutdown state\"},\"pause()\":{\"details\":\"Pause contract operations, if contract is not paused.\"},\"poolExists(address)\":{\"params\":{\"pool_\":\"Pool to check\"},\"returns\":{\"_0\":\"true if exists\"}},\"shutdown()\":{\"details\":\"Shutdown contract operations, if not already shutdown.\"},\"sweep(address,address,uint256)\":{\"params\":{\"amount_\":\"The amount to send\",\"to_\":\"The recipient of the transfer\",\"token_\":\"The token to transfer\"}},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause contract operations, allow only if contract is paused and not shutdown.\"}},\"title\":\"PoolRegistry contract\",\"version\":1},\"userdoc\":{\"events\":{\"FeeCollectorUpdated(address,address)\":{\"notice\":\"Emitted when fee collector is updated\"},\"MasterOracleUpdated(address,address)\":{\"notice\":\"Emitted when master oracle contract is updated\"},\"Open(address)\":{\"notice\":\"Emitted when contract is turned on\"},\"Paused(address)\":{\"notice\":\"Emitted when contract is paused\"},\"PoolRegistered(address)\":{\"notice\":\"Emitted when a pool is registered\"},\"PoolUnregistered(address)\":{\"notice\":\"Emitted when a pool is unregistered\"},\"Shutdown(address)\":{\"notice\":\"Emitted when contract is shuted down\"},\"Unpaused(address)\":{\"notice\":\"Emitted when contract is unpaused\"}},\"kind\":\"user\",\"methods\":{\"everythingStopped()\":{\"notice\":\"Return `true` if contract is shutdown\"},\"feeCollector()\":{\"notice\":\"Fee collector address\"},\"getPools()\":{\"notice\":\"Get all pools\"},\"masterOracle()\":{\"notice\":\"Prices oracle\"},\"paused()\":{\"notice\":\"Return `true` if contract is paused\"},\"poolExists(address)\":{\"notice\":\"Check if pool is registered\"},\"registerPool(address)\":{\"notice\":\"Register pool\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"},\"unregisterPool(address)\":{\"notice\":\"Unregister pool\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateMasterOracle(address)\":{\"notice\":\"Update master oracle contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolRegistry.sol\":\"PoolRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./storage/PoolRegistryStorage.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./utils/Pauseable.sol\\\";\\n\\n/**\\n * @title PoolRegistry contract\\n */\\ncontract PoolRegistry is ReentrancyGuard, Pauseable, PoolRegistryStorageV1 {\\n    using WadRayMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    /// @notice Emitted when fee collector is updated\\n    event FeeCollectorUpdated(address indexed oldFeeCollector, address indexed newFeeCollector);\\n\\n    /// @notice Emitted when master oracle contract is updated\\n    event MasterOracleUpdated(IMasterOracle indexed oldOracle, IMasterOracle indexed newOracle);\\n\\n    /// @notice Emitted when a pool is registered\\n    event PoolRegistered(address pool);\\n\\n    /// @notice Emitted when a pool is unregistered\\n    event PoolUnregistered(address pool);\\n\\n    function initialize(IMasterOracle masterOracle_, address feeCollector_) external initializer {\\n        require(address(masterOracle_) != address(0), \\\"oracle-is-null\\\");\\n        require(feeCollector_ != address(0), \\\"fee-collector-is-null\\\");\\n\\n        __ReentrancyGuard_init();\\n        __Pauseable_init();\\n\\n        masterOracle = masterOracle_;\\n        feeCollector = feeCollector_;\\n    }\\n\\n    /**\\n     * @notice Get all pools\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getPools() external view returns (address[] memory) {\\n        return pools.values();\\n    }\\n\\n    /**\\n     * @notice Check if pool is registered\\n     * @param pool_ Pool to check\\n     * @return true if exists\\n     */\\n    function poolExists(address pool_) external view returns (bool) {\\n        return pools.contains(pool_);\\n    }\\n\\n    /**\\n     * @notice Register pool\\n     */\\n    function registerPool(address pool_) external onlyGovernor {\\n        require(pool_ != address(0), \\\"address-is-null\\\");\\n        require(pools.add(pool_), \\\"already-registered\\\");\\n        emit PoolRegistered(pool_);\\n    }\\n\\n    /**\\n     * @notice Unregister pool\\n     */\\n    function unregisterPool(address pool_) external onlyGovernor {\\n        require(pools.remove(pool_), \\\"not-registered\\\");\\n        emit PoolUnregistered(pool_);\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     */\\n    function updateFeeCollector(address newFeeCollector_) external onlyGovernor {\\n        require(newFeeCollector_ != address(0), \\\"fee-collector-is-null\\\");\\n        address _currentFeeCollector = feeCollector;\\n        require(newFeeCollector_ != _currentFeeCollector, \\\"new-same-as-current\\\");\\n        emit FeeCollectorUpdated(_currentFeeCollector, newFeeCollector_);\\n        feeCollector = newFeeCollector_;\\n    }\\n\\n    /**\\n     * @notice Update master oracle contract\\n     */\\n    function updateMasterOracle(IMasterOracle newMasterOracle_) external override onlyGovernor {\\n        require(address(newMasterOracle_) != address(0), \\\"address-is-null\\\");\\n        IMasterOracle _currentMasterOracle = masterOracle;\\n        require(newMasterOracle_ != _currentMasterOracle, \\\"new-same-as-current\\\");\\n        emit MasterOracleUpdated(_currentMasterOracle, newMasterOracle_);\\n        masterOracle = newMasterOracle_;\\n    }\\n}\\n\",\"keccak256\":\"0x44cec45e8637bd07933c2eb7128eab5bba7a3f1f22d30be3678a077ae2148be7\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/TokenHolder.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, TokenHolder, Initializable {\\n    address public governor;\\n    address public proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        governor = msg.sender;\\n        emit UpdatedGovernor(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal initializer {\\n        governor = msg.sender;\\n        emit UpdatedGovernor(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == msg.sender, \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address proposedGovernor_) external onlyGovernor {\\n        require(proposedGovernor_ != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = proposedGovernor_;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        address _proposedGovernor = proposedGovernor;\\n        require(_proposedGovernor == msg.sender, \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, _proposedGovernor);\\n        governor = _proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x557549bc506017c76858c8cc1b72a0297628bf873c3afe05a710c30c1085e5e7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xc790f8419ee2c68721d6203ed1b5f81e89eb7e1dca19be3a9f54cb5de44491f1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0x180688649a756828572d3efa734666c8d3ea9b0e980260b9e4b827520c6dba55\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralizationRatio() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external;\\n\\n    function withdraw(uint256 amount_, address to_) external;\\n\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    function updateCollateralizationRatio(uint128 newCollateralizationRatio_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0xf52bfa4257a00a71fa591b948127115837257485aa3d8f833135323961756a3f\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable {\\n    function debtFloorInUsd() external returns (uint256);\\n\\n    function depositFee() external returns (uint256);\\n\\n    function issueFee() external returns (uint256);\\n\\n    function withdrawFee() external returns (uint256);\\n\\n    function repayFee() external returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isSyntheticTokenExists(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function isDebtTokenExists(IDebtToken debtToken_) external view returns (bool);\\n\\n    function isDepositTokenExists(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(address account_)\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function addDebtToken(IDebtToken debtToken_) external;\\n\\n    function removeDebtToken(IDebtToken debtToken_) external;\\n\\n    function addDepositToken(address depositToken_) external;\\n\\n    function removeDepositToken(IDepositToken depositToken_) external;\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external;\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut);\\n\\n    function updateSwapFee(uint256 newSwapFee_) external;\\n\\n    function updateDebtFloor(uint256 newDebtFloorInUsd_) external;\\n\\n    function updateDepositFee(uint256 newDepositFee_) external;\\n\\n    function updateIssueFee(uint256 newIssueFee_) external;\\n\\n    function updateWithdrawFee(uint256 newWithdrawFee_) external;\\n\\n    function updateRepayFee(uint256 newRepayFee_) external;\\n\\n    function updateLiquidatorLiquidationFee(uint128 newLiquidatorLiquidationFee_) external;\\n\\n    function updateProtocolLiquidationFee(uint128 newProtocolLiquidationFee_) external;\\n\\n    function updateMaxLiquidable(uint256 newMaxLiquidable_) external;\\n\\n    function updateTreasury(ITreasury newTreasury_) external;\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function addRewardsDistributor(IRewardsDistributor distributor_) external;\\n\\n    function toggleIsSwapActive() external;\\n}\\n\",\"keccak256\":\"0x37aee2641c9e13119b557ffd6720d317ed90436037ba7f6a8fc8cd35a9e2a905\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function poolExists(address pool_) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateMasterOracle(IMasterOracle newOracle_) external;\\n}\\n\",\"keccak256\":\"0x958edd140ecfbe458bfd7f1505f4c1c3f3359adfe1ab6a8f200455f67d159330\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(\\n        IERC20 token_,\\n        address from_,\\n        address to_\\n    ) external;\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n}\\n\",\"keccak256\":\"0xc47213c524b56177843ef6c1b5ba0e4f5dc211eadf77a0b66ed666c0b39aa9c2\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function toggleIsActive() external;\\n\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0x27e7644e788023b54410e27735bf7ffab768df1469d5aff0e0a65e1108830978\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(\\n        address _assetIn,\\n        address _assetOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x711e4ad224403589238cd425781689ac98afc42314a2e6a5a2ac4c6ed5bfa273\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/PoolRegistryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/external/IMasterOracle.sol\\\";\\n\\nabstract contract PoolRegistryStorageV1 is IPoolRegistry {\\n    /**\\n     * @notice Pools collection\\n     */\\n    EnumerableSet.AddressSet internal pools;\\n\\n    /**\\n     * @notice Prices oracle\\n     */\\n    IMasterOracle public masterOracle;\\n\\n    /**\\n     * @notice Fee collector address\\n     */\\n    address public feeCollector;\\n}\\n\",\"keccak256\":\"0xa909d522eccea82f1f5326815fe8b49397a98c784bd6594cf4aab25bcb22d77f\",\"license\":\"MIT\"},\"contracts/utils/Pauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IPauseable.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n */\\nabstract contract Pauseable is IPauseable, Governable {\\n    /// @notice Emitted when contract is turned on\\n    event Open(address caller);\\n\\n    /// @notice Emitted when contract is paused\\n    event Paused(address caller);\\n\\n    /// @notice Emitted when contract is shuted down\\n    event Shutdown(address caller);\\n\\n    /// @notice Emitted when contract is unpaused\\n    event Unpaused(address caller);\\n\\n    bool private _paused;\\n    bool private _everythingStopped;\\n\\n    /**\\n     * @dev Throws if contract is paused\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is shutdown\\n     */\\n    modifier whenNotShutdown() {\\n        require(!everythingStopped(), \\\"shutdown\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is not paused\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"not-paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is not shutdown\\n     */\\n    modifier whenShutdown() {\\n        require(everythingStopped(), \\\"not-shutdown\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Pauseable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Pauseable_init() internal initializer {\\n        __Governable_init();\\n    }\\n\\n    /**\\n     * @notice Return `true` if contract is shutdown\\n     */\\n    function everythingStopped() public view virtual returns (bool) {\\n        return _everythingStopped;\\n    }\\n\\n    /**\\n     * @notice Return `true` if contract is paused\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Open contract operations, if contract is in shutdown state\\n     */\\n    function open() external virtual whenShutdown onlyGovernor {\\n        _everythingStopped = false;\\n        emit Open(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Pause contract operations, if contract is not paused.\\n     */\\n    function pause() external virtual whenNotPaused onlyGovernor {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Shutdown contract operations, if not already shutdown.\\n     */\\n    function shutdown() external virtual whenNotShutdown onlyGovernor {\\n        _everythingStopped = true;\\n        _paused = true;\\n        emit Shutdown(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Unpause contract operations, allow only if contract is paused and not shutdown.\\n     */\\n    function unpause() external virtual whenPaused whenNotShutdown onlyGovernor {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xb0e8e50990db47947fbd9f0ed8015ee58989e0919337cb4ba4670a60b28d010a\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert(\\\"fallback-not-allowed\\\");\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert(\\\"receive-not-allowed\\\");\\n    }\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param token_ The token to transfer\\n     * @param to_ The recipient of the transfer\\n     * @param amount_ The amount to send\\n     */\\n    function sweep(\\n        IERC20 token_,\\n        address to_,\\n        uint256 amount_\\n    ) external {\\n        _requireCanSweep();\\n\\n        if (address(token_) == address(0)) {\\n            Address.sendValue(payable(to_), amount_);\\n        } else {\\n            token_.safeTransfer(to_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     */\\n    function _requireCanSweep() internal view virtual;\\n}\\n\",\"keccak256\":\"0xfbe591f37ce392a1ce68b05923b997209e9b5612a3d84aa9a503e8eb6375b7a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600280546001600160a01b031916339081179091556040516000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3611874806100606000396000f3fe60806040526004361061012e5760003560e01c8063abd90846116100ab578063eaada3821161006f578063eaada382146103af578063ecf3a3f9146103cf578063f3b27bc3146103ee578063fc0e74d114610403578063fcfff16f14610418578063ffa1ad741461042d57610176565b8063abd908461461030f578063ada61cc31461032f578063b6aa515b1461034f578063c415b95c1461036f578063d2c35ce81461038f57610176565b806362c06767116100f257806362c0676714610278578063673a2a1f146102985780638456cb59146102ba5780638a11a370146102cf578063abc9b45e146102ef57610176565b80630c340a24146101b55780631e1c6a07146101f25780633f4ba83a14610222578063485cc955146102395780635c975abb1461025957610176565b366101765760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b604482015260640161016d565b3480156101c157600080fd5b506002546101d5906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101fe57600080fd5b5061021261020d3660046115f4565b61046b565b60405190151581526020016101e9565b34801561022e57600080fd5b5061023761047e565b005b34801561024557600080fd5b50610237610254366004611611565b610576565b34801561026557600080fd5b50600354600160a01b900460ff16610212565b34801561028457600080fd5b5061023761029336600461164a565b6106b9565b3480156102a457600080fd5b506102ad6106ed565b6040516101e9919061168b565b3480156102c657600080fd5b506102376106fe565b3480156102db57600080fd5b506003546101d5906001600160a01b031681565b3480156102fb57600080fd5b5061023761030a3660046115f4565b6107ae565b34801561031b57600080fd5b5061023761032a3660046115f4565b6108d9565b34801561033b57600080fd5b5061023761034a3660046115f4565b6109d7565b34801561035b57600080fd5b5061023761036a3660046115f4565b610a82565b34801561037b57600080fd5b506007546101d5906001600160a01b031681565b34801561039b57600080fd5b506102376103aa3660046115f4565b610b24565b3480156103bb57600080fd5b506006546101d5906001600160a01b031681565b3480156103db57600080fd5b50600354600160a81b900460ff16610212565b3480156103fa57600080fd5b50610237610c55565b34801561040f57600080fd5b50610237610d13565b34801561042457600080fd5b50610237610dc7565b34801561043957600080fd5b5061045e604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516101e99190611708565b6000610478600483610e76565b92915050565b600354600160a01b900460ff166104c45760405162461bcd60e51b815260206004820152600a6024820152691b9bdd0b5c185d5cd95960b21b604482015260640161016d565b600354600160a81b900460ff16156105095760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b604482015260640161016d565b6002546001600160a01b031633146105335760405162461bcd60e51b815260040161016d9061173b565b6003805460ff60a01b191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b600054610100900460ff168061058f575060005460ff16155b6105ab5760405162461bcd60e51b815260040161016d90611761565b600054610100900460ff161580156105cd576000805461ffff19166101011790555b6001600160a01b0383166106145760405162461bcd60e51b815260206004820152600e60248201526d1bdc9858db194b5a5ccb5b9d5b1b60921b604482015260640161016d565b6001600160a01b0382166106625760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5a5ccb5b9d5b1b605a1b604482015260640161016d565b61066a610e9b565b610672610f0b565b600680546001600160a01b038086166001600160a01b031992831617909255600780549285169290911691909117905580156106b4576000805461ff00191690555b505050565b6106c1610f7e565b6001600160a01b0383166106d9576106b48282610faa565b6106b46001600160a01b03841683836110c3565b60606106f96004611115565b905090565b600354600160a01b900460ff16156107415760405162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b604482015260640161016d565b6002546001600160a01b0316331461076b5760405162461bcd60e51b815260040161016d9061173b565b6003805460ff60a01b1916600160a01b1790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589060200161056c565b6002546001600160a01b031633146107d85760405162461bcd60e51b815260040161016d9061173b565b6001600160a01b0381166108205760405162461bcd60e51b815260206004820152600f60248201526e1859191c995cdccb5a5ccb5b9d5b1b608a1b604482015260640161016d565b6006546001600160a01b039081169082168114156108765760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b604482015260640161016d565b816001600160a01b0316816001600160a01b03167fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c60405160405180910390a350600680546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146109035760405162461bcd60e51b815260040161016d9061173b565b6001600160a01b03811661094b5760405162461bcd60e51b815260206004820152600f60248201526e1859191c995cdccb5a5ccb5b9d5b1b608a1b604482015260640161016d565b610956600482611122565b6109975760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e4b5c9959da5cdd195c995960721b604482015260640161016d565b6040516001600160a01b03821681527f9cc152f4650ca2829a210a21551537f4cc4d48c2611ec06974f835e911921b90906020015b60405180910390a150565b6002546001600160a01b03163314610a015760405162461bcd60e51b815260040161016d9061173b565b610a0c600482611137565b610a495760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd0b5c9959da5cdd195c995960921b604482015260640161016d565b6040516001600160a01b03821681527f40b4682eb75339ed6d38b8616410eeadc61be24c86778de5067c2b0af3c99af6906020016109cc565b6002546001600160a01b03163314610aac5760405162461bcd60e51b815260040161016d9061173b565b6001600160a01b038116610b025760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f00000000000000604482015260640161016d565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610b4e5760405162461bcd60e51b815260040161016d9061173b565b6001600160a01b038116610b9c5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5a5ccb5b9d5b1b605a1b604482015260640161016d565b6007546001600160a01b03908116908216811415610bf25760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b604482015260640161016d565b816001600160a01b0316816001600160a01b03167f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f3860405160405180910390a350600780546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b0316338114610cb05760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f7200000000000000604482015260640161016d565b6002546040516001600160a01b038084169216907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600280546001600160a01b039092166001600160a01b0319928316179055600380549091169055565b600354600160a81b900460ff1615610d585760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b604482015260640161016d565b6002546001600160a01b03163314610d825760405162461bcd60e51b815260040161016d9061173b565b6003805461ffff60a01b191661010160a01b1790556040513381527f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a9060200161056c565b600354600160a81b900460ff16610e0f5760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b9b43aba3237bbb760a11b604482015260640161016d565b6002546001600160a01b03163314610e395760405162461bcd60e51b815260040161016d9061173b565b6003805460ff60a81b191690556040513381527fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc9060200161056c565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b600054610100900460ff1680610eb4575060005460ff16155b610ed05760405162461bcd60e51b815260040161016d90611761565b600054610100900460ff16158015610ef2576000805461ffff19166101011790555b600180558015610f08576000805461ff00191690555b50565b600054610100900460ff1680610f24575060005460ff16155b610f405760405162461bcd60e51b815260040161016d90611761565b600054610100900460ff16158015610f62576000805461ffff19166101011790555b610f6a61114c565b8015610f08576000805461ff001916905550565b6002546001600160a01b03163314610fa85760405162461bcd60e51b815260040161016d9061173b565b565b80471015610ffa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161016d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611047576040519150601f19603f3d011682016040523d82523d6000602084013e61104c565b606091505b50509050806106b45760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161016d565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526106b49084906111f7565b60606000610e94836112c9565b6000610e94836001600160a01b038416611325565b6000610e94836001600160a01b038416611374565b600054610100900460ff1680611165575060005460ff16155b6111815760405162461bcd60e51b815260040161016d90611761565b600054610100900460ff161580156111a3576000805461ffff19166101011790555b600280546001600160a01b031916339081179091556040516000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a38015610f08576000805461ff001916905550565b600061124c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114679092919063ffffffff16565b8051909150156106b4578080602001905181019061126a91906117af565b6106b45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161016d565b60608160000180548060200260200160405190810160405280929190818152602001828054801561131957602002820191906000526020600020905b815481526020019060010190808311611305575b50505050509050919050565b600081815260018301602052604081205461136c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610478565b506000610478565b6000818152600183016020526040812054801561145d5760006113986001836117d1565b85549091506000906113ac906001906117d1565b90508181146114115760008660000182815481106113cc576113cc6117f6565b90600052602060002001549050808760000184815481106113ef576113ef6117f6565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806114225761142261180c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610478565b6000915050610478565b6060611476848460008561147e565b949350505050565b6060824710156114df5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161016d565b843b61152d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161016d565b600080866001600160a01b031685876040516115499190611822565b60006040518083038185875af1925050503d8060008114611586576040519150601f19603f3d011682016040523d82523d6000602084013e61158b565b606091505b509150915061159b8282866115a6565b979650505050505050565b606083156115b5575081610e94565b8251156115c55782518084602001fd5b8160405162461bcd60e51b815260040161016d9190611708565b6001600160a01b0381168114610f0857600080fd5b60006020828403121561160657600080fd5b8135610e94816115df565b6000806040838503121561162457600080fd5b823561162f816115df565b9150602083013561163f816115df565b809150509250929050565b60008060006060848603121561165f57600080fd5b833561166a816115df565b9250602084013561167a816115df565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b818110156116cc5783516001600160a01b0316835292840192918401916001016116a7565b50909695505050505050565b60005b838110156116f35781810151838201526020016116db565b83811115611702576000848401525b50505050565b60208152600082518060208401526117278160408501602087016116d8565b601f01601f19169190910160400192915050565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156117c157600080fd5b81518015158114610e9457600080fd5b6000828210156117f157634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600082516118348184602087016116d8565b919091019291505056fea26469706673582212204da2b7aeb53f580e4ed34007e565b701d2b4826f5a5fe8094cdc2806098e434d64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061012e5760003560e01c8063abd90846116100ab578063eaada3821161006f578063eaada382146103af578063ecf3a3f9146103cf578063f3b27bc3146103ee578063fc0e74d114610403578063fcfff16f14610418578063ffa1ad741461042d57610176565b8063abd908461461030f578063ada61cc31461032f578063b6aa515b1461034f578063c415b95c1461036f578063d2c35ce81461038f57610176565b806362c06767116100f257806362c0676714610278578063673a2a1f146102985780638456cb59146102ba5780638a11a370146102cf578063abc9b45e146102ef57610176565b80630c340a24146101b55780631e1c6a07146101f25780633f4ba83a14610222578063485cc955146102395780635c975abb1461025957610176565b366101765760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b604482015260640161016d565b3480156101c157600080fd5b506002546101d5906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101fe57600080fd5b5061021261020d3660046115f4565b61046b565b60405190151581526020016101e9565b34801561022e57600080fd5b5061023761047e565b005b34801561024557600080fd5b50610237610254366004611611565b610576565b34801561026557600080fd5b50600354600160a01b900460ff16610212565b34801561028457600080fd5b5061023761029336600461164a565b6106b9565b3480156102a457600080fd5b506102ad6106ed565b6040516101e9919061168b565b3480156102c657600080fd5b506102376106fe565b3480156102db57600080fd5b506003546101d5906001600160a01b031681565b3480156102fb57600080fd5b5061023761030a3660046115f4565b6107ae565b34801561031b57600080fd5b5061023761032a3660046115f4565b6108d9565b34801561033b57600080fd5b5061023761034a3660046115f4565b6109d7565b34801561035b57600080fd5b5061023761036a3660046115f4565b610a82565b34801561037b57600080fd5b506007546101d5906001600160a01b031681565b34801561039b57600080fd5b506102376103aa3660046115f4565b610b24565b3480156103bb57600080fd5b506006546101d5906001600160a01b031681565b3480156103db57600080fd5b50600354600160a81b900460ff16610212565b3480156103fa57600080fd5b50610237610c55565b34801561040f57600080fd5b50610237610d13565b34801561042457600080fd5b50610237610dc7565b34801561043957600080fd5b5061045e604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516101e99190611708565b6000610478600483610e76565b92915050565b600354600160a01b900460ff166104c45760405162461bcd60e51b815260206004820152600a6024820152691b9bdd0b5c185d5cd95960b21b604482015260640161016d565b600354600160a81b900460ff16156105095760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b604482015260640161016d565b6002546001600160a01b031633146105335760405162461bcd60e51b815260040161016d9061173b565b6003805460ff60a01b191690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b600054610100900460ff168061058f575060005460ff16155b6105ab5760405162461bcd60e51b815260040161016d90611761565b600054610100900460ff161580156105cd576000805461ffff19166101011790555b6001600160a01b0383166106145760405162461bcd60e51b815260206004820152600e60248201526d1bdc9858db194b5a5ccb5b9d5b1b60921b604482015260640161016d565b6001600160a01b0382166106625760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5a5ccb5b9d5b1b605a1b604482015260640161016d565b61066a610e9b565b610672610f0b565b600680546001600160a01b038086166001600160a01b031992831617909255600780549285169290911691909117905580156106b4576000805461ff00191690555b505050565b6106c1610f7e565b6001600160a01b0383166106d9576106b48282610faa565b6106b46001600160a01b03841683836110c3565b60606106f96004611115565b905090565b600354600160a01b900460ff16156107415760405162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b604482015260640161016d565b6002546001600160a01b0316331461076b5760405162461bcd60e51b815260040161016d9061173b565b6003805460ff60a01b1916600160a01b1790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589060200161056c565b6002546001600160a01b031633146107d85760405162461bcd60e51b815260040161016d9061173b565b6001600160a01b0381166108205760405162461bcd60e51b815260206004820152600f60248201526e1859191c995cdccb5a5ccb5b9d5b1b608a1b604482015260640161016d565b6006546001600160a01b039081169082168114156108765760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b604482015260640161016d565b816001600160a01b0316816001600160a01b03167fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c60405160405180910390a350600680546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146109035760405162461bcd60e51b815260040161016d9061173b565b6001600160a01b03811661094b5760405162461bcd60e51b815260206004820152600f60248201526e1859191c995cdccb5a5ccb5b9d5b1b608a1b604482015260640161016d565b610956600482611122565b6109975760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e4b5c9959da5cdd195c995960721b604482015260640161016d565b6040516001600160a01b03821681527f9cc152f4650ca2829a210a21551537f4cc4d48c2611ec06974f835e911921b90906020015b60405180910390a150565b6002546001600160a01b03163314610a015760405162461bcd60e51b815260040161016d9061173b565b610a0c600482611137565b610a495760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd0b5c9959da5cdd195c995960921b604482015260640161016d565b6040516001600160a01b03821681527f40b4682eb75339ed6d38b8616410eeadc61be24c86778de5067c2b0af3c99af6906020016109cc565b6002546001600160a01b03163314610aac5760405162461bcd60e51b815260040161016d9061173b565b6001600160a01b038116610b025760405162461bcd60e51b815260206004820152601960248201527f70726f706f7365642d676f7665726e6f722d69732d7a65726f00000000000000604482015260640161016d565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610b4e5760405162461bcd60e51b815260040161016d9061173b565b6001600160a01b038116610b9c5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5a5ccb5b9d5b1b605a1b604482015260640161016d565b6007546001600160a01b03908116908216811415610bf25760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b604482015260640161016d565b816001600160a01b0316816001600160a01b03167f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f3860405160405180910390a350600780546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b0316338114610cb05760405162461bcd60e51b815260206004820152601960248201527f6e6f742d7468652d70726f706f7365642d676f7665726e6f7200000000000000604482015260640161016d565b6002546040516001600160a01b038084169216907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600280546001600160a01b039092166001600160a01b0319928316179055600380549091169055565b600354600160a81b900460ff1615610d585760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b604482015260640161016d565b6002546001600160a01b03163314610d825760405162461bcd60e51b815260040161016d9061173b565b6003805461ffff60a01b191661010160a01b1790556040513381527f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a9060200161056c565b600354600160a81b900460ff16610e0f5760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b9b43aba3237bbb760a11b604482015260640161016d565b6002546001600160a01b03163314610e395760405162461bcd60e51b815260040161016d9061173b565b6003805460ff60a81b191690556040513381527fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc9060200161056c565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b600054610100900460ff1680610eb4575060005460ff16155b610ed05760405162461bcd60e51b815260040161016d90611761565b600054610100900460ff16158015610ef2576000805461ffff19166101011790555b600180558015610f08576000805461ff00191690555b50565b600054610100900460ff1680610f24575060005460ff16155b610f405760405162461bcd60e51b815260040161016d90611761565b600054610100900460ff16158015610f62576000805461ffff19166101011790555b610f6a61114c565b8015610f08576000805461ff001916905550565b6002546001600160a01b03163314610fa85760405162461bcd60e51b815260040161016d9061173b565b565b80471015610ffa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161016d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611047576040519150601f19603f3d011682016040523d82523d6000602084013e61104c565b606091505b50509050806106b45760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161016d565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526106b49084906111f7565b60606000610e94836112c9565b6000610e94836001600160a01b038416611325565b6000610e94836001600160a01b038416611374565b600054610100900460ff1680611165575060005460ff16155b6111815760405162461bcd60e51b815260040161016d90611761565b600054610100900460ff161580156111a3576000805461ffff19166101011790555b600280546001600160a01b031916339081179091556040516000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a38015610f08576000805461ff001916905550565b600061124c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114679092919063ffffffff16565b8051909150156106b4578080602001905181019061126a91906117af565b6106b45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161016d565b60608160000180548060200260200160405190810160405280929190818152602001828054801561131957602002820191906000526020600020905b815481526020019060010190808311611305575b50505050509050919050565b600081815260018301602052604081205461136c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610478565b506000610478565b6000818152600183016020526040812054801561145d5760006113986001836117d1565b85549091506000906113ac906001906117d1565b90508181146114115760008660000182815481106113cc576113cc6117f6565b90600052602060002001549050808760000184815481106113ef576113ef6117f6565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806114225761142261180c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610478565b6000915050610478565b6060611476848460008561147e565b949350505050565b6060824710156114df5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161016d565b843b61152d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161016d565b600080866001600160a01b031685876040516115499190611822565b60006040518083038185875af1925050503d8060008114611586576040519150601f19603f3d011682016040523d82523d6000602084013e61158b565b606091505b509150915061159b8282866115a6565b979650505050505050565b606083156115b5575081610e94565b8251156115c55782518084602001fd5b8160405162461bcd60e51b815260040161016d9190611708565b6001600160a01b0381168114610f0857600080fd5b60006020828403121561160657600080fd5b8135610e94816115df565b6000806040838503121561162457600080fd5b823561162f816115df565b9150602083013561163f816115df565b809150509250929050565b60008060006060848603121561165f57600080fd5b833561166a816115df565b9250602084013561167a816115df565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b818110156116cc5783516001600160a01b0316835292840192918401916001016116a7565b50909695505050505050565b60005b838110156116f35781810151838201526020016116db565b83811115611702576000848401525b50505050565b60208152600082518060208401526117278160408501602087016116d8565b601f01601f19169190910160400192915050565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000602082840312156117c157600080fd5b81518015158114610e9457600080fd5b6000828210156117f157634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600082516118348184602087016116d8565b919091019291505056fea26469706673582212204da2b7aeb53f580e4ed34007e565b701d2b4826f5a5fe8094cdc2806098e434d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "getPools()": {
        "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees."
      },
      "open()": {
        "details": "Open contract operations, if contract is in shutdown state"
      },
      "pause()": {
        "details": "Pause contract operations, if contract is not paused."
      },
      "poolExists(address)": {
        "params": {
          "pool_": "Pool to check"
        },
        "returns": {
          "_0": "true if exists"
        }
      },
      "shutdown()": {
        "details": "Shutdown contract operations, if not already shutdown."
      },
      "sweep(address,address,uint256)": {
        "params": {
          "amount_": "The amount to send",
          "to_": "The recipient of the transfer",
          "token_": "The token to transfer"
        }
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause contract operations, allow only if contract is paused and not shutdown."
      }
    },
    "title": "PoolRegistry contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FeeCollectorUpdated(address,address)": {
        "notice": "Emitted when fee collector is updated"
      },
      "MasterOracleUpdated(address,address)": {
        "notice": "Emitted when master oracle contract is updated"
      },
      "Open(address)": {
        "notice": "Emitted when contract is turned on"
      },
      "Paused(address)": {
        "notice": "Emitted when contract is paused"
      },
      "PoolRegistered(address)": {
        "notice": "Emitted when a pool is registered"
      },
      "PoolUnregistered(address)": {
        "notice": "Emitted when a pool is unregistered"
      },
      "Shutdown(address)": {
        "notice": "Emitted when contract is shuted down"
      },
      "Unpaused(address)": {
        "notice": "Emitted when contract is unpaused"
      }
    },
    "kind": "user",
    "methods": {
      "everythingStopped()": {
        "notice": "Return `true` if contract is shutdown"
      },
      "feeCollector()": {
        "notice": "Fee collector address"
      },
      "getPools()": {
        "notice": "Get all pools"
      },
      "masterOracle()": {
        "notice": "Prices oracle"
      },
      "paused()": {
        "notice": "Return `true` if contract is paused"
      },
      "poolExists(address)": {
        "notice": "Check if pool is registered"
      },
      "registerPool(address)": {
        "notice": "Register pool"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      },
      "unregisterPool(address)": {
        "notice": "Unregister pool"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateMasterOracle(address)": {
        "notice": "Update master oracle contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7177,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7180,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7231,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6006,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "governor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6008,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 14541,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "_paused",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 14543,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "_everythingStopped",
        "offset": 21,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 13053,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "pools",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)9307_storage"
      },
      {
        "astId": 13057,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "masterOracle",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IMasterOracle)11333"
      },
      {
        "astId": 13060,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "feeCollector",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMasterOracle)11333": {
        "encoding": "inplace",
        "label": "contract IMasterOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)9307_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9306,
            "contract": "contracts/PoolRegistry.sol:PoolRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9006_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)9006_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9001,
            "contract": "contracts/PoolRegistry.sol:PoolRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9005,
            "contract": "contracts/PoolRegistry.sol:PoolRegistry",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}