{
  "address": "0xf03BEe24f66531aEcE33B837b36190EF904242FA",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackIsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeCollectorIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsNotPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsNotShutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsShutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeTokenGatewayIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewValueIsSameAsCurrent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedGovernorIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReceiveIsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotTheProposedGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnregisteredPool",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ICrossChainDispatcher",
          "name": "oldCrossChainDispatcher",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ICrossChainDispatcher",
          "name": "newCrossChainDispatcher",
          "type": "address"
        }
      ],
      "name": "CrossChainDispatcherUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "FeeCollectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IMasterOracle",
          "name": "oldOracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IMasterOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "MasterOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldGateway",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGateway",
          "type": "address"
        }
      ],
      "name": "NativeTokenGatewayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolUnregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IQuoter",
          "name": "oldQuoter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IQuoter",
          "name": "newQuoter",
          "type": "address"
        }
      ],
      "name": "QuoterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Shutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISwapper",
          "name": "oldSwapFee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISwapper",
          "name": "newSwapFee",
          "type": "address"
        }
      ],
      "name": "SwapperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crossChainDispatcher",
      "outputs": [
        {
          "internalType": "contract ICrossChainDispatcher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken_",
          "type": "address"
        }
      ],
      "name": "doesSyntheticTokenExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "everythingStopped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "idOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "masterOracle_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeCollector_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "isPoolRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterOracle",
      "outputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeTokenGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoter",
      "outputs": [
        {
          "internalType": "contract IQuoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "registerPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract ISwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposedGovernor_",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "unregisterPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICrossChainDispatcher",
          "name": "crossChainDispatcher_",
          "type": "address"
        }
      ],
      "name": "updateCrossChainDispatcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeCollector_",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle_",
          "type": "address"
        }
      ],
      "name": "updateMasterOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGateway_",
          "type": "address"
        }
      ],
      "name": "updateNativeTokenGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IQuoter",
          "name": "newQuoter_",
          "type": "address"
        }
      ],
      "name": "updateQuoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapper",
          "name": "newSwapper_",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb1b1822a410b92dec3d2b6b7d6efc63c845b83a69ce4822bd0013addab52e12c",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0xf03BEe24f66531aEcE33B837b36190EF904242FA",
    "transactionIndex": 12,
    "gasUsed": "1738168",
    "logsBloom": "0x
    "blockHash": "0x3bfe67b26cb5875143e81bba4f67dbb4caa328f68fc6eb2eb65077492f8e7d83",
    "transactionHash": "0xb1b1822a410b92dec3d2b6b7d6efc63c845b83a69ce4822bd0013addab52e12c",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 18314451,
        "transactionHash": "0xb1b1822a410b92dec3d2b6b7d6efc63c845b83a69ce4822bd0013addab52e12c",
        "address": "0xf03BEe24f66531aEcE33B837b36190EF904242FA",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000df826ff6518e609e4cee86299d40611c148099d5"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x3bfe67b26cb5875143e81bba4f67dbb4caa328f68fc6eb2eb65077492f8e7d83"
      }
    ],
    "blockNumber": 18314451,
    "cumulativeGasUsed": "8240862",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "545cb6254fd08cfae8ffa56eab2faa67",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeCollectorIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsNotShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTokenGatewayIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewValueIsSameAsCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedGovernorIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceiveIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotTheProposedGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnregisteredPool\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ICrossChainDispatcher\",\"name\":\"oldCrossChainDispatcher\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ICrossChainDispatcher\",\"name\":\"newCrossChainDispatcher\",\"type\":\"address\"}],\"name\":\"CrossChainDispatcherUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IMasterOracle\",\"name\":\"oldOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IMasterOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"MasterOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGateway\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGateway\",\"type\":\"address\"}],\"name\":\"NativeTokenGatewayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IQuoter\",\"name\":\"oldQuoter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IQuoter\",\"name\":\"newQuoter\",\"type\":\"address\"}],\"name\":\"QuoterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISwapper\",\"name\":\"oldSwapFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISwapper\",\"name\":\"newSwapFee\",\"type\":\"address\"}],\"name\":\"SwapperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossChainDispatcher\",\"outputs\":[{\"internalType\":\"contract ICrossChainDispatcher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"}],\"name\":\"doesSyntheticTokenExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everythingStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"idOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"masterOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeCollector_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterOracle\",\"outputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeTokenGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoter\",\"outputs\":[{\"internalType\":\"contract IQuoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedGovernor_\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"unregisterPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICrossChainDispatcher\",\"name\":\"crossChainDispatcher_\",\"type\":\"address\"}],\"name\":\"updateCrossChainDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeCollector_\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle_\",\"type\":\"address\"}],\"name\":\"updateMasterOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGateway_\",\"type\":\"address\"}],\"name\":\"updateNativeTokenGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IQuoter\",\"name\":\"newQuoter_\",\"type\":\"address\"}],\"name\":\"updateQuoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"newSwapper_\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"doesSyntheticTokenExist(address)\":{\"params\":{\"syntheticToken_\":\"Asset to check\"},\"returns\":{\"_exists\":\"Return true if exists\"}},\"getPools()\":{\"details\":\"WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees.\"},\"isPoolRegistered(address)\":{\"params\":{\"pool_\":\"Pool to check\"},\"returns\":{\"_0\":\"true if exists\"}},\"open()\":{\"details\":\"Open contract operations, if contract is in shutdown state\"},\"pause()\":{\"details\":\"Suspend deposit feature, if contract is not paused.\"},\"shutdown()\":{\"details\":\"Suspend all features (issue, repay, deposit, withdraw, liquidate and swap), if not already shutdown.\"},\"sweep(address,address,uint256)\":{\"params\":{\"amount_\":\"The amount to send\",\"to_\":\"The recipient of the transfer\",\"token_\":\"The token to transfer\"}},\"transferGovernorship(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"proposedGovernor_\":\"The new proposed governor\"}},\"unpause()\":{\"details\":\"Unpause contract operations, allow only if contract is paused and not shutdown.\"}},\"title\":\"PoolRegistry contract\",\"version\":1},\"userdoc\":{\"events\":{\"CrossChainDispatcherUpdated(address,address)\":{\"notice\":\"Emitted when Cross-chain dispatcher contract is updated\"},\"FeeCollectorUpdated(address,address)\":{\"notice\":\"Emitted when fee collector is updated\"},\"MasterOracleUpdated(address,address)\":{\"notice\":\"Emitted when master oracle contract is updated\"},\"NativeTokenGatewayUpdated(address,address)\":{\"notice\":\"Emitted when native token gateway is updated\"},\"Open(address)\":{\"notice\":\"Emitted when contract is turned on\"},\"Paused(address)\":{\"notice\":\"Emitted when contract is paused\"},\"PoolRegistered(uint256,address)\":{\"notice\":\"Emitted when a pool is registered\"},\"PoolUnregistered(uint256,address)\":{\"notice\":\"Emitted when a pool is unregistered\"},\"QuoterUpdated(address,address)\":{\"notice\":\"Emitted when Quoter contract is updated\"},\"Shutdown(address)\":{\"notice\":\"Emitted when contract is shuted down\"},\"SwapperUpdated(address,address)\":{\"notice\":\"Emitted when Swapper contract is updated\"},\"Unpaused(address)\":{\"notice\":\"Emitted when contract is unpaused\"}},\"kind\":\"user\",\"methods\":{\"acceptGovernorship()\":{\"notice\":\"Allows new governor to accept governorship of the contract.\"},\"crossChainDispatcher()\":{\"notice\":\"The Cross-chain dispatcher contract\"},\"doesSyntheticTokenExist(address)\":{\"notice\":\"Check if any pool has the token as part of its offerings\"},\"everythingStopped()\":{\"notice\":\"Return `true` if contract is shutdown\"},\"feeCollector()\":{\"notice\":\"Fee collector address\"},\"getPools()\":{\"notice\":\"Get all pools\"},\"governor()\":{\"notice\":\"The governor\"},\"idOfPool(address)\":{\"notice\":\"Map of the ids of the pools\"},\"isPoolRegistered(address)\":{\"notice\":\"Check if pool is registered\"},\"masterOracle()\":{\"notice\":\"Prices' oracle\"},\"nativeTokenGateway()\":{\"notice\":\"Native token gateway address\"},\"nextPoolId()\":{\"notice\":\"Counter of ids of the pools\"},\"paused()\":{\"notice\":\"Return `true` if contract is paused\"},\"proposedGovernor()\":{\"notice\":\"The proposed governor\"},\"quoter()\":{\"notice\":\"The Quoter contract\"},\"registerPool(address)\":{\"notice\":\"Register pool\"},\"swapper()\":{\"notice\":\"Swapper contract\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"},\"transferGovernorship(address)\":{\"notice\":\"Transfers governorship of the contract to a new account (`proposedGovernor`).\"},\"unregisterPool(address)\":{\"notice\":\"Unregister pool\"},\"updateCrossChainDispatcher(address)\":{\"notice\":\"Update Cross-chain dispatcher contract\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateMasterOracle(address)\":{\"notice\":\"Update master oracle contract\"},\"updateNativeTokenGateway(address)\":{\"notice\":\"Update native token gateway\"},\"updateQuoter(address)\":{\"notice\":\"Update Quoter contract\"},\"updateSwapper(address)\":{\"notice\":\"Update Swapper contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolRegistry.sol\":\"PoolRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./storage/PoolRegistryStorage.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./utils/Pauseable.sol\\\";\\n\\nerror AddressIsNull();\\nerror OracleIsNull();\\nerror FeeCollectorIsNull();\\nerror NativeTokenGatewayIsNull();\\nerror AlreadyRegistered();\\nerror UnregisteredPool();\\nerror NewValueIsSameAsCurrent();\\n\\n/**\\n * @title PoolRegistry contract\\n */\\ncontract PoolRegistry is ReentrancyGuard, Pauseable, PoolRegistryStorageV2 {\\n    using WadRayMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    /// @notice Emitted when fee collector is updated\\n    event FeeCollectorUpdated(address indexed oldFeeCollector, address indexed newFeeCollector);\\n\\n    /// @notice Emitted when master oracle contract is updated\\n    event MasterOracleUpdated(IMasterOracle indexed oldOracle, IMasterOracle indexed newOracle);\\n\\n    /// @notice Emitted when native token gateway is updated\\n    event NativeTokenGatewayUpdated(address indexed oldGateway, address indexed newGateway);\\n\\n    /// @notice Emitted when a pool is registered\\n    event PoolRegistered(uint256 indexed id, address indexed pool);\\n\\n    /// @notice Emitted when a pool is unregistered\\n    event PoolUnregistered(uint256 indexed id, address indexed pool);\\n\\n    /// @notice Emitted when Swapper contract is updated\\n    event SwapperUpdated(ISwapper oldSwapFee, ISwapper newSwapFee);\\n\\n    /// @notice Emitted when Quoter contract is updated\\n    event QuoterUpdated(IQuoter oldQuoter, IQuoter newQuoter);\\n\\n    /// @notice Emitted when Cross-chain dispatcher contract is updated\\n    event CrossChainDispatcherUpdated(\\n        ICrossChainDispatcher oldCrossChainDispatcher,\\n        ICrossChainDispatcher newCrossChainDispatcher\\n    );\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(IMasterOracle masterOracle_, address feeCollector_) external initializer {\\n        if (address(masterOracle_) == address(0)) revert OracleIsNull();\\n        if (feeCollector_ == address(0)) revert FeeCollectorIsNull();\\n\\n        __ReentrancyGuard_init();\\n        __Pauseable_init();\\n\\n        masterOracle = masterOracle_;\\n        feeCollector = feeCollector_;\\n\\n        nextPoolId = 1;\\n    }\\n\\n    /**\\n     * @notice Check if any pool has the token as part of its offerings\\n     * @param syntheticToken_ Asset to check\\n     * @return _exists Return true if exists\\n     */\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool _exists) {\\n        uint256 _length = pools.length();\\n        for (uint256 i; i < _length; ++i) {\\n            if (IPool(pools.at(i)).doesSyntheticTokenExist(syntheticToken_)) {\\n                return true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get all pools\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getPools() external view override returns (address[] memory) {\\n        return pools.values();\\n    }\\n\\n    /**\\n     * @notice Check if pool is registered\\n     * @param pool_ Pool to check\\n     * @return true if exists\\n     */\\n    function isPoolRegistered(address pool_) external view override returns (bool) {\\n        return pools.contains(pool_);\\n    }\\n\\n    /**\\n     * @notice Register pool\\n     */\\n    function registerPool(address pool_) external override onlyGovernor {\\n        if (pool_ == address(0)) revert AddressIsNull();\\n        if (!pools.add(pool_)) revert AlreadyRegistered();\\n        uint256 _id = idOfPool[pool_];\\n        if (_id == 0) {\\n            _id = nextPoolId++;\\n            idOfPool[pool_] = _id;\\n        }\\n        emit PoolRegistered(_id, pool_);\\n    }\\n\\n    /**\\n     * @notice Unregister pool\\n     */\\n    function unregisterPool(address pool_) external override onlyGovernor {\\n        if (!pools.remove(pool_)) revert UnregisteredPool();\\n        emit PoolUnregistered(idOfPool[pool_], pool_);\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     */\\n    function updateFeeCollector(address newFeeCollector_) external override onlyGovernor {\\n        if (newFeeCollector_ == address(0)) revert FeeCollectorIsNull();\\n        address _currentFeeCollector = feeCollector;\\n        if (newFeeCollector_ == _currentFeeCollector) revert NewValueIsSameAsCurrent();\\n        emit FeeCollectorUpdated(_currentFeeCollector, newFeeCollector_);\\n        feeCollector = newFeeCollector_;\\n    }\\n\\n    /**\\n     * @notice Update master oracle contract\\n     */\\n    function updateMasterOracle(IMasterOracle newMasterOracle_) external onlyGovernor {\\n        if (address(newMasterOracle_) == address(0)) revert OracleIsNull();\\n        IMasterOracle _currentMasterOracle = masterOracle;\\n        if (newMasterOracle_ == _currentMasterOracle) revert NewValueIsSameAsCurrent();\\n        emit MasterOracleUpdated(_currentMasterOracle, newMasterOracle_);\\n        masterOracle = newMasterOracle_;\\n    }\\n\\n    /**\\n     * @notice Update native token gateway\\n     */\\n    function updateNativeTokenGateway(address newGateway_) external onlyGovernor {\\n        if (address(newGateway_) == address(0)) revert NativeTokenGatewayIsNull();\\n        address _currentGateway = nativeTokenGateway;\\n        if (newGateway_ == _currentGateway) revert NewValueIsSameAsCurrent();\\n        emit NativeTokenGatewayUpdated(_currentGateway, newGateway_);\\n        nativeTokenGateway = newGateway_;\\n    }\\n\\n    /**\\n     * @notice Update Swapper contract\\n     */\\n    function updateSwapper(ISwapper newSwapper_) external onlyGovernor {\\n        if (address(newSwapper_) == address(0)) revert AddressIsNull();\\n        ISwapper _currentSwapper = swapper;\\n        if (newSwapper_ == _currentSwapper) revert NewValueIsSameAsCurrent();\\n\\n        emit SwapperUpdated(_currentSwapper, newSwapper_);\\n        swapper = newSwapper_;\\n    }\\n\\n    /**\\n     * @notice Update Quoter contract\\n     */\\n    function updateQuoter(IQuoter newQuoter_) external onlyGovernor {\\n        if (address(newQuoter_) == address(0)) revert AddressIsNull();\\n        IQuoter _currentQuoter = quoter;\\n        if (newQuoter_ == _currentQuoter) revert NewValueIsSameAsCurrent();\\n\\n        emit QuoterUpdated(_currentQuoter, newQuoter_);\\n        quoter = newQuoter_;\\n    }\\n\\n    /**\\n     * @notice Update Cross-chain dispatcher contract\\n     */\\n    function updateCrossChainDispatcher(ICrossChainDispatcher crossChainDispatcher_) external onlyGovernor {\\n        if (address(crossChainDispatcher_) == address(0)) revert AddressIsNull();\\n        ICrossChainDispatcher _current = crossChainDispatcher;\\n        if (crossChainDispatcher_ == _current) revert NewValueIsSameAsCurrent();\\n\\n        emit CrossChainDispatcherUpdated(_current, crossChainDispatcher_);\\n        crossChainDispatcher = crossChainDispatcher_;\\n    }\\n}\\n\",\"keccak256\":\"0xbb1f4459b0107acdf36ab971b29a3da7e597edca503c4b7f4c05e2a35a28c370\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/TokenHolder.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\n\\nerror SenderIsNotGovernor();\\nerror ProposedGovernorIsNull();\\nerror SenderIsNotTheProposedGovernor();\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, TokenHolder, Initializable {\\n    /**\\n     * @notice The governor\\n     * @dev By default the contract deployer is the initial governor\\n     */\\n    address public governor;\\n\\n    /**\\n     * @notice The proposed governor\\n     * @dev It will be empty (address(0)) if there isn't a proposed governor\\n     */\\n    address public proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    constructor() {\\n        governor = msg.sender;\\n        emit UpdatedGovernor(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal onlyInitializing {\\n        governor = msg.sender;\\n        emit UpdatedGovernor(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        if (governor != msg.sender) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    /// @inheritdoc TokenHolder\\n    // solhint-disable-next-line no-empty-blocks\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    /**\\n     * @notice Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * @dev Can only be called by the current owner.\\n     * @param proposedGovernor_ The new proposed governor\\n     */\\n    function transferGovernorship(address proposedGovernor_) external onlyGovernor {\\n        if (proposedGovernor_ == address(0)) revert ProposedGovernorIsNull();\\n        proposedGovernor = proposedGovernor_;\\n    }\\n\\n    /**\\n     * @notice Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        address _proposedGovernor = proposedGovernor;\\n        if (msg.sender != _proposedGovernor) revert SenderIsNotTheProposedGovernor();\\n        emit UpdatedGovernor(governor, _proposedGovernor);\\n        governor = _proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xbe892a132fcf0794df788324b569bc3eca8dde2e66f860bdb4aa3a2483d07988\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/IOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../../../../openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCoreUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"keccak256\":\"0x22651924296f8308db8195d7a86a6781023241c53905418f2d3925e3f693f530\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../IOFTCoreUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the composable OFT core standard\\n */\\ninterface IComposableOFTCoreUpgradeable is IOFTCoreUpgradeable {\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function retryOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n\\n    event CallOFTReceivedFailure(\\n        uint16 indexed _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _from,\\n        address indexed _to,\\n        uint _amount,\\n        bytes _payload,\\n        bytes _reason\\n    );\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event RetryOFTReceivedSuccess(bytes32 _messageHash);\\n\\n    event NonContractAddress(address _address);\\n}\\n\",\"keccak256\":\"0x769b9356ad6019bdabdcfc11762f28d15eb9a4e262efc96835725f6862c5d9e9\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverUpgradeable {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x287036c704c57e34a6fc3f7e67c8dfaaade6eb3667b570576bc491c0f1f89a5b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStargateRouter.sol\\\";\\n\\ninterface IStargateComposer {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function factory() external view returns (address);\\n\\n    function stargateBridge() external view returns (address);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function peers(uint16 _chainId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdfdd1690bf176ac05803534a60227be90cc435b4bdd8fce2348f1a9417a9f63a\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe4d6bf9fa422e5e43dc1b6880f951d06611a4ed12c2dd7dd8c0b6a5d9e06ad0d\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function clearCachedSwap(uint16 _srcChainId, bytes calldata _srcAddress, uint256 _nonce) external;\\n\\n    function factory() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function cachedSwapLookup(\\n        uint16 _chainId_,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (address token, uint256 amountLD, address to, bytes memory payload);\\n}\\n\",\"keccak256\":\"0x92126df8e682b2c5647c7b22e7387da69f9e72480af86948ce5ed17dc2c9e0a7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICrossChainDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateRouter.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface ICrossChainDispatcher is IStargateReceiver, IOFTReceiverUpgradeable {\\n    function crossChainDispatcherOf(uint16 chainId_) external view returns (address);\\n\\n    function triggerFlashRepaySwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function triggerLeverageSwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function isBridgingActive() external view returns (bool);\\n\\n    function flashRepayCallbackTxGasLimit() external view returns (uint64);\\n\\n    function flashRepaySwapTxGasLimit() external view returns (uint64);\\n\\n    function leverageCallbackTxGasLimit() external view returns (uint64);\\n\\n    function leverageSwapTxGasLimit() external view returns (uint64);\\n\\n    function lzBaseGasLimit() external view returns (uint256);\\n\\n    function stargateComposer() external view returns (IStargateComposer);\\n\\n    function stargateSlippage() external view returns (uint256);\\n\\n    function stargatePoolIdOf(address token_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcaf05e625588dcfaa5706acc78a35fa46d50baeb2d28f689036963695a4e39cb\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address to_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xd2f04aa1bee06d6991b10aaf7c03c3ee09d85f8e48ba92feac595ad855881380\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralFactor() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function flashWithdraw(address account_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\\n\\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\\n\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function withdrawFrom(address from_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n}\\n\",\"keccak256\":\"0xb27092f9450d9c48c1a215925007ca9c7282cfe6cf257b34ab3dbe6e745b6bd1\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3b132b42090c167b2c0aef6d78d833c669c43b9e55593a7a21a96ed5d3082700\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\",\"keccak256\":\"0xac88e0997a26942cb9cbda1a7dd9756e28ba2025813e5b07e55939fbf8538ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IFeeProvider.sol\\\";\\nimport \\\"./ISmartFarmingManager.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function feeProvider() external view returns (IFeeProvider);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\\n\\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(\\n        address account_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeized_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _maxAmountToRepay);\\n\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view returns (uint256 _amountIn, uint256 _fee);\\n\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _fee);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _fee);\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function isSwapActive() external view returns (bool);\\n\\n    function smartFarmingManager() external view returns (ISmartFarmingManager);\\n}\\n\",\"keccak256\":\"0x0f0a869451cca858ba52b56970db167360fe161f2450557a053c4da938558816\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"./IQuoter.sol\\\";\\nimport \\\"./ICrossChainDispatcher.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function feeCollector() external view returns (address);\\n\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function quoter() external view returns (IQuoter);\\n\\n    function crossChainDispatcher() external view returns (ICrossChainDispatcher);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool _exists);\\n}\\n\",\"keccak256\":\"0x9ffa9e5fd39a48ac2bda561af7fb4fc9df5f8ffb7a602ef1d4da8c068019e723\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\\\";\\n\\ninterface IProxyOFT is IComposableOFTCoreUpgradeable {\\n    function getProxyOFTOf(uint16 chainId_) external view returns (address _proxyOFT);\\n}\\n\",\"keccak256\":\"0x4041a90eb60de460c9e1631aaedfbf2bff2275b3f91964800b1c774546931cd5\",\"license\":\"MIT\"},\"contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface IQuoter {\\n    function quoteCrossChainFlashRepayNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteCrossChainLeverageNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteLeverageCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function quoteFlashRepayCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function getFlashRepaySwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n\\n    function getLeverageSwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n}\\n\",\"keccak256\":\"0x1e4d2dd779a09dc8ea6b6c244b167deddca3a48e71b73bf940da04113b40c752\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external;\\n\\n    function claimable(address account_) external view returns (uint256 _claimable);\\n\\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\\n\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\\n\\n    function tokens(uint256) external view returns (IERC20);\\n\\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\\n\\n    function accountIndexOf(IERC20, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f527eeae61b6a5bff7d3b48037234ef718ae7f71dc452e8cab3b60581f0d810\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartFarmingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IManageable.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\n/**\\n * @notice SmartFarmingManager interface\\n */\\ninterface ISmartFarmingManager {\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    ) external returns (uint256 _withdrawn, uint256 _repaid);\\n\\n    function crossChainFlashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        IERC20 bridgeToken_,\\n        uint256 bridgeTokenAmountMin_,\\n        uint256 swapAmountOutMin_,\\n        uint256 repayAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 swapAmountOutMin_,\\n        uint256 depositAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverageCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _deposited);\\n\\n    function crossChainFlashRepayCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _repaid);\\n\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    ) external returns (uint256 _deposited, uint256 _issued);\\n}\\n\",\"keccak256\":\"0x7544a9d308a49e24d6984c3cfcfe2c1cfb7d9ce4655408438e1c12f37175a3b0\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/IProxyOFT.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateProxyOFT(IProxyOFT newProxyOFT_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function proxyOFT() external view returns (IProxyOFT);\\n}\\n\",\"keccak256\":\"0xfaeb24d1067e85493a5c8818d6de06fc6dbc72c37e85f82811990d0120f8a0cf\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x2f080adc5880151dc4446ef43b54abab8e3711c5f2e526917ef39a05e3c16a00\",\"license\":\"MIT\"},\"contracts/interfaces/external/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x75f04b225d0c310be7e0a09ee4c1aa6eeeb8d94e02fc0e4160a9597ce2d8d446\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/PoolRegistryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IPoolRegistry.sol\\\";\\n\\nabstract contract PoolRegistryStorageV1 is IPoolRegistry {\\n    /**\\n     * @notice Pools collection\\n     */\\n    EnumerableSet.AddressSet internal pools;\\n\\n    /**\\n     * @notice Prices' oracle\\n     */\\n    IMasterOracle public override masterOracle;\\n\\n    /**\\n     * @notice Fee collector address\\n     */\\n    address public override feeCollector;\\n\\n    /**\\n     * @notice Native token gateway address\\n     */\\n    address public override nativeTokenGateway;\\n\\n    /**\\n     * @notice Map of the ids of the pools\\n     */\\n    mapping(address => uint256) public override idOfPool;\\n\\n    /**\\n     * @notice Counter of ids of the pools\\n     */\\n    uint256 public override nextPoolId;\\n\\n    /**\\n     * @notice Swapper contract\\n     */\\n    ISwapper public swapper;\\n}\\n\\nabstract contract PoolRegistryStorageV2 is PoolRegistryStorageV1 {\\n    /**\\n     * @notice The Quoter contract\\n     */\\n    IQuoter public quoter;\\n\\n    /**\\n     * @notice The Cross-chain dispatcher contract\\n     */\\n    ICrossChainDispatcher public crossChainDispatcher;\\n}\\n\",\"keccak256\":\"0xc6715f6590edbaff2bd156de10e5de195e902dc28480e3dd642443ca52a25590\",\"license\":\"MIT\"},\"contracts/utils/Pauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IPauseable.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\nerror IsPaused();\\nerror IsShutdown();\\nerror IsNotPaused();\\nerror IsNotShutdown();\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n */\\nabstract contract Pauseable is IPauseable, Governable {\\n    /// @notice Emitted when contract is turned on\\n    event Open(address indexed caller);\\n\\n    /// @notice Emitted when contract is paused\\n    event Paused(address indexed caller);\\n\\n    /// @notice Emitted when contract is shuted down\\n    event Shutdown(address indexed caller);\\n\\n    /// @notice Emitted when contract is unpaused\\n    event Unpaused(address indexed caller);\\n\\n    bool private _paused;\\n    bool private _everythingStopped;\\n\\n    /**\\n     * @dev Throws if contract is paused\\n     */\\n    modifier whenNotPaused() {\\n        if (paused()) revert IsPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is shutdown\\n     */\\n    modifier whenNotShutdown() {\\n        if (everythingStopped()) revert IsShutdown();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is not paused\\n     */\\n    modifier whenPaused() {\\n        if (!paused()) revert IsNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is not shutdown\\n     */\\n    modifier whenShutdown() {\\n        if (!everythingStopped()) revert IsNotShutdown();\\n        _;\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Pauseable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Pauseable_init() internal onlyInitializing {\\n        __Governable_init();\\n    }\\n\\n    /**\\n     * @notice Return `true` if contract is shutdown\\n     */\\n    function everythingStopped() public view virtual returns (bool) {\\n        return _everythingStopped;\\n    }\\n\\n    /**\\n     * @notice Return `true` if contract is paused\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Open contract operations, if contract is in shutdown state\\n     */\\n    function open() external virtual whenShutdown onlyGovernor {\\n        _everythingStopped = false;\\n        emit Open(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Suspend deposit feature, if contract is not paused.\\n     */\\n    function pause() external virtual whenNotPaused onlyGovernor {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Suspend all features (issue, repay, deposit, withdraw, liquidate and swap), if not already shutdown.\\n     */\\n    function shutdown() external virtual whenNotShutdown onlyGovernor {\\n        _everythingStopped = true;\\n        _paused = true;\\n        emit Shutdown(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Unpause contract operations, allow only if contract is paused and not shutdown.\\n     */\\n    function unpause() external virtual whenPaused whenNotShutdown onlyGovernor {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x562f6b2a2d06f443b1c7e6b7e3dd45b5c658c86eee448f10bc63c145f2c86bc6\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x3bf3c3de5a638ca101f25dfcaec5268e9c8a1c29a9a278d70be4459768fb41fe\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nerror FallbackIsNotAllowed();\\nerror ReceiveIsNotAllowed();\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert FallbackIsNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert ReceiveIsNotAllowed();\\n    }\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param token_ The token to transfer\\n     * @param to_ The recipient of the transfer\\n     * @param amount_ The amount to send\\n     */\\n    function sweep(IERC20 token_, address to_, uint256 amount_) external {\\n        _requireCanSweep();\\n\\n        if (address(token_) == address(0)) {\\n            Address.sendValue(payable(to_), amount_);\\n        } else {\\n            token_.safeTransfer(to_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     * @dev Usually requires the owner or governor as the caller\\n     */\\n    function _requireCanSweep() internal view virtual;\\n}\\n\",\"keccak256\":\"0x50e56ed45d496b188d90494d08122fe9621d9e6c8f655679ef334447801ea50d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600280546001600160a01b031916339081179091556040516000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a36200005c62000062565b62000192565b6200006e60ff62000071565b50565b60008054610100900460ff16156200010a578160ff166001148015620000aa5750620000a8306200018360201b620012e71760201c565b155b620001025760405162461bcd60e51b815260206004820152602e602482015260008051602062001f2683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001695760405162461bcd60e51b815260206004820152602e602482015260008051602062001f2683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000f9565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b611d8480620001a26000396000f3fe6080604052600436106101e75760003560e01c80638a11a37011610102578063d2c35ce811610095578063f3b27bc311610064578063f3b27bc3146105c8578063fc0e74d1146105dd578063fcfff16f146105f2578063ffa1ad741461060757610205565b8063d2c35ce814610549578063d3033c3914610569578063eaada38214610589578063ecf3a3f9146105a957610205565b8063b6aa515b116100d1578063b6aa515b146104c9578063c415b95c146104e9578063c673bdaf14610509578063c6bbd5a71461052957610205565b80638a11a37014610449578063abc9b45e14610469578063abd9084614610489578063ada61cc3146104a957610205565b8063426172d61161017a578063673a2a1f11610149578063673a2a1f146103d257806374042229146103f45780638456cb591461041457806386ca38101461042957610205565b8063426172d614610353578063485cc955146103735780635c975abb1461039357806362c06767146103b257610205565b80632b3297f9116101b65780632b3297f9146102cf57806332c615b4146102ef57806336074a061461030f5780633f4ba83a1461033c57610205565b80630c340a241461021e57806318e561311461025b578063193d7d841461027f5780631a0dd00b1461029f57610205565b3661020557604051636436c22d60e11b815260040160405180910390fd5b60405163a0152e6360e01b815260040160405180910390fd5b34801561022a57600080fd5b5060025461023e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026757600080fd5b50610271600a5481565b604051908152602001610252565b34801561028b57600080fd5b5060085461023e906001600160a01b031681565b3480156102ab57600080fd5b506102bf6102ba366004611abc565b610645565b6040519015158152602001610252565b3480156102db57600080fd5b50600b5461023e906001600160a01b031681565b3480156102fb57600080fd5b50600d5461023e906001600160a01b031681565b34801561031b57600080fd5b5061027161032a366004611abc565b60096020526000908152604090205481565b34801561034857600080fd5b5061035161070b565b005b34801561035f57600080fd5b5061035161036e366004611abc565b6107c5565b34801561037f57600080fd5b5061035161038e366004611ad9565b6108ae565b34801561039f57600080fd5b50600354600160a01b900460ff166102bf565b3480156103be57600080fd5b506103516103cd366004611b12565b6109b0565b3480156103de57600080fd5b506103e76109e4565b6040516102529190611b53565b34801561040057600080fd5b5061035161040f366004611abc565b6109f5565b34801561042057600080fd5b50610351610adb565b34801561043557600080fd5b50610351610444366004611abc565b610b71565b34801561045557600080fd5b5060035461023e906001600160a01b031681565b34801561047557600080fd5b50610351610484366004611abc565b610c5a565b34801561049557600080fd5b506103516104a4366004611abc565b610d40565b3480156104b557600080fd5b506103516104c4366004611abc565b610e44565b3480156104d557600080fd5b506103516104e4366004611abc565b610edb565b3480156104f557600080fd5b5060075461023e906001600160a01b031681565b34801561051557600080fd5b506102bf610524366004611abc565b610f4f565b34801561053557600080fd5b50600c5461023e906001600160a01b031681565b34801561055557600080fd5b50610351610564366004611abc565b610f62565b34801561057557600080fd5b50610351610584366004611abc565b611048565b34801561059557600080fd5b5060065461023e906001600160a01b031681565b3480156105b557600080fd5b50600354600160a81b900460ff166102bf565b3480156105d457600080fd5b50610351611131565b3480156105e957600080fd5b506103516111c0565b3480156105fe57600080fd5b50610351611258565b34801561061357600080fd5b50610638604051806040016040528060058152602001640312e332e360dc1b81525081565b6040516102529190611bd0565b60008061065260046112f6565b905060005b818110156107045761066a600482611300565b604051631a0dd00b60e01b81526001600160a01b0386811660048301529190911690631a0dd00b9060240160206040518083038186803b1580156106ad57600080fd5b505afa1580156106c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e59190611c03565b156106f4575060019392505050565b6106fd81611c3b565b9050610657565b5050919050565b600354600160a01b900460ff166107355760405163bc871ce560e01b815260040160405180910390fd5b600354600160a81b900460ff161561076057604051631b0e923f60e11b815260040160405180910390fd5b6002546001600160a01b0316331461078b57604051634b98449160e11b815260040160405180910390fd5b6003805460ff60a01b1916905560405133907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90600090a2565b6002546001600160a01b031633146107f057604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166108175760405163fb7566d760e01b815260040160405180910390fd5b600c546001600160a01b0390811690821681141561084857604051630333a68160e41b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527ff7248061c47e1cf157db85f3c9bac5cb0007cbb8867be0807f6dcdb7eb8f5268910160405180910390a150600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60006108ba6001611313565b905080156108d2576000805461ff0019166101001790555b6001600160a01b0383166108f957604051634cc5e93360e11b815260040160405180910390fd5b6001600160a01b0382166109205760405163d7d925af60e01b815260040160405180910390fd5b6109286113a4565b6109306113d5565b600680546001600160a01b038086166001600160a01b03199283161790925560078054928516929091169190911790556001600a5580156109ab576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6109b8611404565b6001600160a01b0383166109d0576109ab828261142f565b6109ab6001600160a01b0384168383611548565b60606109f0600461159a565b905090565b6002546001600160a01b03163314610a2057604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610a4757604051632b8962df60e21b815260040160405180910390fd5b6008546001600160a01b03908116908216811415610a7857604051630333a68160e41b815260040160405180910390fd5b816001600160a01b0316816001600160a01b03167f981f8692d39ed552e61144c73b1f608b9f86a04d56656a1dc248cc21dfce42c360405160405180910390a350600880546001600160a01b0319166001600160a01b0392909216919091179055565b600354600160a01b900460ff1615610b0657604051631309a56360e01b815260040160405180910390fd5b6002546001600160a01b03163314610b3157604051634b98449160e11b815260040160405180910390fd5b6003805460ff60a01b1916600160a01b17905560405133907f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890600090a2565b6002546001600160a01b03163314610b9c57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610bc35760405163fb7566d760e01b815260040160405180910390fd5b600d546001600160a01b03908116908216811415610bf457604051630333a68160e41b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527fb38ca65e0a787c95b1f6dc474c79d07d88f1056150380bbcf3411cbecc14552c910160405180910390a150600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610c8557604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610cac57604051634cc5e93360e11b815260040160405180910390fd5b6006546001600160a01b03908116908216811415610cdd57604051630333a68160e41b815260040160405180910390fd5b816001600160a01b0316816001600160a01b03167fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c60405160405180910390a350600680546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610d6b57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610d925760405163fb7566d760e01b815260040160405180910390fd5b610d9d6004826115a7565b610dba57604051630ea075bf60e21b815260040160405180910390fd5b6001600160a01b03811660009081526009602052604090205480610e0a57600a8054906000610de883611c3b565b909155506001600160a01b038316600090815260096020526040902081905590505b6040516001600160a01b0383169082907f403a01572a6930b9303134960bb6e5d695084d389779d4554842553846135ffd90600090a35050565b6002546001600160a01b03163314610e6f57604051634b98449160e11b815260040160405180910390fd5b610e7a6004826115bc565b610e9757604051630282c45560e31b815260040160405180910390fd5b6001600160a01b03811660008181526009602052604080822054905190917ff8a85b30c450aae09b266730946d2e1c61a36e77d194bf4e50205060a816307991a350565b6002546001600160a01b03163314610f0657604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610f2d57604051634c267bfb60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610f5c6004836115d1565b92915050565b6002546001600160a01b03163314610f8d57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610fb45760405163d7d925af60e01b815260040160405180910390fd5b6007546001600160a01b03908116908216811415610fe557604051630333a68160e41b815260040160405180910390fd5b816001600160a01b0316816001600160a01b03167f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f3860405160405180910390a350600780546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b0316331461107357604051634b98449160e11b815260040160405180910390fd5b6001600160a01b03811661109a5760405163fb7566d760e01b815260040160405180910390fd5b600b546001600160a01b039081169082168114156110cb57604051630333a68160e41b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527ffb7a5f1d35a7022d9d6343bfc9a25035829d0ea72da06978793c945b1d94a17f910160405180910390a150600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031633811461115d5760405163038cdbad60e31b815260040160405180910390fd5b6002546040516001600160a01b038084169216907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600280546001600160a01b039092166001600160a01b0319928316179055600380549091169055565b600354600160a81b900460ff16156111eb57604051631b0e923f60e11b815260040160405180910390fd5b6002546001600160a01b0316331461121657604051634b98449160e11b815260040160405180910390fd5b6003805461ffff60a01b191661010160a01b17905560405133907f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a90600090a2565b600354600160a81b900460ff1661128257604051636e2cff4560e01b815260040160405180910390fd5b6002546001600160a01b031633146112ad57604051634b98449160e11b815260040160405180910390fd5b6003805460ff60a81b1916905560405133907fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc90600090a2565b6001600160a01b03163b151590565b6000610f5c825490565b600061130c83836115f3565b9392505050565b60008054610100900460ff1615611363578160ff1660011480156113365750303b155b61135b5760405162461bcd60e51b815260040161135290611c56565b60405180910390fd5b506000919050565b60005460ff80841691161061138a5760405162461bcd60e51b815260040161135290611c56565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166113cb5760405162461bcd60e51b815260040161135290611ca4565b6113d361161d565b565b600054610100900460ff166113fc5760405162461bcd60e51b815260040161135290611ca4565b6113d361164a565b6002546001600160a01b031633146113d357604051634b98449160e11b815260040160405180910390fd5b8047101561147f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401611352565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146114cc576040519150601f19603f3d011682016040523d82523d6000602084013e6114d1565b606091505b50509050806109ab5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401611352565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109ab9084906116b3565b6060600061130c83611785565b600061130c836001600160a01b0384166117e1565b600061130c836001600160a01b038416611830565b6001600160a01b0381166000908152600183016020526040812054151561130c565b600082600001828154811061160a5761160a611cef565b9060005260206000200154905092915050565b600054610100900460ff166116445760405162461bcd60e51b815260040161135290611ca4565b60018055565b600054610100900460ff166116715760405162461bcd60e51b815260040161135290611ca4565b600280546001600160a01b031916339081179091556040516000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3565b6000611708826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119239092919063ffffffff16565b8051909150156109ab57808060200190518101906117269190611c03565b6109ab5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611352565b6060816000018054806020026020016040519081016040528092919081815260200182805480156117d557602002820191906000526020600020905b8154815260200190600101908083116117c1575b50505050509050919050565b600081815260018301602052604081205461182857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610f5c565b506000610f5c565b60008181526001830160205260408120548015611919576000611854600183611d05565b855490915060009061186890600190611d05565b90508181146118cd57600086600001828154811061188857611888611cef565b90600052602060002001549050808760000184815481106118ab576118ab611cef565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806118de576118de611d1c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610f5c565b6000915050610f5c565b6060611932848460008561193a565b949350505050565b60608247101561199b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611352565b6001600160a01b0385163b6119f25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611352565b600080866001600160a01b03168587604051611a0e9190611d32565b60006040518083038185875af1925050503d8060008114611a4b576040519150601f19603f3d011682016040523d82523d6000602084013e611a50565b606091505b5091509150611a60828286611a6b565b979650505050505050565b60608315611a7a57508161130c565b825115611a8a5782518084602001fd5b8160405162461bcd60e51b81526004016113529190611bd0565b6001600160a01b0381168114611ab957600080fd5b50565b600060208284031215611ace57600080fd5b813561130c81611aa4565b60008060408385031215611aec57600080fd5b8235611af781611aa4565b91506020830135611b0781611aa4565b809150509250929050565b600080600060608486031215611b2757600080fd5b8335611b3281611aa4565b92506020840135611b4281611aa4565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b81811015611b945783516001600160a01b031683529284019291840191600101611b6f565b50909695505050505050565b60005b83811015611bbb578181015183820152602001611ba3565b83811115611bca576000848401525b50505050565b6020815260008251806020840152611bef816040850160208701611ba0565b601f01601f19169190910160400192915050565b600060208284031215611c1557600080fd5b8151801515811461130c57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611c4f57611c4f611c25565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600082821015611d1757611d17611c25565b500390565b634e487b7160e01b600052603160045260246000fd5b60008251611d44818460208701611ba0565b919091019291505056fea2646970667358221220757ea16ea4dfbf0e8236ed29f820ca777200648184ed6e6ed373baf00050a8db64736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x6080604052600436106101e75760003560e01c80638a11a37011610102578063d2c35ce811610095578063f3b27bc311610064578063f3b27bc3146105c8578063fc0e74d1146105dd578063fcfff16f146105f2578063ffa1ad741461060757610205565b8063d2c35ce814610549578063d3033c3914610569578063eaada38214610589578063ecf3a3f9146105a957610205565b8063b6aa515b116100d1578063b6aa515b146104c9578063c415b95c146104e9578063c673bdaf14610509578063c6bbd5a71461052957610205565b80638a11a37014610449578063abc9b45e14610469578063abd9084614610489578063ada61cc3146104a957610205565b8063426172d61161017a578063673a2a1f11610149578063673a2a1f146103d257806374042229146103f45780638456cb591461041457806386ca38101461042957610205565b8063426172d614610353578063485cc955146103735780635c975abb1461039357806362c06767146103b257610205565b80632b3297f9116101b65780632b3297f9146102cf57806332c615b4146102ef57806336074a061461030f5780633f4ba83a1461033c57610205565b80630c340a241461021e57806318e561311461025b578063193d7d841461027f5780631a0dd00b1461029f57610205565b3661020557604051636436c22d60e11b815260040160405180910390fd5b60405163a0152e6360e01b815260040160405180910390fd5b34801561022a57600080fd5b5060025461023e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026757600080fd5b50610271600a5481565b604051908152602001610252565b34801561028b57600080fd5b5060085461023e906001600160a01b031681565b3480156102ab57600080fd5b506102bf6102ba366004611abc565b610645565b6040519015158152602001610252565b3480156102db57600080fd5b50600b5461023e906001600160a01b031681565b3480156102fb57600080fd5b50600d5461023e906001600160a01b031681565b34801561031b57600080fd5b5061027161032a366004611abc565b60096020526000908152604090205481565b34801561034857600080fd5b5061035161070b565b005b34801561035f57600080fd5b5061035161036e366004611abc565b6107c5565b34801561037f57600080fd5b5061035161038e366004611ad9565b6108ae565b34801561039f57600080fd5b50600354600160a01b900460ff166102bf565b3480156103be57600080fd5b506103516103cd366004611b12565b6109b0565b3480156103de57600080fd5b506103e76109e4565b6040516102529190611b53565b34801561040057600080fd5b5061035161040f366004611abc565b6109f5565b34801561042057600080fd5b50610351610adb565b34801561043557600080fd5b50610351610444366004611abc565b610b71565b34801561045557600080fd5b5060035461023e906001600160a01b031681565b34801561047557600080fd5b50610351610484366004611abc565b610c5a565b34801561049557600080fd5b506103516104a4366004611abc565b610d40565b3480156104b557600080fd5b506103516104c4366004611abc565b610e44565b3480156104d557600080fd5b506103516104e4366004611abc565b610edb565b3480156104f557600080fd5b5060075461023e906001600160a01b031681565b34801561051557600080fd5b506102bf610524366004611abc565b610f4f565b34801561053557600080fd5b50600c5461023e906001600160a01b031681565b34801561055557600080fd5b50610351610564366004611abc565b610f62565b34801561057557600080fd5b50610351610584366004611abc565b611048565b34801561059557600080fd5b5060065461023e906001600160a01b031681565b3480156105b557600080fd5b50600354600160a81b900460ff166102bf565b3480156105d457600080fd5b50610351611131565b3480156105e957600080fd5b506103516111c0565b3480156105fe57600080fd5b50610351611258565b34801561061357600080fd5b50610638604051806040016040528060058152602001640312e332e360dc1b81525081565b6040516102529190611bd0565b60008061065260046112f6565b905060005b818110156107045761066a600482611300565b604051631a0dd00b60e01b81526001600160a01b0386811660048301529190911690631a0dd00b9060240160206040518083038186803b1580156106ad57600080fd5b505afa1580156106c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e59190611c03565b156106f4575060019392505050565b6106fd81611c3b565b9050610657565b5050919050565b600354600160a01b900460ff166107355760405163bc871ce560e01b815260040160405180910390fd5b600354600160a81b900460ff161561076057604051631b0e923f60e11b815260040160405180910390fd5b6002546001600160a01b0316331461078b57604051634b98449160e11b815260040160405180910390fd5b6003805460ff60a01b1916905560405133907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90600090a2565b6002546001600160a01b031633146107f057604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166108175760405163fb7566d760e01b815260040160405180910390fd5b600c546001600160a01b0390811690821681141561084857604051630333a68160e41b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527ff7248061c47e1cf157db85f3c9bac5cb0007cbb8867be0807f6dcdb7eb8f5268910160405180910390a150600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60006108ba6001611313565b905080156108d2576000805461ff0019166101001790555b6001600160a01b0383166108f957604051634cc5e93360e11b815260040160405180910390fd5b6001600160a01b0382166109205760405163d7d925af60e01b815260040160405180910390fd5b6109286113a4565b6109306113d5565b600680546001600160a01b038086166001600160a01b03199283161790925560078054928516929091169190911790556001600a5580156109ab576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6109b8611404565b6001600160a01b0383166109d0576109ab828261142f565b6109ab6001600160a01b0384168383611548565b60606109f0600461159a565b905090565b6002546001600160a01b03163314610a2057604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610a4757604051632b8962df60e21b815260040160405180910390fd5b6008546001600160a01b03908116908216811415610a7857604051630333a68160e41b815260040160405180910390fd5b816001600160a01b0316816001600160a01b03167f981f8692d39ed552e61144c73b1f608b9f86a04d56656a1dc248cc21dfce42c360405160405180910390a350600880546001600160a01b0319166001600160a01b0392909216919091179055565b600354600160a01b900460ff1615610b0657604051631309a56360e01b815260040160405180910390fd5b6002546001600160a01b03163314610b3157604051634b98449160e11b815260040160405180910390fd5b6003805460ff60a01b1916600160a01b17905560405133907f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890600090a2565b6002546001600160a01b03163314610b9c57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610bc35760405163fb7566d760e01b815260040160405180910390fd5b600d546001600160a01b03908116908216811415610bf457604051630333a68160e41b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527fb38ca65e0a787c95b1f6dc474c79d07d88f1056150380bbcf3411cbecc14552c910160405180910390a150600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610c8557604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610cac57604051634cc5e93360e11b815260040160405180910390fd5b6006546001600160a01b03908116908216811415610cdd57604051630333a68160e41b815260040160405180910390fd5b816001600160a01b0316816001600160a01b03167fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c60405160405180910390a350600680546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610d6b57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610d925760405163fb7566d760e01b815260040160405180910390fd5b610d9d6004826115a7565b610dba57604051630ea075bf60e21b815260040160405180910390fd5b6001600160a01b03811660009081526009602052604090205480610e0a57600a8054906000610de883611c3b565b909155506001600160a01b038316600090815260096020526040902081905590505b6040516001600160a01b0383169082907f403a01572a6930b9303134960bb6e5d695084d389779d4554842553846135ffd90600090a35050565b6002546001600160a01b03163314610e6f57604051634b98449160e11b815260040160405180910390fd5b610e7a6004826115bc565b610e9757604051630282c45560e31b815260040160405180910390fd5b6001600160a01b03811660008181526009602052604080822054905190917ff8a85b30c450aae09b266730946d2e1c61a36e77d194bf4e50205060a816307991a350565b6002546001600160a01b03163314610f0657604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610f2d57604051634c267bfb60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610f5c6004836115d1565b92915050565b6002546001600160a01b03163314610f8d57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610fb45760405163d7d925af60e01b815260040160405180910390fd5b6007546001600160a01b03908116908216811415610fe557604051630333a68160e41b815260040160405180910390fd5b816001600160a01b0316816001600160a01b03167f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f3860405160405180910390a350600780546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b0316331461107357604051634b98449160e11b815260040160405180910390fd5b6001600160a01b03811661109a5760405163fb7566d760e01b815260040160405180910390fd5b600b546001600160a01b039081169082168114156110cb57604051630333a68160e41b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527ffb7a5f1d35a7022d9d6343bfc9a25035829d0ea72da06978793c945b1d94a17f910160405180910390a150600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031633811461115d5760405163038cdbad60e31b815260040160405180910390fd5b6002546040516001600160a01b038084169216907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600280546001600160a01b039092166001600160a01b0319928316179055600380549091169055565b600354600160a81b900460ff16156111eb57604051631b0e923f60e11b815260040160405180910390fd5b6002546001600160a01b0316331461121657604051634b98449160e11b815260040160405180910390fd5b6003805461ffff60a01b191661010160a01b17905560405133907f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a90600090a2565b600354600160a81b900460ff1661128257604051636e2cff4560e01b815260040160405180910390fd5b6002546001600160a01b031633146112ad57604051634b98449160e11b815260040160405180910390fd5b6003805460ff60a81b1916905560405133907fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc90600090a2565b6001600160a01b03163b151590565b6000610f5c825490565b600061130c83836115f3565b9392505050565b60008054610100900460ff1615611363578160ff1660011480156113365750303b155b61135b5760405162461bcd60e51b815260040161135290611c56565b60405180910390fd5b506000919050565b60005460ff80841691161061138a5760405162461bcd60e51b815260040161135290611c56565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166113cb5760405162461bcd60e51b815260040161135290611ca4565b6113d361161d565b565b600054610100900460ff166113fc5760405162461bcd60e51b815260040161135290611ca4565b6113d361164a565b6002546001600160a01b031633146113d357604051634b98449160e11b815260040160405180910390fd5b8047101561147f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401611352565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146114cc576040519150601f19603f3d011682016040523d82523d6000602084013e6114d1565b606091505b50509050806109ab5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401611352565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109ab9084906116b3565b6060600061130c83611785565b600061130c836001600160a01b0384166117e1565b600061130c836001600160a01b038416611830565b6001600160a01b0381166000908152600183016020526040812054151561130c565b600082600001828154811061160a5761160a611cef565b9060005260206000200154905092915050565b600054610100900460ff166116445760405162461bcd60e51b815260040161135290611ca4565b60018055565b600054610100900460ff166116715760405162461bcd60e51b815260040161135290611ca4565b600280546001600160a01b031916339081179091556040516000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3565b6000611708826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119239092919063ffffffff16565b8051909150156109ab57808060200190518101906117269190611c03565b6109ab5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611352565b6060816000018054806020026020016040519081016040528092919081815260200182805480156117d557602002820191906000526020600020905b8154815260200190600101908083116117c1575b50505050509050919050565b600081815260018301602052604081205461182857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610f5c565b506000610f5c565b60008181526001830160205260408120548015611919576000611854600183611d05565b855490915060009061186890600190611d05565b90508181146118cd57600086600001828154811061188857611888611cef565b90600052602060002001549050808760000184815481106118ab576118ab611cef565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806118de576118de611d1c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610f5c565b6000915050610f5c565b6060611932848460008561193a565b949350505050565b60608247101561199b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611352565b6001600160a01b0385163b6119f25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611352565b600080866001600160a01b03168587604051611a0e9190611d32565b60006040518083038185875af1925050503d8060008114611a4b576040519150601f19603f3d011682016040523d82523d6000602084013e611a50565b606091505b5091509150611a60828286611a6b565b979650505050505050565b60608315611a7a57508161130c565b825115611a8a5782518084602001fd5b8160405162461bcd60e51b81526004016113529190611bd0565b6001600160a01b0381168114611ab957600080fd5b50565b600060208284031215611ace57600080fd5b813561130c81611aa4565b60008060408385031215611aec57600080fd5b8235611af781611aa4565b91506020830135611b0781611aa4565b809150509250929050565b600080600060608486031215611b2757600080fd5b8335611b3281611aa4565b92506020840135611b4281611aa4565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b81811015611b945783516001600160a01b031683529284019291840191600101611b6f565b50909695505050505050565b60005b83811015611bbb578181015183820152602001611ba3565b83811115611bca576000848401525b50505050565b6020815260008251806020840152611bef816040850160208701611ba0565b601f01601f19169190910160400192915050565b600060208284031215611c1557600080fd5b8151801515811461130c57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611c4f57611c4f611c25565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600082821015611d1757611d17611c25565b500390565b634e487b7160e01b600052603160045260246000fd5b60008251611d44818460208701611ba0565b919091019291505056fea2646970667358221220757ea16ea4dfbf0e8236ed29f820ca777200648184ed6e6ed373baf00050a8db64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "doesSyntheticTokenExist(address)": {
        "params": {
          "syntheticToken_": "Asset to check"
        },
        "returns": {
          "_exists": "Return true if exists"
        }
      },
      "getPools()": {
        "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees."
      },
      "isPoolRegistered(address)": {
        "params": {
          "pool_": "Pool to check"
        },
        "returns": {
          "_0": "true if exists"
        }
      },
      "open()": {
        "details": "Open contract operations, if contract is in shutdown state"
      },
      "pause()": {
        "details": "Suspend deposit feature, if contract is not paused."
      },
      "shutdown()": {
        "details": "Suspend all features (issue, repay, deposit, withdraw, liquidate and swap), if not already shutdown."
      },
      "sweep(address,address,uint256)": {
        "params": {
          "amount_": "The amount to send",
          "to_": "The recipient of the transfer",
          "token_": "The token to transfer"
        }
      },
      "transferGovernorship(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "proposedGovernor_": "The new proposed governor"
        }
      },
      "unpause()": {
        "details": "Unpause contract operations, allow only if contract is paused and not shutdown."
      }
    },
    "title": "PoolRegistry contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CrossChainDispatcherUpdated(address,address)": {
        "notice": "Emitted when Cross-chain dispatcher contract is updated"
      },
      "FeeCollectorUpdated(address,address)": {
        "notice": "Emitted when fee collector is updated"
      },
      "MasterOracleUpdated(address,address)": {
        "notice": "Emitted when master oracle contract is updated"
      },
      "NativeTokenGatewayUpdated(address,address)": {
        "notice": "Emitted when native token gateway is updated"
      },
      "Open(address)": {
        "notice": "Emitted when contract is turned on"
      },
      "Paused(address)": {
        "notice": "Emitted when contract is paused"
      },
      "PoolRegistered(uint256,address)": {
        "notice": "Emitted when a pool is registered"
      },
      "PoolUnregistered(uint256,address)": {
        "notice": "Emitted when a pool is unregistered"
      },
      "QuoterUpdated(address,address)": {
        "notice": "Emitted when Quoter contract is updated"
      },
      "Shutdown(address)": {
        "notice": "Emitted when contract is shuted down"
      },
      "SwapperUpdated(address,address)": {
        "notice": "Emitted when Swapper contract is updated"
      },
      "Unpaused(address)": {
        "notice": "Emitted when contract is unpaused"
      }
    },
    "kind": "user",
    "methods": {
      "acceptGovernorship()": {
        "notice": "Allows new governor to accept governorship of the contract."
      },
      "crossChainDispatcher()": {
        "notice": "The Cross-chain dispatcher contract"
      },
      "doesSyntheticTokenExist(address)": {
        "notice": "Check if any pool has the token as part of its offerings"
      },
      "everythingStopped()": {
        "notice": "Return `true` if contract is shutdown"
      },
      "feeCollector()": {
        "notice": "Fee collector address"
      },
      "getPools()": {
        "notice": "Get all pools"
      },
      "governor()": {
        "notice": "The governor"
      },
      "idOfPool(address)": {
        "notice": "Map of the ids of the pools"
      },
      "isPoolRegistered(address)": {
        "notice": "Check if pool is registered"
      },
      "masterOracle()": {
        "notice": "Prices' oracle"
      },
      "nativeTokenGateway()": {
        "notice": "Native token gateway address"
      },
      "nextPoolId()": {
        "notice": "Counter of ids of the pools"
      },
      "paused()": {
        "notice": "Return `true` if contract is paused"
      },
      "proposedGovernor()": {
        "notice": "The proposed governor"
      },
      "quoter()": {
        "notice": "The Quoter contract"
      },
      "registerPool(address)": {
        "notice": "Register pool"
      },
      "swapper()": {
        "notice": "Swapper contract"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      },
      "transferGovernorship(address)": {
        "notice": "Transfers governorship of the contract to a new account (`proposedGovernor`)."
      },
      "unregisterPool(address)": {
        "notice": "Unregister pool"
      },
      "updateCrossChainDispatcher(address)": {
        "notice": "Update Cross-chain dispatcher contract"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateMasterOracle(address)": {
        "notice": "Update master oracle contract"
      },
      "updateNativeTokenGateway(address)": {
        "notice": "Update native token gateway"
      },
      "updateQuoter(address)": {
        "notice": "Update Quoter contract"
      },
      "updateSwapper(address)": {
        "notice": "Update Swapper contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19514,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 19517,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 33193,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13865,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "governor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13868,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 32815,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "_paused",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 32817,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "_everythingStopped",
        "offset": 21,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 30783,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "pools",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)23523_storage"
      },
      {
        "astId": 30788,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "masterOracle",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IMasterOracle)28265"
      },
      {
        "astId": 30792,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "feeCollector",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 30796,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "nativeTokenGateway",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 30802,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "idOfPool",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 30806,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "nextPoolId",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 30810,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "swapper",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ISwapper)28350"
      },
      {
        "astId": 30817,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "quoter",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IQuoter)27830"
      },
      {
        "astId": 30821,
        "contract": "contracts/PoolRegistry.sol:PoolRegistry",
        "label": "crossChainDispatcher",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(ICrossChainDispatcher)26961"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICrossChainDispatcher)26961": {
        "encoding": "inplace",
        "label": "contract ICrossChainDispatcher",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterOracle)28265": {
        "encoding": "inplace",
        "label": "contract IMasterOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IQuoter)27830": {
        "encoding": "inplace",
        "label": "contract IQuoter",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapper)28350": {
        "encoding": "inplace",
        "label": "contract ISwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)23523_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 23522,
            "contract": "contracts/PoolRegistry.sol:PoolRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)23222_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)23222_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 23217,
            "contract": "contracts/PoolRegistry.sol:PoolRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 23221,
            "contract": "contracts/PoolRegistry.sol:PoolRegistry",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}