{
  "address": "0x9b6079607038257FDb6be657AA73B18d053cA1FE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FeeIsGreaterThanTheMax",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewValueIsSameAsCurrent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolRegistryIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TierDiscountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TiersNotOrderedByMin",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDepositFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDepositFee",
          "type": "uint256"
        }
      ],
      "name": "DepositFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldIssueFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newIssueFee",
          "type": "uint256"
        }
      ],
      "name": "IssueFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidatorIncentive",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidatorIncentive",
          "type": "uint256"
        }
      ],
      "name": "LiquidatorIncentiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProtocolLiquidationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolLiquidationFee",
          "type": "uint256"
        }
      ],
      "name": "ProtocolLiquidationFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRepayFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRepayFee",
          "type": "uint256"
        }
      ],
      "name": "RepayFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "SwapDefaultFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "min",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "discount",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct FeeProviderStorageV1.Tier[]",
          "name": "oldTiers",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "min",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "discount",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct FeeProviderStorageV1.Tier[]",
          "name": "newTiers",
          "type": "tuple[]"
        }
      ],
      "name": "TiersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldWithdrawFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFeeUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "esMET",
      "outputs": [
        {
          "internalType": "contract IESMET",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTiers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "min",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "discount",
              "type": "uint128"
            }
          ],
          "internalType": "struct FeeProviderStorageV1.Tier[]",
          "name": "_tiers",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "poolRegistry_",
          "type": "address"
        },
        {
          "internalType": "contract IESMET",
          "name": "esMET_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issueFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationFees",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "liquidatorIncentive",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "protocolFee",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRegistry",
      "outputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "swapFeeFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_swapFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tiers",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "min",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "discount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDefaultSwapFee_",
          "type": "uint256"
        }
      ],
      "name": "updateDefaultSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDepositFee_",
          "type": "uint256"
        }
      ],
      "name": "updateDepositFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newIssueFee_",
          "type": "uint256"
        }
      ],
      "name": "updateIssueFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newLiquidatorIncentive_",
          "type": "uint128"
        }
      ],
      "name": "updateLiquidatorIncentive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newProtocolLiquidationFee_",
          "type": "uint128"
        }
      ],
      "name": "updateProtocolLiquidationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRepayFee_",
          "type": "uint256"
        }
      ],
      "name": "updateRepayFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "min",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "discount",
              "type": "uint128"
            }
          ],
          "internalType": "struct FeeProviderStorageV1.Tier[]",
          "name": "tiers_",
          "type": "tuple[]"
        }
      ],
      "name": "updateTiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newWithdrawFee_",
          "type": "uint256"
        }
      ],
      "name": "updateWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a49277754f21f4dc0a6fe24de31ccb5be5973687f6539db7f2071caa2950213",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x9b6079607038257FDb6be657AA73B18d053cA1FE",
    "transactionIndex": 184,
    "gasUsed": "1421981",
    "logsBloom": "0x
    "blockHash": "0xf9e77439bf0f384b996c1e40b365806d5612b48d82a07a61a43d9dfb5f8e1544",
    "transactionHash": "0x0a49277754f21f4dc0a6fe24de31ccb5be5973687f6539db7f2071caa2950213",
    "logs": [],
    "blockNumber": 18314496,
    "cumulativeGasUsed": "14742517",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "545cb6254fd08cfae8ffa56eab2faa67",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FeeIsGreaterThanTheMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewValueIsSameAsCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolRegistryIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TierDiscountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TiersNotOrderedByMin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDepositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositFee\",\"type\":\"uint256\"}],\"name\":\"DepositFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldIssueFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIssueFee\",\"type\":\"uint256\"}],\"name\":\"IssueFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidatorIncentive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidatorIncentive\",\"type\":\"uint256\"}],\"name\":\"LiquidatorIncentiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolLiquidationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"ProtocolLiquidationFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRepayFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRepayFee\",\"type\":\"uint256\"}],\"name\":\"RepayFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"SwapDefaultFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"discount\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct FeeProviderStorageV1.Tier[]\",\"name\":\"oldTiers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"discount\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct FeeProviderStorageV1.Tier[]\",\"name\":\"newTiers\",\"type\":\"tuple[]\"}],\"name\":\"TiersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWithdrawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"WithdrawFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esMET\",\"outputs\":[{\"internalType\":\"contract IESMET\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTiers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"discount\",\"type\":\"uint128\"}],\"internalType\":\"struct FeeProviderStorageV1.Tier[]\",\"name\":\"_tiers\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"poolRegistry_\",\"type\":\"address\"},{\"internalType\":\"contract IESMET\",\"name\":\"esMET_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidatorIncentive\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"protocolFee\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"swapFeeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"discount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDefaultSwapFee_\",\"type\":\"uint256\"}],\"name\":\"updateDefaultSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDepositFee_\",\"type\":\"uint256\"}],\"name\":\"updateDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newIssueFee_\",\"type\":\"uint256\"}],\"name\":\"updateIssueFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newLiquidatorIncentive_\",\"type\":\"uint128\"}],\"name\":\"updateLiquidatorIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newProtocolLiquidationFee_\",\"type\":\"uint128\"}],\"name\":\"updateProtocolLiquidationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRepayFee_\",\"type\":\"uint256\"}],\"name\":\"updateRepayFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"discount\",\"type\":\"uint128\"}],\"internalType\":\"struct FeeProviderStorageV1.Tier[]\",\"name\":\"tiers_\",\"type\":\"tuple[]\"}],\"name\":\"updateTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWithdrawFee_\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swapFeeFor(address)\":{\"params\":{\"account_\":\"The account address\"},\"returns\":{\"_swapFee\":\"The account's swap fee\"}},\"updateLiquidatorIncentive(uint128)\":{\"details\":\"liquidatorIncentive + protocolFee can't surpass max\"},\"updateProtocolLiquidationFee(uint128)\":{\"details\":\"liquidatorIncentive + protocolFee can't surpass max\"}},\"title\":\"FeeProvider contract\",\"version\":1},\"userdoc\":{\"events\":{\"DepositFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when deposit fee is updated\"},\"IssueFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when issue fee is updated\"},\"LiquidatorIncentiveUpdated(uint256,uint256)\":{\"notice\":\"Emitted when liquidator incentive is updated\"},\"ProtocolLiquidationFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when protocol liquidation fee is updated\"},\"RepayFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when repay fee is updated\"},\"SwapDefaultFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when swap fee is updated\"},\"TiersUpdated((uint128,uint128)[],(uint128,uint128)[])\":{\"notice\":\"Emitted when tiers are updated\"},\"WithdrawFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when withdraw fee is updated\"}},\"kind\":\"user\",\"methods\":{\"defaultSwapFee()\":{\"notice\":\"The default fee charged when swapping synthetic tokens\"},\"depositFee()\":{\"notice\":\"The fee charged when depositing collateral\"},\"esMET()\":{\"notice\":\"The esMET contract\"},\"getTiers()\":{\"notice\":\"Get fee discount tiers\"},\"issueFee()\":{\"notice\":\"The fee charged when minting a synthetic token\"},\"liquidationFees()\":{\"notice\":\"The fees charged when liquidating a position\"},\"repayFee()\":{\"notice\":\"The fee charged when repaying debt\"},\"swapFeeFor(address)\":{\"notice\":\"Get the swap fee for a given account Fee discount are applied on top of the default swap fee depending on user's esMET balance\"},\"tiers(uint256)\":{\"notice\":\"The fee discount tiers\"},\"updateDefaultSwapFee(uint256)\":{\"notice\":\"Update swap fee\"},\"updateDepositFee(uint256)\":{\"notice\":\"Update deposit fee\"},\"updateIssueFee(uint256)\":{\"notice\":\"Update issue fee\"},\"updateLiquidatorIncentive(uint128)\":{\"notice\":\"Update liquidator incentive\"},\"updateProtocolLiquidationFee(uint128)\":{\"notice\":\"Update protocol liquidation fee\"},\"updateRepayFee(uint256)\":{\"notice\":\"Update repay fee\"},\"updateTiers((uint128,uint128)[])\":{\"notice\":\"Update fee discount tiers\"},\"updateWithdrawFee(uint256)\":{\"notice\":\"Update withdraw fee\"},\"withdrawFee()\":{\"notice\":\"The fee charged when withdrawing collateral\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeProvider.sol\":\"FeeProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/FeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./storage/FeeProviderStorage.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\n\\nerror SenderIsNotGovernor();\\nerror PoolRegistryIsNull();\\nerror NewValueIsSameAsCurrent();\\nerror FeeIsGreaterThanTheMax();\\nerror TierDiscountTooHigh();\\nerror TiersNotOrderedByMin();\\n\\n/**\\n * @title FeeProvider contract\\n */\\ncontract FeeProvider is Initializable, FeeProviderStorageV1 {\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    uint256 internal constant MAX_FEE_VALUE = 0.25e18; // 25%\\n    uint256 internal constant MAX_FEE_DISCOUNT = 1e18; // 100%\\n\\n    /// @notice Emitted when deposit fee is updated\\n    event DepositFeeUpdated(uint256 oldDepositFee, uint256 newDepositFee);\\n\\n    /// @notice Emitted when issue fee is updated\\n    event IssueFeeUpdated(uint256 oldIssueFee, uint256 newIssueFee);\\n\\n    /// @notice Emitted when liquidator incentive is updated\\n    event LiquidatorIncentiveUpdated(uint256 oldLiquidatorIncentive, uint256 newLiquidatorIncentive);\\n\\n    /// @notice Emitted when protocol liquidation fee is updated\\n    event ProtocolLiquidationFeeUpdated(uint256 oldProtocolLiquidationFee, uint256 newProtocolLiquidationFee);\\n\\n    /// @notice Emitted when repay fee is updated\\n    event RepayFeeUpdated(uint256 oldRepayFee, uint256 newRepayFee);\\n\\n    /// @notice Emitted when swap fee is updated\\n    event SwapDefaultFeeUpdated(uint256 oldSwapFee, uint256 newSwapFee);\\n\\n    /// @notice Emitted when tiers are updated\\n    event TiersUpdated(Tier[] oldTiers, Tier[] newTiers);\\n\\n    /// @notice Emitted when withdraw fee is updated\\n    event WithdrawFeeUpdated(uint256 oldWithdrawFee, uint256 newWithdrawFee);\\n\\n    /**\\n     * @notice Throws if caller isn't the governor\\n     */\\n    modifier onlyGovernor() {\\n        if (msg.sender != poolRegistry.governor()) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(IPoolRegistry poolRegistry_, IESMET esMET_) public initializer {\\n        if (address(poolRegistry_) == address(0)) revert PoolRegistryIsNull();\\n\\n        poolRegistry = poolRegistry_;\\n        esMET = esMET_;\\n\\n        liquidationFees = LiquidationFees({\\n            liquidatorIncentive: 1e17, // 10%\\n            protocolFee: 8e16 // 8%\\n        });\\n        defaultSwapFee = 25e14; // 0.25%\\n    }\\n\\n    /**\\n     * @notice Get fee discount tiers\\n     */\\n    function getTiers() external view returns (Tier[] memory _tiers) {\\n        return tiers;\\n    }\\n\\n    /**\\n     * @notice Get the swap fee for a given account\\n     * Fee discount are applied on top of the default swap fee depending on user's esMET balance\\n     * @param account_ The account address\\n     * @return _swapFee The account's swap fee\\n     */\\n    function swapFeeFor(address account_) external view override returns (uint256 _swapFee) {\\n        uint256 _len = tiers.length;\\n\\n        if (_len == 0) {\\n            return defaultSwapFee;\\n        }\\n\\n        uint256 _balance = esMET.balanceOf(account_);\\n\\n        if (_balance < tiers[0].min) {\\n            return defaultSwapFee;\\n        }\\n\\n        uint256 i = 1;\\n        while (i < _len) {\\n            if (_balance < tiers[i].min) {\\n                unchecked {\\n                    // Note: `discount` is always <= `1e18`\\n                    return defaultSwapFee.wadMul(1e18 - tiers[i - 1].discount);\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        unchecked {\\n            // Note: `discount` is always <= `1e18`\\n            return defaultSwapFee.wadMul(1e18 - tiers[_len - 1].discount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update deposit fee\\n     */\\n    function updateDepositFee(uint256 newDepositFee_) external onlyGovernor {\\n        if (newDepositFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        uint256 _currentDepositFee = depositFee;\\n        if (newDepositFee_ == _currentDepositFee) revert NewValueIsSameAsCurrent();\\n        emit DepositFeeUpdated(_currentDepositFee, newDepositFee_);\\n        depositFee = newDepositFee_;\\n    }\\n\\n    /**\\n     * @notice Update issue fee\\n     */\\n    function updateIssueFee(uint256 newIssueFee_) external onlyGovernor {\\n        if (newIssueFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        uint256 _currentIssueFee = issueFee;\\n        if (newIssueFee_ == _currentIssueFee) revert NewValueIsSameAsCurrent();\\n        emit IssueFeeUpdated(_currentIssueFee, newIssueFee_);\\n        issueFee = newIssueFee_;\\n    }\\n\\n    /**\\n     * @notice Update liquidator incentive\\n     * @dev liquidatorIncentive + protocolFee can't surpass max\\n     */\\n    function updateLiquidatorIncentive(uint128 newLiquidatorIncentive_) external onlyGovernor {\\n        LiquidationFees memory _current = liquidationFees;\\n        if (newLiquidatorIncentive_ + _current.protocolFee > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        if (newLiquidatorIncentive_ == _current.liquidatorIncentive) revert NewValueIsSameAsCurrent();\\n        emit LiquidatorIncentiveUpdated(_current.liquidatorIncentive, newLiquidatorIncentive_);\\n        liquidationFees.liquidatorIncentive = newLiquidatorIncentive_;\\n    }\\n\\n    /**\\n     * @notice Update protocol liquidation fee\\n     * @dev liquidatorIncentive + protocolFee can't surpass max\\n     */\\n    function updateProtocolLiquidationFee(uint128 newProtocolLiquidationFee_) external onlyGovernor {\\n        LiquidationFees memory _current = liquidationFees;\\n        if (newProtocolLiquidationFee_ + _current.liquidatorIncentive > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        if (newProtocolLiquidationFee_ == _current.protocolFee) revert NewValueIsSameAsCurrent();\\n        emit ProtocolLiquidationFeeUpdated(_current.protocolFee, newProtocolLiquidationFee_);\\n        liquidationFees.protocolFee = newProtocolLiquidationFee_;\\n    }\\n\\n    /**\\n     * @notice Update repay fee\\n     */\\n    function updateRepayFee(uint256 newRepayFee_) external onlyGovernor {\\n        if (newRepayFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        uint256 _currentRepayFee = repayFee;\\n        if (newRepayFee_ == _currentRepayFee) revert NewValueIsSameAsCurrent();\\n        emit RepayFeeUpdated(_currentRepayFee, newRepayFee_);\\n        repayFee = newRepayFee_;\\n    }\\n\\n    /**\\n     * @notice Update swap fee\\n     */\\n    function updateDefaultSwapFee(uint256 newDefaultSwapFee_) external onlyGovernor {\\n        if (newDefaultSwapFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        uint256 _current = defaultSwapFee;\\n        if (newDefaultSwapFee_ == _current) revert NewValueIsSameAsCurrent();\\n        emit SwapDefaultFeeUpdated(_current, newDefaultSwapFee_);\\n        defaultSwapFee = newDefaultSwapFee_;\\n    }\\n\\n    /**\\n     * @notice Update fee discount tiers\\n     */\\n    function updateTiers(Tier[] memory tiers_) external onlyGovernor {\\n        emit TiersUpdated(tiers, tiers_);\\n        delete tiers;\\n\\n        uint256 _len = tiers_.length;\\n        for (uint256 i; i < _len; ++i) {\\n            Tier memory _tier = tiers_[i];\\n            if (_tier.discount > MAX_FEE_DISCOUNT) revert TierDiscountTooHigh();\\n            if (i > 0 && tiers_[i - 1].min > _tier.min) revert TiersNotOrderedByMin();\\n            tiers.push(_tier);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update withdraw fee\\n     */\\n    function updateWithdrawFee(uint256 newWithdrawFee_) external onlyGovernor {\\n        if (newWithdrawFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        uint256 _currentWithdrawFee = withdrawFee;\\n        if (newWithdrawFee_ == _currentWithdrawFee) revert NewValueIsSameAsCurrent();\\n        emit WithdrawFeeUpdated(_currentWithdrawFee, newWithdrawFee_);\\n        withdrawFee = newWithdrawFee_;\\n    }\\n}\\n\",\"keccak256\":\"0x905a01b21e6698472864087562e70ea9773ef0968bbc32ad2049d3aa8c07faa9\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/IOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../../../../openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCoreUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"keccak256\":\"0x22651924296f8308db8195d7a86a6781023241c53905418f2d3925e3f693f530\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../IOFTCoreUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the composable OFT core standard\\n */\\ninterface IComposableOFTCoreUpgradeable is IOFTCoreUpgradeable {\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function retryOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n\\n    event CallOFTReceivedFailure(\\n        uint16 indexed _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _from,\\n        address indexed _to,\\n        uint _amount,\\n        bytes _payload,\\n        bytes _reason\\n    );\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event RetryOFTReceivedSuccess(bytes32 _messageHash);\\n\\n    event NonContractAddress(address _address);\\n}\\n\",\"keccak256\":\"0x769b9356ad6019bdabdcfc11762f28d15eb9a4e262efc96835725f6862c5d9e9\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverUpgradeable {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x287036c704c57e34a6fc3f7e67c8dfaaade6eb3667b570576bc491c0f1f89a5b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStargateRouter.sol\\\";\\n\\ninterface IStargateComposer {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function factory() external view returns (address);\\n\\n    function stargateBridge() external view returns (address);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function peers(uint16 _chainId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdfdd1690bf176ac05803534a60227be90cc435b4bdd8fce2348f1a9417a9f63a\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe4d6bf9fa422e5e43dc1b6880f951d06611a4ed12c2dd7dd8c0b6a5d9e06ad0d\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function clearCachedSwap(uint16 _srcChainId, bytes calldata _srcAddress, uint256 _nonce) external;\\n\\n    function factory() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function cachedSwapLookup(\\n        uint16 _chainId_,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (address token, uint256 amountLD, address to, bytes memory payload);\\n}\\n\",\"keccak256\":\"0x92126df8e682b2c5647c7b22e7387da69f9e72480af86948ce5ed17dc2c9e0a7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICrossChainDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateRouter.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface ICrossChainDispatcher is IStargateReceiver, IOFTReceiverUpgradeable {\\n    function crossChainDispatcherOf(uint16 chainId_) external view returns (address);\\n\\n    function triggerFlashRepaySwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function triggerLeverageSwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function isBridgingActive() external view returns (bool);\\n\\n    function flashRepayCallbackTxGasLimit() external view returns (uint64);\\n\\n    function flashRepaySwapTxGasLimit() external view returns (uint64);\\n\\n    function leverageCallbackTxGasLimit() external view returns (uint64);\\n\\n    function leverageSwapTxGasLimit() external view returns (uint64);\\n\\n    function lzBaseGasLimit() external view returns (uint256);\\n\\n    function stargateComposer() external view returns (IStargateComposer);\\n\\n    function stargateSlippage() external view returns (uint256);\\n\\n    function stargatePoolIdOf(address token_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcaf05e625588dcfaa5706acc78a35fa46d50baeb2d28f689036963695a4e39cb\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address to_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xd2f04aa1bee06d6991b10aaf7c03c3ee09d85f8e48ba92feac595ad855881380\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3b132b42090c167b2c0aef6d78d833c669c43b9e55593a7a21a96ed5d3082700\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"./IQuoter.sol\\\";\\nimport \\\"./ICrossChainDispatcher.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function feeCollector() external view returns (address);\\n\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function quoter() external view returns (IQuoter);\\n\\n    function crossChainDispatcher() external view returns (ICrossChainDispatcher);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool _exists);\\n}\\n\",\"keccak256\":\"0x9ffa9e5fd39a48ac2bda561af7fb4fc9df5f8ffb7a602ef1d4da8c068019e723\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\\\";\\n\\ninterface IProxyOFT is IComposableOFTCoreUpgradeable {\\n    function getProxyOFTOf(uint16 chainId_) external view returns (address _proxyOFT);\\n}\\n\",\"keccak256\":\"0x4041a90eb60de460c9e1631aaedfbf2bff2275b3f91964800b1c774546931cd5\",\"license\":\"MIT\"},\"contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface IQuoter {\\n    function quoteCrossChainFlashRepayNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteCrossChainLeverageNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteLeverageCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function quoteFlashRepayCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function getFlashRepaySwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n\\n    function getLeverageSwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n}\\n\",\"keccak256\":\"0x1e4d2dd779a09dc8ea6b6c244b167deddca3a48e71b73bf940da04113b40c752\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/IProxyOFT.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateProxyOFT(IProxyOFT newProxyOFT_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function proxyOFT() external view returns (IProxyOFT);\\n}\\n\",\"keccak256\":\"0xfaeb24d1067e85493a5c8818d6de06fc6dbc72c37e85f82811990d0120f8a0cf\",\"license\":\"MIT\"},\"contracts/interfaces/external/IESMET.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IESMET is IERC20 {\\n    struct LockPosition {\\n        uint256 lockedAmount; // MET locked\\n        uint256 boostedAmount; // based on the `lockPeriod`\\n        uint256 unlockTime; // now + `lockPeriod`\\n    }\\n\\n    function positions(uint256) external view returns (LockPosition memory);\\n\\n    function MINIMUM_LOCK_PERIOD() external view returns (uint256);\\n\\n    function MAXIMUM_LOCK_PERIOD() external view returns (uint256);\\n\\n    function balanceOf(address account_) external view returns (uint256);\\n\\n    function lock(uint256 amount_, uint256 lockPeriod_) external;\\n\\n    function lockFor(address to_, uint256 amount_, uint256 lockPeriod_) external;\\n}\\n\",\"keccak256\":\"0x154743f79dd30d0665e031ea046cdbe20f544dbc69ae7c4a40ee9a5ee4846b16\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x2f080adc5880151dc4446ef43b54abab8e3711c5f2e526917ef39a05e3c16a00\",\"license\":\"MIT\"},\"contracts/interfaces/external/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x75f04b225d0c310be7e0a09ee4c1aa6eeeb8d94e02fc0e4160a9597ce2d8d446\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/FeeProviderStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\nimport \\\"../interfaces/IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/external/IESMET.sol\\\";\\n\\nabstract contract FeeProviderStorageV1 is IFeeProvider {\\n    struct Tier {\\n        uint128 min; // esMET min balance needed to be eligible for `discount`\\n        uint128 discount; // discount in percentage to apply. Use 18 decimals (e.g. 1e16 = 1%)\\n    }\\n\\n    /**\\n     * @notice The fee discount tiers\\n     */\\n    Tier[] public tiers;\\n\\n    /**\\n     * @notice The default fee charged when swapping synthetic tokens\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public override defaultSwapFee;\\n\\n    /**\\n     * @notice The fee charged when depositing collateral\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public override depositFee;\\n\\n    /**\\n     * @notice The fee charged when minting a synthetic token\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public override issueFee;\\n\\n    /**\\n     * @notice The fee charged when withdrawing collateral\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public override withdrawFee;\\n\\n    /**\\n     * @notice The fee charged when repaying debt\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public override repayFee;\\n\\n    /**\\n     * @notice The fees charged when liquidating a position\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    LiquidationFees public override liquidationFees;\\n\\n    /**\\n     * @dev The Pool Registry\\n     */\\n    IPoolRegistry public poolRegistry;\\n\\n    /**\\n     * @notice The esMET contract\\n     */\\n    IESMET public esMET;\\n}\\n\",\"keccak256\":\"0x2b2dd18fb05f1ac4788e2e56277e0632ebd99f445474c2f4dee618c89cada810\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b62000152565b6200002e60ff62000031565b50565b60008054610100900460ff1615620000ca578160ff1660011480156200006a575062000068306200014360201b620012471760201c565b155b620000c25760405162461bcd60e51b815260206004820152602e6024820152600080516020620019a383398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001295760405162461bcd60e51b815260206004820152602e6024820152600080516020620019a383398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000b9565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b61184180620001626000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637c0f59f4116100b8578063cfc0c69f1161007c578063cfc0c69f1461027e578063d2d6b5a31461029c578063daf635de146102af578063de170570146102c2578063e941fa78146102d7578063ffa1ad74146102e057600080fd5b80637c0f59f41461022957806388156a351461023257806388c2c07f14610245578063a8ffba6414610258578063afcff50f1461026b57600080fd5b806336407921116100ff57806336407921146101d4578063485cc955146101e757806357f2e581146101fa5780635cd24fd21461020d57806367a527931461022057600080fd5b8063017def571461013c578063039af9eb1461015157806303df739614610189578063285a7674146101a05780632a9133c1146101cb575b600080fd5b61014f61014a36600461137b565b610311565b005b61016461015f36600461137b565b610454565b604080516001600160801b039384168152929091166020830152015b60405180910390f35b61019260025481565b604051908152602001610180565b6009546101b3906001600160a01b031681565b6040516001600160a01b039091168152602001610180565b61019260045481565b61014f6101e236600461141b565b610489565b61014f6101f536600461150c565b6106b6565b61014f61020836600461137b565b6107c6565b61014f61021b366004611545565b610909565b61019260035481565b61019260065481565b61014f61024036600461137b565b610ace565b61014f61025336600461137b565b610c11565b61014f610266366004611545565b610d54565b6008546101b3906001600160a01b031681565b600754610164906001600160801b0380821691600160801b90041682565b6101926102aa366004611560565b610f11565b61014f6102bd36600461137b565b61108e565b6102ca6111d1565b60405161018091906115d7565b61019260055481565b610304604051806040016040528060058152602001640312e332e360dc1b81525081565b60405161018091906115ea565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561035f57600080fd5b505afa158015610373573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610397919061163f565b6001600160a01b0316336001600160a01b0316146103c857604051634b98449160e11b815260040160405180910390fd5b6703782dace9d900008111156103f1576040516361b716bb60e11b815260040160405180910390fd5b6003548181141561041557604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f828cf983933545af35b9ba46eec951db1cb4c5433c3ec403aeced2963c264790910160405180910390a150600355565b6001818154811061046457600080fd5b6000918252602090912001546001600160801b038082169250600160801b9091041682565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d757600080fd5b505afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f919061163f565b6001600160a01b0316336001600160a01b03161461054057604051634b98449160e11b815260040160405180910390fd5b7f69e7d03bdd0009aaf816649f3df4329250186771260691fa1b13bae6419ead5460018260405161057292919061165c565b60405180910390a161058660016000611341565b805160005b818110156106b15760008382815181106105a7576105a76116c2565b60200260200101519050670de0b6b3a764000081602001516001600160801b031611156105e7576040516350e630a760e01b815260040160405180910390fd5b600082118015610630575080516001600160801b0316846106096001856116ee565b81518110610619576106196116c2565b6020026020010151600001516001600160801b0316115b1561064e576040516344eff01160e11b815260040160405180910390fd5b60018054808201825560009190915281516020909201516001600160801b03908116600160801b029216919091177fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101556106aa81611705565b905061058b565b505050565b60006106c26001611256565b905080156106da576000805461ff0019166101001790555b6001600160a01b03831661070157604051637cb62f2b60e11b815260040160405180910390fd5b600880546001600160a01b038086166001600160a01b03199283161790925560098054928516929091169190911790556040805180820190915267016345785d8a0000815267011c37937e08000060209091015277011c37937e0800000000000000000000016345785d8a00006007556608e1bc9bf0400060025580156106b1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561081457600080fd5b505afa158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c919061163f565b6001600160a01b0316336001600160a01b03161461087d57604051634b98449160e11b815260040160405180910390fd5b6703782dace9d900008111156108a6576040516361b716bb60e11b815260040160405180910390fd5b600454818114156108ca57604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f7aef17a0caeda11810cdf2a40c79ac1340553588671fb35d5cc8d0a3fe2883be910160405180910390a150600455565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561095757600080fd5b505afa15801561096b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098f919061163f565b6001600160a01b0316336001600160a01b0316146109c057604051634b98449160e11b815260040160405180910390fd5b604080518082019091526007546001600160801b03808216808452600160801b9092041660208301526703782dace9d90000906109fd9084611720565b6001600160801b03161115610a25576040516361b716bb60e11b815260040160405180910390fd5b80602001516001600160801b0316826001600160801b03161415610a5c57604051630333a68160e41b815260040160405180910390fd5b7fe0dac1dcc46eceed1fdb7416944e7161273637fb346a67d6f0fce8de3e952f2f816020015183604051610aa69291906001600160801b0392831681529116602082015260400190565b60405180910390a150600780546001600160801b03928316600160801b029216919091179055565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1c57600080fd5b505afa158015610b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b54919061163f565b6001600160a01b0316336001600160a01b031614610b8557604051634b98449160e11b815260040160405180910390fd5b6703782dace9d90000811115610bae576040516361b716bb60e11b815260040160405180910390fd5b60065481811415610bd257604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527fdd45ca427fa57d0870314eb55586e91bcdd31d7cd393e3278caaae9dfb749688910160405180910390a150600655565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5f57600080fd5b505afa158015610c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c97919061163f565b6001600160a01b0316336001600160a01b031614610cc857604051634b98449160e11b815260040160405180910390fd5b6703782dace9d90000811115610cf1576040516361b716bb60e11b815260040160405180910390fd5b60025481811415610d1557604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f1c2986e5350a71fed3feb3bdcbc3a7aaafd924f4b3dc18d90c17ccb885636be8910160405180910390a150600255565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610da257600080fd5b505afa158015610db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dda919061163f565b6001600160a01b0316336001600160a01b031614610e0b57604051634b98449160e11b815260040160405180910390fd5b604080518082019091526007546001600160801b038082168352600160801b90910416602082018190526703782dace9d9000090610e499084611720565b6001600160801b03161115610e71576040516361b716bb60e11b815260040160405180910390fd5b80516001600160801b0383811691161415610e9f57604051630333a68160e41b815260040160405180910390fd5b8051604080516001600160801b03928316815291841660208301527f400289ff508344720ca1c0ffff41672b308ae46b4c8227282c2dea56d8595671910160405180910390a150600780546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b60015460009080610f26575050600254919050565b6009546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b158015610f6c57600080fd5b505afa158015610f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa4919061174b565b90506001600081548110610fba57610fba6116c2565b6000918252602090912001546001600160801b0316811015610fe157505060025492915050565b60015b828110156110765760018181548110610fff57610fff6116c2565b6000918252602090912001546001600160801b031682101561106e57611065600180830381548110611033576110336116c2565b600091825260209091200154600254906001600160801b03600160801b9091048116670de0b6b3a764000003166112ec565b95945050505050565b600101610fe4565b611065600180850381548110611033576110336116c2565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156110dc57600080fd5b505afa1580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611114919061163f565b6001600160a01b0316336001600160a01b03161461114557604051634b98449160e11b815260040160405180910390fd5b6703782dace9d9000081111561116e576040516361b716bb60e11b815260040160405180910390fd5b6005548181141561119257604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f733071ab8253b372ed26a6d1b04aec71c4bfcd209c93397df32bb77478cdd2c8910160405180910390a150600555565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561123e57600084815260209081902060408051808201909152908401546001600160801b038082168352600160801b90910416818301528252600190920191016111f5565b50505050905090565b6001600160a01b03163b151590565b60008054610100900460ff16156112a6578160ff1660011480156112795750303b155b61129e5760405162461bcd60e51b815260040161129590611764565b60405180910390fd5b506000919050565b60005460ff8084169116106112cd5760405162461bcd60e51b815260040161129590611764565b506000805460ff191660ff92909216919091179055600190565b919050565b60008215806112f9575081155b156113065750600061133b565b670de0b6b3a764000061131a6002826117b2565b61132484866117d4565b61132e91906117f3565b61133891906117b2565b90505b92915050565b508054600082559060005260206000209081019061135f9190611362565b50565b5b808211156113775760008155600101611363565b5090565b60006020828403121561138d57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156113cd576113cd611394565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156113fc576113fc611394565b604052919050565b80356001600160801b03811681146112e757600080fd5b6000602080838503121561142e57600080fd5b823567ffffffffffffffff8082111561144657600080fd5b818501915085601f83011261145a57600080fd5b81358181111561146c5761146c611394565b61147a848260051b016113d3565b818152848101925060069190911b83018401908782111561149a57600080fd5b928401925b818410156114ec57604084890312156114b85760008081fd5b6114c06113aa565b6114c985611404565b81526114d6868601611404565b818701528352604093909301929184019161149f565b979650505050505050565b6001600160a01b038116811461135f57600080fd5b6000806040838503121561151f57600080fd5b823561152a816114f7565b9150602083013561153a816114f7565b809150509250929050565b60006020828403121561155757600080fd5b61133882611404565b60006020828403121561157257600080fd5b813561157d816114f7565b9392505050565b600081518084526020808501945080840160005b838110156115cc57815180516001600160801b03908116895290840151168388015260409096019590820190600101611598565b509495945050505050565b6020815260006113386020830184611584565b600060208083528351808285015260005b81811015611617578581018301518582016040015282016115fb565b81811115611629576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561165157600080fd5b815161157d816114f7565b6000604080830181845280865480835260608601915087600052602092508260002060005b828110156116ae5781546001600160801b038116855260801c858501529285019260019182019101611681565b505050848103828601526114ec8187611584565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015611700576117006116d8565b500390565b6000600019821415611719576117196116d8565b5060010190565b60006001600160801b03808316818516808303821115611742576117426116d8565b01949350505050565b60006020828403121561175d57600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000826117cf57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156117ee576117ee6116d8565b500290565b60008219821115611806576118066116d8565b50019056fea2646970667358221220384197dda42946df854ef414353f289738eba72bed857a66444e64af2cfd459c64736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80637c0f59f4116100b8578063cfc0c69f1161007c578063cfc0c69f1461027e578063d2d6b5a31461029c578063daf635de146102af578063de170570146102c2578063e941fa78146102d7578063ffa1ad74146102e057600080fd5b80637c0f59f41461022957806388156a351461023257806388c2c07f14610245578063a8ffba6414610258578063afcff50f1461026b57600080fd5b806336407921116100ff57806336407921146101d4578063485cc955146101e757806357f2e581146101fa5780635cd24fd21461020d57806367a527931461022057600080fd5b8063017def571461013c578063039af9eb1461015157806303df739614610189578063285a7674146101a05780632a9133c1146101cb575b600080fd5b61014f61014a36600461137b565b610311565b005b61016461015f36600461137b565b610454565b604080516001600160801b039384168152929091166020830152015b60405180910390f35b61019260025481565b604051908152602001610180565b6009546101b3906001600160a01b031681565b6040516001600160a01b039091168152602001610180565b61019260045481565b61014f6101e236600461141b565b610489565b61014f6101f536600461150c565b6106b6565b61014f61020836600461137b565b6107c6565b61014f61021b366004611545565b610909565b61019260035481565b61019260065481565b61014f61024036600461137b565b610ace565b61014f61025336600461137b565b610c11565b61014f610266366004611545565b610d54565b6008546101b3906001600160a01b031681565b600754610164906001600160801b0380821691600160801b90041682565b6101926102aa366004611560565b610f11565b61014f6102bd36600461137b565b61108e565b6102ca6111d1565b60405161018091906115d7565b61019260055481565b610304604051806040016040528060058152602001640312e332e360dc1b81525081565b60405161018091906115ea565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561035f57600080fd5b505afa158015610373573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610397919061163f565b6001600160a01b0316336001600160a01b0316146103c857604051634b98449160e11b815260040160405180910390fd5b6703782dace9d900008111156103f1576040516361b716bb60e11b815260040160405180910390fd5b6003548181141561041557604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f828cf983933545af35b9ba46eec951db1cb4c5433c3ec403aeced2963c264790910160405180910390a150600355565b6001818154811061046457600080fd5b6000918252602090912001546001600160801b038082169250600160801b9091041682565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d757600080fd5b505afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f919061163f565b6001600160a01b0316336001600160a01b03161461054057604051634b98449160e11b815260040160405180910390fd5b7f69e7d03bdd0009aaf816649f3df4329250186771260691fa1b13bae6419ead5460018260405161057292919061165c565b60405180910390a161058660016000611341565b805160005b818110156106b15760008382815181106105a7576105a76116c2565b60200260200101519050670de0b6b3a764000081602001516001600160801b031611156105e7576040516350e630a760e01b815260040160405180910390fd5b600082118015610630575080516001600160801b0316846106096001856116ee565b81518110610619576106196116c2565b6020026020010151600001516001600160801b0316115b1561064e576040516344eff01160e11b815260040160405180910390fd5b60018054808201825560009190915281516020909201516001600160801b03908116600160801b029216919091177fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101556106aa81611705565b905061058b565b505050565b60006106c26001611256565b905080156106da576000805461ff0019166101001790555b6001600160a01b03831661070157604051637cb62f2b60e11b815260040160405180910390fd5b600880546001600160a01b038086166001600160a01b03199283161790925560098054928516929091169190911790556040805180820190915267016345785d8a0000815267011c37937e08000060209091015277011c37937e0800000000000000000000016345785d8a00006007556608e1bc9bf0400060025580156106b1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561081457600080fd5b505afa158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c919061163f565b6001600160a01b0316336001600160a01b03161461087d57604051634b98449160e11b815260040160405180910390fd5b6703782dace9d900008111156108a6576040516361b716bb60e11b815260040160405180910390fd5b600454818114156108ca57604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f7aef17a0caeda11810cdf2a40c79ac1340553588671fb35d5cc8d0a3fe2883be910160405180910390a150600455565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561095757600080fd5b505afa15801561096b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098f919061163f565b6001600160a01b0316336001600160a01b0316146109c057604051634b98449160e11b815260040160405180910390fd5b604080518082019091526007546001600160801b03808216808452600160801b9092041660208301526703782dace9d90000906109fd9084611720565b6001600160801b03161115610a25576040516361b716bb60e11b815260040160405180910390fd5b80602001516001600160801b0316826001600160801b03161415610a5c57604051630333a68160e41b815260040160405180910390fd5b7fe0dac1dcc46eceed1fdb7416944e7161273637fb346a67d6f0fce8de3e952f2f816020015183604051610aa69291906001600160801b0392831681529116602082015260400190565b60405180910390a150600780546001600160801b03928316600160801b029216919091179055565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1c57600080fd5b505afa158015610b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b54919061163f565b6001600160a01b0316336001600160a01b031614610b8557604051634b98449160e11b815260040160405180910390fd5b6703782dace9d90000811115610bae576040516361b716bb60e11b815260040160405180910390fd5b60065481811415610bd257604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527fdd45ca427fa57d0870314eb55586e91bcdd31d7cd393e3278caaae9dfb749688910160405180910390a150600655565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5f57600080fd5b505afa158015610c73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c97919061163f565b6001600160a01b0316336001600160a01b031614610cc857604051634b98449160e11b815260040160405180910390fd5b6703782dace9d90000811115610cf1576040516361b716bb60e11b815260040160405180910390fd5b60025481811415610d1557604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f1c2986e5350a71fed3feb3bdcbc3a7aaafd924f4b3dc18d90c17ccb885636be8910160405180910390a150600255565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610da257600080fd5b505afa158015610db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dda919061163f565b6001600160a01b0316336001600160a01b031614610e0b57604051634b98449160e11b815260040160405180910390fd5b604080518082019091526007546001600160801b038082168352600160801b90910416602082018190526703782dace9d9000090610e499084611720565b6001600160801b03161115610e71576040516361b716bb60e11b815260040160405180910390fd5b80516001600160801b0383811691161415610e9f57604051630333a68160e41b815260040160405180910390fd5b8051604080516001600160801b03928316815291841660208301527f400289ff508344720ca1c0ffff41672b308ae46b4c8227282c2dea56d8595671910160405180910390a150600780546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b60015460009080610f26575050600254919050565b6009546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b158015610f6c57600080fd5b505afa158015610f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa4919061174b565b90506001600081548110610fba57610fba6116c2565b6000918252602090912001546001600160801b0316811015610fe157505060025492915050565b60015b828110156110765760018181548110610fff57610fff6116c2565b6000918252602090912001546001600160801b031682101561106e57611065600180830381548110611033576110336116c2565b600091825260209091200154600254906001600160801b03600160801b9091048116670de0b6b3a764000003166112ec565b95945050505050565b600101610fe4565b611065600180850381548110611033576110336116c2565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156110dc57600080fd5b505afa1580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611114919061163f565b6001600160a01b0316336001600160a01b03161461114557604051634b98449160e11b815260040160405180910390fd5b6703782dace9d9000081111561116e576040516361b716bb60e11b815260040160405180910390fd5b6005548181141561119257604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f733071ab8253b372ed26a6d1b04aec71c4bfcd209c93397df32bb77478cdd2c8910160405180910390a150600555565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561123e57600084815260209081902060408051808201909152908401546001600160801b038082168352600160801b90910416818301528252600190920191016111f5565b50505050905090565b6001600160a01b03163b151590565b60008054610100900460ff16156112a6578160ff1660011480156112795750303b155b61129e5760405162461bcd60e51b815260040161129590611764565b60405180910390fd5b506000919050565b60005460ff8084169116106112cd5760405162461bcd60e51b815260040161129590611764565b506000805460ff191660ff92909216919091179055600190565b919050565b60008215806112f9575081155b156113065750600061133b565b670de0b6b3a764000061131a6002826117b2565b61132484866117d4565b61132e91906117f3565b61133891906117b2565b90505b92915050565b508054600082559060005260206000209081019061135f9190611362565b50565b5b808211156113775760008155600101611363565b5090565b60006020828403121561138d57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156113cd576113cd611394565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156113fc576113fc611394565b604052919050565b80356001600160801b03811681146112e757600080fd5b6000602080838503121561142e57600080fd5b823567ffffffffffffffff8082111561144657600080fd5b818501915085601f83011261145a57600080fd5b81358181111561146c5761146c611394565b61147a848260051b016113d3565b818152848101925060069190911b83018401908782111561149a57600080fd5b928401925b818410156114ec57604084890312156114b85760008081fd5b6114c06113aa565b6114c985611404565b81526114d6868601611404565b818701528352604093909301929184019161149f565b979650505050505050565b6001600160a01b038116811461135f57600080fd5b6000806040838503121561151f57600080fd5b823561152a816114f7565b9150602083013561153a816114f7565b809150509250929050565b60006020828403121561155757600080fd5b61133882611404565b60006020828403121561157257600080fd5b813561157d816114f7565b9392505050565b600081518084526020808501945080840160005b838110156115cc57815180516001600160801b03908116895290840151168388015260409096019590820190600101611598565b509495945050505050565b6020815260006113386020830184611584565b600060208083528351808285015260005b81811015611617578581018301518582016040015282016115fb565b81811115611629576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561165157600080fd5b815161157d816114f7565b6000604080830181845280865480835260608601915087600052602092508260002060005b828110156116ae5781546001600160801b038116855260801c858501529285019260019182019101611681565b505050848103828601526114ec8187611584565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015611700576117006116d8565b500390565b6000600019821415611719576117196116d8565b5060010190565b60006001600160801b03808316818516808303821115611742576117426116d8565b01949350505050565b60006020828403121561175d57600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000826117cf57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156117ee576117ee6116d8565b500290565b60008219821115611806576118066116d8565b50019056fea2646970667358221220384197dda42946df854ef414353f289738eba72bed857a66444e64af2cfd459c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swapFeeFor(address)": {
        "params": {
          "account_": "The account address"
        },
        "returns": {
          "_swapFee": "The account's swap fee"
        }
      },
      "updateLiquidatorIncentive(uint128)": {
        "details": "liquidatorIncentive + protocolFee can't surpass max"
      },
      "updateProtocolLiquidationFee(uint128)": {
        "details": "liquidatorIncentive + protocolFee can't surpass max"
      }
    },
    "title": "FeeProvider contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DepositFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when deposit fee is updated"
      },
      "IssueFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when issue fee is updated"
      },
      "LiquidatorIncentiveUpdated(uint256,uint256)": {
        "notice": "Emitted when liquidator incentive is updated"
      },
      "ProtocolLiquidationFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when protocol liquidation fee is updated"
      },
      "RepayFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when repay fee is updated"
      },
      "SwapDefaultFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when swap fee is updated"
      },
      "TiersUpdated((uint128,uint128)[],(uint128,uint128)[])": {
        "notice": "Emitted when tiers are updated"
      },
      "WithdrawFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when withdraw fee is updated"
      }
    },
    "kind": "user",
    "methods": {
      "defaultSwapFee()": {
        "notice": "The default fee charged when swapping synthetic tokens"
      },
      "depositFee()": {
        "notice": "The fee charged when depositing collateral"
      },
      "esMET()": {
        "notice": "The esMET contract"
      },
      "getTiers()": {
        "notice": "Get fee discount tiers"
      },
      "issueFee()": {
        "notice": "The fee charged when minting a synthetic token"
      },
      "liquidationFees()": {
        "notice": "The fees charged when liquidating a position"
      },
      "repayFee()": {
        "notice": "The fee charged when repaying debt"
      },
      "swapFeeFor(address)": {
        "notice": "Get the swap fee for a given account Fee discount are applied on top of the default swap fee depending on user's esMET balance"
      },
      "tiers(uint256)": {
        "notice": "The fee discount tiers"
      },
      "updateDefaultSwapFee(uint256)": {
        "notice": "Update swap fee"
      },
      "updateDepositFee(uint256)": {
        "notice": "Update deposit fee"
      },
      "updateIssueFee(uint256)": {
        "notice": "Update issue fee"
      },
      "updateLiquidatorIncentive(uint128)": {
        "notice": "Update liquidator incentive"
      },
      "updateProtocolLiquidationFee(uint128)": {
        "notice": "Update protocol liquidation fee"
      },
      "updateRepayFee(uint256)": {
        "notice": "Update repay fee"
      },
      "updateTiers((uint128,uint128)[])": {
        "notice": "Update fee discount tiers"
      },
      "updateWithdrawFee(uint256)": {
        "notice": "Update withdraw fee"
      },
      "withdrawFee()": {
        "notice": "The fee charged when withdrawing collateral"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19514,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 19517,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 30739,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "tiers",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Tier)30734_storage)dyn_storage"
      },
      {
        "astId": 30743,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "defaultSwapFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 30747,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "depositFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 30751,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "issueFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 30755,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 30759,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "repayFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 30764,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "liquidationFees",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(LiquidationFees)27263_storage"
      },
      {
        "astId": 30768,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "poolRegistry",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IPoolRegistry)27760"
      },
      {
        "astId": 30772,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "esMET",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IESMET)28233"
      }
    ],
    "types": {
      "t_array(t_struct(Tier)30734_storage)dyn_storage": {
        "base": "t_struct(Tier)30734_storage",
        "encoding": "dynamic_array",
        "label": "struct FeeProviderStorageV1.Tier[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IESMET)28233": {
        "encoding": "inplace",
        "label": "contract IESMET",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolRegistry)27760": {
        "encoding": "inplace",
        "label": "contract IPoolRegistry",
        "numberOfBytes": "20"
      },
      "t_struct(LiquidationFees)27263_storage": {
        "encoding": "inplace",
        "label": "struct IFeeProvider.LiquidationFees",
        "members": [
          {
            "astId": 27260,
            "contract": "contracts/FeeProvider.sol:FeeProvider",
            "label": "liquidatorIncentive",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 27262,
            "contract": "contracts/FeeProvider.sol:FeeProvider",
            "label": "protocolFee",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Tier)30734_storage": {
        "encoding": "inplace",
        "label": "struct FeeProviderStorageV1.Tier",
        "members": [
          {
            "astId": 30731,
            "contract": "contracts/FeeProvider.sol:FeeProvider",
            "label": "min",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 30733,
            "contract": "contracts/FeeProvider.sol:FeeProvider",
            "label": "discount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}