{
  "address": "0x9dAbAE7274D28A45F0B65Bf8ED201A5731492ca0",
  "abi": [
    {
      "inputs": [],
      "name": "EscrowMETIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeIsGreaterThanTheMax",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewValueIsSameAsCurrent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolRegistryIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TierDiscountTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TiersNotOrderedByMin",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDepositFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDepositFee",
          "type": "uint256"
        }
      ],
      "name": "DepositFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldIssueFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newIssueFee",
          "type": "uint256"
        }
      ],
      "name": "IssueFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidatorIncentive",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidatorIncentive",
          "type": "uint256"
        }
      ],
      "name": "LiquidatorIncentiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProtocolLiquidationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolLiquidationFee",
          "type": "uint256"
        }
      ],
      "name": "ProtocolLiquidationFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRepayFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRepayFee",
          "type": "uint256"
        }
      ],
      "name": "RepayFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "SwapDefaultFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "min",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "discount",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct FeeProviderStorageV1.Tier[]",
          "name": "oldTiers",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "min",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "discount",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct FeeProviderStorageV1.Tier[]",
          "name": "newTiers",
          "type": "tuple[]"
        }
      ],
      "name": "TiersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldWithdrawFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFeeUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "esMET",
      "outputs": [
        {
          "internalType": "contract IESMET",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTiers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "min",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "discount",
              "type": "uint128"
            }
          ],
          "internalType": "struct FeeProviderStorageV1.Tier[]",
          "name": "_tiers",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "poolRegistry_",
          "type": "address"
        },
        {
          "internalType": "contract IESMET",
          "name": "esMET_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issueFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationFees",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "liquidatorIncentive",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "protocolFee",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRegistry",
      "outputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "swapFeeFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_swapFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tiers",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "min",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "discount",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDefaultSwapFee_",
          "type": "uint256"
        }
      ],
      "name": "updateDefaultSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDepositFee_",
          "type": "uint256"
        }
      ],
      "name": "updateDepositFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newIssueFee_",
          "type": "uint256"
        }
      ],
      "name": "updateIssueFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newLiquidatorIncentive_",
          "type": "uint128"
        }
      ],
      "name": "updateLiquidatorIncentive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newProtocolLiquidationFee_",
          "type": "uint128"
        }
      ],
      "name": "updateProtocolLiquidationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRepayFee_",
          "type": "uint256"
        }
      ],
      "name": "updateRepayFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "min",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "discount",
              "type": "uint128"
            }
          ],
          "internalType": "struct FeeProviderStorageV1.Tier[]",
          "name": "tiers_",
          "type": "tuple[]"
        }
      ],
      "name": "updateTiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newWithdrawFee_",
          "type": "uint256"
        }
      ],
      "name": "updateWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc5ae2c2ca6e7a43fa919a14790ae243baa81744b908776b76839a1e1f435fd0a",
  "receipt": {
    "to": null,
    "from": "0x7EEeF54Df0596633dbf6Fa3C88dEB1E3eA85ECE8",
    "contractAddress": "0x9dAbAE7274D28A45F0B65Bf8ED201A5731492ca0",
    "transactionIndex": 87,
    "gasUsed": "1366812",
    "logsBloom": "0x
    "blockHash": "0x0d86a003b6d1d108e5004631948302b32b84a6dc6c9c46ad34daba610e463ba0",
    "transactionHash": "0xc5ae2c2ca6e7a43fa919a14790ae243baa81744b908776b76839a1e1f435fd0a",
    "logs": [],
    "blockNumber": 16976931,
    "cumulativeGasUsed": "7738252",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "23d8f9f96a6eb0ccf1492c78a903110c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EscrowMETIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeIsGreaterThanTheMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewValueIsSameAsCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolRegistryIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TierDiscountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TiersNotOrderedByMin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDepositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositFee\",\"type\":\"uint256\"}],\"name\":\"DepositFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldIssueFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIssueFee\",\"type\":\"uint256\"}],\"name\":\"IssueFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidatorIncentive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidatorIncentive\",\"type\":\"uint256\"}],\"name\":\"LiquidatorIncentiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolLiquidationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"ProtocolLiquidationFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRepayFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRepayFee\",\"type\":\"uint256\"}],\"name\":\"RepayFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"SwapDefaultFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"discount\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct FeeProviderStorageV1.Tier[]\",\"name\":\"oldTiers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"discount\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct FeeProviderStorageV1.Tier[]\",\"name\":\"newTiers\",\"type\":\"tuple[]\"}],\"name\":\"TiersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWithdrawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"WithdrawFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esMET\",\"outputs\":[{\"internalType\":\"contract IESMET\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTiers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"discount\",\"type\":\"uint128\"}],\"internalType\":\"struct FeeProviderStorageV1.Tier[]\",\"name\":\"_tiers\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"poolRegistry_\",\"type\":\"address\"},{\"internalType\":\"contract IESMET\",\"name\":\"esMET_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidatorIncentive\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"protocolFee\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"swapFeeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"discount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDefaultSwapFee_\",\"type\":\"uint256\"}],\"name\":\"updateDefaultSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDepositFee_\",\"type\":\"uint256\"}],\"name\":\"updateDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newIssueFee_\",\"type\":\"uint256\"}],\"name\":\"updateIssueFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newLiquidatorIncentive_\",\"type\":\"uint128\"}],\"name\":\"updateLiquidatorIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newProtocolLiquidationFee_\",\"type\":\"uint128\"}],\"name\":\"updateProtocolLiquidationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRepayFee_\",\"type\":\"uint256\"}],\"name\":\"updateRepayFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"min\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"discount\",\"type\":\"uint128\"}],\"internalType\":\"struct FeeProviderStorageV1.Tier[]\",\"name\":\"tiers_\",\"type\":\"tuple[]\"}],\"name\":\"updateTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWithdrawFee_\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swapFeeFor(address)\":{\"params\":{\"account_\":\"The account address\"},\"returns\":{\"_swapFee\":\"The account's swap fee\"}},\"updateLiquidatorIncentive(uint128)\":{\"details\":\"liquidatorIncentive + protocolFee can't surpass max\"},\"updateProtocolLiquidationFee(uint128)\":{\"details\":\"liquidatorIncentive + protocolFee can't surpass max\"}},\"title\":\"FeeProvider contract\",\"version\":1},\"userdoc\":{\"events\":{\"DepositFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when deposit fee is updated\"},\"IssueFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when issue fee is updated\"},\"LiquidatorIncentiveUpdated(uint256,uint256)\":{\"notice\":\"Emitted when liquidator incentive is updated\"},\"ProtocolLiquidationFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when protocol liquidation fee is updated\"},\"RepayFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when repay fee is updated\"},\"SwapDefaultFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when swap fee is updated\"},\"TiersUpdated((uint128,uint128)[],(uint128,uint128)[])\":{\"notice\":\"Emitted when tiers are updated\"},\"WithdrawFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when withdraw fee is updated\"}},\"kind\":\"user\",\"methods\":{\"defaultSwapFee()\":{\"notice\":\"The default fee charged when swapping synthetic tokens\"},\"depositFee()\":{\"notice\":\"The fee charged when depositing collateral\"},\"esMET()\":{\"notice\":\"The esMET contract\"},\"getTiers()\":{\"notice\":\"Get fee discount tiers\"},\"issueFee()\":{\"notice\":\"The fee charged when minting a synthetic token\"},\"liquidationFees()\":{\"notice\":\"The fees charged when liquidating a position\"},\"repayFee()\":{\"notice\":\"The fee charged when repaying debt\"},\"swapFeeFor(address)\":{\"notice\":\"Get the swap fee for a given account Fee discount are applied on top of the default swap fee depending on user's esMET balance\"},\"tiers(uint256)\":{\"notice\":\"The fee discount tiers\"},\"updateDefaultSwapFee(uint256)\":{\"notice\":\"Update swap fee\"},\"updateDepositFee(uint256)\":{\"notice\":\"Update deposit fee\"},\"updateIssueFee(uint256)\":{\"notice\":\"Update issue fee\"},\"updateLiquidatorIncentive(uint128)\":{\"notice\":\"Update liquidator incentive\"},\"updateProtocolLiquidationFee(uint128)\":{\"notice\":\"Update protocol liquidation fee\"},\"updateRepayFee(uint256)\":{\"notice\":\"Update repay fee\"},\"updateTiers((uint128,uint128)[])\":{\"notice\":\"Update fee discount tiers\"},\"updateWithdrawFee(uint256)\":{\"notice\":\"Update withdraw fee\"},\"withdrawFee()\":{\"notice\":\"The fee charged when withdrawing collateral\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeProvider.sol\":\"FeeProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/FeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"./storage/FeeProviderStorage.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\n\\nerror SenderIsNotGovernor();\\nerror PoolRegistryIsNull();\\nerror EscrowMETIsNull();\\nerror NewValueIsSameAsCurrent();\\nerror FeeIsGreaterThanTheMax();\\nerror TierDiscountTooHigh();\\nerror TiersNotOrderedByMin();\\n\\n/**\\n * @title FeeProvider contract\\n */\\ncontract FeeProvider is Initializable, FeeProviderStorageV1 {\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.1.0\\\";\\n\\n    uint256 internal constant MAX_FEE_VALUE = 0.25e18; // 25%\\n    uint256 internal constant MAX_FEE_DISCOUNT = 1e18; // 100%\\n\\n    /// @notice Emitted when deposit fee is updated\\n    event DepositFeeUpdated(uint256 oldDepositFee, uint256 newDepositFee);\\n\\n    /// @notice Emitted when issue fee is updated\\n    event IssueFeeUpdated(uint256 oldIssueFee, uint256 newIssueFee);\\n\\n    /// @notice Emitted when liquidator incentive is updated\\n    event LiquidatorIncentiveUpdated(uint256 oldLiquidatorIncentive, uint256 newLiquidatorIncentive);\\n\\n    /// @notice Emitted when protocol liquidation fee is updated\\n    event ProtocolLiquidationFeeUpdated(uint256 oldProtocolLiquidationFee, uint256 newProtocolLiquidationFee);\\n\\n    /// @notice Emitted when repay fee is updated\\n    event RepayFeeUpdated(uint256 oldRepayFee, uint256 newRepayFee);\\n\\n    /// @notice Emitted when swap fee is updated\\n    event SwapDefaultFeeUpdated(uint256 oldSwapFee, uint256 newSwapFee);\\n\\n    /// @notice Emitted when tiers are updated\\n    event TiersUpdated(Tier[] oldTiers, Tier[] newTiers);\\n\\n    /// @notice Emitted when withdraw fee is updated\\n    event WithdrawFeeUpdated(uint256 oldWithdrawFee, uint256 newWithdrawFee);\\n\\n    /**\\n     * @notice Throws if caller isn't the governor\\n     */\\n    modifier onlyGovernor() {\\n        if (msg.sender != poolRegistry.governor()) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    function initialize(IPoolRegistry poolRegistry_, IESMET esMET_) public initializer {\\n        if (address(poolRegistry_) == address(0)) revert PoolRegistryIsNull();\\n        if (address(esMET_) == address(0)) revert EscrowMETIsNull();\\n\\n        poolRegistry = poolRegistry_;\\n        esMET = esMET_;\\n\\n        liquidationFees = LiquidationFees({\\n            liquidatorIncentive: 1e17, // 10%\\n            protocolFee: 8e16 // 8%\\n        });\\n        defaultSwapFee = 25e14; // 0.25%\\n    }\\n\\n    /**\\n     * @notice Get fee discount tiers\\n     */\\n    function getTiers() external view returns (Tier[] memory _tiers) {\\n        return tiers;\\n    }\\n\\n    /**\\n     * @notice Get the swap fee for a given account\\n     * Fee discount are applied on top of the default swap fee depending on user's esMET balance\\n     * @param account_ The account address\\n     * @return _swapFee The account's swap fee\\n     */\\n    function swapFeeFor(address account_) external view override returns (uint256 _swapFee) {\\n        uint256 _len = tiers.length;\\n\\n        if (_len == 0) {\\n            return defaultSwapFee;\\n        }\\n\\n        uint256 _balance = esMET.balanceOf(account_);\\n\\n        if (_balance < tiers[0].min) {\\n            return defaultSwapFee;\\n        }\\n\\n        uint256 i = 1;\\n        while (i < _len) {\\n            if (_balance < tiers[i].min) {\\n                unchecked {\\n                    // Note: `discount` is always <= `1e18`\\n                    return defaultSwapFee.wadMul(1e18 - tiers[i - 1].discount);\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        unchecked {\\n            // Note: `discount` is always <= `1e18`\\n            return defaultSwapFee.wadMul(1e18 - tiers[_len - 1].discount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update deposit fee\\n     */\\n    function updateDepositFee(uint256 newDepositFee_) external onlyGovernor {\\n        if (newDepositFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        uint256 _currentDepositFee = depositFee;\\n        if (newDepositFee_ == _currentDepositFee) revert NewValueIsSameAsCurrent();\\n        emit DepositFeeUpdated(_currentDepositFee, newDepositFee_);\\n        depositFee = newDepositFee_;\\n    }\\n\\n    /**\\n     * @notice Update issue fee\\n     */\\n    function updateIssueFee(uint256 newIssueFee_) external onlyGovernor {\\n        if (newIssueFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        uint256 _currentIssueFee = issueFee;\\n        if (newIssueFee_ == _currentIssueFee) revert NewValueIsSameAsCurrent();\\n        emit IssueFeeUpdated(_currentIssueFee, newIssueFee_);\\n        issueFee = newIssueFee_;\\n    }\\n\\n    /**\\n     * @notice Update liquidator incentive\\n     * @dev liquidatorIncentive + protocolFee can't surpass max\\n     */\\n    function updateLiquidatorIncentive(uint128 newLiquidatorIncentive_) external onlyGovernor {\\n        LiquidationFees memory _current = liquidationFees;\\n        if (newLiquidatorIncentive_ + _current.protocolFee > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        if (newLiquidatorIncentive_ == _current.liquidatorIncentive) revert NewValueIsSameAsCurrent();\\n        emit LiquidatorIncentiveUpdated(_current.liquidatorIncentive, newLiquidatorIncentive_);\\n        liquidationFees.liquidatorIncentive = newLiquidatorIncentive_;\\n    }\\n\\n    /**\\n     * @notice Update protocol liquidation fee\\n     * @dev liquidatorIncentive + protocolFee can't surpass max\\n     */\\n    function updateProtocolLiquidationFee(uint128 newProtocolLiquidationFee_) external onlyGovernor {\\n        LiquidationFees memory _current = liquidationFees;\\n        if (newProtocolLiquidationFee_ + _current.liquidatorIncentive > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        if (newProtocolLiquidationFee_ == _current.protocolFee) revert NewValueIsSameAsCurrent();\\n        emit ProtocolLiquidationFeeUpdated(_current.protocolFee, newProtocolLiquidationFee_);\\n        liquidationFees.protocolFee = newProtocolLiquidationFee_;\\n    }\\n\\n    /**\\n     * @notice Update repay fee\\n     */\\n    function updateRepayFee(uint256 newRepayFee_) external onlyGovernor {\\n        if (newRepayFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        uint256 _currentRepayFee = repayFee;\\n        if (newRepayFee_ == _currentRepayFee) revert NewValueIsSameAsCurrent();\\n        emit RepayFeeUpdated(_currentRepayFee, newRepayFee_);\\n        repayFee = newRepayFee_;\\n    }\\n\\n    /**\\n     * @notice Update swap fee\\n     */\\n    function updateDefaultSwapFee(uint256 newDefaultSwapFee_) external onlyGovernor {\\n        if (newDefaultSwapFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        uint256 _current = defaultSwapFee;\\n        if (newDefaultSwapFee_ == _current) revert NewValueIsSameAsCurrent();\\n        emit SwapDefaultFeeUpdated(_current, newDefaultSwapFee_);\\n        defaultSwapFee = newDefaultSwapFee_;\\n    }\\n\\n    /**\\n     * @notice Update fee discount tiers\\n     */\\n    function updateTiers(Tier[] memory tiers_) external onlyGovernor {\\n        emit TiersUpdated(tiers, tiers_);\\n        delete tiers;\\n\\n        uint256 _len = tiers_.length;\\n        for (uint256 i; i < _len; ++i) {\\n            Tier memory _tier = tiers_[i];\\n            if (_tier.discount > MAX_FEE_DISCOUNT) revert TierDiscountTooHigh();\\n            if (i > 0 && tiers_[i - 1].min > _tier.min) revert TiersNotOrderedByMin();\\n            tiers.push(_tier);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update withdraw fee\\n     */\\n    function updateWithdrawFee(uint256 newWithdrawFee_) external onlyGovernor {\\n        if (newWithdrawFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\\n        uint256 _currentWithdrawFee = withdrawFee;\\n        if (newWithdrawFee_ == _currentWithdrawFee) revert NewValueIsSameAsCurrent();\\n        emit WithdrawFeeUpdated(_currentWithdrawFee, newWithdrawFee_);\\n        withdrawFee = newWithdrawFee_;\\n    }\\n}\\n\",\"keccak256\":\"0xb0c98ffd9a0c7be5bfe631f07f4b93503a7c9e80063bbb32f679a58677b5950e\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address borrower_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xfeaa19f62620f67e7189e863f96de757c9a17b1b737acedeffd98aaf1df1a0e1\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3b132b42090c167b2c0aef6d78d833c669c43b9e55593a7a21a96ed5d3082700\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateMasterOracle(IMasterOracle newOracle_) external;\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function updateNativeTokenGateway(address newGateway_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd4f5f60c3943b5fa9ffb34ef1909d5a8ef4ca62fd35ea0567cd0402c15d6ee2a\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2bb34cd1201403e756bf1e49ab9318024e3d6e26b61c114721f9d4da57c0fa3d\",\"license\":\"MIT\"},\"contracts/interfaces/external/IESMET.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IESMET {\\n    function balanceOf(address account_) external view returns (uint256);\\n\\n    function lock(uint256 amount_, uint256 lockPeriod_) external;\\n}\\n\",\"keccak256\":\"0xf4881de6ba52ceccf4d9c3eb64ea55d74bd589afc37df17923f4a816f246e0d9\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x2f080adc5880151dc4446ef43b54abab8e3711c5f2e526917ef39a05e3c16a00\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/FeeProviderStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\nimport \\\"../interfaces/IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/external/IESMET.sol\\\";\\n\\nabstract contract FeeProviderStorageV1 is IFeeProvider {\\n    struct Tier {\\n        uint128 min; // esMET min balance needed to be eligible for `discount`\\n        uint128 discount; // discount in percentage to apply. Use 18 decimals (e.g. 1e16 = 1%)\\n    }\\n\\n    /**\\n     * @notice The fee discount tiers\\n     */\\n    Tier[] public tiers;\\n\\n    /**\\n     * @notice The default fee charged when swapping synthetic tokens\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public override defaultSwapFee;\\n\\n    /**\\n     * @notice The fee charged when depositing collateral\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public override depositFee;\\n\\n    /**\\n     * @notice The fee charged when minting a synthetic token\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public override issueFee;\\n\\n    /**\\n     * @notice The fee charged when withdrawing collateral\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public override withdrawFee;\\n\\n    /**\\n     * @notice The fee charged when repaying debt\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public override repayFee;\\n\\n    /**\\n     * @notice The fees charged when liquidating a position\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    LiquidationFees public override liquidationFees;\\n\\n    /**\\n     * @dev The Pool Registry\\n     */\\n    IPoolRegistry public poolRegistry;\\n\\n    /**\\n     * @notice The esMET contract\\n     */\\n    IESMET public esMET;\\n}\\n\",\"keccak256\":\"0x2b2dd18fb05f1ac4788e2e56277e0632ebd99f445474c2f4dee618c89cada810\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506117c4806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637c0f59f4116100b8578063cfc0c69f1161007c578063cfc0c69f1461027e578063d2d6b5a31461029c578063daf635de146102af578063de170570146102c2578063e941fa78146102d7578063ffa1ad74146102e057600080fd5b80637c0f59f41461022957806388156a351461023257806388c2c07f14610245578063a8ffba6414610258578063afcff50f1461026b57600080fd5b806336407921116100ff57806336407921146101d4578063485cc955146101e757806357f2e581146101fa5780635cd24fd21461020d57806367a527931461022057600080fd5b8063017def571461013c578063039af9eb1461015157806303df739614610189578063285a7674146101a05780632a9133c1146101cb575b600080fd5b61014f61014a366004611347565b610311565b005b61016461015f366004611347565b610454565b604080516001600160801b039384168152929091166020830152015b60405180910390f35b61019260025481565b604051908152602001610180565b6009546101b3906001600160a01b031681565b6040516001600160a01b039091168152602001610180565b61019260045481565b61014f6101e23660046113ec565b610489565b61014f6101f53660046114dd565b6106b6565b61014f610208366004611347565b610837565b61014f61021b366004611516565b61097a565b61019260035481565b61019260065481565b61014f610240366004611347565b610b3f565b61014f610253366004611347565b610c82565b61014f610266366004611516565b610dc5565b6008546101b3906001600160a01b031681565b600754610164906001600160801b0380821691600160801b90041682565b6101926102aa366004611531565b610f82565b61014f6102bd366004611347565b6110ff565b6102ca611242565b60405161018091906115a8565b61019260055481565b610304604051806040016040528060058152602001640312e312e360dc1b81525081565b60405161018091906115bb565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561035f57600080fd5b505afa158015610373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103979190611610565b6001600160a01b0316336001600160a01b0316146103c857604051634b98449160e11b815260040160405180910390fd5b6703782dace9d900008111156103f1576040516361b716bb60e11b815260040160405180910390fd5b6003548181141561041557604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f828cf983933545af35b9ba46eec951db1cb4c5433c3ec403aeced2963c264790910160405180910390a150600355565b6001818154811061046457600080fd5b6000918252602090912001546001600160801b038082169250600160801b9091041682565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d757600080fd5b505afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f9190611610565b6001600160a01b0316336001600160a01b03161461054057604051634b98449160e11b815260040160405180910390fd5b7f69e7d03bdd0009aaf816649f3df4329250186771260691fa1b13bae6419ead5460018260405161057292919061162d565b60405180910390a16105866001600061130d565b805160005b818110156106b15760008382815181106105a7576105a7611693565b60200260200101519050670de0b6b3a764000081602001516001600160801b031611156105e7576040516350e630a760e01b815260040160405180910390fd5b600082118015610630575080516001600160801b0316846106096001856116bf565b8151811061061957610619611693565b6020026020010151600001516001600160801b0316115b1561064e576040516344eff01160e11b815260040160405180910390fd5b60018054808201825560009190915281516020909201516001600160801b03908116600160801b029216919091177fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101556106aa816116d6565b905061058b565b505050565b600054610100900460ff16806106cf575060005460ff16155b6107365760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015610758576000805461ffff19166101011790555b6001600160a01b03831661077f57604051637cb62f2b60e11b815260040160405180910390fd5b6001600160a01b0382166107a657604051632398318d60e11b815260040160405180910390fd5b600880546001600160a01b038086166001600160a01b03199283161790925560098054928516929091169190911790556040805180820190915267016345785d8a0000815267011c37937e08000060209091015277011c37937e0800000000000000000000016345785d8a00006007556608e1bc9bf0400060025580156106b1576000805461ff0019169055505050565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561088557600080fd5b505afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190611610565b6001600160a01b0316336001600160a01b0316146108ee57604051634b98449160e11b815260040160405180910390fd5b6703782dace9d90000811115610917576040516361b716bb60e11b815260040160405180910390fd5b6004548181141561093b57604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f7aef17a0caeda11810cdf2a40c79ac1340553588671fb35d5cc8d0a3fe2883be910160405180910390a150600455565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156109c857600080fd5b505afa1580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a009190611610565b6001600160a01b0316336001600160a01b031614610a3157604051634b98449160e11b815260040160405180910390fd5b604080518082019091526007546001600160801b03808216808452600160801b9092041660208301526703782dace9d9000090610a6e90846116f1565b6001600160801b03161115610a96576040516361b716bb60e11b815260040160405180910390fd5b80602001516001600160801b0316826001600160801b03161415610acd57604051630333a68160e41b815260040160405180910390fd5b7fe0dac1dcc46eceed1fdb7416944e7161273637fb346a67d6f0fce8de3e952f2f816020015183604051610b179291906001600160801b0392831681529116602082015260400190565b60405180910390a150600780546001600160801b03928316600160801b029216919091179055565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8d57600080fd5b505afa158015610ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc59190611610565b6001600160a01b0316336001600160a01b031614610bf657604051634b98449160e11b815260040160405180910390fd5b6703782dace9d90000811115610c1f576040516361b716bb60e11b815260040160405180910390fd5b60065481811415610c4357604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527fdd45ca427fa57d0870314eb55586e91bcdd31d7cd393e3278caaae9dfb749688910160405180910390a150600655565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd057600080fd5b505afa158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d089190611610565b6001600160a01b0316336001600160a01b031614610d3957604051634b98449160e11b815260040160405180910390fd5b6703782dace9d90000811115610d62576040516361b716bb60e11b815260040160405180910390fd5b60025481811415610d8657604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f1c2986e5350a71fed3feb3bdcbc3a7aaafd924f4b3dc18d90c17ccb885636be8910160405180910390a150600255565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1357600080fd5b505afa158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190611610565b6001600160a01b0316336001600160a01b031614610e7c57604051634b98449160e11b815260040160405180910390fd5b604080518082019091526007546001600160801b038082168352600160801b90910416602082018190526703782dace9d9000090610eba90846116f1565b6001600160801b03161115610ee2576040516361b716bb60e11b815260040160405180910390fd5b80516001600160801b0383811691161415610f1057604051630333a68160e41b815260040160405180910390fd5b8051604080516001600160801b03928316815291841660208301527f400289ff508344720ca1c0ffff41672b308ae46b4c8227282c2dea56d8595671910160405180910390a150600780546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b60015460009080610f97575050600254919050565b6009546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b158015610fdd57600080fd5b505afa158015610ff1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611015919061171c565b9050600160008154811061102b5761102b611693565b6000918252602090912001546001600160801b031681101561105257505060025492915050565b60015b828110156110e7576001818154811061107057611070611693565b6000918252602090912001546001600160801b03168210156110df576110d66001808303815481106110a4576110a4611693565b600091825260209091200154600254906001600160801b03600160801b9091048116670de0b6b3a764000003166112b8565b95945050505050565b600101611055565b6110d66001808503815481106110a4576110a4611693565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561114d57600080fd5b505afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111859190611610565b6001600160a01b0316336001600160a01b0316146111b657604051634b98449160e11b815260040160405180910390fd5b6703782dace9d900008111156111df576040516361b716bb60e11b815260040160405180910390fd5b6005548181141561120357604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f733071ab8253b372ed26a6d1b04aec71c4bfcd209c93397df32bb77478cdd2c8910160405180910390a150600555565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156112af57600084815260209081902060408051808201909152908401546001600160801b038082168352600160801b9091041681830152825260019092019101611266565b50505050905090565b60008215806112c5575081155b156112d257506000611307565b670de0b6b3a76400006112e6600282611735565b6112f08486611757565b6112fa9190611776565b6113049190611735565b90505b92915050565b508054600082559060005260206000209081019061132b919061132e565b50565b5b80821115611343576000815560010161132f565b5090565b60006020828403121561135957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561139957611399611360565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156113c8576113c8611360565b604052919050565b80356001600160801b03811681146113e757600080fd5b919050565b600060208083850312156113ff57600080fd5b823567ffffffffffffffff8082111561141757600080fd5b818501915085601f83011261142b57600080fd5b81358181111561143d5761143d611360565b61144b848260051b0161139f565b818152848101925060069190911b83018401908782111561146b57600080fd5b928401925b818410156114bd57604084890312156114895760008081fd5b611491611376565b61149a856113d0565b81526114a78686016113d0565b8187015283526040939093019291840191611470565b979650505050505050565b6001600160a01b038116811461132b57600080fd5b600080604083850312156114f057600080fd5b82356114fb816114c8565b9150602083013561150b816114c8565b809150509250929050565b60006020828403121561152857600080fd5b611304826113d0565b60006020828403121561154357600080fd5b813561154e816114c8565b9392505050565b600081518084526020808501945080840160005b8381101561159d57815180516001600160801b03908116895290840151168388015260409096019590820190600101611569565b509495945050505050565b6020815260006113046020830184611555565b600060208083528351808285015260005b818110156115e8578581018301518582016040015282016115cc565b818111156115fa576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561162257600080fd5b815161154e816114c8565b6000604080830181845280865480835260608601915087600052602092508260002060005b8281101561167f5781546001600160801b038116855260801c858501529285019260019182019101611652565b505050848103828601526114bd8187611555565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156116d1576116d16116a9565b500390565b60006000198214156116ea576116ea6116a9565b5060010190565b60006001600160801b03808316818516808303821115611713576117136116a9565b01949350505050565b60006020828403121561172e57600080fd5b5051919050565b60008261175257634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611771576117716116a9565b500290565b60008219821115611789576117896116a9565b50019056fea2646970667358221220401a8cca1e681c9c4e97cfec7b9b6e642f95b8808d2393cabd0f5ed7fd451f9764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80637c0f59f4116100b8578063cfc0c69f1161007c578063cfc0c69f1461027e578063d2d6b5a31461029c578063daf635de146102af578063de170570146102c2578063e941fa78146102d7578063ffa1ad74146102e057600080fd5b80637c0f59f41461022957806388156a351461023257806388c2c07f14610245578063a8ffba6414610258578063afcff50f1461026b57600080fd5b806336407921116100ff57806336407921146101d4578063485cc955146101e757806357f2e581146101fa5780635cd24fd21461020d57806367a527931461022057600080fd5b8063017def571461013c578063039af9eb1461015157806303df739614610189578063285a7674146101a05780632a9133c1146101cb575b600080fd5b61014f61014a366004611347565b610311565b005b61016461015f366004611347565b610454565b604080516001600160801b039384168152929091166020830152015b60405180910390f35b61019260025481565b604051908152602001610180565b6009546101b3906001600160a01b031681565b6040516001600160a01b039091168152602001610180565b61019260045481565b61014f6101e23660046113ec565b610489565b61014f6101f53660046114dd565b6106b6565b61014f610208366004611347565b610837565b61014f61021b366004611516565b61097a565b61019260035481565b61019260065481565b61014f610240366004611347565b610b3f565b61014f610253366004611347565b610c82565b61014f610266366004611516565b610dc5565b6008546101b3906001600160a01b031681565b600754610164906001600160801b0380821691600160801b90041682565b6101926102aa366004611531565b610f82565b61014f6102bd366004611347565b6110ff565b6102ca611242565b60405161018091906115a8565b61019260055481565b610304604051806040016040528060058152602001640312e312e360dc1b81525081565b60405161018091906115bb565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561035f57600080fd5b505afa158015610373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103979190611610565b6001600160a01b0316336001600160a01b0316146103c857604051634b98449160e11b815260040160405180910390fd5b6703782dace9d900008111156103f1576040516361b716bb60e11b815260040160405180910390fd5b6003548181141561041557604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f828cf983933545af35b9ba46eec951db1cb4c5433c3ec403aeced2963c264790910160405180910390a150600355565b6001818154811061046457600080fd5b6000918252602090912001546001600160801b038082169250600160801b9091041682565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d757600080fd5b505afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f9190611610565b6001600160a01b0316336001600160a01b03161461054057604051634b98449160e11b815260040160405180910390fd5b7f69e7d03bdd0009aaf816649f3df4329250186771260691fa1b13bae6419ead5460018260405161057292919061162d565b60405180910390a16105866001600061130d565b805160005b818110156106b15760008382815181106105a7576105a7611693565b60200260200101519050670de0b6b3a764000081602001516001600160801b031611156105e7576040516350e630a760e01b815260040160405180910390fd5b600082118015610630575080516001600160801b0316846106096001856116bf565b8151811061061957610619611693565b6020026020010151600001516001600160801b0316115b1561064e576040516344eff01160e11b815260040160405180910390fd5b60018054808201825560009190915281516020909201516001600160801b03908116600160801b029216919091177fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6909101556106aa816116d6565b905061058b565b505050565b600054610100900460ff16806106cf575060005460ff16155b6107365760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015610758576000805461ffff19166101011790555b6001600160a01b03831661077f57604051637cb62f2b60e11b815260040160405180910390fd5b6001600160a01b0382166107a657604051632398318d60e11b815260040160405180910390fd5b600880546001600160a01b038086166001600160a01b03199283161790925560098054928516929091169190911790556040805180820190915267016345785d8a0000815267011c37937e08000060209091015277011c37937e0800000000000000000000016345785d8a00006007556608e1bc9bf0400060025580156106b1576000805461ff0019169055505050565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561088557600080fd5b505afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190611610565b6001600160a01b0316336001600160a01b0316146108ee57604051634b98449160e11b815260040160405180910390fd5b6703782dace9d90000811115610917576040516361b716bb60e11b815260040160405180910390fd5b6004548181141561093b57604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f7aef17a0caeda11810cdf2a40c79ac1340553588671fb35d5cc8d0a3fe2883be910160405180910390a150600455565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156109c857600080fd5b505afa1580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a009190611610565b6001600160a01b0316336001600160a01b031614610a3157604051634b98449160e11b815260040160405180910390fd5b604080518082019091526007546001600160801b03808216808452600160801b9092041660208301526703782dace9d9000090610a6e90846116f1565b6001600160801b03161115610a96576040516361b716bb60e11b815260040160405180910390fd5b80602001516001600160801b0316826001600160801b03161415610acd57604051630333a68160e41b815260040160405180910390fd5b7fe0dac1dcc46eceed1fdb7416944e7161273637fb346a67d6f0fce8de3e952f2f816020015183604051610b179291906001600160801b0392831681529116602082015260400190565b60405180910390a150600780546001600160801b03928316600160801b029216919091179055565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8d57600080fd5b505afa158015610ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc59190611610565b6001600160a01b0316336001600160a01b031614610bf657604051634b98449160e11b815260040160405180910390fd5b6703782dace9d90000811115610c1f576040516361b716bb60e11b815260040160405180910390fd5b60065481811415610c4357604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527fdd45ca427fa57d0870314eb55586e91bcdd31d7cd393e3278caaae9dfb749688910160405180910390a150600655565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd057600080fd5b505afa158015610ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d089190611610565b6001600160a01b0316336001600160a01b031614610d3957604051634b98449160e11b815260040160405180910390fd5b6703782dace9d90000811115610d62576040516361b716bb60e11b815260040160405180910390fd5b60025481811415610d8657604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f1c2986e5350a71fed3feb3bdcbc3a7aaafd924f4b3dc18d90c17ccb885636be8910160405180910390a150600255565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1357600080fd5b505afa158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190611610565b6001600160a01b0316336001600160a01b031614610e7c57604051634b98449160e11b815260040160405180910390fd5b604080518082019091526007546001600160801b038082168352600160801b90910416602082018190526703782dace9d9000090610eba90846116f1565b6001600160801b03161115610ee2576040516361b716bb60e11b815260040160405180910390fd5b80516001600160801b0383811691161415610f1057604051630333a68160e41b815260040160405180910390fd5b8051604080516001600160801b03928316815291841660208301527f400289ff508344720ca1c0ffff41672b308ae46b4c8227282c2dea56d8595671910160405180910390a150600780546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b60015460009080610f97575050600254919050565b6009546040516370a0823160e01b81526001600160a01b03858116600483015260009216906370a082319060240160206040518083038186803b158015610fdd57600080fd5b505afa158015610ff1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611015919061171c565b9050600160008154811061102b5761102b611693565b6000918252602090912001546001600160801b031681101561105257505060025492915050565b60015b828110156110e7576001818154811061107057611070611693565b6000918252602090912001546001600160801b03168210156110df576110d66001808303815481106110a4576110a4611693565b600091825260209091200154600254906001600160801b03600160801b9091048116670de0b6b3a764000003166112b8565b95945050505050565b600101611055565b6110d66001808503815481106110a4576110a4611693565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561114d57600080fd5b505afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111859190611610565b6001600160a01b0316336001600160a01b0316146111b657604051634b98449160e11b815260040160405180910390fd5b6703782dace9d900008111156111df576040516361b716bb60e11b815260040160405180910390fd5b6005548181141561120357604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f733071ab8253b372ed26a6d1b04aec71c4bfcd209c93397df32bb77478cdd2c8910160405180910390a150600555565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156112af57600084815260209081902060408051808201909152908401546001600160801b038082168352600160801b9091041681830152825260019092019101611266565b50505050905090565b60008215806112c5575081155b156112d257506000611307565b670de0b6b3a76400006112e6600282611735565b6112f08486611757565b6112fa9190611776565b6113049190611735565b90505b92915050565b508054600082559060005260206000209081019061132b919061132e565b50565b5b80821115611343576000815560010161132f565b5090565b60006020828403121561135957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561139957611399611360565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156113c8576113c8611360565b604052919050565b80356001600160801b03811681146113e757600080fd5b919050565b600060208083850312156113ff57600080fd5b823567ffffffffffffffff8082111561141757600080fd5b818501915085601f83011261142b57600080fd5b81358181111561143d5761143d611360565b61144b848260051b0161139f565b818152848101925060069190911b83018401908782111561146b57600080fd5b928401925b818410156114bd57604084890312156114895760008081fd5b611491611376565b61149a856113d0565b81526114a78686016113d0565b8187015283526040939093019291840191611470565b979650505050505050565b6001600160a01b038116811461132b57600080fd5b600080604083850312156114f057600080fd5b82356114fb816114c8565b9150602083013561150b816114c8565b809150509250929050565b60006020828403121561152857600080fd5b611304826113d0565b60006020828403121561154357600080fd5b813561154e816114c8565b9392505050565b600081518084526020808501945080840160005b8381101561159d57815180516001600160801b03908116895290840151168388015260409096019590820190600101611569565b509495945050505050565b6020815260006113046020830184611555565b600060208083528351808285015260005b818110156115e8578581018301518582016040015282016115cc565b818111156115fa576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561162257600080fd5b815161154e816114c8565b6000604080830181845280865480835260608601915087600052602092508260002060005b8281101561167f5781546001600160801b038116855260801c858501529285019260019182019101611652565b505050848103828601526114bd8187611555565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156116d1576116d16116a9565b500390565b60006000198214156116ea576116ea6116a9565b5060010190565b60006001600160801b03808316818516808303821115611713576117136116a9565b01949350505050565b60006020828403121561172e57600080fd5b5051919050565b60008261175257634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611771576117716116a9565b500290565b60008219821115611789576117896116a9565b50019056fea2646970667358221220401a8cca1e681c9c4e97cfec7b9b6e642f95b8808d2393cabd0f5ed7fd451f9764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swapFeeFor(address)": {
        "params": {
          "account_": "The account address"
        },
        "returns": {
          "_swapFee": "The account's swap fee"
        }
      },
      "updateLiquidatorIncentive(uint128)": {
        "details": "liquidatorIncentive + protocolFee can't surpass max"
      },
      "updateProtocolLiquidationFee(uint128)": {
        "details": "liquidatorIncentive + protocolFee can't surpass max"
      }
    },
    "title": "FeeProvider contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DepositFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when deposit fee is updated"
      },
      "IssueFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when issue fee is updated"
      },
      "LiquidatorIncentiveUpdated(uint256,uint256)": {
        "notice": "Emitted when liquidator incentive is updated"
      },
      "ProtocolLiquidationFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when protocol liquidation fee is updated"
      },
      "RepayFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when repay fee is updated"
      },
      "SwapDefaultFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when swap fee is updated"
      },
      "TiersUpdated((uint128,uint128)[],(uint128,uint128)[])": {
        "notice": "Emitted when tiers are updated"
      },
      "WithdrawFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when withdraw fee is updated"
      }
    },
    "kind": "user",
    "methods": {
      "defaultSwapFee()": {
        "notice": "The default fee charged when swapping synthetic tokens"
      },
      "depositFee()": {
        "notice": "The fee charged when depositing collateral"
      },
      "esMET()": {
        "notice": "The esMET contract"
      },
      "getTiers()": {
        "notice": "Get fee discount tiers"
      },
      "issueFee()": {
        "notice": "The fee charged when minting a synthetic token"
      },
      "liquidationFees()": {
        "notice": "The fees charged when liquidating a position"
      },
      "repayFee()": {
        "notice": "The fee charged when repaying debt"
      },
      "swapFeeFor(address)": {
        "notice": "Get the swap fee for a given account Fee discount are applied on top of the default swap fee depending on user's esMET balance"
      },
      "tiers(uint256)": {
        "notice": "The fee discount tiers"
      },
      "updateDefaultSwapFee(uint256)": {
        "notice": "Update swap fee"
      },
      "updateDepositFee(uint256)": {
        "notice": "Update deposit fee"
      },
      "updateIssueFee(uint256)": {
        "notice": "Update issue fee"
      },
      "updateLiquidatorIncentive(uint128)": {
        "notice": "Update liquidator incentive"
      },
      "updateProtocolLiquidationFee(uint128)": {
        "notice": "Update protocol liquidation fee"
      },
      "updateRepayFee(uint256)": {
        "notice": "Update repay fee"
      },
      "updateTiers((uint128,uint128)[])": {
        "notice": "Update fee discount tiers"
      },
      "updateWithdrawFee(uint256)": {
        "notice": "Update withdraw fee"
      },
      "withdrawFee()": {
        "notice": "The fee charged when withdrawing collateral"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9846,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9849,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15259,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "tiers",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Tier)15254_storage)dyn_storage"
      },
      {
        "astId": 15263,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "defaultSwapFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 15267,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "depositFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15271,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "issueFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 15275,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 15279,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "repayFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15284,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "liquidationFees",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(LiquidationFees)12536_storage"
      },
      {
        "astId": 15288,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "poolRegistry",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IPoolRegistry)13032"
      },
      {
        "astId": 15292,
        "contract": "contracts/FeeProvider.sol:FeeProvider",
        "label": "esMET",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IESMET)13310"
      }
    ],
    "types": {
      "t_array(t_struct(Tier)15254_storage)dyn_storage": {
        "base": "t_struct(Tier)15254_storage",
        "encoding": "dynamic_array",
        "label": "struct FeeProviderStorageV1.Tier[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IESMET)13310": {
        "encoding": "inplace",
        "label": "contract IESMET",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolRegistry)13032": {
        "encoding": "inplace",
        "label": "contract IPoolRegistry",
        "numberOfBytes": "20"
      },
      "t_struct(LiquidationFees)12536_storage": {
        "encoding": "inplace",
        "label": "struct IFeeProvider.LiquidationFees",
        "members": [
          {
            "astId": 12533,
            "contract": "contracts/FeeProvider.sol:FeeProvider",
            "label": "liquidatorIncentive",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 12535,
            "contract": "contracts/FeeProvider.sol:FeeProvider",
            "label": "protocolFee",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Tier)15254_storage": {
        "encoding": "inplace",
        "label": "struct FeeProviderStorageV1.Tier",
        "members": [
          {
            "astId": 15251,
            "contract": "contracts/FeeProvider.sol:FeeProvider",
            "label": "min",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 15253,
            "contract": "contracts/FeeProvider.sol:FeeProvider",
            "label": "discount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}