{
  "address": "0xE4DFD8bf9fa718af957a808B9bf8eC3fE5eD31C9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "CollateralDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralizationRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralizationRatio",
          "type": "uint256"
        }
      ],
      "name": "CollateralizationRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newActive",
          "type": "bool"
        }
      ],
      "name": "DepositTokenActiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralizationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue_",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf_",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue_",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "underlying_",
          "type": "address"
        },
        {
          "internalType": "contract IPool",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "collateralizationRatio_",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDepositOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "lockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lockedBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "unlockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_unlockedBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newCollateralizationRatio_",
          "type": "uint128"
        }
      ],
      "name": "updateCollateralizationRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb2cab304d4aa9ef9ee601f54a7a0e7e8afbf797b75e9e70a81896b1eff287085",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xE4DFD8bf9fa718af957a808B9bf8eC3fE5eD31C9",
    "transactionIndex": 3,
    "gasUsed": "2771770",
    "logsBloom": "0x
    "blockHash": "0x6d309313d945f2ad9fd796e0c17eecfed1d4eaa603966feae9e1cb39723601ef",
    "transactionHash": "0xb2cab304d4aa9ef9ee601f54a7a0e7e8afbf797b75e9e70a81896b1eff287085",
    "logs": [],
    "blockNumber": 15695996,
    "cumulativeGasUsed": "2884988",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8f9ac8ece838b75cf20cef638b1903fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralizationRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralizationRatio\",\"type\":\"uint256\"}],\"name\":\"CollateralizationRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newActive\",\"type\":\"bool\"}],\"name\":\"DepositTokenActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf_\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"contract IPool\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"collateralizationRatio_\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDepositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newCollateralizationRatio_\",\"type\":\"uint128\"}],\"name\":\"updateCollateralizationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"updateMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256,address)\":{\"params\":{\"amount_\":\"The amount of collateral tokens to deposit\",\"onBehalfOf_\":\"The account to deposit to\"}},\"lockedBalanceOf(address)\":{\"params\":{\"account_\":\"The account to check\"},\"returns\":{\"_lockedBalance\":\"The locked amount\"}},\"seize(address,address,uint256)\":{\"details\":\"Same as _transfer\",\"params\":{\"amount_\":\"The amount to seize\",\"from_\":\"The account to seize from\",\"to_\":\"The beneficiary account\"}},\"sweep(address,address,uint256)\":{\"params\":{\"amount_\":\"The amount to send\",\"to_\":\"The recipient of the transfer\",\"token_\":\"The token to transfer\"}},\"unlockedBalanceOf(address)\":{\"params\":{\"account_\":\"The account to check\"},\"returns\":{\"_unlockedBalance\":\"The amount that user can transfer or withdraw\"}},\"updateCollateralizationRatio(uint128)\":{\"params\":{\"newCollateralizationRatio_\":\"The new CR value\"}},\"updateMaxTotalSupply(uint256)\":{\"params\":{\"newMaxTotalSupply_\":\"The new max total supply\"}},\"withdraw(uint256,address)\":{\"params\":{\"amount_\":\"The amount of collateral to withdraw\",\"to_\":\"The account that will receive withdrawn collateral\"}}},\"title\":\"Represents the users' deposits\",\"version\":1},\"userdoc\":{\"events\":{\"CollateralDeposited(address,address,uint256,uint256)\":{\"notice\":\"Emitted when collateral is deposited\"},\"CollateralWithdrawn(address,address,uint256,uint256)\":{\"notice\":\"Emitted when collateral is withdrawn\"},\"CollateralizationRatioUpdated(uint256,uint256)\":{\"notice\":\"Emitted when CR is updated\"},\"DepositTokenActiveUpdated(bool)\":{\"notice\":\"Emitted when active flag is updated\"},\"MaxTotalSupplyUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max total supply is updated\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Set `amount` as the allowance of `spender` over the caller's tokens\"},\"collateralizationRatio()\":{\"notice\":\"Collateralization ration for the deposit token\"},\"decimals()\":{\"notice\":\"The decimals of the token\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Atomically decrease the allowance granted to `spender` by the caller\"},\"deposit(uint256,address)\":{\"notice\":\"Deposit collateral and mint msdTOKEN (tokenized deposit position)\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Atomically increase the allowance granted to `spender` by the caller\"},\"isActive()\":{\"notice\":\"If a collateral isn't active, it disables minting new tokens\"},\"lastDepositOf(address)\":{\"notice\":\"Stores de timestamp of last deposit event of each account. It's used combined with `minDepositTime`.\"},\"lockedBalanceOf(address)\":{\"notice\":\"Get the locked balance\"},\"maxTotalSupply()\":{\"notice\":\"The supply cap (in USD)\"},\"name()\":{\"notice\":\"The name of the token\"},\"pool()\":{\"notice\":\"Pool contract\"},\"seize(address,address,uint256)\":{\"notice\":\"Seize tokens\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"},\"symbol()\":{\"notice\":\"The symbol of the token\"},\"toggleIsActive()\":{\"notice\":\"Enable/Disable the Deposit Token\"},\"transfer(address,uint256)\":{\"notice\":\"Move `amount` tokens from the caller's account to `recipient`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Move `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance\"},\"underlying()\":{\"notice\":\"Deposit underlying asset (e.g. MET)\"},\"unlockedBalanceOf(address)\":{\"notice\":\"Get the unlocked balance (i.e. transferable, withdrawable)\"},\"updateCollateralizationRatio(uint128)\":{\"notice\":\"Update collateralization ratio\"},\"updateMaxTotalSupply(uint256)\":{\"notice\":\"Update max total supply\"},\"withdraw(uint256,address)\":{\"notice\":\"Burn msdTOKEN and withdraw collateral\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DepositToken.sol\":\"DepositToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/utils/math/Math.sol\\\";\\nimport \\\"./dependencies/openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./access/Manageable.sol\\\";\\nimport \\\"./storage/DepositTokenStorage.sol\\\";\\n\\n/**\\n * @title Represents the users' deposits\\n */\\ncontract DepositToken is ReentrancyGuard, Manageable, DepositTokenStorageV1 {\\n    using SafeERC20 for IERC20;\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    /// @notice Emitted when collateral is deposited\\n    event CollateralDeposited(address indexed from, address indexed account, uint256 amount, uint256 fee);\\n\\n    /// @notice Emitted when CR is updated\\n    event CollateralizationRatioUpdated(uint256 oldCollateralizationRatio, uint256 newCollateralizationRatio);\\n\\n    /// @notice Emitted when collateral is withdrawn\\n    event CollateralWithdrawn(address indexed account, address indexed to, uint256 amount, uint256 fee);\\n\\n    /// @notice Emitted when active flag is updated\\n    event DepositTokenActiveUpdated(bool newActive);\\n\\n    /// @notice Emitted when max total supply is updated\\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupply, uint256 newMaxTotalSupply);\\n\\n    /**\\n     * @dev Throws if sender can't seize\\n     */\\n    modifier onlyIfCanSeize() {\\n        require(msg.sender == address(pool), \\\"not-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if deposit token doesn't exist\\n     */\\n    modifier onlyIfDepositTokenExists() {\\n        require(pool.isDepositTokenExists(this), \\\"collateral-inexistent\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if deposit token isn't enabled\\n     */\\n    modifier onlyIfDepositTokenIsActive() {\\n        require(isActive, \\\"deposit-token-inactive\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Requires that amount is lower than the account's unlocked balance\\n     */\\n    modifier onlyIfUnlocked(address account_, uint256 amount_) {\\n        require(unlockedBalanceOf(account_) >= amount_, \\\"not-enough-free-balance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update reward contracts' states\\n     * @dev Should be called before balance changes (i.e. mint/burn)\\n     */\\n    modifier updateRewardsBeforeMintOrBurn(address account_) {\\n        IRewardsDistributor[] memory _rewardsDistributors = pool.getRewardsDistributors();\\n        uint256 _length = _rewardsDistributors.length;\\n        for (uint256 i; i < _length; ++i) {\\n            _rewardsDistributors[i].updateBeforeMintOrBurn(this, account_);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update reward contracts' states\\n     * @dev Should be called before balance changes (i.e. transfer)\\n     */\\n    modifier updateRewardsBeforeTransfer(address sender_, address recipient_) {\\n        IRewardsDistributor[] memory _rewardsDistributors = pool.getRewardsDistributors();\\n        uint256 _length = _rewardsDistributors.length;\\n        for (uint256 i; i < _length; ++i) {\\n            _rewardsDistributors[i].updateBeforeTransfer(this, sender_, recipient_);\\n        }\\n        _;\\n    }\\n\\n    function initialize(\\n        IERC20 underlying_,\\n        IPool pool_,\\n        string calldata symbol_,\\n        uint8 decimals_,\\n        uint128 collateralizationRatio_,\\n        uint256 maxTotalSupply_\\n    ) external initializer {\\n        require(address(underlying_) != address(0), \\\"underlying-is-null\\\");\\n        require(collateralizationRatio_ <= 1e18, \\\"collateralization-ratio-gt-100%\\\");\\n\\n        __ReentrancyGuard_init();\\n        __Manageable_init(pool_);\\n\\n        name = \\\"Tokenized deposit position\\\";\\n        symbol = symbol_;\\n        underlying = underlying_;\\n        isActive = true;\\n        decimals = decimals_;\\n        collateralizationRatio = collateralizationRatio_;\\n        maxTotalSupply = maxTotalSupply_;\\n    }\\n\\n    /**\\n     * @notice Set `amount` as the allowance of `spender` over the caller's tokens\\n     */\\n    function approve(address spender_, uint256 amount_) external override returns (bool) {\\n        _approve(msg.sender, spender_, amount_);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Atomically decrease the allowance granted to `spender` by the caller\\n     */\\n    function decreaseAllowance(address spender_, uint256 subtractedValue_) external returns (bool) {\\n        uint256 _currentAllowance = allowance[msg.sender][spender_];\\n        require(_currentAllowance >= subtractedValue_, \\\"decreased-allowance-below-zero\\\");\\n        unchecked {\\n            _approve(msg.sender, spender_, _currentAllowance - subtractedValue_);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deposit collateral and mint msdTOKEN (tokenized deposit position)\\n     * @param amount_ The amount of collateral tokens to deposit\\n     * @param onBehalfOf_ The account to deposit to\\n     */\\n    function deposit(uint256 amount_, address onBehalfOf_)\\n        external\\n        override\\n        whenNotPaused\\n        nonReentrant\\n        onlyIfDepositTokenIsActive\\n        onlyIfDepositTokenExists\\n    {\\n        require(amount_ > 0, \\\"amount-is-zero\\\");\\n\\n        address _treasury = address(pool.treasury());\\n\\n        uint256 _balanceBefore = underlying.balanceOf(_treasury);\\n        underlying.safeTransferFrom(msg.sender, _treasury, amount_);\\n        amount_ = underlying.balanceOf(_treasury) - _balanceBefore;\\n\\n        uint256 _depositFee = pool.depositFee();\\n        uint256 _amountToDeposit = amount_;\\n        uint256 _feeAmount;\\n        if (_depositFee > 0) {\\n            _feeAmount = amount_.wadMul(_depositFee);\\n            _mint(pool.feeCollector(), _feeAmount);\\n            _amountToDeposit -= _feeAmount;\\n        }\\n\\n        _mint(onBehalfOf_, _amountToDeposit);\\n\\n        emit CollateralDeposited(msg.sender, onBehalfOf_, amount_, _feeAmount);\\n    }\\n\\n    /**\\n     * @notice Atomically increase the allowance granted to `spender` by the caller\\n     */\\n    function increaseAllowance(address spender_, uint256 addedValue_) external returns (bool) {\\n        _approve(msg.sender, spender_, allowance[msg.sender][spender_] + addedValue_);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the locked balance\\n     * @param account_ The account to check\\n     * @return _lockedBalance The locked amount\\n     */\\n    function lockedBalanceOf(address account_) external view override returns (uint256 _lockedBalance) {\\n        unchecked {\\n            return balanceOf[account_] - unlockedBalanceOf(account_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Seize tokens\\n     * @dev Same as _transfer\\n     * @param from_ The account to seize from\\n     * @param to_ The beneficiary account\\n     * @param amount_ The amount to seize\\n     */\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external override onlyIfCanSeize {\\n        _transfer(from_, to_, amount_);\\n    }\\n\\n    /**\\n     * @notice Move `amount` tokens from the caller's account to `recipient`\\n     */\\n    function transfer(address to_, uint256 amount_)\\n        external\\n        override\\n        onlyIfUnlocked(msg.sender, amount_)\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, to_, amount_);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Move `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance\\n     */\\n    function transferFrom(\\n        address sender_,\\n        address recipient_,\\n        uint256 amount_\\n    ) external override nonReentrant onlyIfUnlocked(sender_, amount_) returns (bool) {\\n        _transfer(sender_, recipient_, amount_);\\n\\n        uint256 _currentAllowance = allowance[sender_][msg.sender];\\n        if (_currentAllowance != type(uint256).max) {\\n            require(_currentAllowance >= amount_, \\\"amount-exceeds-allowance\\\");\\n            unchecked {\\n                _approve(sender_, msg.sender, _currentAllowance - amount_);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the unlocked balance (i.e. transferable, withdrawable)\\n     * @param account_ The account to check\\n     * @return _unlockedBalance The amount that user can transfer or withdraw\\n     */\\n    function unlockedBalanceOf(address account_) public view override returns (uint256 _unlockedBalance) {\\n        (, , , , uint256 _issuableInUsd) = pool.debtPositionOf(account_);\\n\\n        if (_issuableInUsd > 0) {\\n            _unlockedBalance = Math.min(\\n                balanceOf[account_],\\n                pool.masterOracle().quoteUsdToToken(address(underlying), _issuableInUsd.wadDiv(collateralizationRatio))\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Burn msdTOKEN and withdraw collateral\\n     * @param amount_ The amount of collateral to withdraw\\n     * @param to_ The account that will receive withdrawn collateral\\n     */\\n    function withdraw(uint256 amount_, address to_)\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfDepositTokenExists\\n    {\\n        require(amount_ > 0 && amount_ <= unlockedBalanceOf(msg.sender), \\\"amount-is-invalid\\\");\\n\\n        uint256 _withdrawFee = pool.withdrawFee();\\n        uint256 _amountToWithdraw = amount_;\\n        uint256 _feeAmount;\\n        if (_withdrawFee > 0) {\\n            _feeAmount = amount_.wadMul(_withdrawFee);\\n            _transfer(msg.sender, pool.feeCollector(), _feeAmount);\\n            _amountToWithdraw -= _feeAmount;\\n        }\\n\\n        _burn(msg.sender, _amountToWithdraw);\\n        pool.treasury().pull(to_, _amountToWithdraw);\\n\\n        emit CollateralWithdrawn(msg.sender, to_, amount_, _feeAmount);\\n    }\\n\\n    /**\\n     * @notice Add this token to the deposit tokens list if the recipient is receiving it for the 1st time\\n     */\\n    function _addToDepositTokensOfRecipientIfNeeded(address recipient_, uint256 recipientBalanceBefore_) private {\\n        if (recipientBalanceBefore_ == 0) {\\n            pool.addToDepositTokensOfAccount(recipient_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set `amount` as the allowance of `spender` over the caller's tokens\\n     */\\n    function _approve(\\n        address owner_,\\n        address spender_,\\n        uint256 amount_\\n    ) private {\\n        require(owner_ != address(0), \\\"approve-from-the-zero-address\\\");\\n        require(spender_ != address(0), \\\"approve-to-the-zero-address\\\");\\n\\n        allowance[owner_][spender_] = amount_;\\n        emit Approval(owner_, spender_, amount_);\\n    }\\n\\n    /**\\n     * @notice Destroy `amount` tokens from `account`, reducing the\\n     * total supply\\n     */\\n    function _burn(address _account, uint256 _amount) private updateRewardsBeforeMintOrBurn(_account) {\\n        require(_account != address(0), \\\"burn-from-the-zero-address\\\");\\n\\n        uint256 _balanceBefore = balanceOf[_account];\\n        require(_balanceBefore >= _amount, \\\"burn-amount-exceeds-balance\\\");\\n        uint256 _balanceAfter;\\n        unchecked {\\n            _balanceAfter = _balanceBefore - _amount;\\n            totalSupply -= _amount;\\n        }\\n\\n        balanceOf[_account] = _balanceAfter;\\n\\n        emit Transfer(_account, address(0), _amount);\\n\\n        _removeFromDepositTokensOfSenderIfNeeded(_account, _balanceAfter);\\n    }\\n\\n    /**\\n     * @notice Create `amount` tokens and assigns them to `account`, increasing\\n     * the total supply\\n     */\\n    function _mint(address account_, uint256 amount_)\\n        private\\n        onlyIfDepositTokenIsActive\\n        updateRewardsBeforeMintOrBurn(account_)\\n    {\\n        require(account_ != address(0), \\\"mint-to-the-zero-address\\\");\\n\\n        totalSupply += amount_;\\n        require(totalSupply <= maxTotalSupply, \\\"surpass-max-deposit-supply\\\");\\n\\n        uint256 _balanceBefore = balanceOf[account_];\\n        unchecked {\\n            balanceOf[account_] = _balanceBefore + amount_;\\n        }\\n\\n        emit Transfer(address(0), account_, amount_);\\n\\n        _addToDepositTokensOfRecipientIfNeeded(account_, _balanceBefore);\\n    }\\n\\n    /**\\n     * @notice Remove this token to the deposit tokens list if the sender's balance goes to zero\\n     */\\n    function _removeFromDepositTokensOfSenderIfNeeded(address sender_, uint256 senderBalanceAfter_) private {\\n        if (senderBalanceAfter_ == 0) {\\n            pool.removeFromDepositTokensOfAccount(sender_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Move `amount` of tokens from `sender` to `recipient`\\n     */\\n    function _transfer(\\n        address sender_,\\n        address recipient_,\\n        uint256 amount_\\n    ) private updateRewardsBeforeTransfer(sender_, recipient_) {\\n        require(sender_ != address(0), \\\"transfer-from-the-zero-address\\\");\\n        require(recipient_ != address(0), \\\"transfer-to-the-zero-address\\\");\\n\\n        uint256 _senderBalanceBefore = balanceOf[sender_];\\n        require(_senderBalanceBefore >= amount_, \\\"transfer-amount-exceeds-balance\\\");\\n        uint256 _recipientBalanceBefore = balanceOf[recipient_];\\n        uint256 _senderBalanceAfter;\\n\\n        unchecked {\\n            _senderBalanceAfter = _senderBalanceBefore - amount_;\\n            balanceOf[recipient_] = _recipientBalanceBefore + amount_;\\n        }\\n\\n        balanceOf[sender_] = _senderBalanceAfter;\\n\\n        emit Transfer(sender_, recipient_, amount_);\\n\\n        _addToDepositTokensOfRecipientIfNeeded(recipient_, _recipientBalanceBefore);\\n        _removeFromDepositTokensOfSenderIfNeeded(sender_, _senderBalanceAfter);\\n    }\\n\\n    /**\\n     * @notice Enable/Disable the Deposit Token\\n     */\\n    function toggleIsActive() external override onlyGovernor {\\n        bool _newIsActive = !isActive;\\n        emit DepositTokenActiveUpdated(_newIsActive);\\n        isActive = _newIsActive;\\n    }\\n\\n    /**\\n     * @notice Update collateralization ratio\\n     * @param newCollateralizationRatio_ The new CR value\\n     */\\n    function updateCollateralizationRatio(uint128 newCollateralizationRatio_) external override onlyGovernor {\\n        require(newCollateralizationRatio_ <= 1e18, \\\"collateralization-ratio-gt-100%\\\");\\n        uint256 _currentCollateralizationRatio = collateralizationRatio;\\n        require(newCollateralizationRatio_ != _currentCollateralizationRatio, \\\"new-same-as-current\\\");\\n        emit CollateralizationRatioUpdated(_currentCollateralizationRatio, newCollateralizationRatio_);\\n        collateralizationRatio = newCollateralizationRatio_;\\n    }\\n\\n    /**\\n     * @notice Update max total supply\\n     * @param newMaxTotalSupply_ The new max total supply\\n     */\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external override onlyGovernor {\\n        uint256 _currentMaxTotalSupply = maxTotalSupply;\\n        require(newMaxTotalSupply_ != _currentMaxTotalSupply, \\\"new-same-as-current\\\");\\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupply, newMaxTotalSupply_);\\n        maxTotalSupply = newMaxTotalSupply_;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8614c443b68c5cc921df87040a17d4e70b571950d4f85d030b20e52d16baa3\",\"license\":\"MIT\"},\"contracts/access/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/TokenHolder.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\nimport \\\"../interfaces/IManageable.sol\\\";\\n\\n/**\\n * @title Reusable contract that handles accesses\\n */\\nabstract contract Manageable is IManageable, TokenHolder, Initializable {\\n    /**\\n     * @notice Pool contract\\n     */\\n    IPool public pool;\\n\\n    /**\\n     * @notice Requires that the caller is the Pool contract\\n     */\\n    modifier onlyPool() {\\n        require(msg.sender == address(pool), \\\"not-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Requires that the caller is the Pool contract\\n     */\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!pool.paused(), \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotShutdown() {\\n        require(!pool.everythingStopped(), \\\"shutdown\\\");\\n        _;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Manageable_init(IPool pool_) internal initializer {\\n        require(address(pool_) != address(0), \\\"pool-address-is-zero\\\");\\n        pool = pool_;\\n    }\\n\\n    function governor() public view returns (address _governor) {\\n        _governor = IGovernable(address(pool)).governor();\\n    }\\n\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x0dc9eeda21a9a0fb81227a1da7bb873a1cb6a0e406b374ebe0579b416225868e\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xc790f8419ee2c68721d6203ed1b5f81e89eb7e1dca19be3a9f54cb5de44491f1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0x180688649a756828572d3efa734666c8d3ea9b0e980260b9e4b827520c6dba55\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralizationRatio() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external;\\n\\n    function withdraw(uint256 amount_, address to_) external;\\n\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    function updateCollateralizationRatio(uint128 newCollateralizationRatio_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0xf52bfa4257a00a71fa591b948127115837257485aa3d8f833135323961756a3f\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\",\"keccak256\":\"0xac88e0997a26942cb9cbda1a7dd9756e28ba2025813e5b07e55939fbf8538ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable {\\n    function debtFloorInUsd() external returns (uint256);\\n\\n    function depositFee() external returns (uint256);\\n\\n    function issueFee() external returns (uint256);\\n\\n    function withdrawFee() external returns (uint256);\\n\\n    function repayFee() external returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isSyntheticTokenExists(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function isDebtTokenExists(IDebtToken debtToken_) external view returns (bool);\\n\\n    function isDepositTokenExists(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(address account_)\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function addDebtToken(IDebtToken debtToken_) external;\\n\\n    function removeDebtToken(IDebtToken debtToken_) external;\\n\\n    function addDepositToken(address depositToken_) external;\\n\\n    function removeDepositToken(IDepositToken depositToken_) external;\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external;\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut);\\n\\n    function updateSwapFee(uint256 newSwapFee_) external;\\n\\n    function updateDebtFloor(uint256 newDebtFloorInUsd_) external;\\n\\n    function updateDepositFee(uint256 newDepositFee_) external;\\n\\n    function updateIssueFee(uint256 newIssueFee_) external;\\n\\n    function updateWithdrawFee(uint256 newWithdrawFee_) external;\\n\\n    function updateRepayFee(uint256 newRepayFee_) external;\\n\\n    function updateLiquidatorLiquidationFee(uint128 newLiquidatorLiquidationFee_) external;\\n\\n    function updateProtocolLiquidationFee(uint128 newProtocolLiquidationFee_) external;\\n\\n    function updateMaxLiquidable(uint256 newMaxLiquidable_) external;\\n\\n    function updateTreasury(ITreasury newTreasury_) external;\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function addRewardsDistributor(IRewardsDistributor distributor_) external;\\n\\n    function toggleIsSwapActive() external;\\n}\\n\",\"keccak256\":\"0x37aee2641c9e13119b557ffd6720d317ed90436037ba7f6a8fc8cd35a9e2a905\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function poolExists(address pool_) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateMasterOracle(IMasterOracle newOracle_) external;\\n}\\n\",\"keccak256\":\"0x958edd140ecfbe458bfd7f1505f4c1c3f3359adfe1ab6a8f200455f67d159330\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(\\n        IERC20 token_,\\n        address from_,\\n        address to_\\n    ) external;\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n}\\n\",\"keccak256\":\"0xc47213c524b56177843ef6c1b5ba0e4f5dc211eadf77a0b66ed666c0b39aa9c2\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function toggleIsActive() external;\\n\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0x27e7644e788023b54410e27735bf7ffab768df1469d5aff0e0a65e1108830978\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(\\n        address _assetIn,\\n        address _assetOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x711e4ad224403589238cd425781689ac98afc42314a2e6a5a2ac4c6ed5bfa273\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/DepositTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IDepositToken.sol\\\";\\n\\nabstract contract DepositTokenStorageV1 is IDepositToken {\\n    /**\\n     * @dev The amount of tokens owned by `account`\\n     */\\n    mapping(address => uint256) public balanceOf;\\n\\n    /**\\n     * @dev The remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}\\n     */\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /**\\n     * @notice Stores de timestamp of last deposit event of each account. It's used combined with `minDepositTime`.\\n     */\\n    mapping(address => uint256) public lastDepositOf;\\n\\n    /**\\n     * @notice The name of the token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice The symbol of the token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @dev Amount of tokens in existence\\n     */\\n    uint256 public totalSupply;\\n\\n    /**\\n     * @notice The supply cap (in USD)\\n     */\\n    uint256 public maxTotalSupply;\\n\\n    /**\\n     * @notice Collateralization ration for the deposit token\\n     * @dev Use 18 decimals (e.g. 0.66e18 = 66%)\\n     */\\n    uint256 public collateralizationRatio;\\n\\n    /**\\n     * @notice Deposit underlying asset (e.g. MET)\\n     */\\n    IERC20 public underlying;\\n\\n    /**\\n     * @notice If a collateral isn't active, it disables minting new tokens\\n     */\\n    bool public isActive;\\n\\n    /**\\n     * @notice The decimals of the token\\n     */\\n    uint8 public decimals;\\n}\\n\",\"keccak256\":\"0x7ea86e906810ed8eb0341d25d1d3e9b59679ee0370154ed96371085d41fcc2ae\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert(\\\"fallback-not-allowed\\\");\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert(\\\"receive-not-allowed\\\");\\n    }\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param token_ The token to transfer\\n     * @param to_ The recipient of the transfer\\n     * @param amount_ The amount to send\\n     */\\n    function sweep(\\n        IERC20 token_,\\n        address to_,\\n        uint256 amount_\\n    ) external {\\n        _requireCanSweep();\\n\\n        if (address(token_) == address(0)) {\\n            Address.sendValue(payable(to_), amount_);\\n        } else {\\n            token_.safeTransfer(to_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     */\\n    function _requireCanSweep() internal view virtual;\\n}\\n\",\"keccak256\":\"0xfbe591f37ce392a1ce68b05923b997209e9b5612a3d84aa9a503e8eb6375b7a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613131806100206000396000f3fe6080604052600436106101c55760003560e01c80636e553f65116100f7578063b2a02ff111610095578063dd62ed3e11610064578063dd62ed3e14610591578063ea180f27146105c9578063f46c3c51146105e9578063ffa1ad74146106165761020d565b8063b2a02ff114610526578063c2d275ba14610546578063d259332914610566578063dcaf9c441461057b5761020d565b806384955c88116100d157806384955c88146104b157806395d89b41146104d1578063a457c2d7146104e6578063a9059cbb146105065761020d565b80636e553f65146104445780636f307dc31461046457806370a08231146104845761020d565b806322f3e2d411610164578063313ce5671161013e578063313ce567146103b157806339509351146103e4578063593557361461040457806362c06767146104245761020d565b806322f3e2d41461035a57806323b872dd1461037b5780632ab4d0521461039b5761020d565b80630c340a24116101a05780630c340a24146102c957806316f0115b146102f6578063172f50a41461031657806318160ddd146103365761020d565b8062f714ce1461024c57806306fdde031461026e578063095ea7b3146102995761020d565b3661020d5760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b6044820152606401610204565b34801561025857600080fd5b5061026c610267366004612b4f565b610647565b005b34801561027a57600080fd5b50610283610abb565b6040516102909190612bab565b60405180910390f35b3480156102a557600080fd5b506102b96102b4366004612bde565b610b49565b6040519015158152602001610290565b3480156102d557600080fd5b506102de610b60565b6040516001600160a01b039091168152602001610290565b34801561030257600080fd5b506002546102de906001600160a01b031681565b34801561032257600080fd5b5061026c610331366004612c0a565b610be2565b34801561034257600080fd5b5061034c60395481565b604051908152602001610290565b34801561036657600080fd5b50603c546102b990600160a01b900460ff1681565b34801561038757600080fd5b506102b9610396366004612c23565b610ca2565b3480156103a757600080fd5b5061034c603a5481565b3480156103bd57600080fd5b50603c546103d290600160a81b900460ff1681565b60405160ff9091168152602001610290565b3480156103f057600080fd5b506102b96103ff366004612bde565b610dc5565b34801561041057600080fd5b5061034c61041f366004612c64565b610e01565b34801561043057600080fd5b5061026c61043f366004612c23565b610e2f565b34801561045057600080fd5b5061026c61045f366004612b4f565b610e68565b34801561047057600080fd5b50603c546102de906001600160a01b031681565b34801561049057600080fd5b5061034c61049f366004612c64565b60346020526000908152604090205481565b3480156104bd57600080fd5b5061034c6104cc366004612c64565b6113dc565b3480156104dd57600080fd5b506102836115ad565b3480156104f257600080fd5b506102b9610501366004612bde565b6115ba565b34801561051257600080fd5b506102b9610521366004612bde565b611645565b34801561053257600080fd5b5061026c610541366004612c23565b6116b1565b34801561055257600080fd5b5061026c610561366004612c9d565b611701565b34801561057257600080fd5b5061026c61183c565b34801561058757600080fd5b5061034c603b5481565b34801561059d57600080fd5b5061034c6105ac366004612cb8565b603560209081526000928352604080842090915290825290205481565b3480156105d557600080fd5b5061026c6105e4366004612cf7565b6118d5565b3480156105f557600080fd5b5061034c610604366004612c64565b60366020526000908152604090205481565b34801561062257600080fd5b50610283604051806040016040528060058152602001640312e302e360dc1b81525081565b600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561069557600080fd5b505afa1580156106a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cd9190612dca565b156107055760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b6044820152606401610204565b600260015414156107285760405162461bcd60e51b815260040161020490612de5565b6002600181905554604051633af5be4760e01b81523060048201526001600160a01b0390911690633af5be479060240160206040518083038186803b15801561077057600080fd5b505afa158015610784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a89190612dca565b6107ec5760405162461bcd60e51b815260206004820152601560248201527418dbdb1b185d195c985b0b5a5b995e1a5cdd195b9d605a1b6044820152606401610204565b6000821180156108045750610800336113dc565b8211155b6108445760405162461bcd60e51b8152602060048201526011602482015270185b5bdd5b9d0b5a5ccb5a5b9d985b1a59607a1b6044820152606401610204565b60025460408051631d283f4f60e31b815290516000926001600160a01b03169163e941fa7891600480830192602092919082900301818787803b15801561088a57600080fd5b505af115801561089e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c29190612e1c565b90508260008215610976576108d78584611aa1565b905061096933600260009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092b57600080fd5b505afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190612e35565b83611af4565b6109738183612e68565b91505b6109803383611dc9565b600260009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190612e35565b60405163f2d5d56b60e01b81526001600160a01b03868116600483015260248201859052919091169063f2d5d56b90604401600060405180830381600087803b158015610a5257600080fd5b505af1158015610a66573d6000803e3d6000fd5b505060408051888152602081018590526001600160a01b03881693503392507f4700a5c58c58ea6536703185e43dae38bfd4158ee5330c70988f02a65562a36e910160405180910390a3505060018055505050565b60378054610ac890612e7f565b80601f0160208091040260200160405190810160405280929190818152602001828054610af490612e7f565b8015610b415780601f10610b1657610100808354040283529160200191610b41565b820191906000526020600020905b815481529060010190602001808311610b2457829003601f168201915b505050505081565b6000610b56338484612026565b5060015b92915050565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b158015610ba557600080fd5b505afa158015610bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdd9190612e35565b905090565b610bea610b60565b6001600160a01b0316336001600160a01b031614610c1a5760405162461bcd60e51b815260040161020490612eb4565b603a5481811415610c635760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b6044820152606401610204565b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603a55565b600060026001541415610cc75760405162461bcd60e51b815260040161020490612de5565b6002600155838280610cd8836113dc565b1015610d205760405162461bcd60e51b81526020600482015260176024820152766e6f742d656e6f7567682d667265652d62616c616e636560481b6044820152606401610204565b610d2b868686611af4565b6001600160a01b03861660009081526035602090815260408083203384529091529020546000198114610db55784811015610da85760405162461bcd60e51b815260206004820152601860248201527f616d6f756e742d657863656564732d616c6c6f77616e636500000000000000006044820152606401610204565b610db58733878403612026565b5050600180805595945050505050565b3360008181526035602090815260408083206001600160a01b03871684529091528120549091610b56918590610dfc908690612eda565b612026565b6000610e0c826113dc565b6001600160a01b0390921660009081526034602052604090205491909103919050565b610e37612133565b6001600160a01b038316610e5457610e4f828261216d565b505050565b610e4f6001600160a01b0384168383612286565b600260009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb657600080fd5b505afa158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee9190612dca565b15610f245760405162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b6044820152606401610204565b60026001541415610f475760405162461bcd60e51b815260040161020490612de5565b6002600155603c54600160a01b900460ff16610f9e5760405162461bcd60e51b81526020600482015260166024820152756465706f7369742d746f6b656e2d696e61637469766560501b6044820152606401610204565b600254604051633af5be4760e01b81523060048201526001600160a01b0390911690633af5be479060240160206040518083038186803b158015610fe157600080fd5b505afa158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110199190612dca565b61105d5760405162461bcd60e51b815260206004820152601560248201527418dbdb1b185d195c985b0b5a5b995e1a5cdd195b9d605a1b6044820152606401610204565b6000821161109e5760405162461bcd60e51b815260206004820152600e60248201526d616d6f756e742d69732d7a65726f60901b6044820152606401610204565b600254604080516361d027b360e01b815290516000926001600160a01b0316916361d027b3916004808301926020929190829003018186803b1580156110e357600080fd5b505afa1580156110f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111b9190612e35565b603c546040516370a0823160e01b81526001600160a01b038084166004830152929350600092909116906370a082319060240160206040518083038186803b15801561116657600080fd5b505afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e9190612e1c565b603c549091506111b9906001600160a01b03163384876122e9565b603c546040516370a0823160e01b81526001600160a01b038481166004830152839216906370a082319060240160206040518083038186803b1580156111fe57600080fd5b505afa158015611212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112369190612e1c565b6112409190612e68565b93506000600260009054906101000a90046001600160a01b03166001600160a01b03166367a527936040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561129457600080fd5b505af11580156112a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cc9190612e1c565b9050846000821561137f576112e18784611aa1565b9050611372600260009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133457600080fd5b505afa158015611348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136c9190612e35565b82612327565b61137c8183612e68565b91505b6113898683612327565b60408051888152602081018390526001600160a01b0388169133917f95d16db8c4932fcf5d6de67364791e7178ec505c7d3829a8b34d18959c01552c910160405180910390a35050600180555050505050565b60025460405163dde3ab9560e01b81526001600160a01b038381166004830152600092839291169063dde3ab959060240160a06040518083038186803b15801561142557600080fd5b505afa158015611439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145d9190612ef2565b94505050505060008111156115a7576001600160a01b03808416600090815260346020908152604091829020546002548351637556d1c160e11b815293516115a4959294919092169263eaada38292600480840193829003018186803b1580156114c657600080fd5b505afa1580156114da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fe9190612e35565b603c54603b546001600160a01b039283169263b5e9bef59216906115239087906125d0565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b15801561156757600080fd5b505afa15801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f9190612e1c565b6125f0565b91505b50919050565b60388054610ac890612e7f565b3360009081526035602090815260408083206001600160a01b03861684529091528120548281101561162e5760405162461bcd60e51b815260206004820152601e60248201527f6465637265617365642d616c6c6f77616e63652d62656c6f772d7a65726f00006044820152606401610204565b61163b3385858403612026565b5060019392505050565b6000338280611653836113dc565b101561169b5760405162461bcd60e51b81526020600482015260176024820152766e6f742d656e6f7567682d667265652d62616c616e636560481b6044820152606401610204565b6116a6338686611af4565b506001949350505050565b6002546001600160a01b031633146116f65760405162461bcd60e51b81526020600482015260086024820152671b9bdd0b5c1bdbdb60c21b6044820152606401610204565b610e4f838383611af4565b611709610b60565b6001600160a01b0316336001600160a01b0316146117395760405162461bcd60e51b815260040161020490612eb4565b670de0b6b3a7640000816001600160801b0316111561179a5760405162461bcd60e51b815260206004820152601f60248201527f636f6c6c61746572616c697a6174696f6e2d726174696f2d67742d31303025006044820152606401610204565b603b546001600160801b0382168114156117ec5760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b6044820152606401610204565b604080518281526001600160801b03841660208201527ff84d4544cfaedc7b1b8b7fa92b1f758aea3e3e69dfb321343825e4dd86f8147a910160405180910390a1506001600160801b0316603b55565b611844610b60565b6001600160a01b0316336001600160a01b0316146118745760405162461bcd60e51b815260040161020490612eb4565b603c54604051600160a01b90910460ff1615808252907fb2f86f872205a47e0890262c11c93dba2270b3f079ada3dbe9cb6f755f4ddc9f9060200160405180910390a1603c8054911515600160a01b0260ff60a01b19909216919091179055565b600054610100900460ff16806118ee575060005460ff16155b61190a5760405162461bcd60e51b815260040161020490612f39565b600054610100900460ff1615801561192c576000805461ffff19166101011790555b6001600160a01b0388166119775760405162461bcd60e51b81526020600482015260126024820152711d5b99195c9b1e5a5b99cb5a5ccb5b9d5b1b60721b6044820152606401610204565b670de0b6b3a7640000836001600160801b031611156119d85760405162461bcd60e51b815260206004820152601f60248201527f636f6c6c61746572616c697a6174696f6e2d726174696f2d67742d31303025006044820152606401610204565b6119e0612606565b6119e987612676565b60408051808201909152601a8082527f546f6b656e697a6564206465706f73697420706f736974696f6e0000000000006020909201918252611a2d91603791612a2d565b50611a3a60388787612ab1565b50603c805460ff8616600160a81b0260ff60a81b196001600160a81b03199092166001600160a01b038c1617600160a01b17919091161790556001600160801b038316603b55603a8290558015611a97576000805461ff00191690555b5050505050505050565b6000821580611aae575081155b15611abb57506000610b5a565b670de0b6b3a7640000611acf600282612f87565b611ad98486612fa9565b611ae39190612eda565b611aed9190612f87565b9392505050565b82826000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611b4657600080fd5b505afa158015611b5a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b829190810190612fe9565b805190915060005b81811015611c2a57828181518110611ba457611ba46130ae565b602090810291909101015160405163058bd91d60e51b81523060048201526001600160a01b03878116602483015286811660448301529091169063b17b23a090606401600060405180830381600087803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b5050505080611c23906130c4565b9050611b8a565b506001600160a01b038716611c815760405162461bcd60e51b815260206004820152601e60248201527f7472616e736665722d66726f6d2d7468652d7a65726f2d6164647265737300006044820152606401610204565b6001600160a01b038616611cd75760405162461bcd60e51b815260206004820152601c60248201527f7472616e736665722d746f2d7468652d7a65726f2d61646472657373000000006044820152606401610204565b6001600160a01b03871660009081526034602052604090205485811015611d405760405162461bcd60e51b815260206004820152601f60248201527f7472616e736665722d616d6f756e742d657863656564732d62616c616e6365006044820152606401610204565b6001600160a01b03878116600081815260346020908152604080832080548c8101909155948d16808452928190208b87039081905590518b8152909392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611db3898361274b565b611dbd8a826127ac565b50505050505050505050565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611e1a57600080fd5b505afa158015611e2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e569190810190612fe9565b805190915060005b81811015611ef557828181518110611e7857611e786130ae565b6020908102919091010151604051626cc3c360e61b81523060048201526001600160a01b03868116602483015290911690631b30f0c090604401600060405180830381600087803b158015611ecc57600080fd5b505af1158015611ee0573d6000803e3d6000fd5b5050505080611eee906130c4565b9050611e5e565b506001600160a01b038516611f4c5760405162461bcd60e51b815260206004820152601a60248201527f6275726e2d66726f6d2d7468652d7a65726f2d616464726573730000000000006044820152606401610204565b6001600160a01b03851660009081526034602052604090205484811015611fb55760405162461bcd60e51b815260206004820152601b60248201527f6275726e2d616d6f756e742d657863656564732d62616c616e636500000000006044820152606401610204565b6039805486900390556001600160a01b03861660008181526034602090815260408083208986039081905590518981529093917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361201d87826127ac565b50505050505050565b6001600160a01b03831661207c5760405162461bcd60e51b815260206004820152601d60248201527f617070726f76652d66726f6d2d7468652d7a65726f2d616464726573730000006044820152606401610204565b6001600160a01b0382166120d25760405162461bcd60e51b815260206004820152601b60248201527f617070726f76652d746f2d7468652d7a65726f2d6164647265737300000000006044820152606401610204565b6001600160a01b0383811660008181526035602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b61213b610b60565b6001600160a01b0316336001600160a01b03161461216b5760405162461bcd60e51b815260040161020490612eb4565b565b804710156121bd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610204565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461220a576040519150601f19603f3d011682016040523d82523d6000602084013e61220f565b606091505b5050905080610e4f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610204565b6040516001600160a01b038316602482015260448101829052610e4f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526127e3565b6040516001600160a01b03808516602483015283166044820152606481018290526123219085906323b872dd60e01b906084016122b2565b50505050565b603c54600160a01b900460ff166123795760405162461bcd60e51b81526020600482015260166024820152756465706f7369742d746f6b656e2d696e61637469766560501b6044820152606401610204565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156123ca57600080fd5b505afa1580156123de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124069190810190612fe9565b805190915060005b818110156124a557828181518110612428576124286130ae565b6020908102919091010151604051626cc3c360e61b81523060048201526001600160a01b03868116602483015290911690631b30f0c090604401600060405180830381600087803b15801561247c57600080fd5b505af1158015612490573d6000803e3d6000fd5b505050508061249e906130c4565b905061240e565b506001600160a01b0385166124fc5760405162461bcd60e51b815260206004820152601860248201527f6d696e742d746f2d7468652d7a65726f2d6164647265737300000000000000006044820152606401610204565b836039600082825461250e9190612eda565b9091555050603a5460395411156125675760405162461bcd60e51b815260206004820152601a60248201527f737572706173732d6d61782d6465706f7369742d737570706c790000000000006044820152606401610204565b6001600160a01b038516600081815260346020908152604080832080548981019091559051888152909392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36125c8868261274b565b505050505050565b6000816125de600282612f87565b611ad9670de0b6b3a764000086612fa9565b60008183106125ff5781611aed565b5090919050565b600054610100900460ff168061261f575060005460ff16155b61263b5760405162461bcd60e51b815260040161020490612f39565b600054610100900460ff1615801561265d576000805461ffff19166101011790555b600180558015612673576000805461ff00191690555b50565b600054610100900460ff168061268f575060005460ff16155b6126ab5760405162461bcd60e51b815260040161020490612f39565b600054610100900460ff161580156126cd576000805461ffff19166101011790555b6001600160a01b03821661271a5760405162461bcd60e51b8152602060048201526014602482015273706f6f6c2d616464726573732d69732d7a65726f60601b6044820152606401610204565b600280546001600160a01b0319166001600160a01b0384161790558015612747576000805461ff00191690555b5050565b8061274757600254604051633f5fc13160e01b81526001600160a01b03848116600483015290911690633f5fc131906024015b600060405180830381600087803b15801561279857600080fd5b505af11580156125c8573d6000803e3d6000fd5b8061274757600254604051630275038d60e41b81526001600160a01b0384811660048301529091169063275038d09060240161277e565b6000612838826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128b59092919063ffffffff16565b805190915015610e4f57808060200190518101906128569190612dca565b610e4f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610204565b60606128c484846000856128cc565b949350505050565b60608247101561292d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610204565b843b61297b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610204565b600080866001600160a01b0316858760405161299791906130df565b60006040518083038185875af1925050503d80600081146129d4576040519150601f19603f3d011682016040523d82523d6000602084013e6129d9565b606091505b50915091506129e98282866129f4565b979650505050505050565b60608315612a03575081611aed565b825115612a135782518084602001fd5b8160405162461bcd60e51b81526004016102049190612bab565b828054612a3990612e7f565b90600052602060002090601f016020900481019282612a5b5760008555612aa1565b82601f10612a7457805160ff1916838001178555612aa1565b82800160010185558215612aa1579182015b82811115612aa1578251825591602001919060010190612a86565b50612aad929150612b25565b5090565b828054612abd90612e7f565b90600052602060002090601f016020900481019282612adf5760008555612aa1565b82601f10612af85782800160ff19823516178555612aa1565b82800160010185558215612aa1579182015b82811115612aa1578235825591602001919060010190612b0a565b5b80821115612aad5760008155600101612b26565b6001600160a01b038116811461267357600080fd5b60008060408385031215612b6257600080fd5b823591506020830135612b7481612b3a565b809150509250929050565b60005b83811015612b9a578181015183820152602001612b82565b838111156123215750506000910152565b6020815260008251806020840152612bca816040850160208701612b7f565b601f01601f19169190910160400192915050565b60008060408385031215612bf157600080fd5b8235612bfc81612b3a565b946020939093013593505050565b600060208284031215612c1c57600080fd5b5035919050565b600080600060608486031215612c3857600080fd5b8335612c4381612b3a565b92506020840135612c5381612b3a565b929592945050506040919091013590565b600060208284031215612c7657600080fd5b8135611aed81612b3a565b80356001600160801b0381168114612c9857600080fd5b919050565b600060208284031215612caf57600080fd5b611aed82612c81565b60008060408385031215612ccb57600080fd5b8235612cd681612b3a565b91506020830135612b7481612b3a565b803560ff81168114612c9857600080fd5b600080600080600080600060c0888a031215612d1257600080fd5b8735612d1d81612b3a565b96506020880135612d2d81612b3a565b9550604088013567ffffffffffffffff80821115612d4a57600080fd5b818a0191508a601f830112612d5e57600080fd5b813581811115612d6d57600080fd5b8b6020828501011115612d7f57600080fd5b602083019750809650505050612d9760608901612ce6565b9250612da560808901612c81565b915060a0880135905092959891949750929550565b80518015158114612c9857600080fd5b600060208284031215612ddc57600080fd5b611aed82612dba565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215612e2e57600080fd5b5051919050565b600060208284031215612e4757600080fd5b8151611aed81612b3a565b634e487b7160e01b600052601160045260246000fd5b600082821015612e7a57612e7a612e52565b500390565b600181811c90821680612e9357607f821691505b602082108114156115a757634e487b7160e01b600052602260045260246000fd5b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b60008219821115612eed57612eed612e52565b500190565b600080600080600060a08688031215612f0a57600080fd5b612f1386612dba565b602087015160408801516060890151608090990151929a91995097965090945092505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082612fa457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612fc357612fc3612e52565b500290565b634e487b7160e01b600052604160045260246000fd5b8051612c9881612b3a565b60006020808385031215612ffc57600080fd5b825167ffffffffffffffff8082111561301457600080fd5b818501915085601f83011261302857600080fd5b81518181111561303a5761303a612fc8565b8060051b604051601f19603f8301168101818110858211171561305f5761305f612fc8565b60405291825284820192508381018501918883111561307d57600080fd5b938501935b828510156130a25761309385612fde565b84529385019392850192613082565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156130d8576130d8612e52565b5060010190565b600082516130f1818460208701612b7f565b919091019291505056fea2646970667358221220263566c9d53c7e7fba2453c4efccf5fae27a9ae0207153ba0f4bcce352c410cf64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101c55760003560e01c80636e553f65116100f7578063b2a02ff111610095578063dd62ed3e11610064578063dd62ed3e14610591578063ea180f27146105c9578063f46c3c51146105e9578063ffa1ad74146106165761020d565b8063b2a02ff114610526578063c2d275ba14610546578063d259332914610566578063dcaf9c441461057b5761020d565b806384955c88116100d157806384955c88146104b157806395d89b41146104d1578063a457c2d7146104e6578063a9059cbb146105065761020d565b80636e553f65146104445780636f307dc31461046457806370a08231146104845761020d565b806322f3e2d411610164578063313ce5671161013e578063313ce567146103b157806339509351146103e4578063593557361461040457806362c06767146104245761020d565b806322f3e2d41461035a57806323b872dd1461037b5780632ab4d0521461039b5761020d565b80630c340a24116101a05780630c340a24146102c957806316f0115b146102f6578063172f50a41461031657806318160ddd146103365761020d565b8062f714ce1461024c57806306fdde031461026e578063095ea7b3146102995761020d565b3661020d5760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b6044820152606401610204565b34801561025857600080fd5b5061026c610267366004612b4f565b610647565b005b34801561027a57600080fd5b50610283610abb565b6040516102909190612bab565b60405180910390f35b3480156102a557600080fd5b506102b96102b4366004612bde565b610b49565b6040519015158152602001610290565b3480156102d557600080fd5b506102de610b60565b6040516001600160a01b039091168152602001610290565b34801561030257600080fd5b506002546102de906001600160a01b031681565b34801561032257600080fd5b5061026c610331366004612c0a565b610be2565b34801561034257600080fd5b5061034c60395481565b604051908152602001610290565b34801561036657600080fd5b50603c546102b990600160a01b900460ff1681565b34801561038757600080fd5b506102b9610396366004612c23565b610ca2565b3480156103a757600080fd5b5061034c603a5481565b3480156103bd57600080fd5b50603c546103d290600160a81b900460ff1681565b60405160ff9091168152602001610290565b3480156103f057600080fd5b506102b96103ff366004612bde565b610dc5565b34801561041057600080fd5b5061034c61041f366004612c64565b610e01565b34801561043057600080fd5b5061026c61043f366004612c23565b610e2f565b34801561045057600080fd5b5061026c61045f366004612b4f565b610e68565b34801561047057600080fd5b50603c546102de906001600160a01b031681565b34801561049057600080fd5b5061034c61049f366004612c64565b60346020526000908152604090205481565b3480156104bd57600080fd5b5061034c6104cc366004612c64565b6113dc565b3480156104dd57600080fd5b506102836115ad565b3480156104f257600080fd5b506102b9610501366004612bde565b6115ba565b34801561051257600080fd5b506102b9610521366004612bde565b611645565b34801561053257600080fd5b5061026c610541366004612c23565b6116b1565b34801561055257600080fd5b5061026c610561366004612c9d565b611701565b34801561057257600080fd5b5061026c61183c565b34801561058757600080fd5b5061034c603b5481565b34801561059d57600080fd5b5061034c6105ac366004612cb8565b603560209081526000928352604080842090915290825290205481565b3480156105d557600080fd5b5061026c6105e4366004612cf7565b6118d5565b3480156105f557600080fd5b5061034c610604366004612c64565b60366020526000908152604090205481565b34801561062257600080fd5b50610283604051806040016040528060058152602001640312e302e360dc1b81525081565b600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561069557600080fd5b505afa1580156106a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cd9190612dca565b156107055760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b6044820152606401610204565b600260015414156107285760405162461bcd60e51b815260040161020490612de5565b6002600181905554604051633af5be4760e01b81523060048201526001600160a01b0390911690633af5be479060240160206040518083038186803b15801561077057600080fd5b505afa158015610784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a89190612dca565b6107ec5760405162461bcd60e51b815260206004820152601560248201527418dbdb1b185d195c985b0b5a5b995e1a5cdd195b9d605a1b6044820152606401610204565b6000821180156108045750610800336113dc565b8211155b6108445760405162461bcd60e51b8152602060048201526011602482015270185b5bdd5b9d0b5a5ccb5a5b9d985b1a59607a1b6044820152606401610204565b60025460408051631d283f4f60e31b815290516000926001600160a01b03169163e941fa7891600480830192602092919082900301818787803b15801561088a57600080fd5b505af115801561089e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c29190612e1c565b90508260008215610976576108d78584611aa1565b905061096933600260009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092b57600080fd5b505afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190612e35565b83611af4565b6109738183612e68565b91505b6109803383611dc9565b600260009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a069190612e35565b60405163f2d5d56b60e01b81526001600160a01b03868116600483015260248201859052919091169063f2d5d56b90604401600060405180830381600087803b158015610a5257600080fd5b505af1158015610a66573d6000803e3d6000fd5b505060408051888152602081018590526001600160a01b03881693503392507f4700a5c58c58ea6536703185e43dae38bfd4158ee5330c70988f02a65562a36e910160405180910390a3505060018055505050565b60378054610ac890612e7f565b80601f0160208091040260200160405190810160405280929190818152602001828054610af490612e7f565b8015610b415780601f10610b1657610100808354040283529160200191610b41565b820191906000526020600020905b815481529060010190602001808311610b2457829003601f168201915b505050505081565b6000610b56338484612026565b5060015b92915050565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b158015610ba557600080fd5b505afa158015610bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdd9190612e35565b905090565b610bea610b60565b6001600160a01b0316336001600160a01b031614610c1a5760405162461bcd60e51b815260040161020490612eb4565b603a5481811415610c635760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b6044820152606401610204565b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603a55565b600060026001541415610cc75760405162461bcd60e51b815260040161020490612de5565b6002600155838280610cd8836113dc565b1015610d205760405162461bcd60e51b81526020600482015260176024820152766e6f742d656e6f7567682d667265652d62616c616e636560481b6044820152606401610204565b610d2b868686611af4565b6001600160a01b03861660009081526035602090815260408083203384529091529020546000198114610db55784811015610da85760405162461bcd60e51b815260206004820152601860248201527f616d6f756e742d657863656564732d616c6c6f77616e636500000000000000006044820152606401610204565b610db58733878403612026565b5050600180805595945050505050565b3360008181526035602090815260408083206001600160a01b03871684529091528120549091610b56918590610dfc908690612eda565b612026565b6000610e0c826113dc565b6001600160a01b0390921660009081526034602052604090205491909103919050565b610e37612133565b6001600160a01b038316610e5457610e4f828261216d565b505050565b610e4f6001600160a01b0384168383612286565b600260009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb657600080fd5b505afa158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee9190612dca565b15610f245760405162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b6044820152606401610204565b60026001541415610f475760405162461bcd60e51b815260040161020490612de5565b6002600155603c54600160a01b900460ff16610f9e5760405162461bcd60e51b81526020600482015260166024820152756465706f7369742d746f6b656e2d696e61637469766560501b6044820152606401610204565b600254604051633af5be4760e01b81523060048201526001600160a01b0390911690633af5be479060240160206040518083038186803b158015610fe157600080fd5b505afa158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110199190612dca565b61105d5760405162461bcd60e51b815260206004820152601560248201527418dbdb1b185d195c985b0b5a5b995e1a5cdd195b9d605a1b6044820152606401610204565b6000821161109e5760405162461bcd60e51b815260206004820152600e60248201526d616d6f756e742d69732d7a65726f60901b6044820152606401610204565b600254604080516361d027b360e01b815290516000926001600160a01b0316916361d027b3916004808301926020929190829003018186803b1580156110e357600080fd5b505afa1580156110f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111b9190612e35565b603c546040516370a0823160e01b81526001600160a01b038084166004830152929350600092909116906370a082319060240160206040518083038186803b15801561116657600080fd5b505afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e9190612e1c565b603c549091506111b9906001600160a01b03163384876122e9565b603c546040516370a0823160e01b81526001600160a01b038481166004830152839216906370a082319060240160206040518083038186803b1580156111fe57600080fd5b505afa158015611212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112369190612e1c565b6112409190612e68565b93506000600260009054906101000a90046001600160a01b03166001600160a01b03166367a527936040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561129457600080fd5b505af11580156112a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cc9190612e1c565b9050846000821561137f576112e18784611aa1565b9050611372600260009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561133457600080fd5b505afa158015611348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136c9190612e35565b82612327565b61137c8183612e68565b91505b6113898683612327565b60408051888152602081018390526001600160a01b0388169133917f95d16db8c4932fcf5d6de67364791e7178ec505c7d3829a8b34d18959c01552c910160405180910390a35050600180555050505050565b60025460405163dde3ab9560e01b81526001600160a01b038381166004830152600092839291169063dde3ab959060240160a06040518083038186803b15801561142557600080fd5b505afa158015611439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145d9190612ef2565b94505050505060008111156115a7576001600160a01b03808416600090815260346020908152604091829020546002548351637556d1c160e11b815293516115a4959294919092169263eaada38292600480840193829003018186803b1580156114c657600080fd5b505afa1580156114da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fe9190612e35565b603c54603b546001600160a01b039283169263b5e9bef59216906115239087906125d0565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b15801561156757600080fd5b505afa15801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f9190612e1c565b6125f0565b91505b50919050565b60388054610ac890612e7f565b3360009081526035602090815260408083206001600160a01b03861684529091528120548281101561162e5760405162461bcd60e51b815260206004820152601e60248201527f6465637265617365642d616c6c6f77616e63652d62656c6f772d7a65726f00006044820152606401610204565b61163b3385858403612026565b5060019392505050565b6000338280611653836113dc565b101561169b5760405162461bcd60e51b81526020600482015260176024820152766e6f742d656e6f7567682d667265652d62616c616e636560481b6044820152606401610204565b6116a6338686611af4565b506001949350505050565b6002546001600160a01b031633146116f65760405162461bcd60e51b81526020600482015260086024820152671b9bdd0b5c1bdbdb60c21b6044820152606401610204565b610e4f838383611af4565b611709610b60565b6001600160a01b0316336001600160a01b0316146117395760405162461bcd60e51b815260040161020490612eb4565b670de0b6b3a7640000816001600160801b0316111561179a5760405162461bcd60e51b815260206004820152601f60248201527f636f6c6c61746572616c697a6174696f6e2d726174696f2d67742d31303025006044820152606401610204565b603b546001600160801b0382168114156117ec5760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b6044820152606401610204565b604080518281526001600160801b03841660208201527ff84d4544cfaedc7b1b8b7fa92b1f758aea3e3e69dfb321343825e4dd86f8147a910160405180910390a1506001600160801b0316603b55565b611844610b60565b6001600160a01b0316336001600160a01b0316146118745760405162461bcd60e51b815260040161020490612eb4565b603c54604051600160a01b90910460ff1615808252907fb2f86f872205a47e0890262c11c93dba2270b3f079ada3dbe9cb6f755f4ddc9f9060200160405180910390a1603c8054911515600160a01b0260ff60a01b19909216919091179055565b600054610100900460ff16806118ee575060005460ff16155b61190a5760405162461bcd60e51b815260040161020490612f39565b600054610100900460ff1615801561192c576000805461ffff19166101011790555b6001600160a01b0388166119775760405162461bcd60e51b81526020600482015260126024820152711d5b99195c9b1e5a5b99cb5a5ccb5b9d5b1b60721b6044820152606401610204565b670de0b6b3a7640000836001600160801b031611156119d85760405162461bcd60e51b815260206004820152601f60248201527f636f6c6c61746572616c697a6174696f6e2d726174696f2d67742d31303025006044820152606401610204565b6119e0612606565b6119e987612676565b60408051808201909152601a8082527f546f6b656e697a6564206465706f73697420706f736974696f6e0000000000006020909201918252611a2d91603791612a2d565b50611a3a60388787612ab1565b50603c805460ff8616600160a81b0260ff60a81b196001600160a81b03199092166001600160a01b038c1617600160a01b17919091161790556001600160801b038316603b55603a8290558015611a97576000805461ff00191690555b5050505050505050565b6000821580611aae575081155b15611abb57506000610b5a565b670de0b6b3a7640000611acf600282612f87565b611ad98486612fa9565b611ae39190612eda565b611aed9190612f87565b9392505050565b82826000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611b4657600080fd5b505afa158015611b5a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b829190810190612fe9565b805190915060005b81811015611c2a57828181518110611ba457611ba46130ae565b602090810291909101015160405163058bd91d60e51b81523060048201526001600160a01b03878116602483015286811660448301529091169063b17b23a090606401600060405180830381600087803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b5050505080611c23906130c4565b9050611b8a565b506001600160a01b038716611c815760405162461bcd60e51b815260206004820152601e60248201527f7472616e736665722d66726f6d2d7468652d7a65726f2d6164647265737300006044820152606401610204565b6001600160a01b038616611cd75760405162461bcd60e51b815260206004820152601c60248201527f7472616e736665722d746f2d7468652d7a65726f2d61646472657373000000006044820152606401610204565b6001600160a01b03871660009081526034602052604090205485811015611d405760405162461bcd60e51b815260206004820152601f60248201527f7472616e736665722d616d6f756e742d657863656564732d62616c616e6365006044820152606401610204565b6001600160a01b03878116600081815260346020908152604080832080548c8101909155948d16808452928190208b87039081905590518b8152909392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611db3898361274b565b611dbd8a826127ac565b50505050505050505050565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611e1a57600080fd5b505afa158015611e2e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e569190810190612fe9565b805190915060005b81811015611ef557828181518110611e7857611e786130ae565b6020908102919091010151604051626cc3c360e61b81523060048201526001600160a01b03868116602483015290911690631b30f0c090604401600060405180830381600087803b158015611ecc57600080fd5b505af1158015611ee0573d6000803e3d6000fd5b5050505080611eee906130c4565b9050611e5e565b506001600160a01b038516611f4c5760405162461bcd60e51b815260206004820152601a60248201527f6275726e2d66726f6d2d7468652d7a65726f2d616464726573730000000000006044820152606401610204565b6001600160a01b03851660009081526034602052604090205484811015611fb55760405162461bcd60e51b815260206004820152601b60248201527f6275726e2d616d6f756e742d657863656564732d62616c616e636500000000006044820152606401610204565b6039805486900390556001600160a01b03861660008181526034602090815260408083208986039081905590518981529093917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361201d87826127ac565b50505050505050565b6001600160a01b03831661207c5760405162461bcd60e51b815260206004820152601d60248201527f617070726f76652d66726f6d2d7468652d7a65726f2d616464726573730000006044820152606401610204565b6001600160a01b0382166120d25760405162461bcd60e51b815260206004820152601b60248201527f617070726f76652d746f2d7468652d7a65726f2d6164647265737300000000006044820152606401610204565b6001600160a01b0383811660008181526035602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b61213b610b60565b6001600160a01b0316336001600160a01b03161461216b5760405162461bcd60e51b815260040161020490612eb4565b565b804710156121bd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610204565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461220a576040519150601f19603f3d011682016040523d82523d6000602084013e61220f565b606091505b5050905080610e4f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610204565b6040516001600160a01b038316602482015260448101829052610e4f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526127e3565b6040516001600160a01b03808516602483015283166044820152606481018290526123219085906323b872dd60e01b906084016122b2565b50505050565b603c54600160a01b900460ff166123795760405162461bcd60e51b81526020600482015260166024820152756465706f7369742d746f6b656e2d696e61637469766560501b6044820152606401610204565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156123ca57600080fd5b505afa1580156123de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124069190810190612fe9565b805190915060005b818110156124a557828181518110612428576124286130ae565b6020908102919091010151604051626cc3c360e61b81523060048201526001600160a01b03868116602483015290911690631b30f0c090604401600060405180830381600087803b15801561247c57600080fd5b505af1158015612490573d6000803e3d6000fd5b505050508061249e906130c4565b905061240e565b506001600160a01b0385166124fc5760405162461bcd60e51b815260206004820152601860248201527f6d696e742d746f2d7468652d7a65726f2d6164647265737300000000000000006044820152606401610204565b836039600082825461250e9190612eda565b9091555050603a5460395411156125675760405162461bcd60e51b815260206004820152601a60248201527f737572706173732d6d61782d6465706f7369742d737570706c790000000000006044820152606401610204565b6001600160a01b038516600081815260346020908152604080832080548981019091559051888152909392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36125c8868261274b565b505050505050565b6000816125de600282612f87565b611ad9670de0b6b3a764000086612fa9565b60008183106125ff5781611aed565b5090919050565b600054610100900460ff168061261f575060005460ff16155b61263b5760405162461bcd60e51b815260040161020490612f39565b600054610100900460ff1615801561265d576000805461ffff19166101011790555b600180558015612673576000805461ff00191690555b50565b600054610100900460ff168061268f575060005460ff16155b6126ab5760405162461bcd60e51b815260040161020490612f39565b600054610100900460ff161580156126cd576000805461ffff19166101011790555b6001600160a01b03821661271a5760405162461bcd60e51b8152602060048201526014602482015273706f6f6c2d616464726573732d69732d7a65726f60601b6044820152606401610204565b600280546001600160a01b0319166001600160a01b0384161790558015612747576000805461ff00191690555b5050565b8061274757600254604051633f5fc13160e01b81526001600160a01b03848116600483015290911690633f5fc131906024015b600060405180830381600087803b15801561279857600080fd5b505af11580156125c8573d6000803e3d6000fd5b8061274757600254604051630275038d60e41b81526001600160a01b0384811660048301529091169063275038d09060240161277e565b6000612838826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128b59092919063ffffffff16565b805190915015610e4f57808060200190518101906128569190612dca565b610e4f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610204565b60606128c484846000856128cc565b949350505050565b60608247101561292d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610204565b843b61297b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610204565b600080866001600160a01b0316858760405161299791906130df565b60006040518083038185875af1925050503d80600081146129d4576040519150601f19603f3d011682016040523d82523d6000602084013e6129d9565b606091505b50915091506129e98282866129f4565b979650505050505050565b60608315612a03575081611aed565b825115612a135782518084602001fd5b8160405162461bcd60e51b81526004016102049190612bab565b828054612a3990612e7f565b90600052602060002090601f016020900481019282612a5b5760008555612aa1565b82601f10612a7457805160ff1916838001178555612aa1565b82800160010185558215612aa1579182015b82811115612aa1578251825591602001919060010190612a86565b50612aad929150612b25565b5090565b828054612abd90612e7f565b90600052602060002090601f016020900481019282612adf5760008555612aa1565b82601f10612af85782800160ff19823516178555612aa1565b82800160010185558215612aa1579182015b82811115612aa1578235825591602001919060010190612b0a565b5b80821115612aad5760008155600101612b26565b6001600160a01b038116811461267357600080fd5b60008060408385031215612b6257600080fd5b823591506020830135612b7481612b3a565b809150509250929050565b60005b83811015612b9a578181015183820152602001612b82565b838111156123215750506000910152565b6020815260008251806020840152612bca816040850160208701612b7f565b601f01601f19169190910160400192915050565b60008060408385031215612bf157600080fd5b8235612bfc81612b3a565b946020939093013593505050565b600060208284031215612c1c57600080fd5b5035919050565b600080600060608486031215612c3857600080fd5b8335612c4381612b3a565b92506020840135612c5381612b3a565b929592945050506040919091013590565b600060208284031215612c7657600080fd5b8135611aed81612b3a565b80356001600160801b0381168114612c9857600080fd5b919050565b600060208284031215612caf57600080fd5b611aed82612c81565b60008060408385031215612ccb57600080fd5b8235612cd681612b3a565b91506020830135612b7481612b3a565b803560ff81168114612c9857600080fd5b600080600080600080600060c0888a031215612d1257600080fd5b8735612d1d81612b3a565b96506020880135612d2d81612b3a565b9550604088013567ffffffffffffffff80821115612d4a57600080fd5b818a0191508a601f830112612d5e57600080fd5b813581811115612d6d57600080fd5b8b6020828501011115612d7f57600080fd5b602083019750809650505050612d9760608901612ce6565b9250612da560808901612c81565b915060a0880135905092959891949750929550565b80518015158114612c9857600080fd5b600060208284031215612ddc57600080fd5b611aed82612dba565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215612e2e57600080fd5b5051919050565b600060208284031215612e4757600080fd5b8151611aed81612b3a565b634e487b7160e01b600052601160045260246000fd5b600082821015612e7a57612e7a612e52565b500390565b600181811c90821680612e9357607f821691505b602082108114156115a757634e487b7160e01b600052602260045260246000fd5b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b60008219821115612eed57612eed612e52565b500190565b600080600080600060a08688031215612f0a57600080fd5b612f1386612dba565b602087015160408801516060890151608090990151929a91995097965090945092505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082612fa457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612fc357612fc3612e52565b500290565b634e487b7160e01b600052604160045260246000fd5b8051612c9881612b3a565b60006020808385031215612ffc57600080fd5b825167ffffffffffffffff8082111561301457600080fd5b818501915085601f83011261302857600080fd5b81518181111561303a5761303a612fc8565b8060051b604051601f19603f8301168101818110858211171561305f5761305f612fc8565b60405291825284820192508381018501918883111561307d57600080fd5b938501935b828510156130a25761309385612fde565b84529385019392850192613082565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156130d8576130d8612e52565b5060010190565b600082516130f1818460208701612b7f565b919091019291505056fea2646970667358221220263566c9d53c7e7fba2453c4efccf5fae27a9ae0207153ba0f4bcce352c410cf64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256,address)": {
        "params": {
          "amount_": "The amount of collateral tokens to deposit",
          "onBehalfOf_": "The account to deposit to"
        }
      },
      "lockedBalanceOf(address)": {
        "params": {
          "account_": "The account to check"
        },
        "returns": {
          "_lockedBalance": "The locked amount"
        }
      },
      "seize(address,address,uint256)": {
        "details": "Same as _transfer",
        "params": {
          "amount_": "The amount to seize",
          "from_": "The account to seize from",
          "to_": "The beneficiary account"
        }
      },
      "sweep(address,address,uint256)": {
        "params": {
          "amount_": "The amount to send",
          "to_": "The recipient of the transfer",
          "token_": "The token to transfer"
        }
      },
      "unlockedBalanceOf(address)": {
        "params": {
          "account_": "The account to check"
        },
        "returns": {
          "_unlockedBalance": "The amount that user can transfer or withdraw"
        }
      },
      "updateCollateralizationRatio(uint128)": {
        "params": {
          "newCollateralizationRatio_": "The new CR value"
        }
      },
      "updateMaxTotalSupply(uint256)": {
        "params": {
          "newMaxTotalSupply_": "The new max total supply"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "amount_": "The amount of collateral to withdraw",
          "to_": "The account that will receive withdrawn collateral"
        }
      }
    },
    "title": "Represents the users' deposits",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CollateralDeposited(address,address,uint256,uint256)": {
        "notice": "Emitted when collateral is deposited"
      },
      "CollateralWithdrawn(address,address,uint256,uint256)": {
        "notice": "Emitted when collateral is withdrawn"
      },
      "CollateralizationRatioUpdated(uint256,uint256)": {
        "notice": "Emitted when CR is updated"
      },
      "DepositTokenActiveUpdated(bool)": {
        "notice": "Emitted when active flag is updated"
      },
      "MaxTotalSupplyUpdated(uint256,uint256)": {
        "notice": "Emitted when max total supply is updated"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Set `amount` as the allowance of `spender` over the caller's tokens"
      },
      "collateralizationRatio()": {
        "notice": "Collateralization ration for the deposit token"
      },
      "decimals()": {
        "notice": "The decimals of the token"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Atomically decrease the allowance granted to `spender` by the caller"
      },
      "deposit(uint256,address)": {
        "notice": "Deposit collateral and mint msdTOKEN (tokenized deposit position)"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Atomically increase the allowance granted to `spender` by the caller"
      },
      "isActive()": {
        "notice": "If a collateral isn't active, it disables minting new tokens"
      },
      "lastDepositOf(address)": {
        "notice": "Stores de timestamp of last deposit event of each account. It's used combined with `minDepositTime`."
      },
      "lockedBalanceOf(address)": {
        "notice": "Get the locked balance"
      },
      "maxTotalSupply()": {
        "notice": "The supply cap (in USD)"
      },
      "name()": {
        "notice": "The name of the token"
      },
      "pool()": {
        "notice": "Pool contract"
      },
      "seize(address,address,uint256)": {
        "notice": "Seize tokens"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      },
      "symbol()": {
        "notice": "The symbol of the token"
      },
      "toggleIsActive()": {
        "notice": "Enable/Disable the Deposit Token"
      },
      "transfer(address,uint256)": {
        "notice": "Move `amount` tokens from the caller's account to `recipient`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Move `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance"
      },
      "underlying()": {
        "notice": "Deposit underlying asset (e.g. MET)"
      },
      "unlockedBalanceOf(address)": {
        "notice": "Get the unlocked balance (i.e. transferable, withdrawable)"
      },
      "updateCollateralizationRatio(uint128)": {
        "notice": "Update collateralization ratio"
      },
      "updateMaxTotalSupply(uint256)": {
        "notice": "Update max total supply"
      },
      "withdraw(uint256,address)": {
        "notice": "Burn msdTOKEN and withdraw collateral"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7177,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7180,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7231,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6148,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPool)11091"
      },
      {
        "astId": 6256,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13004,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "balanceOf",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13011,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "allowance",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 13016,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "lastDepositOf",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13019,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "name",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 13022,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "symbol",
        "offset": 0,
        "slot": "56",
        "type": "t_string_storage"
      },
      {
        "astId": 13025,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 13028,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "maxTotalSupply",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 13031,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "collateralizationRatio",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 13035,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "underlying",
        "offset": 0,
        "slot": "60",
        "type": "t_contract(IERC20)7886"
      },
      {
        "astId": 13038,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "isActive",
        "offset": 20,
        "slot": "60",
        "type": "t_bool"
      },
      {
        "astId": 13041,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "decimals",
        "offset": 21,
        "slot": "60",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)7886": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)11091": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}