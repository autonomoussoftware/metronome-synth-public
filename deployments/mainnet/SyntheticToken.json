{
  "address": "0x1cf68D953188e2073d4B0783Fd2829c21ec162C4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountExceedsAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveFromTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnFromTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DecimalsIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DecreasedAllowanceBelowZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NameIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewValueIsSameAsCurrent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolRegistryIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderCanNotBurn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderCanNotMint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderCanNotSeize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SurpassMaxBridgingSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SurpassMaxSynthSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SymbolIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SyntheticIsInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToTheZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxBridgedInSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBridgedInSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxBridgedInSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxBridgedOutSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBridgedOutSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxBridgedOutSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IProxyOFT",
          "name": "oldProxyOFT",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IProxyOFT",
          "name": "newProxyOFT",
          "type": "address"
        }
      ],
      "name": "ProxyOFTUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newActive",
          "type": "bool"
        }
      ],
      "name": "SyntheticTokenActiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgedInSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgedOutSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue_",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue_",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        },
        {
          "internalType": "contract IPoolRegistry",
          "name": "poolRegistry_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBridgedInSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBridgedOutSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRegistry",
      "outputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyOFT",
      "outputs": [
        {
          "internalType": "contract IProxyOFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBridgedIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBridgedOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxBridgedInSupply_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxBridgedInSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxBridgedOutSupply_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxBridgedOutSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProxyOFT",
          "name": "newProxyOFT_",
          "type": "address"
        }
      ],
      "name": "updateProxyOFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1284db0fe782c078000a9da883cfd04140ab6799d9442213a73fcde3e2e7d603",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x1cf68D953188e2073d4B0783Fd2829c21ec162C4",
    "transactionIndex": 100,
    "gasUsed": "1534837",
    "logsBloom": "0x
    "blockHash": "0x0ad774e6b9faf0bc0af096adc89350727d1a6afa557145bfacae034e021bb88f",
    "transactionHash": "0x1284db0fe782c078000a9da883cfd04140ab6799d9442213a73fcde3e2e7d603",
    "logs": [],
    "blockNumber": 18314491,
    "cumulativeGasUsed": "10066670",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "545cb6254fd08cfae8ffa56eab2faa67",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountExceedsAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecimalsIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecreasedAllowanceBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewValueIsSameAsCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolRegistryIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderCanNotBurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderCanNotMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderCanNotSeize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SurpassMaxBridgingSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SurpassMaxSynthSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SymbolIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticIsInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToTheZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxBridgedInSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBridgedInSupply\",\"type\":\"uint256\"}],\"name\":\"MaxBridgedInSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxBridgedOutSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBridgedOutSupply\",\"type\":\"uint256\"}],\"name\":\"MaxBridgedOutSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IProxyOFT\",\"name\":\"oldProxyOFT\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IProxyOFT\",\"name\":\"newProxyOFT\",\"type\":\"address\"}],\"name\":\"ProxyOFTUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newActive\",\"type\":\"bool\"}],\"name\":\"SyntheticTokenActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgedInSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgedOutSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"contract IPoolRegistry\",\"name\":\"poolRegistry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBridgedInSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBridgedOutSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyOFT\",\"outputs\":[{\"internalType\":\"contract IProxyOFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBridgedIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBridgedOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBridgedInSupply_\",\"type\":\"uint256\"}],\"name\":\"updateMaxBridgedInSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBridgedOutSupply_\",\"type\":\"uint256\"}],\"name\":\"updateMaxBridgedOutSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"updateMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProxyOFT\",\"name\":\"newProxyOFT_\",\"type\":\"address\"}],\"name\":\"updateProxyOFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bridgedInSupply()\":{\"details\":\"The supply is calculated using `MAX(totalBridgedIn - totalBridgedOut, 0)`\"},\"bridgedOutSupply()\":{\"details\":\"The supply is calculated using `MAX(totalBridgedOut - totalBridgedIn, 0)`\"},\"burn(address,uint256)\":{\"params\":{\"amount_\":\"The amount to burn\",\"from_\":\"The account to burn from\"}},\"mint(address,uint256)\":{\"params\":{\"amount_\":\"The amount to mint\",\"to_\":\"The account to mint to\"}},\"seize(address,address,uint256)\":{\"details\":\"Same as _transfer\",\"params\":{\"amount_\":\"The amount to seize\",\"to_\":\"The beneficiary account\"}},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"updateMaxTotalSupply(uint256)\":{\"params\":{\"newMaxTotalSupply_\":\"The new max total supply\"}},\"updateProxyOFT(address)\":{\"params\":{\"newProxyOFT_\":\"Address of new ProxyOFT\"}}},\"title\":\"Synthetic Token contract\",\"version\":1},\"userdoc\":{\"events\":{\"MaxBridgedInSupplyUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max bridged-in supply is updated\"},\"MaxBridgedOutSupplyUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max bridged-out supply is updated\"},\"MaxTotalSupplyUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max total supply is updated\"},\"ProxyOFTUpdated(address,address)\":{\"notice\":\"Emitted when proxyOFT is updated\"},\"SyntheticTokenActiveUpdated(bool)\":{\"notice\":\"Emitted when active flag is updated\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Set `amount` as the allowance of `spender` over the caller's tokens\"},\"bridgedInSupply()\":{\"notice\":\"Get net bridged-in circulating supply\"},\"bridgedOutSupply()\":{\"notice\":\"Get net bridged-out circulating supply\"},\"burn(address,uint256)\":{\"notice\":\"Burn synthetic token\"},\"decimals()\":{\"notice\":\"The decimals of the token\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Atomically decrease the allowance granted to `spender` by the caller\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Atomically increase the allowance granted to `spender` by the caller\"},\"isActive()\":{\"notice\":\"If true, disables msAsset minting globally\"},\"maxBridgedInSupply()\":{\"notice\":\"Maximum allowed bridged-in (mint-related) supply\"},\"maxBridgedOutSupply()\":{\"notice\":\"Maximum allowed bridged-out (burn-related) supply\"},\"maxTotalSupply()\":{\"notice\":\"The supply cap\"},\"mint(address,uint256)\":{\"notice\":\"Mint synthetic token\"},\"name()\":{\"notice\":\"The name of the token\"},\"proxyOFT()\":{\"notice\":\"The ProxyOFT contract\"},\"seize(address,address,uint256)\":{\"notice\":\"Seize synthetic tokens\"},\"symbol()\":{\"notice\":\"The symbol of the token\"},\"toggleIsActive()\":{\"notice\":\"Enable/Disable Synthetic Token\"},\"totalBridgedIn()\":{\"notice\":\"Track amount received cross-chain\"},\"totalBridgedOut()\":{\"notice\":\"Track amount sent cross-chain\"},\"updateMaxBridgedInSupply(uint256)\":{\"notice\":\"Update max bridged-in supply\"},\"updateMaxBridgedOutSupply(uint256)\":{\"notice\":\"Update max bridged-out supply\"},\"updateMaxTotalSupply(uint256)\":{\"notice\":\"Update max total supply\"},\"updateProxyOFT(address)\":{\"notice\":\"Update proxyOFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SyntheticToken.sol\":\"SyntheticToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IManageable.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./storage/SyntheticTokenStorage.sol\\\";\\n\\nerror SenderIsNotGovernor();\\nerror SenderCanNotBurn();\\nerror SenderCanNotMint();\\nerror SenderCanNotSeize();\\nerror SyntheticIsInactive();\\nerror NameIsNull();\\nerror SymbolIsNull();\\nerror DecimalsIsNull();\\nerror PoolRegistryIsNull();\\nerror DecreasedAllowanceBelowZero();\\nerror AmountExceedsAllowance();\\nerror ApproveFromTheZeroAddress();\\nerror ApproveToTheZeroAddress();\\nerror BurnFromTheZeroAddress();\\nerror BurnAmountExceedsBalance();\\nerror MintToTheZeroAddress();\\nerror SurpassMaxBridgingSupply();\\nerror SurpassMaxSynthSupply();\\nerror TransferFromTheZeroAddress();\\nerror TransferToTheZeroAddress();\\nerror TransferAmountExceedsBalance();\\nerror NewValueIsSameAsCurrent();\\nerror AddressIsNull();\\n\\n/**\\n * @title Synthetic Token contract\\n */\\ncontract SyntheticToken is Initializable, SyntheticTokenStorageV1 {\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    /// @notice Emitted when active flag is updated\\n    event SyntheticTokenActiveUpdated(bool newActive);\\n\\n    /// @notice Emitted when max total supply is updated\\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupply, uint256 newMaxTotalSupply);\\n\\n    /// @notice Emitted when max bridged-in supply is updated\\n    event MaxBridgedInSupplyUpdated(uint256 oldMaxBridgedInSupply, uint256 newMaxBridgedInSupply);\\n\\n    /// @notice Emitted when max bridged-out supply is updated\\n    event MaxBridgedOutSupplyUpdated(uint256 oldMaxBridgedOutSupply, uint256 newMaxBridgedOutSupply);\\n\\n    /// @notice Emitted when proxyOFT is updated\\n    event ProxyOFTUpdated(IProxyOFT oldProxyOFT, IProxyOFT newProxyOFT);\\n\\n    /**\\n     * @notice Throws if caller isn't the governor\\n     */\\n    modifier onlyGovernor() {\\n        if (msg.sender != poolRegistry.governor()) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if sender can't burn\\n     */\\n    modifier onlyIfCanBurn() {\\n        if (!_isMsgSenderProxyOFT() && !_isMsgSenderPool() && !_isMsgSenderDebtToken()) revert SenderCanNotBurn();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if sender can't mint\\n     */\\n    modifier onlyIfCanMint() {\\n        if (!_isMsgSenderProxyOFT() && !_isMsgSenderPool() && !_isMsgSenderDebtToken()) revert SenderCanNotMint();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if sender can't seize\\n     */\\n    modifier onlyIfCanSeize() {\\n        if (!_isMsgSenderPool() && !_isMsgSenderDebtToken()) revert SenderCanNotSeize();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token isn't enabled\\n     */\\n    modifier onlyIfSyntheticTokenIsActive() {\\n        if (!isActive) revert SyntheticIsInactive();\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        string calldata name_,\\n        string calldata symbol_,\\n        uint8 decimals_,\\n        IPoolRegistry poolRegistry_\\n    ) external initializer {\\n        if (bytes(name_).length == 0) revert NameIsNull();\\n        if (bytes(symbol_).length == 0) revert SymbolIsNull();\\n        if (decimals_ == 0) revert DecimalsIsNull();\\n        if (address(poolRegistry_) == address(0)) revert PoolRegistryIsNull();\\n\\n        poolRegistry = poolRegistry_;\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n        isActive = true;\\n        maxTotalSupply = type(uint256).max;\\n    }\\n\\n    /**\\n     * @notice Set `amount` as the allowance of `spender` over the caller's tokens\\n     */\\n    function approve(address spender_, uint256 amount_) external override returns (bool) {\\n        _approve(msg.sender, spender_, amount_);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get net bridged-in circulating supply\\n     * @dev The supply is calculated using `MAX(totalBridgedIn - totalBridgedOut, 0)`\\n     */\\n    function bridgedInSupply() public view returns (uint256 _supply) {\\n        uint256 _totalBridgedIn = totalBridgedIn;\\n        uint256 _totalBridgedOut = totalBridgedOut;\\n\\n        if (_totalBridgedIn > _totalBridgedOut) {\\n            return _totalBridgedIn - _totalBridgedOut;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get net bridged-out circulating supply\\n     * @dev The supply is calculated using `MAX(totalBridgedOut - totalBridgedIn, 0)`\\n     */\\n    function bridgedOutSupply() public view returns (uint256 _supply) {\\n        uint256 _totalBridgedIn = totalBridgedIn;\\n        uint256 _totalBridgedOut = totalBridgedOut;\\n\\n        if (_totalBridgedOut > _totalBridgedIn) {\\n            return _totalBridgedOut - _totalBridgedIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Burn synthetic token\\n     * @param from_ The account to burn from\\n     * @param amount_ The amount to burn\\n     */\\n    function burn(address from_, uint256 amount_) external override onlyIfCanBurn {\\n        _burn(from_, amount_);\\n    }\\n\\n    /**\\n     * @notice Atomically decrease the allowance granted to `spender` by the caller\\n     */\\n    function decreaseAllowance(address spender_, uint256 subtractedValue_) external returns (bool) {\\n        uint256 _currentAllowance = allowance[msg.sender][spender_];\\n        if (_currentAllowance < subtractedValue_) revert DecreasedAllowanceBelowZero();\\n        unchecked {\\n            _approve(msg.sender, spender_, _currentAllowance - subtractedValue_);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Atomically increase the allowance granted to `spender` by the caller\\n     */\\n    function increaseAllowance(address spender_, uint256 addedValue_) external returns (bool) {\\n        _approve(msg.sender, spender_, allowance[msg.sender][spender_] + addedValue_);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mint synthetic token\\n     * @param to_ The account to mint to\\n     * @param amount_ The amount to mint\\n     */\\n    function mint(address to_, uint256 amount_) external override onlyIfCanMint {\\n        _mint(to_, amount_);\\n    }\\n\\n    /**\\n     * @notice Seize synthetic tokens\\n     * @dev Same as _transfer\\n     * @param to_ The account to seize from\\n     * @param to_ The beneficiary account\\n     * @param amount_ The amount to seize\\n     */\\n    function seize(address from_, address to_, uint256 amount_) external override onlyIfCanSeize {\\n        _transfer(from_, to_, amount_);\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transfer(address recipient_, uint256 amount_) external override returns (bool) {\\n        _transfer(msg.sender, recipient_, amount_);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transferFrom(address sender_, address recipient_, uint256 amount_) external override returns (bool) {\\n        uint256 _currentAllowance = allowance[sender_][msg.sender];\\n        if (_currentAllowance != type(uint256).max) {\\n            if (_currentAllowance < amount_) revert AmountExceedsAllowance();\\n            unchecked {\\n                _approve(sender_, msg.sender, _currentAllowance - amount_);\\n            }\\n        }\\n\\n        _transfer(sender_, recipient_, amount_);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Set `amount` as the allowance of `spender` over the `owner` s tokens\\n     */\\n    function _approve(address owner_, address spender_, uint256 amount_) private {\\n        if (owner_ == address(0)) revert ApproveFromTheZeroAddress();\\n        if (spender_ == address(0)) revert ApproveToTheZeroAddress();\\n\\n        allowance[owner_][spender_] = amount_;\\n        emit Approval(owner_, spender_, amount_);\\n    }\\n\\n    /**\\n     * @notice Destroy `amount` tokens from `account`, reducing the\\n     * total supply\\n     */\\n    function _burn(address account_, uint256 amount_) private {\\n        if (account_ == address(0)) revert BurnFromTheZeroAddress();\\n\\n        if (_isMsgSenderProxyOFT()) {\\n            totalBridgedOut += amount_;\\n            if (bridgedOutSupply() > maxBridgedOutSupply) revert SurpassMaxBridgingSupply();\\n        }\\n\\n        uint256 _currentBalance = balanceOf[account_];\\n        if (_currentBalance < amount_) revert BurnAmountExceedsBalance();\\n        unchecked {\\n            balanceOf[account_] = _currentBalance - amount_;\\n            totalSupply -= amount_;\\n        }\\n\\n        emit Transfer(account_, address(0), amount_);\\n    }\\n\\n    /**\\n     * @dev Check if the sender is proxyOFT\\n     */\\n    function _isMsgSenderProxyOFT() private view returns (bool) {\\n        return msg.sender == address(proxyOFT);\\n    }\\n\\n    /**\\n     * @notice Check if the sender is a valid DebtToken contract\\n     */\\n    function _isMsgSenderDebtToken() private view returns (bool) {\\n        IPool _pool = IManageable(msg.sender).pool();\\n\\n        return\\n            poolRegistry.isPoolRegistered(address(_pool)) &&\\n            _pool.doesDebtTokenExist(IDebtToken(msg.sender)) &&\\n            IDebtToken(msg.sender).syntheticToken() == this;\\n    }\\n\\n    /**\\n     * @notice Check if the sender is a valid Pool contract\\n     */\\n    function _isMsgSenderPool() private view returns (bool) {\\n        return poolRegistry.isPoolRegistered(msg.sender) && IPool(msg.sender).doesSyntheticTokenExist(this);\\n    }\\n\\n    /**\\n     * @notice Create `amount` tokens and assigns them to `account`, increasing\\n     * the total supply\\n     */\\n    function _mint(address account_, uint256 amount_) private onlyIfSyntheticTokenIsActive {\\n        if (account_ == address(0)) revert MintToTheZeroAddress();\\n\\n        if (_isMsgSenderProxyOFT()) {\\n            totalBridgedIn += amount_;\\n            if (bridgedInSupply() > maxBridgedInSupply) revert SurpassMaxBridgingSupply();\\n        }\\n\\n        totalSupply += amount_;\\n        if (totalSupply > maxTotalSupply) revert SurpassMaxSynthSupply();\\n        balanceOf[account_] += amount_;\\n        emit Transfer(address(0), account_, amount_);\\n    }\\n\\n    /**\\n     * @notice Move `amount` of tokens from `sender` to `recipient`\\n     */\\n    function _transfer(address sender_, address recipient_, uint256 amount_) private {\\n        if (sender_ == address(0)) revert TransferFromTheZeroAddress();\\n        if (recipient_ == address(0)) revert TransferToTheZeroAddress();\\n\\n        uint256 senderBalance = balanceOf[sender_];\\n        if (senderBalance < amount_) revert TransferAmountExceedsBalance();\\n        unchecked {\\n            balanceOf[sender_] = senderBalance - amount_;\\n            balanceOf[recipient_] += amount_;\\n        }\\n\\n        emit Transfer(sender_, recipient_, amount_);\\n    }\\n\\n    /**\\n     * @notice Enable/Disable Synthetic Token\\n     */\\n    function toggleIsActive() external override onlyGovernor {\\n        bool _newIsActive = !isActive;\\n        emit SyntheticTokenActiveUpdated(_newIsActive);\\n        isActive = _newIsActive;\\n    }\\n\\n    /**\\n     * @notice Update max total supply\\n     * @param newMaxTotalSupply_ The new max total supply\\n     */\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external override onlyGovernor {\\n        uint256 _currentMaxTotalSupply = maxTotalSupply;\\n        if (newMaxTotalSupply_ == _currentMaxTotalSupply) revert NewValueIsSameAsCurrent();\\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupply, newMaxTotalSupply_);\\n        maxTotalSupply = newMaxTotalSupply_;\\n    }\\n\\n    /**\\n     * @notice Update max bridged-in supply\\n     */\\n    function updateMaxBridgedInSupply(uint256 maxBridgedInSupply_) external onlyGovernor {\\n        uint256 _currentMaxBridgedInBalance = maxBridgedInSupply;\\n        if (maxBridgedInSupply_ == _currentMaxBridgedInBalance) revert NewValueIsSameAsCurrent();\\n        emit MaxBridgedInSupplyUpdated(_currentMaxBridgedInBalance, maxBridgedInSupply_);\\n        maxBridgedInSupply = maxBridgedInSupply_;\\n    }\\n\\n    /**\\n     * @notice Update max bridged-out supply\\n     */\\n    function updateMaxBridgedOutSupply(uint256 maxBridgedOutSupply_) external onlyGovernor {\\n        uint256 _currentMaxBridgedOutBalance = maxBridgedOutSupply;\\n        if (maxBridgedOutSupply_ == _currentMaxBridgedOutBalance) revert NewValueIsSameAsCurrent();\\n        emit MaxBridgedOutSupplyUpdated(_currentMaxBridgedOutBalance, maxBridgedOutSupply_);\\n        maxBridgedOutSupply = maxBridgedOutSupply_;\\n    }\\n\\n    /**\\n     * @notice Update proxyOFT\\n     * @param newProxyOFT_ Address of new ProxyOFT\\n     */\\n    function updateProxyOFT(IProxyOFT newProxyOFT_) external override onlyGovernor {\\n        if (address(newProxyOFT_) == address(0)) revert AddressIsNull();\\n        IProxyOFT _currentProxyOFT = proxyOFT;\\n        if (newProxyOFT_ == _currentProxyOFT) revert NewValueIsSameAsCurrent();\\n        emit ProxyOFTUpdated(_currentProxyOFT, newProxyOFT_);\\n        proxyOFT = newProxyOFT_;\\n    }\\n}\\n\",\"keccak256\":\"0x79215184b535070f179eaf6019b93db26a2bbdb3ef01b1520d2aaeab30253cb8\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/IOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../../../../openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCoreUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"keccak256\":\"0x22651924296f8308db8195d7a86a6781023241c53905418f2d3925e3f693f530\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../IOFTCoreUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the composable OFT core standard\\n */\\ninterface IComposableOFTCoreUpgradeable is IOFTCoreUpgradeable {\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function retryOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n\\n    event CallOFTReceivedFailure(\\n        uint16 indexed _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _from,\\n        address indexed _to,\\n        uint _amount,\\n        bytes _payload,\\n        bytes _reason\\n    );\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event RetryOFTReceivedSuccess(bytes32 _messageHash);\\n\\n    event NonContractAddress(address _address);\\n}\\n\",\"keccak256\":\"0x769b9356ad6019bdabdcfc11762f28d15eb9a4e262efc96835725f6862c5d9e9\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverUpgradeable {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x287036c704c57e34a6fc3f7e67c8dfaaade6eb3667b570576bc491c0f1f89a5b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStargateRouter.sol\\\";\\n\\ninterface IStargateComposer {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function factory() external view returns (address);\\n\\n    function stargateBridge() external view returns (address);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function peers(uint16 _chainId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdfdd1690bf176ac05803534a60227be90cc435b4bdd8fce2348f1a9417a9f63a\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe4d6bf9fa422e5e43dc1b6880f951d06611a4ed12c2dd7dd8c0b6a5d9e06ad0d\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function clearCachedSwap(uint16 _srcChainId, bytes calldata _srcAddress, uint256 _nonce) external;\\n\\n    function factory() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function cachedSwapLookup(\\n        uint16 _chainId_,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (address token, uint256 amountLD, address to, bytes memory payload);\\n}\\n\",\"keccak256\":\"0x92126df8e682b2c5647c7b22e7387da69f9e72480af86948ce5ed17dc2c9e0a7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICrossChainDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateRouter.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface ICrossChainDispatcher is IStargateReceiver, IOFTReceiverUpgradeable {\\n    function crossChainDispatcherOf(uint16 chainId_) external view returns (address);\\n\\n    function triggerFlashRepaySwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function triggerLeverageSwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function isBridgingActive() external view returns (bool);\\n\\n    function flashRepayCallbackTxGasLimit() external view returns (uint64);\\n\\n    function flashRepaySwapTxGasLimit() external view returns (uint64);\\n\\n    function leverageCallbackTxGasLimit() external view returns (uint64);\\n\\n    function leverageSwapTxGasLimit() external view returns (uint64);\\n\\n    function lzBaseGasLimit() external view returns (uint256);\\n\\n    function stargateComposer() external view returns (IStargateComposer);\\n\\n    function stargateSlippage() external view returns (uint256);\\n\\n    function stargatePoolIdOf(address token_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcaf05e625588dcfaa5706acc78a35fa46d50baeb2d28f689036963695a4e39cb\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address to_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xd2f04aa1bee06d6991b10aaf7c03c3ee09d85f8e48ba92feac595ad855881380\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralFactor() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function flashWithdraw(address account_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\\n\\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\\n\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function withdrawFrom(address from_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n}\\n\",\"keccak256\":\"0xb27092f9450d9c48c1a215925007ca9c7282cfe6cf257b34ab3dbe6e745b6bd1\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3b132b42090c167b2c0aef6d78d833c669c43b9e55593a7a21a96ed5d3082700\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\",\"keccak256\":\"0xac88e0997a26942cb9cbda1a7dd9756e28ba2025813e5b07e55939fbf8538ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IFeeProvider.sol\\\";\\nimport \\\"./ISmartFarmingManager.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function feeProvider() external view returns (IFeeProvider);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\\n\\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(\\n        address account_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeized_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _maxAmountToRepay);\\n\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view returns (uint256 _amountIn, uint256 _fee);\\n\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _fee);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _fee);\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function isSwapActive() external view returns (bool);\\n\\n    function smartFarmingManager() external view returns (ISmartFarmingManager);\\n}\\n\",\"keccak256\":\"0x0f0a869451cca858ba52b56970db167360fe161f2450557a053c4da938558816\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"./IQuoter.sol\\\";\\nimport \\\"./ICrossChainDispatcher.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function feeCollector() external view returns (address);\\n\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function quoter() external view returns (IQuoter);\\n\\n    function crossChainDispatcher() external view returns (ICrossChainDispatcher);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool _exists);\\n}\\n\",\"keccak256\":\"0x9ffa9e5fd39a48ac2bda561af7fb4fc9df5f8ffb7a602ef1d4da8c068019e723\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\\\";\\n\\ninterface IProxyOFT is IComposableOFTCoreUpgradeable {\\n    function getProxyOFTOf(uint16 chainId_) external view returns (address _proxyOFT);\\n}\\n\",\"keccak256\":\"0x4041a90eb60de460c9e1631aaedfbf2bff2275b3f91964800b1c774546931cd5\",\"license\":\"MIT\"},\"contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface IQuoter {\\n    function quoteCrossChainFlashRepayNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteCrossChainLeverageNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteLeverageCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function quoteFlashRepayCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function getFlashRepaySwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n\\n    function getLeverageSwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n}\\n\",\"keccak256\":\"0x1e4d2dd779a09dc8ea6b6c244b167deddca3a48e71b73bf940da04113b40c752\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external;\\n\\n    function claimable(address account_) external view returns (uint256 _claimable);\\n\\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\\n\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\\n\\n    function tokens(uint256) external view returns (IERC20);\\n\\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\\n\\n    function accountIndexOf(IERC20, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f527eeae61b6a5bff7d3b48037234ef718ae7f71dc452e8cab3b60581f0d810\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartFarmingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IManageable.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\n/**\\n * @notice SmartFarmingManager interface\\n */\\ninterface ISmartFarmingManager {\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    ) external returns (uint256 _withdrawn, uint256 _repaid);\\n\\n    function crossChainFlashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        IERC20 bridgeToken_,\\n        uint256 bridgeTokenAmountMin_,\\n        uint256 swapAmountOutMin_,\\n        uint256 repayAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 swapAmountOutMin_,\\n        uint256 depositAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverageCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _deposited);\\n\\n    function crossChainFlashRepayCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _repaid);\\n\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    ) external returns (uint256 _deposited, uint256 _issued);\\n}\\n\",\"keccak256\":\"0x7544a9d308a49e24d6984c3cfcfe2c1cfb7d9ce4655408438e1c12f37175a3b0\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/IProxyOFT.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateProxyOFT(IProxyOFT newProxyOFT_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function proxyOFT() external view returns (IProxyOFT);\\n}\\n\",\"keccak256\":\"0xfaeb24d1067e85493a5c8818d6de06fc6dbc72c37e85f82811990d0120f8a0cf\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x2f080adc5880151dc4446ef43b54abab8e3711c5f2e526917ef39a05e3c16a00\",\"license\":\"MIT\"},\"contracts/interfaces/external/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x75f04b225d0c310be7e0a09ee4c1aa6eeeb8d94e02fc0e4160a9597ce2d8d446\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/SyntheticTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/ISyntheticToken.sol\\\";\\n\\nabstract contract SyntheticTokenStorageV1 is ISyntheticToken {\\n    /**\\n     * @notice The name of the token\\n     */\\n    string public override name;\\n\\n    /**\\n     * @notice The symbol of the token\\n     */\\n    string public override symbol;\\n\\n    /**\\n     * @dev The amount of tokens owned by `account`\\n     */\\n    mapping(address => uint256) public override balanceOf;\\n\\n    /**\\n     * @dev The remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}\\n     */\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    /**\\n     * @dev Amount of tokens in existence\\n     */\\n    uint256 public override totalSupply;\\n\\n    /**\\n     * @notice The supply cap\\n     */\\n    uint256 public override maxTotalSupply;\\n\\n    /**\\n     * @dev The Pool Registry\\n     */\\n    IPoolRegistry public override poolRegistry;\\n\\n    /**\\n     * @notice If true, disables msAsset minting globally\\n     */\\n    bool public override isActive;\\n\\n    /**\\n     * @notice The decimals of the token\\n     */\\n    uint8 public override decimals;\\n\\n    /**\\n     * @notice The ProxyOFT contract\\n     */\\n    IProxyOFT public override proxyOFT;\\n\\n    /**\\n     * @notice Track amount received cross-chain\\n     */\\n    uint256 public totalBridgedIn;\\n\\n    /**\\n     * @notice Track amount sent cross-chain\\n     */\\n    uint256 public totalBridgedOut;\\n\\n    /**\\n     * @notice Maximum allowed bridged-in (mint-related) supply\\n     */\\n    uint256 public maxBridgedInSupply;\\n\\n    /**\\n     * @notice Maximum allowed bridged-out (burn-related) supply\\n     */\\n    uint256 public maxBridgedOutSupply;\\n}\\n\",\"keccak256\":\"0xdb4085f8ca55650ab5084138387bb6fd8dc658112bf65f7ae06557b8b069557d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b62000152565b6200002e60ff62000031565b50565b60008054610100900460ff1615620000ca578160ff1660011480156200006a575062000068306200014360201b62000e991760201c565b155b620000c25760405162461bcd60e51b815260206004820152602e602482015260008051602062001bab83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001295760405162461bcd60e51b815260206004820152602e602482015260008051602062001bab83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000b9565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b611a4980620001626000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80639163dd5f1161010f578063cbfa94de116100a2578063dd20d4f411610071578063dd20d4f4146103e7578063dd62ed3e146103fa578063de7ea79d14610425578063ffa1ad741461043857600080fd5b8063cbfa94de146103bb578063cd2e9866146103ce578063d2593329146103d7578063d2f09685146103df57600080fd5b8063a457c2d7116100de578063a457c2d71461036f578063a9059cbb14610382578063afcff50f14610395578063b2a02ff1146103a857600080fd5b80639163dd5f1461033957806393a04f131461034157806395d89b41146103545780639dc29fac1461035c57600080fd5b80632ab4d05211610187578063395093511161015657806339509351146102c857806340c10f19146102db5780636d1bb8f7146102ee57806370a082311461031957600080fd5b80632ab4d052146102875780632bb42183146102905780632f068bf114610299578063313ce567146102a257600080fd5b806318160ddd116101c357806318160ddd146102405780631ac571dd1461025757806322f3e2d41461026057806323b872dd1461027457600080fd5b806306fdde03146101ea578063095ea7b314610208578063172f50a41461022b575b600080fd5b6101f261045c565b6040516101ff91906116d2565b60405180910390f35b61021b61021636600461173f565b6104ea565b60405190151581526020016101ff565b61023e61023936600461176b565b610500565b005b61024960055481565b6040519081526020016101ff565b610249600b5481565b60075461021b90600160a01b900460ff1681565b61021b610282366004611784565b61061a565b61024960065481565b61024960095481565b610249600c5481565b6007546102b690600160a81b900460ff1681565b60405160ff90911681526020016101ff565b61021b6102d636600461173f565b61068b565b61023e6102e936600461173f565b6106c7565b600854610301906001600160a01b031681565b6040516001600160a01b0390911681526020016101ff565b6102496103273660046117c5565b60036020526000908152604090205481565b610249610724565b61023e61034f36600461176b565b61074c565b6101f2610866565b61023e61036a36600461173f565b610873565b61021b61037d36600461173f565b6108cc565b61021b61039036600461173f565b610928565b600754610301906001600160a01b031681565b61023e6103b6366004611784565b610935565b61023e6103c93660046117c5565b61097c565b610249600a5481565b61023e610af1565b610249610c09565b61023e6103f536600461176b565b610c25565b6102496104083660046117e9565b600460209081526000928352604080842090915290825290205481565b61023e61043336600461186b565b610d3f565b6101f2604051806040016040528060058152602001640312e332e360dc1b81525081565b6001805461046990611906565b80601f016020809104026020016040519081016040528092919081815260200182805461049590611906565b80156104e25780601f106104b7576101008083540402835291602001916104e2565b820191906000526020600020905b8154815290600101906020018083116104c557829003601f168201915b505050505081565b60006104f7338484610ea8565b50600192915050565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561054e57600080fd5b505afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105869190611941565b6001600160a01b0316336001600160a01b0316146105b757604051634b98449160e11b815260040160405180910390fd5b600654818114156105db57604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150600655565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146106755782811015610668576040516303814af160e61b815260040160405180910390fd5b6106758533858403610ea8565b610680858585610f58565b506001949350505050565b3360008181526004602090815260408083206001600160a01b038716845290915281205490916104f79185906106c2908690611974565b610ea8565b6008546001600160a01b031633141580156106e757506106e561104e565b155b80156106f857506106f6611144565b155b156107165760405163168504c160e21b815260040160405180910390fd5b6107208282611348565b5050565b600954600a54600091908082111561074757610740818361198c565b9250505090565b505090565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561079a57600080fd5b505afa1580156107ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d29190611941565b6001600160a01b0316336001600160a01b03161461080357604051634b98449160e11b815260040160405180910390fd5b600b548181141561082757604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527feacf40fa755daf182276c22cc2ad53893a50e8d3d4c73132308548febf636764910160405180910390a150600b55565b6002805461046990611906565b6008546001600160a01b03163314158015610893575061089161104e565b155b80156108a457506108a2611144565b155b156108c25760405163848003b560e01b815260040160405180910390fd5b610720828261149b565b3360009081526004602090815260408083206001600160a01b0386168452909152812054828110156109115760405163189dd6af60e31b815260040160405180910390fd5b61091e3385858403610ea8565b5060019392505050565b60006104f7338484610f58565b61093d61104e565b15801561094f575061094d611144565b155b1561096c576040516249987f60e01b815260040160405180910390fd5b610977838383610f58565b505050565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a029190611941565b6001600160a01b0316336001600160a01b031614610a3357604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610a5a5760405163fb7566d760e01b815260040160405180910390fd5b6008546001600160a01b03908116908216811415610a8b57604051630333a68160e41b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527fef71fdb6fc3b4bdacae0b7871edf00279c204dc041134e4304cf93935cf07af7910160405180910390a150600880546001600160a01b0319166001600160a01b0392909216919091179055565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3f57600080fd5b505afa158015610b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b779190611941565b6001600160a01b0316336001600160a01b031614610ba857604051634b98449160e11b815260040160405180910390fd5b600754604051600160a01b90910460ff1615808252907f79e35d0afb37464963b458a448d257d695a4dc4406dc45df01e4c7b38e2732cb9060200160405180910390a160078054911515600160a01b0260ff60a01b19909216919091179055565b600954600a54600091908181111561074757610740828261198c565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7357600080fd5b505afa158015610c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cab9190611941565b6001600160a01b0316336001600160a01b031614610cdc57604051634b98449160e11b815260040160405180910390fd5b600c5481811415610d0057604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527ff0d21a56ee8d766c9055580b458227594b5f2d86aa9087573908bea9dc4ca3d6910160405180910390a150600c55565b6000610d4b60016115a8565b90508015610d63576000805461ff0019166101001790555b85610d8157604051636e83f50760e01b815260040160405180910390fd5b83610d9f576040516330507cff60e11b815260040160405180910390fd5b60ff8316610dc057604051634dc4784160e11b815260040160405180910390fd5b6001600160a01b038216610de757604051637cb62f2b60e11b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b038416179055610e0e60018888611639565b50610e1b60028686611639565b506007805460ff60a01b1960ff8616600160a81b021661ffff60a01b1990911617600160a01b1790556000196006558015610e90576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6001600160a01b03163b151590565b6001600160a01b038316610ecf576040516356fdae6560e11b815260040160405180910390fd5b6001600160a01b038216610ef65760405163b2fa1ef360e01b815260040160405180910390fd5b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610f7f57604051630240531760e41b815260040160405180910390fd5b6001600160a01b038216610fa65760405163671d1add60e11b815260040160405180910390fd5b6001600160a01b03831660009081526003602052604090205481811015610fe057604051635dd58b8b60e01b815260040160405180910390fd5b6001600160a01b0380851660008181526003602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110409086815260200190565b60405180910390a350505050565b60075460405163c673bdaf60e01b81523360048201526000916001600160a01b03169063c673bdaf9060240160206040518083038186803b15801561109257600080fd5b505afa1580156110a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ca91906119a3565b801561113f5750604051631a0dd00b60e01b81523060048201523390631a0dd00b9060240160206040518083038186803b15801561110757600080fd5b505afa15801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f91906119a3565b905090565b600080336001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561118057600080fd5b505afa158015611194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b89190611941565b60075460405163c673bdaf60e01b81526001600160a01b03808416600483015292935091169063c673bdaf9060240160206040518083038186803b1580156111ff57600080fd5b505afa158015611213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123791906119a3565b80156112b557506040516308a00b1f60e31b81523360048201526001600160a01b0382169063450058f89060240160206040518083038186803b15801561127d57600080fd5b505afa158015611291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b591906119a3565b80156113425750306001600160a01b0316336001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ff57600080fd5b505afa158015611313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113379190611941565b6001600160a01b0316145b91505090565b600754600160a01b900460ff16611372576040516303127d9160e31b815260040160405180910390fd5b6001600160a01b0382166113995760405163c96c2a0b60e01b815260040160405180910390fd5b6008546001600160a01b03163314156113ed5780600960008282546113be9190611974565b9091555050600b546113ce610724565b11156113ed57604051639da48d2560e01b815260040160405180910390fd5b80600560008282546113ff9190611974565b90915550506006546005541115611429576040516309e0f0fd60e31b815260040160405180910390fd5b6001600160a01b03821660009081526003602052604081208054839290611451908490611974565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166114c2576040516304fca6bd60e41b815260040160405180910390fd5b6008546001600160a01b03163314156115165780600a60008282546114e79190611974565b9091555050600c546114f7610c09565b111561151657604051639da48d2560e01b815260040160405180910390fd5b6001600160a01b0382166000908152600360205260409020548181101561155057604051630bba337f60e11b815260040160405180910390fd5b6001600160a01b03831660008181526003602090815260408083208686039055600580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610f4b565b60008054610100900460ff16156115f8578160ff1660011480156115cb5750303b155b6115f05760405162461bcd60e51b81526004016115e7906119c5565b60405180910390fd5b506000919050565b60005460ff80841691161061161f5760405162461bcd60e51b81526004016115e7906119c5565b506000805460ff191660ff92909216919091179055600190565b82805461164590611906565b90600052602060002090601f01602090048101928261166757600085556116ad565b82601f106116805782800160ff198235161785556116ad565b828001600101855582156116ad579182015b828111156116ad578235825591602001919060010190611692565b506116b99291506116bd565b5090565b5b808211156116b957600081556001016116be565b600060208083528351808285015260005b818110156116ff578581018301518582016040015282016116e3565b81811115611711576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461173c57600080fd5b50565b6000806040838503121561175257600080fd5b823561175d81611727565b946020939093013593505050565b60006020828403121561177d57600080fd5b5035919050565b60008060006060848603121561179957600080fd5b83356117a481611727565b925060208401356117b481611727565b929592945050506040919091013590565b6000602082840312156117d757600080fd5b81356117e281611727565b9392505050565b600080604083850312156117fc57600080fd5b823561180781611727565b9150602083013561181781611727565b809150509250929050565b60008083601f84011261183457600080fd5b50813567ffffffffffffffff81111561184c57600080fd5b60208301915083602082850101111561186457600080fd5b9250929050565b6000806000806000806080878903121561188457600080fd5b863567ffffffffffffffff8082111561189c57600080fd5b6118a88a838b01611822565b909850965060208901359150808211156118c157600080fd5b506118ce89828a01611822565b909550935050604087013560ff811681146118e857600080fd5b915060608701356118f881611727565b809150509295509295509295565b600181811c9082168061191a57607f821691505b6020821081141561193b57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561195357600080fd5b81516117e281611727565b634e487b7160e01b600052601160045260246000fd5b600082198211156119875761198761195e565b500190565b60008282101561199e5761199e61195e565b500390565b6000602082840312156119b557600080fd5b815180151581146117e257600080fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea2646970667358221220fe2c5d87e3cfd2a2e82c7d947314d83b4e5c872ba97d2e5a9732e508636f4a0a64736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80639163dd5f1161010f578063cbfa94de116100a2578063dd20d4f411610071578063dd20d4f4146103e7578063dd62ed3e146103fa578063de7ea79d14610425578063ffa1ad741461043857600080fd5b8063cbfa94de146103bb578063cd2e9866146103ce578063d2593329146103d7578063d2f09685146103df57600080fd5b8063a457c2d7116100de578063a457c2d71461036f578063a9059cbb14610382578063afcff50f14610395578063b2a02ff1146103a857600080fd5b80639163dd5f1461033957806393a04f131461034157806395d89b41146103545780639dc29fac1461035c57600080fd5b80632ab4d05211610187578063395093511161015657806339509351146102c857806340c10f19146102db5780636d1bb8f7146102ee57806370a082311461031957600080fd5b80632ab4d052146102875780632bb42183146102905780632f068bf114610299578063313ce567146102a257600080fd5b806318160ddd116101c357806318160ddd146102405780631ac571dd1461025757806322f3e2d41461026057806323b872dd1461027457600080fd5b806306fdde03146101ea578063095ea7b314610208578063172f50a41461022b575b600080fd5b6101f261045c565b6040516101ff91906116d2565b60405180910390f35b61021b61021636600461173f565b6104ea565b60405190151581526020016101ff565b61023e61023936600461176b565b610500565b005b61024960055481565b6040519081526020016101ff565b610249600b5481565b60075461021b90600160a01b900460ff1681565b61021b610282366004611784565b61061a565b61024960065481565b61024960095481565b610249600c5481565b6007546102b690600160a81b900460ff1681565b60405160ff90911681526020016101ff565b61021b6102d636600461173f565b61068b565b61023e6102e936600461173f565b6106c7565b600854610301906001600160a01b031681565b6040516001600160a01b0390911681526020016101ff565b6102496103273660046117c5565b60036020526000908152604090205481565b610249610724565b61023e61034f36600461176b565b61074c565b6101f2610866565b61023e61036a36600461173f565b610873565b61021b61037d36600461173f565b6108cc565b61021b61039036600461173f565b610928565b600754610301906001600160a01b031681565b61023e6103b6366004611784565b610935565b61023e6103c93660046117c5565b61097c565b610249600a5481565b61023e610af1565b610249610c09565b61023e6103f536600461176b565b610c25565b6102496104083660046117e9565b600460209081526000928352604080842090915290825290205481565b61023e61043336600461186b565b610d3f565b6101f2604051806040016040528060058152602001640312e332e360dc1b81525081565b6001805461046990611906565b80601f016020809104026020016040519081016040528092919081815260200182805461049590611906565b80156104e25780601f106104b7576101008083540402835291602001916104e2565b820191906000526020600020905b8154815290600101906020018083116104c557829003601f168201915b505050505081565b60006104f7338484610ea8565b50600192915050565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561054e57600080fd5b505afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105869190611941565b6001600160a01b0316336001600160a01b0316146105b757604051634b98449160e11b815260040160405180910390fd5b600654818114156105db57604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150600655565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146106755782811015610668576040516303814af160e61b815260040160405180910390fd5b6106758533858403610ea8565b610680858585610f58565b506001949350505050565b3360008181526004602090815260408083206001600160a01b038716845290915281205490916104f79185906106c2908690611974565b610ea8565b6008546001600160a01b031633141580156106e757506106e561104e565b155b80156106f857506106f6611144565b155b156107165760405163168504c160e21b815260040160405180910390fd5b6107208282611348565b5050565b600954600a54600091908082111561074757610740818361198c565b9250505090565b505090565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561079a57600080fd5b505afa1580156107ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d29190611941565b6001600160a01b0316336001600160a01b03161461080357604051634b98449160e11b815260040160405180910390fd5b600b548181141561082757604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527feacf40fa755daf182276c22cc2ad53893a50e8d3d4c73132308548febf636764910160405180910390a150600b55565b6002805461046990611906565b6008546001600160a01b03163314158015610893575061089161104e565b155b80156108a457506108a2611144565b155b156108c25760405163848003b560e01b815260040160405180910390fd5b610720828261149b565b3360009081526004602090815260408083206001600160a01b0386168452909152812054828110156109115760405163189dd6af60e31b815260040160405180910390fd5b61091e3385858403610ea8565b5060019392505050565b60006104f7338484610f58565b61093d61104e565b15801561094f575061094d611144565b155b1561096c576040516249987f60e01b815260040160405180910390fd5b610977838383610f58565b505050565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a029190611941565b6001600160a01b0316336001600160a01b031614610a3357604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610a5a5760405163fb7566d760e01b815260040160405180910390fd5b6008546001600160a01b03908116908216811415610a8b57604051630333a68160e41b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527fef71fdb6fc3b4bdacae0b7871edf00279c204dc041134e4304cf93935cf07af7910160405180910390a150600880546001600160a01b0319166001600160a01b0392909216919091179055565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b3f57600080fd5b505afa158015610b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b779190611941565b6001600160a01b0316336001600160a01b031614610ba857604051634b98449160e11b815260040160405180910390fd5b600754604051600160a01b90910460ff1615808252907f79e35d0afb37464963b458a448d257d695a4dc4406dc45df01e4c7b38e2732cb9060200160405180910390a160078054911515600160a01b0260ff60a01b19909216919091179055565b600954600a54600091908181111561074757610740828261198c565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7357600080fd5b505afa158015610c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cab9190611941565b6001600160a01b0316336001600160a01b031614610cdc57604051634b98449160e11b815260040160405180910390fd5b600c5481811415610d0057604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527ff0d21a56ee8d766c9055580b458227594b5f2d86aa9087573908bea9dc4ca3d6910160405180910390a150600c55565b6000610d4b60016115a8565b90508015610d63576000805461ff0019166101001790555b85610d8157604051636e83f50760e01b815260040160405180910390fd5b83610d9f576040516330507cff60e11b815260040160405180910390fd5b60ff8316610dc057604051634dc4784160e11b815260040160405180910390fd5b6001600160a01b038216610de757604051637cb62f2b60e11b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b038416179055610e0e60018888611639565b50610e1b60028686611639565b506007805460ff60a01b1960ff8616600160a81b021661ffff60a01b1990911617600160a01b1790556000196006558015610e90576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6001600160a01b03163b151590565b6001600160a01b038316610ecf576040516356fdae6560e11b815260040160405180910390fd5b6001600160a01b038216610ef65760405163b2fa1ef360e01b815260040160405180910390fd5b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610f7f57604051630240531760e41b815260040160405180910390fd5b6001600160a01b038216610fa65760405163671d1add60e11b815260040160405180910390fd5b6001600160a01b03831660009081526003602052604090205481811015610fe057604051635dd58b8b60e01b815260040160405180910390fd5b6001600160a01b0380851660008181526003602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110409086815260200190565b60405180910390a350505050565b60075460405163c673bdaf60e01b81523360048201526000916001600160a01b03169063c673bdaf9060240160206040518083038186803b15801561109257600080fd5b505afa1580156110a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ca91906119a3565b801561113f5750604051631a0dd00b60e01b81523060048201523390631a0dd00b9060240160206040518083038186803b15801561110757600080fd5b505afa15801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f91906119a3565b905090565b600080336001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561118057600080fd5b505afa158015611194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b89190611941565b60075460405163c673bdaf60e01b81526001600160a01b03808416600483015292935091169063c673bdaf9060240160206040518083038186803b1580156111ff57600080fd5b505afa158015611213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123791906119a3565b80156112b557506040516308a00b1f60e31b81523360048201526001600160a01b0382169063450058f89060240160206040518083038186803b15801561127d57600080fd5b505afa158015611291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b591906119a3565b80156113425750306001600160a01b0316336001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ff57600080fd5b505afa158015611313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113379190611941565b6001600160a01b0316145b91505090565b600754600160a01b900460ff16611372576040516303127d9160e31b815260040160405180910390fd5b6001600160a01b0382166113995760405163c96c2a0b60e01b815260040160405180910390fd5b6008546001600160a01b03163314156113ed5780600960008282546113be9190611974565b9091555050600b546113ce610724565b11156113ed57604051639da48d2560e01b815260040160405180910390fd5b80600560008282546113ff9190611974565b90915550506006546005541115611429576040516309e0f0fd60e31b815260040160405180910390fd5b6001600160a01b03821660009081526003602052604081208054839290611451908490611974565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166114c2576040516304fca6bd60e41b815260040160405180910390fd5b6008546001600160a01b03163314156115165780600a60008282546114e79190611974565b9091555050600c546114f7610c09565b111561151657604051639da48d2560e01b815260040160405180910390fd5b6001600160a01b0382166000908152600360205260409020548181101561155057604051630bba337f60e11b815260040160405180910390fd5b6001600160a01b03831660008181526003602090815260408083208686039055600580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610f4b565b60008054610100900460ff16156115f8578160ff1660011480156115cb5750303b155b6115f05760405162461bcd60e51b81526004016115e7906119c5565b60405180910390fd5b506000919050565b60005460ff80841691161061161f5760405162461bcd60e51b81526004016115e7906119c5565b506000805460ff191660ff92909216919091179055600190565b82805461164590611906565b90600052602060002090601f01602090048101928261166757600085556116ad565b82601f106116805782800160ff198235161785556116ad565b828001600101855582156116ad579182015b828111156116ad578235825591602001919060010190611692565b506116b99291506116bd565b5090565b5b808211156116b957600081556001016116be565b600060208083528351808285015260005b818110156116ff578581018301518582016040015282016116e3565b81811115611711576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461173c57600080fd5b50565b6000806040838503121561175257600080fd5b823561175d81611727565b946020939093013593505050565b60006020828403121561177d57600080fd5b5035919050565b60008060006060848603121561179957600080fd5b83356117a481611727565b925060208401356117b481611727565b929592945050506040919091013590565b6000602082840312156117d757600080fd5b81356117e281611727565b9392505050565b600080604083850312156117fc57600080fd5b823561180781611727565b9150602083013561181781611727565b809150509250929050565b60008083601f84011261183457600080fd5b50813567ffffffffffffffff81111561184c57600080fd5b60208301915083602082850101111561186457600080fd5b9250929050565b6000806000806000806080878903121561188457600080fd5b863567ffffffffffffffff8082111561189c57600080fd5b6118a88a838b01611822565b909850965060208901359150808211156118c157600080fd5b506118ce89828a01611822565b909550935050604087013560ff811681146118e857600080fd5b915060608701356118f881611727565b809150509295509295509295565b600181811c9082168061191a57607f821691505b6020821081141561193b57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561195357600080fd5b81516117e281611727565b634e487b7160e01b600052601160045260246000fd5b600082198211156119875761198761195e565b500190565b60008282101561199e5761199e61195e565b500390565b6000602082840312156119b557600080fd5b815180151581146117e257600080fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea2646970667358221220fe2c5d87e3cfd2a2e82c7d947314d83b4e5c872ba97d2e5a9732e508636f4a0a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bridgedInSupply()": {
        "details": "The supply is calculated using `MAX(totalBridgedIn - totalBridgedOut, 0)`"
      },
      "bridgedOutSupply()": {
        "details": "The supply is calculated using `MAX(totalBridgedOut - totalBridgedIn, 0)`"
      },
      "burn(address,uint256)": {
        "params": {
          "amount_": "The amount to burn",
          "from_": "The account to burn from"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "amount_": "The amount to mint",
          "to_": "The account to mint to"
        }
      },
      "seize(address,address,uint256)": {
        "details": "Same as _transfer",
        "params": {
          "amount_": "The amount to seize",
          "to_": "The beneficiary account"
        }
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "updateMaxTotalSupply(uint256)": {
        "params": {
          "newMaxTotalSupply_": "The new max total supply"
        }
      },
      "updateProxyOFT(address)": {
        "params": {
          "newProxyOFT_": "Address of new ProxyOFT"
        }
      }
    },
    "title": "Synthetic Token contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MaxBridgedInSupplyUpdated(uint256,uint256)": {
        "notice": "Emitted when max bridged-in supply is updated"
      },
      "MaxBridgedOutSupplyUpdated(uint256,uint256)": {
        "notice": "Emitted when max bridged-out supply is updated"
      },
      "MaxTotalSupplyUpdated(uint256,uint256)": {
        "notice": "Emitted when max total supply is updated"
      },
      "ProxyOFTUpdated(address,address)": {
        "notice": "Emitted when proxyOFT is updated"
      },
      "SyntheticTokenActiveUpdated(bool)": {
        "notice": "Emitted when active flag is updated"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Set `amount` as the allowance of `spender` over the caller's tokens"
      },
      "bridgedInSupply()": {
        "notice": "Get net bridged-in circulating supply"
      },
      "bridgedOutSupply()": {
        "notice": "Get net bridged-out circulating supply"
      },
      "burn(address,uint256)": {
        "notice": "Burn synthetic token"
      },
      "decimals()": {
        "notice": "The decimals of the token"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Atomically decrease the allowance granted to `spender` by the caller"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Atomically increase the allowance granted to `spender` by the caller"
      },
      "isActive()": {
        "notice": "If true, disables msAsset minting globally"
      },
      "maxBridgedInSupply()": {
        "notice": "Maximum allowed bridged-in (mint-related) supply"
      },
      "maxBridgedOutSupply()": {
        "notice": "Maximum allowed bridged-out (burn-related) supply"
      },
      "maxTotalSupply()": {
        "notice": "The supply cap"
      },
      "mint(address,uint256)": {
        "notice": "Mint synthetic token"
      },
      "name()": {
        "notice": "The name of the token"
      },
      "proxyOFT()": {
        "notice": "The ProxyOFT contract"
      },
      "seize(address,address,uint256)": {
        "notice": "Seize synthetic tokens"
      },
      "symbol()": {
        "notice": "The symbol of the token"
      },
      "toggleIsActive()": {
        "notice": "Enable/Disable Synthetic Token"
      },
      "totalBridgedIn()": {
        "notice": "Track amount received cross-chain"
      },
      "totalBridgedOut()": {
        "notice": "Track amount sent cross-chain"
      },
      "updateMaxBridgedInSupply(uint256)": {
        "notice": "Update max bridged-in supply"
      },
      "updateMaxBridgedOutSupply(uint256)": {
        "notice": "Update max bridged-out supply"
      },
      "updateMaxTotalSupply(uint256)": {
        "notice": "Update max total supply"
      },
      "updateProxyOFT(address)": {
        "notice": "Update proxyOFT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19514,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 19517,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 31067,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31071,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 31077,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31085,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 31089,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 31093,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "maxTotalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 31098,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "poolRegistry",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IPoolRegistry)27760"
      },
      {
        "astId": 31102,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "isActive",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 31106,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "decimals",
        "offset": 21,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 31111,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "proxyOFT",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IProxyOFT)27773"
      },
      {
        "astId": 31114,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "totalBridgedIn",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 31117,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "totalBridgedOut",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 31120,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "maxBridgedInSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 31123,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "maxBridgedOutSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPoolRegistry)27760": {
        "encoding": "inplace",
        "label": "contract IPoolRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IProxyOFT)27773": {
        "encoding": "inplace",
        "label": "contract IProxyOFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}