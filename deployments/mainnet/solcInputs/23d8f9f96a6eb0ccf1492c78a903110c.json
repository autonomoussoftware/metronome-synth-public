{
  "language": "Solidity",
  "sources": {
    "contracts/access/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/proxy/utils/Initializable.sol\";\nimport \"../utils/TokenHolder.sol\";\nimport \"../interfaces/IGovernable.sol\";\n\nerror SenderIsNotGovernor();\nerror ProposedGovernorIsNull();\nerror SenderIsNotTheProposedGovernor();\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (governor) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the governor account will be the one that deploys the contract. This\n * can later be changed with {transferGovernorship}.\n *\n */\nabstract contract Governable is IGovernable, TokenHolder, Initializable {\n    /**\n     * @notice The governor\n     * @dev By default the contract deployer is the initial governor\n     */\n    address public governor;\n\n    /**\n     * @notice The proposed governor\n     * @dev It will be empty (address(0)) if there isn't a proposed governor\n     */\n    address public proposedGovernor;\n\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\n\n    constructor() {\n        governor = msg.sender;\n        emit UpdatedGovernor(address(0), msg.sender);\n    }\n\n    /**\n     * @dev If inheriting child is using proxy then child contract can use\n     * __Governable_init() function to initialization this contract\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __Governable_init() internal initializer {\n        governor = msg.sender;\n        emit UpdatedGovernor(address(0), msg.sender);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the governor.\n     */\n    modifier onlyGovernor() {\n        if (governor != msg.sender) revert SenderIsNotGovernor();\n        _;\n    }\n\n    /// @inheritdoc TokenHolder\n    // solhint-disable-next-line no-empty-blocks\n    function _requireCanSweep() internal view override onlyGovernor {}\n\n    /**\n     * @notice Transfers governorship of the contract to a new account (`proposedGovernor`).\n     * @dev Can only be called by the current owner.\n     * @param proposedGovernor_ The new proposed governor\n     */\n    function transferGovernorship(address proposedGovernor_) external onlyGovernor {\n        if (proposedGovernor_ == address(0)) revert ProposedGovernorIsNull();\n        proposedGovernor = proposedGovernor_;\n    }\n\n    /**\n     * @notice Allows new governor to accept governorship of the contract.\n     */\n    function acceptGovernorship() external {\n        address _proposedGovernor = proposedGovernor;\n        if (msg.sender != _proposedGovernor) revert SenderIsNotTheProposedGovernor();\n        emit UpdatedGovernor(governor, _proposedGovernor);\n        governor = _proposedGovernor;\n        proposedGovernor = address(0);\n    }\n}\n"
    },
    "contracts/access/Manageable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/proxy/utils/Initializable.sol\";\nimport \"../interfaces/IGovernable.sol\";\nimport \"../interfaces/IManageable.sol\";\n\nerror SenderIsNotPool();\nerror SenderIsNotGovernor();\nerror IsPaused();\nerror IsShutdown();\nerror PoolAddressIsNull();\n\n/**\n * @title Reusable contract that handles accesses\n */\nabstract contract Manageable is IManageable, Initializable {\n    /**\n     * @notice Pool contract\n     */\n    IPool public pool;\n\n    /**\n     * @dev Throws if `msg.sender` isn't the pool\n     */\n    modifier onlyPool() {\n        if (msg.sender != address(pool)) revert SenderIsNotPool();\n        _;\n    }\n\n    /**\n     * @dev Throws if `msg.sender` isn't the governor\n     */\n    modifier onlyGovernor() {\n        if (msg.sender != governor()) revert SenderIsNotGovernor();\n        _;\n    }\n\n    /**\n     * @dev Throws if contract is paused\n     */\n    modifier whenNotPaused() {\n        if (pool.paused()) revert IsPaused();\n        _;\n    }\n\n    /**\n     * @dev Throws if contract is shutdown\n     */\n    modifier whenNotShutdown() {\n        if (pool.everythingStopped()) revert IsShutdown();\n        _;\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __Manageable_init(IPool pool_) internal initializer {\n        if (address(pool_) == address(0)) revert PoolAddressIsNull();\n        pool = pool_;\n    }\n\n    /**\n     * @notice Get the governor\n     * @return _governor The governor\n     */\n    function governor() public view returns (address _governor) {\n        _governor = IGovernable(address(pool)).governor();\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/DebtToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./utils/TokenHolder.sol\";\nimport \"./access/Manageable.sol\";\nimport \"./storage/DebtTokenStorage.sol\";\nimport \"./lib/WadRayMath.sol\";\n\nerror SyntheticDoesNotExist();\nerror SyntheticIsInactive();\nerror DebtTokenInactive();\nerror NameIsNull();\nerror SymbolIsNull();\nerror PoolIsNull();\nerror SyntheticIsNull();\nerror AllowanceNotSupported();\nerror ApprovalNotSupported();\nerror AmountIsZero();\nerror NotEnoughCollateral();\nerror DebtLowerThanTheFloor();\nerror RemainingDebtIsLowerThanTheFloor();\nerror TransferNotSupported();\nerror BurnFromNullAddress();\nerror BurnAmountExceedsBalance();\nerror MintToNullAddress();\nerror SurpassMaxDebtSupply();\nerror NewValueIsSameAsCurrent();\n\n/**\n * @title Non-transferable token that represents users' debts\n */\ncontract DebtToken is ReentrancyGuard, TokenHolder, Manageable, DebtTokenStorageV2 {\n    using WadRayMath for uint256;\n\n    uint256 public constant SECONDS_PER_YEAR = 365.25 days;\n    uint256 private constant HUNDRED_PERCENT = 1e18;\n\n    string public constant VERSION = \"1.1.0\";\n\n    /// @notice Emitted when synthetic's debt is repaid\n    event DebtRepaid(address indexed payer, address indexed account, uint256 amount, uint256 repaid, uint256 fee);\n\n    /// @notice Emitted when active flag is updated\n    event DebtTokenActiveUpdated(bool newActive);\n\n    /// @notice Emitted when interest rate is updated\n    event InterestRateUpdated(uint256 oldInterestRate, uint256 newInterestRate);\n\n    /// @notice Emitted when max total supply is updated\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupply, uint256 newMaxTotalSupply);\n\n    /// @notice Emitted when synthetic token is issued\n    event SyntheticTokenIssued(\n        address indexed account,\n        address indexed to,\n        uint256 amount,\n        uint256 issued,\n        uint256 fee\n    );\n\n    /**\n     * @dev Throws if sender can't burn\n     */\n    modifier onlyIfPool() {\n        if (msg.sender != address(pool)) revert SenderIsNotPool();\n        _;\n    }\n\n    /**\n     * @dev Throws if synthetic token doesn't exist\n     */\n    modifier onlyIfSyntheticTokenExists() {\n        if (!pool.doesSyntheticTokenExist(syntheticToken)) revert SyntheticDoesNotExist();\n        _;\n    }\n\n    /**\n     * @dev Throws if synthetic token isn't enabled\n     */\n    modifier onlyIfSyntheticTokenIsActive() {\n        if (!syntheticToken.isActive()) revert SyntheticIsInactive();\n        if (!isActive) revert DebtTokenInactive();\n        _;\n    }\n\n    /**\n     * @notice Update reward contracts' states\n     * @dev Should be called before balance changes (i.e. mint/burn)\n     */\n    modifier updateRewardsBeforeMintOrBurn(address account_) {\n        address[] memory _rewardsDistributors = pool.getRewardsDistributors();\n        ISyntheticToken _syntheticToken = syntheticToken;\n        uint256 _length = _rewardsDistributors.length;\n        for (uint256 i; i < _length; ++i) {\n            IRewardsDistributor(_rewardsDistributors[i]).updateBeforeMintOrBurn(_syntheticToken, account_);\n        }\n        _;\n    }\n\n    function initialize(\n        string calldata name_,\n        string calldata symbol_,\n        IPool pool_,\n        ISyntheticToken syntheticToken_,\n        uint256 interestRate_,\n        uint256 maxTotalSupply_\n    ) external initializer {\n        if (bytes(name_).length == 0) revert NameIsNull();\n        if (bytes(symbol_).length == 0) revert SymbolIsNull();\n        if (address(pool_) == address(0)) revert PoolIsNull();\n        if (address(syntheticToken_) == address(0)) revert SyntheticIsNull();\n\n        __ReentrancyGuard_init();\n        __Manageable_init(pool_);\n\n        name = name_;\n        symbol = symbol_;\n        decimals = syntheticToken_.decimals();\n        syntheticToken = syntheticToken_;\n        lastTimestampAccrued = block.timestamp;\n        debtIndex = 1e18;\n        interestRate = interestRate_;\n        maxTotalSupply = maxTotalSupply_;\n        isActive = true;\n    }\n\n    /**\n     * @notice Accrue interest over debt supply\n     */\n    function accrueInterest() public override {\n        (\n            uint256 _interestAmountAccrued,\n            uint256 _debtIndex,\n            uint256 _lastTimestampAccrued\n        ) = _calculateInterestAccrual();\n\n        if (block.timestamp == _lastTimestampAccrued) {\n            return;\n        }\n\n        lastTimestampAccrued = block.timestamp;\n\n        if (_interestAmountAccrued > 0) {\n            totalSupply_ += _interestAmountAccrued;\n            debtIndex = _debtIndex;\n\n            if (syntheticToken.isActive()) {\n                // Note: We could save gas by just increase `pendingInterestFee` here\n                syntheticToken.mint(pool.feeCollector(), _interestAmountAccrued + pendingInterestFee);\n                pendingInterestFee = 0;\n            } else {\n                pendingInterestFee += _interestAmountAccrued;\n            }\n        }\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address /*owner_*/, address /*spender_*/) external pure override returns (uint256) {\n        revert AllowanceNotSupported();\n    }\n\n    /// @inheritdoc IERC20\n    // solhint-disable-next-line\n    function approve(address /*spender_*/, uint256 /*amount_*/) external override returns (bool) {\n        revert ApprovalNotSupported();\n    }\n\n    /**\n     * @notice Get the updated (principal + interest) user's debt\n     */\n    function balanceOf(address account_) public view override returns (uint256) {\n        uint256 _principal = principalOf[account_];\n        if (_principal == 0) {\n            return 0;\n        }\n\n        (, uint256 _debtIndex, ) = _calculateInterestAccrual();\n\n        // Note: The `debtIndex / debtIndexOf` gives the interest to apply to the principal amount\n        return (_principal * _debtIndex) / debtIndexOf[account_];\n    }\n\n    /**\n     * @notice Burn debt token\n     * @param from_ The account to burn from\n     * @param amount_ The amount to burn\n     */\n    function burn(address from_, uint256 amount_) external override onlyIfPool {\n        _burn(from_, amount_);\n    }\n\n    /**\n     * @notice Collect pending interest fee if any\n     */\n    function collectPendingInterestFee() external {\n        uint256 _pendingInterestFee = pendingInterestFee;\n        if (_pendingInterestFee > 0) {\n            syntheticToken.mint(pool.feeCollector(), _pendingInterestFee);\n            pendingInterestFee = 0;\n        }\n    }\n\n    /**\n     * @notice Lock collateral and mint synthetic token\n     * @param amount_ The amount to mint\n     * @param to_ The beneficiary account\n     * @return _issued The amount issued after fees\n     * @return _fee The fee amount collected\n     */\n    function issue(\n        uint256 amount_,\n        address to_\n    )\n        external\n        override\n        whenNotShutdown\n        nonReentrant\n        onlyIfSyntheticTokenExists\n        onlyIfSyntheticTokenIsActive\n        returns (uint256 _issued, uint256 _fee)\n    {\n        if (amount_ == 0) revert AmountIsZero();\n\n        accrueInterest();\n\n        IPool _pool = pool;\n        ISyntheticToken _syntheticToken = syntheticToken;\n\n        (, , , , uint256 _issuableInUsd) = _pool.debtPositionOf(msg.sender);\n\n        IMasterOracle _masterOracle = _pool.masterOracle();\n\n        if (amount_ > _masterOracle.quoteUsdToToken(address(_syntheticToken), _issuableInUsd)) {\n            revert NotEnoughCollateral();\n        }\n\n        return _issue(_pool, _masterOracle, _syntheticToken, msg.sender, amount_, to_);\n    }\n\n    /**\n     * @notice Issue synth without checking collateral\n     * @dev The healthy of outcome position must be done afterhand\n     * @param borrower_ The debtor account\n     * @param amount_ The amount to mint\n     * @return _issued The amount issued after fees\n     * @return _fee The fee amount collected\n     */\n    function flashIssue(\n        address borrower_,\n        uint256 amount_\n    )\n        external\n        override\n        onlyIfPool\n        whenNotShutdown\n        nonReentrant\n        onlyIfSyntheticTokenExists\n        onlyIfSyntheticTokenIsActive\n        returns (uint256 _issued, uint256 _fee)\n    {\n        if (amount_ == 0) revert AmountIsZero();\n\n        accrueInterest();\n\n        IPool _pool = pool;\n\n        return _issue(_pool, _pool.masterOracle(), syntheticToken, borrower_, amount_, msg.sender);\n    }\n\n    /**\n     * @notice Return interest rate (in percent) per second\n     */\n    function interestRatePerSecond() public view override returns (uint256) {\n        return interestRate / SECONDS_PER_YEAR;\n    }\n\n    /**\n     * @notice Quote gross `_amount` to issue `amountToIssue_` synthetic tokens\n     * @param amountToIssue_ Synth to issue\n     * @return _amount Gross amount\n     * @return _fee The fee amount to collect\n     */\n    function quoteIssueIn(uint256 amountToIssue_) external view override returns (uint256 _amount, uint256 _fee) {\n        uint256 _issueFee = pool.feeProvider().issueFee();\n        if (_issueFee == 0) {\n            return (amountToIssue_, _fee);\n        }\n\n        _amount = amountToIssue_.wadDiv(HUNDRED_PERCENT - _issueFee);\n        _fee = _amount - amountToIssue_;\n    }\n\n    /**\n     * @notice Quote synthetic tokens `_amountToIssue` by using gross `_amount`\n     * @param amount_ Gross amount\n     * @return _amountToIssue Synth to issue\n     * @return _fee The fee amount to collect\n     */\n    function quoteIssueOut(uint256 amount_) public view override returns (uint256 _amountToIssue, uint256 _fee) {\n        uint256 _issueFee = pool.feeProvider().issueFee();\n        if (_issueFee == 0) {\n            return (amount_, _fee);\n        }\n\n        _fee = amount_.wadMul(_issueFee);\n        _amountToIssue = amount_ - _fee;\n    }\n\n    /**\n     * @notice Quote synthetic token `_amount` need to repay `amountToRepay_` debt\n     * @param amountToRepay_ Debt amount to repay\n     * @return _amount Gross amount\n     * @return _fee The fee amount to collect\n     */\n    function quoteRepayIn(uint256 amountToRepay_) public view override returns (uint256 _amount, uint256 _fee) {\n        uint256 _repayFee = pool.feeProvider().repayFee();\n        if (_repayFee == 0) {\n            return (amountToRepay_, _fee);\n        }\n\n        _fee = amountToRepay_.wadMul(_repayFee);\n        _amount = amountToRepay_ + _fee;\n    }\n\n    /**\n     * @notice Quote debt `_amountToRepay` by burning `_amount` synthetic tokens\n     * @param amount_ Gross amount\n     * @return _amountToRepay Debt amount to repay\n     * @return _fee The fee amount to collect\n     */\n    function quoteRepayOut(uint256 amount_) public view override returns (uint256 _amountToRepay, uint256 _fee) {\n        uint256 _repayFee = pool.feeProvider().repayFee();\n        if (_repayFee == 0) {\n            return (amount_, _fee);\n        }\n\n        _amountToRepay = amount_.wadDiv(HUNDRED_PERCENT + _repayFee);\n        _fee = amount_ - _amountToRepay;\n    }\n\n    /**\n     * @notice Send synthetic token to decrease debt\n     * @dev The msg.sender is the payer and the account beneficed\n     * @param onBehalfOf_ The account that will have debt decreased\n     * @param amount_ The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)\n     * @return _repaid The amount repaid after fees\n     */\n    function repay(\n        address onBehalfOf_,\n        uint256 amount_\n    )\n        external\n        override\n        whenNotShutdown\n        nonReentrant\n        onlyIfSyntheticTokenExists\n        returns (uint256 _repaid, uint256 _fee)\n    {\n        if (amount_ == 0) revert AmountIsZero();\n\n        accrueInterest();\n\n        IPool _pool = pool;\n        ISyntheticToken _syntheticToken = syntheticToken;\n\n        (_repaid, _fee) = quoteRepayOut(amount_);\n        if (_fee > 0) {\n            _syntheticToken.seize(msg.sender, _pool.feeCollector(), _fee);\n        }\n\n        uint256 _debtFloorInUsd = _pool.debtFloorInUsd();\n        if (_debtFloorInUsd > 0) {\n            uint256 _newDebtInUsd = _pool.masterOracle().quoteTokenToUsd(\n                address(_syntheticToken),\n                balanceOf(onBehalfOf_) - _repaid\n            );\n            if (_newDebtInUsd > 0 && _newDebtInUsd < _debtFloorInUsd) {\n                revert RemainingDebtIsLowerThanTheFloor();\n            }\n        }\n\n        _syntheticToken.burn(msg.sender, _repaid);\n        _burn(onBehalfOf_, _repaid);\n\n        emit DebtRepaid(msg.sender, onBehalfOf_, amount_, _repaid, _fee);\n    }\n\n    /**\n     * @notice Send synthetic token to decrease debt\n     * @dev This function helps users to no leave debt dust behind\n     * @param onBehalfOf_ The account that will have debt decreased\n     * @return _repaid The amount repaid after fees\n     * @return _fee The fee amount collected\n     */\n    function repayAll(\n        address onBehalfOf_\n    )\n        external\n        override\n        whenNotShutdown\n        nonReentrant\n        onlyIfSyntheticTokenExists\n        returns (uint256 _repaid, uint256 _fee)\n    {\n        accrueInterest();\n\n        _repaid = balanceOf(onBehalfOf_);\n        if (_repaid == 0) revert AmountIsZero();\n\n        ISyntheticToken _syntheticToken = syntheticToken;\n\n        uint256 _amount;\n        (_amount, _fee) = quoteRepayIn(_repaid);\n\n        if (_fee > 0) {\n            _syntheticToken.seize(msg.sender, pool.feeCollector(), _fee);\n        }\n\n        _syntheticToken.burn(msg.sender, _repaid);\n        _burn(onBehalfOf_, _repaid);\n\n        emit DebtRepaid(msg.sender, onBehalfOf_, _amount, _repaid, _fee);\n    }\n\n    /**\n     * @notice Return the total supply\n     */\n    function totalSupply() external view override returns (uint256) {\n        (uint256 _interestAmountAccrued, , ) = _calculateInterestAccrual();\n        return totalSupply_ + _interestAmountAccrued;\n    }\n\n    /// @inheritdoc IERC20\n    // solhint-disable-next-line\n    function transfer(address /*recipient_*/, uint256 /*amount_*/) external override returns (bool) {\n        revert TransferNotSupported();\n    }\n\n    /// @inheritdoc IERC20\n    // solhint-disable-next-line\n    function transferFrom(\n        address /*sender_*/,\n        address /*recipient_*/,\n        uint256 /*amount_*/\n    ) external override returns (bool) {\n        revert TransferNotSupported();\n    }\n\n    /**\n     * @notice Destroy `amount` tokens from `account`, reducing the\n     * total supply\n     */\n    function _burn(address account_, uint256 amount_) private updateRewardsBeforeMintOrBurn(account_) {\n        if (account_ == address(0)) revert BurnFromNullAddress();\n\n        uint256 _accountBalance = balanceOf(account_);\n        if (_accountBalance < amount_) revert BurnAmountExceedsBalance();\n\n        unchecked {\n            principalOf[account_] = _accountBalance - amount_;\n            debtIndexOf[account_] = debtIndex;\n            totalSupply_ -= amount_;\n        }\n\n        emit Transfer(account_, address(0), amount_);\n\n        // Remove this token from the debt tokens list if the sender's balance goes to zero\n        if (amount_ > 0 && balanceOf(account_) == 0) {\n            pool.removeFromDebtTokensOfAccount(account_);\n        }\n    }\n\n    /**\n     * @notice Calculate interest to accrue\n     * @dev This util function avoids code duplication across `balanceOf` and `accrueInterest`\n     * @return _interestAmountAccrued The total amount of debt tokens accrued\n     * @return _debtIndex The new `debtIndex` value\n     */\n    function _calculateInterestAccrual()\n        private\n        view\n        returns (uint256 _interestAmountAccrued, uint256 _debtIndex, uint256 _lastTimestampAccrued)\n    {\n        _lastTimestampAccrued = lastTimestampAccrued;\n        _debtIndex = debtIndex;\n\n        if (block.timestamp > _lastTimestampAccrued) {\n            uint256 _interestRateToAccrue = interestRatePerSecond() * (block.timestamp - _lastTimestampAccrued);\n            if (_interestRateToAccrue > 0) {\n                _interestAmountAccrued = _interestRateToAccrue.wadMul(totalSupply_);\n                _debtIndex += _interestRateToAccrue.wadMul(debtIndex);\n            }\n        }\n    }\n\n    /**\n     * @notice Internal function for mint synthetic token\n     * @dev Not getting contracts from storage in order to save gas\n     * @param pool_ The pool\n     * @param masterOracle_  The oracle\n     * @param syntheticToken_ The synthetic token\n     * @param borrower_ The debtor account\n     * @param amount_ The amount to mint\n     * @param to_ The beneficiary account\n     * @return _issued The amount issued after fees\n     * @return _fee The fee amount collected\n     */\n    function _issue(\n        IPool pool_,\n        IMasterOracle masterOracle_,\n        ISyntheticToken syntheticToken_,\n        address borrower_,\n        uint256 amount_,\n        address to_\n    ) private returns (uint256 _issued, uint256 _fee) {\n        uint256 _debtFloorInUsd = pool_.debtFloorInUsd();\n\n        if (\n            _debtFloorInUsd > 0 &&\n            masterOracle_.quoteTokenToUsd(address(syntheticToken), balanceOf(borrower_) + amount_) < _debtFloorInUsd\n        ) {\n            revert DebtLowerThanTheFloor();\n        }\n\n        (_issued, _fee) = quoteIssueOut(amount_);\n        if (_fee > 0) {\n            syntheticToken_.mint(pool_.feeCollector(), _fee);\n        }\n\n        syntheticToken_.mint(to_, _issued);\n        _mint(borrower_, amount_);\n\n        emit SyntheticTokenIssued(borrower_, to_, amount_, _issued, _fee);\n    }\n\n    /**\n     * @notice Create `amount` tokens and assigns them to `account`, increasing\n     * the total supply\n     */\n    function _mint(address account_, uint256 amount_) private updateRewardsBeforeMintOrBurn(account_) {\n        if (account_ == address(0)) revert MintToNullAddress();\n\n        uint256 _balanceBefore = balanceOf(account_);\n\n        totalSupply_ += amount_;\n        if (totalSupply_ > maxTotalSupply) revert SurpassMaxDebtSupply();\n\n        principalOf[account_] = _balanceBefore + amount_;\n        debtIndexOf[account_] = debtIndex;\n        emit Transfer(address(0), account_, amount_);\n\n        //  Add this token to the debt tokens list if the recipient is receiving it for the 1st time\n        if (_balanceBefore == 0 && amount_ > 0) {\n            pool.addToDebtTokensOfAccount(account_);\n        }\n    }\n\n    /// @inheritdoc TokenHolder\n    // solhint-disable-next-line no-empty-blocks\n    function _requireCanSweep() internal view override onlyGovernor {}\n\n    /**\n     * @notice Update max total supply\n     */\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external override onlyGovernor {\n        uint256 _currentMaxTotalSupply = maxTotalSupply;\n        if (newMaxTotalSupply_ == _currentMaxTotalSupply) revert NewValueIsSameAsCurrent();\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupply, newMaxTotalSupply_);\n        maxTotalSupply = newMaxTotalSupply_;\n    }\n\n    /**\n     * @notice Update interest rate (APR)\n     */\n    function updateInterestRate(uint256 newInterestRate_) external override onlyGovernor {\n        accrueInterest();\n        uint256 _currentInterestRate = interestRate;\n        if (newInterestRate_ == _currentInterestRate) revert NewValueIsSameAsCurrent();\n        emit InterestRateUpdated(_currentInterestRate, newInterestRate_);\n        interestRate = newInterestRate_;\n    }\n\n    /**\n     * @notice Enable/Disable the Debt Token\n     */\n    function toggleIsActive() external override onlyGovernor {\n        bool _newIsActive = !isActive;\n        emit DebtTokenActiveUpdated(_newIsActive);\n        isActive = _newIsActive;\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/DepositToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/utils/math/Math.sol\";\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./lib/WadRayMath.sol\";\nimport \"./utils/TokenHolder.sol\";\nimport \"./access/Manageable.sol\";\nimport \"./storage/DepositTokenStorage.sol\";\n\nerror CollateralIsInexistent();\nerror DepositTokenIsInactive();\nerror NotEnoughFreeBalance();\nerror UnderlyingAssetIsNull();\nerror PoolIsNull();\nerror SymbolIsNull();\nerror DecimalsIsNull();\nerror CollateralFactorTooHigh();\nerror DecreasedAllowanceBelowZero();\nerror AmountIsZero();\nerror BeneficiaryIsNull();\nerror AmountExceedsAllowance();\nerror RecipientIsNull();\nerror AmountIsInvalid();\nerror ApproveFromTheZeroAddress();\nerror ApproveToTheZeroAddress();\nerror BurnFromTheZeroAddress();\nerror BurnAmountExceedsBalance();\nerror MintToTheZeroAddress();\nerror SurpassMaxDepositSupply();\nerror TransferFromTheZeroAddress();\nerror TransferToTheZeroAddress();\nerror TransferAmountExceedsBalance();\nerror NewValueIsSameAsCurrent();\n\n/**\n * @title Represents the users' deposits\n */\ncontract DepositToken is ReentrancyGuard, TokenHolder, Manageable, DepositTokenStorageV1 {\n    using SafeERC20 for IERC20;\n    using WadRayMath for uint256;\n\n    string public constant VERSION = \"1.1.0\";\n\n    /// @notice Emitted when collateral is deposited\n    event CollateralDeposited(\n        address indexed from,\n        address indexed account,\n        uint256 amount,\n        uint256 deposited,\n        uint256 fee\n    );\n\n    /// @notice Emitted when CF is updated\n    event CollateralFactorUpdated(uint256 oldCollateralFactor, uint256 newCollateralFactor);\n\n    /// @notice Emitted when collateral is withdrawn\n    event CollateralWithdrawn(\n        address indexed account,\n        address indexed to,\n        uint256 amount,\n        uint256 withdrawn,\n        uint256 fee\n    );\n\n    /// @notice Emitted when active flag is updated\n    event DepositTokenActiveUpdated(bool newActive);\n\n    /// @notice Emitted when max total supply is updated\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupply, uint256 newMaxTotalSupply);\n\n    /**\n     * @dev Throws if sender can't seize\n     */\n    modifier onlyIfCanSeize() {\n        if (msg.sender != address(pool)) revert SenderIsNotPool();\n        _;\n    }\n\n    /**\n     * @dev Throws if deposit token doesn't exist\n     */\n    modifier onlyIfDepositTokenExists() {\n        if (!pool.doesDepositTokenExist(this)) revert CollateralIsInexistent();\n        _;\n    }\n\n    /**\n     * @dev Throws if deposit token isn't enabled\n     */\n    modifier onlyIfDepositTokenIsActive() {\n        if (!isActive) revert DepositTokenIsInactive();\n        _;\n    }\n\n    /**\n     * @notice Requires that amount is lower than the account's unlocked balance\n     */\n    modifier onlyIfUnlocked(address account_, uint256 amount_) {\n        if (unlockedBalanceOf(account_) < amount_) revert NotEnoughFreeBalance();\n        _;\n    }\n\n    /**\n     * @notice Update reward contracts' states\n     * @dev Should be called before balance changes (i.e. mint/burn)\n     */\n    modifier updateRewardsBeforeMintOrBurn(address account_) {\n        address[] memory _rewardsDistributors = pool.getRewardsDistributors();\n        uint256 _length = _rewardsDistributors.length;\n        for (uint256 i; i < _length; ++i) {\n            IRewardsDistributor(_rewardsDistributors[i]).updateBeforeMintOrBurn(this, account_);\n        }\n        _;\n    }\n\n    /**\n     * @notice Update reward contracts' states\n     * @dev Should be called before balance changes (i.e. transfer)\n     */\n    modifier updateRewardsBeforeTransfer(address sender_, address recipient_) {\n        address[] memory _rewardsDistributors = pool.getRewardsDistributors();\n        uint256 _length = _rewardsDistributors.length;\n        for (uint256 i; i < _length; ++i) {\n            IRewardsDistributor(_rewardsDistributors[i]).updateBeforeTransfer(this, sender_, recipient_);\n        }\n        _;\n    }\n\n    function initialize(\n        IERC20 underlying_,\n        IPool pool_,\n        string calldata name_,\n        string calldata symbol_,\n        uint8 decimals_,\n        uint128 collateralFactor_,\n        uint256 maxTotalSupply_\n    ) external initializer {\n        if (address(underlying_) == address(0)) revert UnderlyingAssetIsNull();\n        if (address(pool_) == address(0)) revert PoolIsNull();\n        if (bytes(symbol_).length == 0) revert SymbolIsNull();\n        if (decimals_ == 0) revert DecimalsIsNull();\n        if (collateralFactor_ > 1e18) revert CollateralFactorTooHigh();\n\n        __ReentrancyGuard_init();\n        __Manageable_init(pool_);\n\n        name = name_;\n        symbol = symbol_;\n        underlying = underlying_;\n        isActive = true;\n        decimals = decimals_;\n        collateralFactor = collateralFactor_;\n        maxTotalSupply = maxTotalSupply_;\n    }\n\n    /**\n     * @notice Set `amount` as the allowance of `spender` over the caller's tokens\n     */\n    function approve(address spender_, uint256 amount_) external override returns (bool) {\n        _approve(msg.sender, spender_, amount_);\n        return true;\n    }\n\n    /**\n     * @notice Atomically decrease the allowance granted to `spender` by the caller\n     */\n    function decreaseAllowance(address spender_, uint256 subtractedValue_) external returns (bool) {\n        uint256 _currentAllowance = allowance[msg.sender][spender_];\n        if (_currentAllowance < subtractedValue_) revert DecreasedAllowanceBelowZero();\n        unchecked {\n            _approve(msg.sender, spender_, _currentAllowance - subtractedValue_);\n        }\n        return true;\n    }\n\n    /**\n     * @notice Deposit collateral and mint msdTOKEN (tokenized deposit position)\n     * @param amount_ The amount of collateral tokens to deposit\n     * @param onBehalfOf_ The account to deposit to\n     * @return _deposited The amount deposited after fees\n     */\n    function deposit(\n        uint256 amount_,\n        address onBehalfOf_\n    ) external override whenNotPaused nonReentrant onlyIfDepositTokenExists returns (uint256 _deposited, uint256 _fee) {\n        if (amount_ == 0) revert AmountIsZero();\n        if (onBehalfOf_ == address(0)) revert BeneficiaryIsNull();\n\n        IPool _pool = pool;\n        IERC20 _underlying = underlying;\n\n        address _treasury = address(_pool.treasury());\n\n        uint256 _balanceBefore = _underlying.balanceOf(_treasury);\n        _underlying.safeTransferFrom(msg.sender, _treasury, amount_);\n        amount_ = _underlying.balanceOf(_treasury) - _balanceBefore;\n\n        (_deposited, _fee) = quoteDepositOut(amount_);\n        if (_fee > 0) {\n            _mint(_pool.feeCollector(), _fee);\n        }\n\n        _mint(onBehalfOf_, _deposited);\n\n        emit CollateralDeposited(msg.sender, onBehalfOf_, amount_, _deposited, _fee);\n    }\n\n    /**\n     * @notice Atomically increase the allowance granted to `spender` by the caller\n     */\n    function increaseAllowance(address spender_, uint256 addedValue_) external returns (bool) {\n        _approve(msg.sender, spender_, allowance[msg.sender][spender_] + addedValue_);\n        return true;\n    }\n\n    /**\n     * @notice Get the locked balance\n     * @param account_ The account to check\n     * @return _lockedBalance The locked amount\n     */\n    function lockedBalanceOf(address account_) external view override returns (uint256 _lockedBalance) {\n        unchecked {\n            return balanceOf[account_] - unlockedBalanceOf(account_);\n        }\n    }\n\n    /**\n     * @notice Quote gross `_amount` to deposit `amountToDeposit_` collateral\n     * @param amountToDeposit_ Collateral to deposit\n     * @return _amount Gross amount\n     * @return _fee Fee amount to collect\n     */\n    function quoteDepositIn(uint256 amountToDeposit_) external view override returns (uint256 _amount, uint256 _fee) {\n        uint256 _depositFee = pool.feeProvider().depositFee();\n        if (_depositFee == 0) {\n            return (amountToDeposit_, _fee);\n        }\n\n        _amount = amountToDeposit_.wadDiv(1e18 - _depositFee);\n        _fee = _amount - amountToDeposit_;\n    }\n\n    /**\n     * @notice Quote collateral `_amountToDeposit` by using gross `amount_`\n     * @param amount_ Gross amount\n     * @return _amountToDeposit Collateral to deposit\n     * @return _fee Fee amount to collect\n     */\n    function quoteDepositOut(uint256 amount_) public view override returns (uint256 _amountToDeposit, uint256 _fee) {\n        uint256 _depositFee = pool.feeProvider().depositFee();\n        if (_depositFee == 0) {\n            return (amount_, _fee);\n        }\n\n        _fee = amount_.wadMul(_depositFee);\n        _amountToDeposit = amount_ - _fee;\n    }\n\n    /**\n     * @notice Quote gross `_amount` to withdraw `amountToWithdraw_` collateral\n     * @param amountToWithdraw_ Collateral to withdraw\n     * @return _amount Gross amount\n     * @return _fee Fee amount to collect\n     */\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view override returns (uint256 _amount, uint256 _fee) {\n        uint256 _withdrawFee = pool.feeProvider().withdrawFee();\n        if (_withdrawFee == 0) {\n            return (amountToWithdraw_, _fee);\n        }\n\n        _amount = amountToWithdraw_.wadDiv(1e18 - _withdrawFee);\n        _fee = _amount - amountToWithdraw_;\n    }\n\n    /**\n     * @notice Quote collateral `_amountToWithdraw` by using gross `_amount`\n     * @param amount_ Gross amount\n     * @return _amountToWithdraw Collateral to withdraw\n     * @return _fee Fee amount to collect\n     */\n    function quoteWithdrawOut(uint256 amount_) public view override returns (uint256 _amountToWithdraw, uint256 _fee) {\n        uint256 _withdrawFee = pool.feeProvider().withdrawFee();\n        if (_withdrawFee == 0) {\n            return (amount_, _fee);\n        }\n\n        _fee = amount_.wadMul(_withdrawFee);\n        _amountToWithdraw = amount_ - _fee;\n    }\n\n    /**\n     * @notice Seize tokens\n     * @dev Same as _transfer\n     * @param from_ The account to seize from\n     * @param to_ The beneficiary account\n     * @param amount_ The amount to seize\n     */\n    function seize(address from_, address to_, uint256 amount_) external override onlyIfCanSeize {\n        _transfer(from_, to_, amount_);\n    }\n\n    /// @inheritdoc IERC20\n    function transfer(\n        address to_,\n        uint256 amount_\n    ) external override onlyIfUnlocked(msg.sender, amount_) returns (bool) {\n        _transfer(msg.sender, to_, amount_);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function transferFrom(\n        address sender_,\n        address recipient_,\n        uint256 amount_\n    ) external override nonReentrant onlyIfUnlocked(sender_, amount_) returns (bool) {\n        uint256 _currentAllowance = allowance[sender_][msg.sender];\n        if (_currentAllowance != type(uint256).max) {\n            if (_currentAllowance < amount_) revert AmountExceedsAllowance();\n            unchecked {\n                _approve(sender_, msg.sender, _currentAllowance - amount_);\n            }\n        }\n\n        _transfer(sender_, recipient_, amount_);\n\n        return true;\n    }\n\n    /**\n     * @notice Get the unlocked balance (i.e. transferable, withdrawable)\n     * @param account_ The account to check\n     * @return _unlockedBalance The amount that user can transfer or withdraw\n     */\n    function unlockedBalanceOf(address account_) public view override returns (uint256 _unlockedBalance) {\n        IPool _pool = pool;\n\n        (, , uint256 _debtInUsd, , uint256 _issuableInUsd) = _pool.debtPositionOf(account_);\n\n        if (_debtInUsd == 0) {\n            return balanceOf[account_];\n        }\n\n        if (_issuableInUsd > 0) {\n            _unlockedBalance = Math.min(\n                balanceOf[account_],\n                _pool.masterOracle().quoteUsdToToken(address(underlying), _issuableInUsd.wadDiv(collateralFactor))\n            );\n        }\n    }\n\n    /**\n     * @notice Burn msdTOKEN and withdraw collateral\n     * @param amount_ The amount of collateral to withdraw\n     * @param to_ The account that will receive withdrawn collateral\n     * @return _withdrawn The amount withdrawn after fees\n     */\n    function withdraw(\n        uint256 amount_,\n        address to_\n    )\n        external\n        override\n        whenNotShutdown\n        nonReentrant\n        onlyIfDepositTokenExists\n        onlyIfUnlocked(msg.sender, amount_)\n        returns (uint256 _withdrawn, uint256 _fee)\n    {\n        if (to_ == address(0)) revert RecipientIsNull();\n        if (amount_ == 0) revert AmountIsZero();\n\n        IPool _pool = pool;\n\n        (_withdrawn, _fee) = quoteWithdrawOut(amount_);\n        if (_fee > 0) {\n            _transfer(msg.sender, _pool.feeCollector(), _fee);\n        }\n\n        _burn(msg.sender, _withdrawn);\n        _pool.treasury().pull(to_, _withdrawn);\n\n        emit CollateralWithdrawn(msg.sender, to_, amount_, _withdrawn, _fee);\n    }\n\n    /**\n     * @notice Set `amount` as the allowance of `spender` over the caller's tokens\n     */\n    function _approve(address owner_, address spender_, uint256 amount_) private {\n        if (owner_ == address(0)) revert ApproveFromTheZeroAddress();\n        if (spender_ == address(0)) revert ApproveToTheZeroAddress();\n\n        allowance[owner_][spender_] = amount_;\n        emit Approval(owner_, spender_, amount_);\n    }\n\n    /**\n     * @notice Destroy `amount` tokens from `account`, reducing the\n     * total supply\n     */\n    function _burn(address _account, uint256 _amount) private updateRewardsBeforeMintOrBurn(_account) {\n        if (_account == address(0)) revert BurnFromTheZeroAddress();\n\n        uint256 _balanceBefore = balanceOf[_account];\n        if (_balanceBefore < _amount) revert BurnAmountExceedsBalance();\n        uint256 _balanceAfter;\n        unchecked {\n            _balanceAfter = _balanceBefore - _amount;\n            totalSupply -= _amount;\n        }\n\n        balanceOf[_account] = _balanceAfter;\n\n        emit Transfer(_account, address(0), _amount);\n\n        // Remove this token from the deposit tokens list if the sender's balance goes to zero\n        if (_amount > 0 && _balanceAfter == 0) {\n            pool.removeFromDepositTokensOfAccount(_account);\n        }\n    }\n\n    /**\n     * @notice Create `amount` tokens and assigns them to `account`, increasing\n     * the total supply\n     */\n    function _mint(\n        address account_,\n        uint256 amount_\n    ) private onlyIfDepositTokenIsActive updateRewardsBeforeMintOrBurn(account_) {\n        if (account_ == address(0)) revert MintToTheZeroAddress();\n\n        totalSupply += amount_;\n        if (totalSupply > maxTotalSupply) revert SurpassMaxDepositSupply();\n\n        uint256 _balanceBefore = balanceOf[account_];\n        unchecked {\n            balanceOf[account_] = _balanceBefore + amount_;\n        }\n\n        emit Transfer(address(0), account_, amount_);\n\n        // Add this token to the deposit tokens list if the recipient is receiving it for the 1st time\n        if (_balanceBefore == 0 && amount_ > 0) {\n            pool.addToDepositTokensOfAccount(account_);\n        }\n    }\n\n    /// @inheritdoc TokenHolder\n    // solhint-disable-next-line no-empty-blocks\n    function _requireCanSweep() internal view override onlyGovernor {}\n\n    /**\n     * @notice Move `amount` of tokens from `sender` to `recipient`\n     */\n    function _transfer(\n        address sender_,\n        address recipient_,\n        uint256 amount_\n    ) private updateRewardsBeforeTransfer(sender_, recipient_) {\n        if (sender_ == address(0)) revert TransferFromTheZeroAddress();\n        if (recipient_ == address(0)) revert TransferToTheZeroAddress();\n\n        uint256 _senderBalanceBefore = balanceOf[sender_];\n        if (_senderBalanceBefore < amount_) revert TransferAmountExceedsBalance();\n        uint256 _recipientBalanceBefore = balanceOf[recipient_];\n\n        unchecked {\n            balanceOf[sender_] = _senderBalanceBefore - amount_;\n            balanceOf[recipient_] += amount_;\n        }\n\n        emit Transfer(sender_, recipient_, amount_);\n\n        // Add this token to the deposit tokens list if the recipient is receiving it for the 1st time\n        if (_recipientBalanceBefore == 0 && amount_ > 0) {\n            pool.addToDepositTokensOfAccount(recipient_);\n        }\n\n        // Remove this token from the deposit tokens list if the sender's balance goes to zero\n        if (amount_ > 0 && balanceOf[sender_] == 0) {\n            pool.removeFromDepositTokensOfAccount(sender_);\n        }\n    }\n\n    /**\n     * @notice Enable/Disable the Deposit Token\n     */\n    function toggleIsActive() external override onlyGovernor {\n        bool _newIsActive = !isActive;\n        emit DepositTokenActiveUpdated(_newIsActive);\n        isActive = _newIsActive;\n    }\n\n    /**\n     * @notice Update collateral factor\n     * @param newCollateralFactor_ The new CF value\n     */\n    function updateCollateralFactor(uint128 newCollateralFactor_) external override onlyGovernor {\n        if (newCollateralFactor_ > 1e18) revert CollateralFactorTooHigh();\n        uint256 _currentCollateralFactor = collateralFactor;\n        if (newCollateralFactor_ == _currentCollateralFactor) revert NewValueIsSameAsCurrent();\n        emit CollateralFactorUpdated(_currentCollateralFactor, newCollateralFactor_);\n        collateralFactor = newCollateralFactor_;\n    }\n\n    /**\n     * @notice Update max total supply\n     * @param newMaxTotalSupply_ The new max total supply\n     */\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external override onlyGovernor {\n        uint256 _currentMaxTotalSupply = maxTotalSupply;\n        if (newMaxTotalSupply_ == _currentMaxTotalSupply) revert NewValueIsSameAsCurrent();\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupply, newMaxTotalSupply_);\n        maxTotalSupply = newMaxTotalSupply_;\n    }\n}\n"
    },
    "contracts/FeeProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/proxy/utils/Initializable.sol\";\nimport \"./storage/FeeProviderStorage.sol\";\nimport \"./lib/WadRayMath.sol\";\n\nerror SenderIsNotGovernor();\nerror PoolRegistryIsNull();\nerror EscrowMETIsNull();\nerror NewValueIsSameAsCurrent();\nerror FeeIsGreaterThanTheMax();\nerror TierDiscountTooHigh();\nerror TiersNotOrderedByMin();\n\n/**\n * @title FeeProvider contract\n */\ncontract FeeProvider is Initializable, FeeProviderStorageV1 {\n    using WadRayMath for uint256;\n\n    string public constant VERSION = \"1.1.0\";\n\n    uint256 internal constant MAX_FEE_VALUE = 0.25e18; // 25%\n    uint256 internal constant MAX_FEE_DISCOUNT = 1e18; // 100%\n\n    /// @notice Emitted when deposit fee is updated\n    event DepositFeeUpdated(uint256 oldDepositFee, uint256 newDepositFee);\n\n    /// @notice Emitted when issue fee is updated\n    event IssueFeeUpdated(uint256 oldIssueFee, uint256 newIssueFee);\n\n    /// @notice Emitted when liquidator incentive is updated\n    event LiquidatorIncentiveUpdated(uint256 oldLiquidatorIncentive, uint256 newLiquidatorIncentive);\n\n    /// @notice Emitted when protocol liquidation fee is updated\n    event ProtocolLiquidationFeeUpdated(uint256 oldProtocolLiquidationFee, uint256 newProtocolLiquidationFee);\n\n    /// @notice Emitted when repay fee is updated\n    event RepayFeeUpdated(uint256 oldRepayFee, uint256 newRepayFee);\n\n    /// @notice Emitted when swap fee is updated\n    event SwapDefaultFeeUpdated(uint256 oldSwapFee, uint256 newSwapFee);\n\n    /// @notice Emitted when tiers are updated\n    event TiersUpdated(Tier[] oldTiers, Tier[] newTiers);\n\n    /// @notice Emitted when withdraw fee is updated\n    event WithdrawFeeUpdated(uint256 oldWithdrawFee, uint256 newWithdrawFee);\n\n    /**\n     * @notice Throws if caller isn't the governor\n     */\n    modifier onlyGovernor() {\n        if (msg.sender != poolRegistry.governor()) revert SenderIsNotGovernor();\n        _;\n    }\n\n    function initialize(IPoolRegistry poolRegistry_, IESMET esMET_) public initializer {\n        if (address(poolRegistry_) == address(0)) revert PoolRegistryIsNull();\n        if (address(esMET_) == address(0)) revert EscrowMETIsNull();\n\n        poolRegistry = poolRegistry_;\n        esMET = esMET_;\n\n        liquidationFees = LiquidationFees({\n            liquidatorIncentive: 1e17, // 10%\n            protocolFee: 8e16 // 8%\n        });\n        defaultSwapFee = 25e14; // 0.25%\n    }\n\n    /**\n     * @notice Get fee discount tiers\n     */\n    function getTiers() external view returns (Tier[] memory _tiers) {\n        return tiers;\n    }\n\n    /**\n     * @notice Get the swap fee for a given account\n     * Fee discount are applied on top of the default swap fee depending on user's esMET balance\n     * @param account_ The account address\n     * @return _swapFee The account's swap fee\n     */\n    function swapFeeFor(address account_) external view override returns (uint256 _swapFee) {\n        uint256 _len = tiers.length;\n\n        if (_len == 0) {\n            return defaultSwapFee;\n        }\n\n        uint256 _balance = esMET.balanceOf(account_);\n\n        if (_balance < tiers[0].min) {\n            return defaultSwapFee;\n        }\n\n        uint256 i = 1;\n        while (i < _len) {\n            if (_balance < tiers[i].min) {\n                unchecked {\n                    // Note: `discount` is always <= `1e18`\n                    return defaultSwapFee.wadMul(1e18 - tiers[i - 1].discount);\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        unchecked {\n            // Note: `discount` is always <= `1e18`\n            return defaultSwapFee.wadMul(1e18 - tiers[_len - 1].discount);\n        }\n    }\n\n    /**\n     * @notice Update deposit fee\n     */\n    function updateDepositFee(uint256 newDepositFee_) external onlyGovernor {\n        if (newDepositFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\n        uint256 _currentDepositFee = depositFee;\n        if (newDepositFee_ == _currentDepositFee) revert NewValueIsSameAsCurrent();\n        emit DepositFeeUpdated(_currentDepositFee, newDepositFee_);\n        depositFee = newDepositFee_;\n    }\n\n    /**\n     * @notice Update issue fee\n     */\n    function updateIssueFee(uint256 newIssueFee_) external onlyGovernor {\n        if (newIssueFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\n        uint256 _currentIssueFee = issueFee;\n        if (newIssueFee_ == _currentIssueFee) revert NewValueIsSameAsCurrent();\n        emit IssueFeeUpdated(_currentIssueFee, newIssueFee_);\n        issueFee = newIssueFee_;\n    }\n\n    /**\n     * @notice Update liquidator incentive\n     * @dev liquidatorIncentive + protocolFee can't surpass max\n     */\n    function updateLiquidatorIncentive(uint128 newLiquidatorIncentive_) external onlyGovernor {\n        LiquidationFees memory _current = liquidationFees;\n        if (newLiquidatorIncentive_ + _current.protocolFee > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\n        if (newLiquidatorIncentive_ == _current.liquidatorIncentive) revert NewValueIsSameAsCurrent();\n        emit LiquidatorIncentiveUpdated(_current.liquidatorIncentive, newLiquidatorIncentive_);\n        liquidationFees.liquidatorIncentive = newLiquidatorIncentive_;\n    }\n\n    /**\n     * @notice Update protocol liquidation fee\n     * @dev liquidatorIncentive + protocolFee can't surpass max\n     */\n    function updateProtocolLiquidationFee(uint128 newProtocolLiquidationFee_) external onlyGovernor {\n        LiquidationFees memory _current = liquidationFees;\n        if (newProtocolLiquidationFee_ + _current.liquidatorIncentive > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\n        if (newProtocolLiquidationFee_ == _current.protocolFee) revert NewValueIsSameAsCurrent();\n        emit ProtocolLiquidationFeeUpdated(_current.protocolFee, newProtocolLiquidationFee_);\n        liquidationFees.protocolFee = newProtocolLiquidationFee_;\n    }\n\n    /**\n     * @notice Update repay fee\n     */\n    function updateRepayFee(uint256 newRepayFee_) external onlyGovernor {\n        if (newRepayFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\n        uint256 _currentRepayFee = repayFee;\n        if (newRepayFee_ == _currentRepayFee) revert NewValueIsSameAsCurrent();\n        emit RepayFeeUpdated(_currentRepayFee, newRepayFee_);\n        repayFee = newRepayFee_;\n    }\n\n    /**\n     * @notice Update swap fee\n     */\n    function updateDefaultSwapFee(uint256 newDefaultSwapFee_) external onlyGovernor {\n        if (newDefaultSwapFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\n        uint256 _current = defaultSwapFee;\n        if (newDefaultSwapFee_ == _current) revert NewValueIsSameAsCurrent();\n        emit SwapDefaultFeeUpdated(_current, newDefaultSwapFee_);\n        defaultSwapFee = newDefaultSwapFee_;\n    }\n\n    /**\n     * @notice Update fee discount tiers\n     */\n    function updateTiers(Tier[] memory tiers_) external onlyGovernor {\n        emit TiersUpdated(tiers, tiers_);\n        delete tiers;\n\n        uint256 _len = tiers_.length;\n        for (uint256 i; i < _len; ++i) {\n            Tier memory _tier = tiers_[i];\n            if (_tier.discount > MAX_FEE_DISCOUNT) revert TierDiscountTooHigh();\n            if (i > 0 && tiers_[i - 1].min > _tier.min) revert TiersNotOrderedByMin();\n            tiers.push(_tier);\n        }\n    }\n\n    /**\n     * @notice Update withdraw fee\n     */\n    function updateWithdrawFee(uint256 newWithdrawFee_) external onlyGovernor {\n        if (newWithdrawFee_ > MAX_FEE_VALUE) revert FeeIsGreaterThanTheMax();\n        uint256 _currentWithdrawFee = withdrawFee;\n        if (newWithdrawFee_ == _currentWithdrawFee) revert NewValueIsSameAsCurrent();\n        emit WithdrawFeeUpdated(_currentWithdrawFee, newWithdrawFee_);\n        withdrawFee = newWithdrawFee_;\n    }\n}\n"
    },
    "contracts/interfaces/external/ICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface ICToken {\n    function exchangeRateStored() external view returns (uint256);\n\n    function underlying() external view returns (address);\n}\n"
    },
    "contracts/interfaces/external/ICurveAddressProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./ICurveRegistry.sol\";\n\n// solhint-disable func-name-mixedcase\ninterface ICurveAddressProvider {\n    function get_registry() external view returns (ICurveRegistry);\n}\n"
    },
    "contracts/interfaces/external/ICurveRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n// solhint-disable func-name-mixedcase\ninterface ICurveRegistry {\n    function get_virtual_price_from_lp_token(address) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/external/IESMET.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IESMET {\n    function balanceOf(address account_) external view returns (uint256);\n\n    function lock(uint256 amount_, uint256 lockPeriod_) external;\n}\n"
    },
    "contracts/interfaces/external/IMasterOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IMasterOracle {\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\n\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\n\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\n}\n"
    },
    "contracts/interfaces/external/IMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IMulticall {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    function aggregate(Call[] calldata calls) external returns (uint256 blockNumber, bytes[] memory returnData);\n}\n"
    },
    "contracts/interfaces/external/ISwapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface ISwapper {\n    function swapExactInput(\n        address tokenIn_,\n        address tokenOut_,\n        uint256 amountIn_,\n        uint256 amountOutMin_,\n        address receiver_\n    ) external returns (uint256 _amountOut);\n}\n"
    },
    "contracts/interfaces/external/IVPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\";\n\ninterface IVPool is IERC20 {\n    function token() external view returns (address _token);\n\n    function deposit(uint256 _amount) external;\n\n    function withdraw(uint256 _shares) external;\n}\n"
    },
    "contracts/interfaces/external/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/interfaces/IDebtToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./ISyntheticToken.sol\";\n\ninterface IDebtToken is IERC20Metadata {\n    function lastTimestampAccrued() external view returns (uint256);\n\n    function isActive() external view returns (bool);\n\n    function syntheticToken() external view returns (ISyntheticToken);\n\n    function accrueInterest() external;\n\n    function debtIndex() external returns (uint256 debtIndex_);\n\n    function burn(address from_, uint256 amount_) external;\n\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\n\n    function flashIssue(address borrower_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\n\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\n\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\n\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\n\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\n\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\n\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\n\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\n\n    function updateInterestRate(uint256 newInterestRate_) external;\n\n    function maxTotalSupply() external view returns (uint256);\n\n    function interestRate() external view returns (uint256);\n\n    function interestRatePerSecond() external view returns (uint256);\n\n    function toggleIsActive() external;\n}\n"
    },
    "contracts/interfaces/IDepositToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IDepositToken is IERC20Metadata {\n    function underlying() external view returns (IERC20);\n\n    function collateralFactor() external view returns (uint256);\n\n    function unlockedBalanceOf(address account_) external view returns (uint256);\n\n    function lockedBalanceOf(address account_) external view returns (uint256);\n\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\n\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\n\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\n\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\n\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\n\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\n\n    function seize(address from_, address to_, uint256 amount_) external;\n\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\n\n    function isActive() external view returns (bool);\n\n    function toggleIsActive() external;\n\n    function maxTotalSupply() external view returns (uint256);\n\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\n}\n"
    },
    "contracts/interfaces/IFeeProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @notice FeeProvider interface\n */\ninterface IFeeProvider {\n    struct LiquidationFees {\n        uint128 liquidatorIncentive;\n        uint128 protocolFee;\n    }\n\n    function defaultSwapFee() external view returns (uint256);\n\n    function depositFee() external view returns (uint256);\n\n    function issueFee() external view returns (uint256);\n\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\n\n    function repayFee() external view returns (uint256);\n\n    function swapFeeFor(address account_) external view returns (uint256);\n\n    function withdrawFee() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @notice Governable interface\n */\ninterface IGovernable {\n    function governor() external view returns (address _governor);\n\n    function transferGovernorship(address _proposedGovernor) external;\n}\n"
    },
    "contracts/interfaces/IManageable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./IPool.sol\";\n\n/**\n * @notice Manageable interface\n */\ninterface IManageable {\n    function pool() external view returns (IPool _pool);\n}\n"
    },
    "contracts/interfaces/INativeTokenGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./IPool.sol\";\n\ninterface INativeTokenGateway {\n    function deposit(IPool pool_) external payable;\n\n    function withdraw(IPool pool_, uint256 amount_) external;\n}\n"
    },
    "contracts/interfaces/IPauseable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IPauseable {\n    function paused() external view returns (bool);\n\n    function everythingStopped() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./IDepositToken.sol\";\nimport \"./IDebtToken.sol\";\nimport \"./ITreasury.sol\";\nimport \"./IRewardsDistributor.sol\";\nimport \"./IPoolRegistry.sol\";\nimport \"./IFeeProvider.sol\";\nimport \"./external/ISwapper.sol\";\nimport \"../interfaces/IFeeProvider.sol\";\n\n/**\n * @notice Pool interface\n */\ninterface IPool is IPauseable, IGovernable {\n    function debtFloorInUsd() external view returns (uint256);\n\n    function feeCollector() external view returns (address);\n\n    function swapper() external view returns (ISwapper);\n\n    function feeProvider() external view returns (IFeeProvider);\n\n    function maxLiquidable() external view returns (uint256);\n\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\n\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\n\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\n\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\n\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\n\n    function getDepositTokens() external view returns (address[] memory);\n\n    function getDebtTokens() external view returns (address[] memory);\n\n    function getRewardsDistributors() external view returns (address[] memory);\n\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\n\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\n\n    function debtPositionOf(\n        address account_\n    )\n        external\n        view\n        returns (\n            bool _isHealthy,\n            uint256 _depositInUsd,\n            uint256 _debtInUsd,\n            uint256 _issuableLimitInUsd,\n            uint256 _issuableInUsd\n        );\n\n    function leverage(\n        IERC20 tokenIn_,\n        IDepositToken depositToken_,\n        ISyntheticToken syntheticToken_,\n        uint256 amountIn_,\n        uint256 leverage_,\n        uint256 depositAmountMin_\n    ) external;\n\n    function liquidate(\n        ISyntheticToken syntheticToken_,\n        address account_,\n        uint256 amountToRepay_,\n        IDepositToken depositToken_\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\n\n    function quoteLiquidateIn(\n        ISyntheticToken syntheticToken_,\n        uint256 totalToSeized_,\n        IDepositToken depositToken_\n    ) external view returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee);\n\n    function quoteLiquidateMax(\n        ISyntheticToken syntheticToken_,\n        address account_,\n        IDepositToken depositToken_\n    ) external view returns (uint256 _maxAmountToRepay);\n\n    function quoteLiquidateOut(\n        ISyntheticToken syntheticToken_,\n        uint256 amountToRepay_,\n        IDepositToken depositToken_\n    ) external view returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\n\n    function quoteSwapIn(\n        ISyntheticToken syntheticTokenIn_,\n        ISyntheticToken syntheticTokenOut_,\n        uint256 amountOut_\n    ) external view returns (uint256 _amountIn, uint256 _fee);\n\n    function quoteSwapOut(\n        ISyntheticToken syntheticTokenIn_,\n        ISyntheticToken syntheticTokenOut_,\n        uint256 amountIn_\n    ) external view returns (uint256 _amountOut, uint256 _fee);\n\n    function swap(\n        ISyntheticToken syntheticTokenIn_,\n        ISyntheticToken syntheticTokenOut_,\n        uint256 amountIn_\n    ) external returns (uint256 _amountOut, uint256 _fee);\n\n    function treasury() external view returns (ITreasury);\n\n    function masterOracle() external view returns (IMasterOracle);\n\n    function poolRegistry() external view returns (IPoolRegistry);\n\n    function addToDepositTokensOfAccount(address account_) external;\n\n    function removeFromDepositTokensOfAccount(address account_) external;\n\n    function addToDebtTokensOfAccount(address account_) external;\n\n    function removeFromDebtTokensOfAccount(address account_) external;\n\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\n\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\n\n    function isSwapActive() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IPoolRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./external/IMasterOracle.sol\";\nimport \"./IPauseable.sol\";\nimport \"./IGovernable.sol\";\nimport \"./ISyntheticToken.sol\";\n\ninterface IPoolRegistry is IPauseable, IGovernable {\n    function isPoolRegistered(address pool_) external view returns (bool);\n\n    function feeCollector() external view returns (address);\n\n    function nativeTokenGateway() external view returns (address);\n\n    function getPools() external view returns (address[] memory);\n\n    function registerPool(address pool_) external;\n\n    function unregisterPool(address pool_) external;\n\n    function masterOracle() external view returns (IMasterOracle);\n\n    function updateMasterOracle(IMasterOracle newOracle_) external;\n\n    function updateFeeCollector(address newFeeCollector_) external;\n\n    function updateNativeTokenGateway(address newGateway_) external;\n\n    function idOfPool(address pool_) external view returns (uint256);\n\n    function nextPoolId() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IRewardsDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/IERC20.sol\";\n\n/**\n * @notice Reward Distributor interface\n */\ninterface IRewardsDistributor {\n    function rewardToken() external view returns (IERC20);\n\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\n\n    function tokensAccruedOf(address account_) external view returns (uint256);\n\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\n\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external;\n\n    function claimable(address account_) external view returns (uint256 _claimable);\n\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\n\n    function claimRewards(address account_) external;\n\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\n\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\n\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\n\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\n\n    function tokens(uint256) external view returns (IERC20);\n\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\n\n    function accountIndexOf(IERC20, address) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISyntheticToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./IDebtToken.sol\";\nimport \"./IPoolRegistry.sol\";\n\ninterface ISyntheticToken is IERC20Metadata {\n    function isActive() external view returns (bool);\n\n    function mint(address to_, uint256 amount_) external;\n\n    function burn(address from_, uint256 amount) external;\n\n    function poolRegistry() external returns (IPoolRegistry);\n\n    function toggleIsActive() external;\n\n    function seize(address from_, address to_, uint256 amount_) external;\n\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\n\n    function maxTotalSupply() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface ITreasury {\n    function pull(address to_, uint256 amount_) external;\n\n    function migrateTo(address newTreasury_) external;\n}\n"
    },
    "contracts/interfaces/IVesperGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./IPool.sol\";\nimport \"./external/IVPool.sol\";\n\ninterface IVesperGateway {\n    function deposit(IPool pool_, IVPool vToken_, uint256 amount_) external;\n\n    function withdraw(IPool pool_, IVPool vToken_, uint256 amount_) external;\n}\n"
    },
    "contracts/lib/MappedEnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @dev EnumerableSet fork to support `address => address[]` mapping\n * @dev Forked from OZ 4.3.2\n */\nlibrary MappedEnumerableSet {\n    struct Set {\n        // Storage of set values\n        address[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(address => uint256) _indexes;\n    }\n\n    struct AddressSet {\n        mapping(address => Set) _ofAddress;\n    }\n\n    function _add(AddressSet storage set, address _key, address value) private returns (bool) {\n        if (!_contains(set, _key, value)) {\n            set._ofAddress[_key]._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._ofAddress[_key]._indexes[value] = set._ofAddress[_key]._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _remove(AddressSet storage set, address _key, address value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._ofAddress[_key]._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._ofAddress[_key]._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                address lastvalue = set._ofAddress[_key]._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._ofAddress[_key]._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._ofAddress[_key]._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._ofAddress[_key]._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._ofAddress[_key]._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _contains(AddressSet storage set, address _key, address value) private view returns (bool) {\n        return set._ofAddress[_key]._indexes[value] != 0;\n    }\n\n    function _length(AddressSet storage set, address _key) private view returns (uint256) {\n        return set._ofAddress[_key]._values.length;\n    }\n\n    function _at(AddressSet storage set, address _key, uint256 index) private view returns (address) {\n        return set._ofAddress[_key]._values[index];\n    }\n\n    function _values(AddressSet storage set, address _key) private view returns (address[] memory) {\n        return set._ofAddress[_key]._values;\n    }\n\n    function add(AddressSet storage set, address key, address value) internal returns (bool) {\n        return _add(set, key, value);\n    }\n\n    function remove(AddressSet storage set, address key, address value) internal returns (bool) {\n        return _remove(set, key, value);\n    }\n\n    function contains(AddressSet storage set, address key, address value) internal view returns (bool) {\n        return _contains(set, key, value);\n    }\n\n    function length(AddressSet storage set, address key) internal view returns (uint256) {\n        return _length(set, key);\n    }\n\n    function at(AddressSet storage set, address key, uint256 index) internal view returns (address) {\n        return _at(set, key, index);\n    }\n\n    function values(AddressSet storage set, address key) internal view returns (address[] memory) {\n        address[] memory store = _values(set, key);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/lib/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @title Math library\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\n */\nlibrary WadRayMath {\n    uint256 internal constant WAD = 1e18;\n    uint256 internal constant HALF_WAD = WAD / 2;\n\n    uint256 internal constant RAY = 1e27;\n    uint256 internal constant HALF_RAY = RAY / 2;\n\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\n\n    /**\n     * @dev Multiplies two wad, rounding half up to the nearest wad\n     * @param a Wad\n     * @param b Wad\n     * @return The result of a*b, in wad\n     */\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n\n        return (a * b + HALF_WAD) / WAD;\n    }\n\n    /**\n     * @dev Divides two wad, rounding half up to the nearest wad\n     * @param a Wad\n     * @param b Wad\n     * @return The result of a/b, in wad\n     */\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a * WAD + b / 2) / b;\n    }\n}\n"
    },
    "contracts/mock/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Note: Minimalist ERC20 based on https://github.com/maple-labs/erc20\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\";\n\ncontract ERC20Mock is IERC20Metadata {\n    string public override name;\n    string public override symbol;\n\n    uint8 public immutable override decimals;\n\n    uint256 public override totalSupply;\n\n    mapping(address => uint256) public override balanceOf;\n\n    mapping(address => mapping(address => uint256)) public override allowance;\n\n    uint256 public fee;\n\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        name = name_;\n        symbol = symbol_;\n        decimals = decimals_;\n    }\n\n    /**************************/\n    /*** External Functions ***/\n    /**************************/\n\n    function approve(address spender_, uint256 amount_) external override returns (bool success_) {\n        _approve(msg.sender, spender_, amount_);\n        return true;\n    }\n\n    function transfer(address recipient_, uint256 amount_) external override returns (bool success_) {\n        _transfer(msg.sender, recipient_, amount_);\n        return true;\n    }\n\n    function transferFrom(\n        address owner_,\n        address recipient_,\n        uint256 amount_\n    ) external override returns (bool success_) {\n        _approve(owner_, msg.sender, allowance[owner_][msg.sender] - amount_);\n        _transfer(owner_, recipient_, amount_);\n        return true;\n    }\n\n    function mint(address _to, uint256 _amount) external {\n        _mint(_to, _amount);\n    }\n\n    function burn(address _to, uint256 _amount) external {\n        _burn(_to, _amount);\n    }\n\n    function updateFee(uint256 _fee) external {\n        fee = _fee;\n    }\n\n    /**************************/\n    /*** Internal Functions ***/\n    /**************************/\n\n    function _approve(address owner_, address spender_, uint256 amount_) internal {\n        emit Approval(owner_, spender_, allowance[owner_][spender_] = amount_);\n    }\n\n    function _transfer(address owner_, address recipient_, uint256 amount_) internal {\n        uint256 feeAmount = fee > 0 ? (amount_ * fee) / 1e18 : 0;\n        balanceOf[owner_] -= amount_;\n        balanceOf[recipient_] += amount_ - feeAmount;\n\n        if (feeAmount > 0) {\n            balanceOf[address(0)] = feeAmount;\n        }\n\n        emit Transfer(owner_, recipient_, amount_);\n    }\n\n    function _mint(address recipient_, uint256 amount_) internal {\n        totalSupply += amount_;\n        balanceOf[recipient_] += amount_;\n\n        emit Transfer(address(0), recipient_, amount_);\n    }\n\n    function _burn(address owner_, uint256 amount_) internal {\n        balanceOf[owner_] -= amount_;\n        totalSupply -= amount_;\n\n        emit Transfer(owner_, address(0), amount_);\n    }\n}\n"
    },
    "contracts/mock/MasterOracleMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../interfaces/external/IMasterOracle.sol\";\n\ncontract MasterOracleMock is IMasterOracle {\n    mapping(address => uint256) public prices;\n\n    function updatePrice(address _asset, uint256 _price) external {\n        prices[_asset] = _price;\n    }\n\n    function quoteTokenToUsd(address _asset, uint256 _amount) public view override returns (uint256 _amountInUsd) {\n        _amountInUsd = (_amount * prices[_asset]) / 10 ** IERC20Metadata(address(_asset)).decimals();\n    }\n\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) public view override returns (uint256 _amount) {\n        _amount = (_amountInUsd * 10 ** IERC20Metadata(address(_asset)).decimals()) / prices[_asset];\n    }\n\n    function quote(\n        address _assetIn,\n        address _assetOut,\n        uint256 _amountIn\n    ) public view override returns (uint256 _amountOut) {\n        uint256 _amountInUsd = quoteTokenToUsd(_assetIn, _amountIn);\n        _amountOut = quoteUsdToToken(_assetOut, _amountInUsd);\n    }\n}\n"
    },
    "contracts/mock/PauseableMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../utils/Pauseable.sol\";\n\ncontract PauseableMock is Pauseable {}\n"
    },
    "contracts/mock/PoolMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable no-unused-vars\n// solhint-disable avoid-low-level-calls\n// solhint-disable use-forbidden-name\n// solhint-disable no-empty-blocks\n\npragma solidity 0.8.9;\n\nimport \"../lib/WadRayMath.sol\";\nimport \"../utils/Pauseable.sol\";\nimport \"../interfaces/IPool.sol\";\nimport \"../interfaces/IFeeProvider.sol\";\nimport \"../access/Governable.sol\";\n\ncontract PoolMock is IPool, Governable, Pauseable {\n    using WadRayMath for uint256;\n\n    ITreasury public treasury;\n    ISyntheticToken public syntheticToken;\n    IDebtToken public debtToken;\n    IDepositToken public depositToken;\n    IMasterOracle public masterOracle;\n    IPoolRegistry public poolRegistry;\n    IFeeProvider public feeProvider;\n    ISwapper public swapper;\n    uint256 public debtFloorInUsd;\n    uint256 public maxLiquidable;\n    bool public isSwapActive;\n\n    constructor(\n        IDepositToken _depositToken,\n        IMasterOracle _masterOracle,\n        ISyntheticToken _syntheticToken,\n        IDebtToken _debtToken,\n        IPoolRegistry _poolRegistry,\n        IFeeProvider _feeProvider\n    ) {\n        depositToken = _depositToken;\n        masterOracle = _masterOracle;\n        syntheticToken = _syntheticToken;\n        debtToken = _debtToken;\n        poolRegistry = _poolRegistry;\n        feeProvider = _feeProvider;\n    }\n\n    function feeCollector() external view returns (address) {\n        return poolRegistry.feeCollector();\n    }\n\n    function getDepositTokens() external pure override returns (address[] memory) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function getDebtTokens() external pure override returns (address[] memory) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function debtOf(address _account) public view override returns (uint256 _debtInUsd) {\n        if (address(syntheticToken) != address(0)) {\n            uint256 _debtBalance = debtToken.balanceOf(_account);\n            return masterOracle.quoteTokenToUsd(address(syntheticToken), _debtBalance);\n        }\n    }\n\n    function depositOf(address) external pure override returns (uint256, uint256) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function debtPositionOf(\n        address _account\n    )\n        public\n        view\n        override\n        returns (\n            bool _isHealthy,\n            uint256 _depositInUsd,\n            uint256 _debtInUsd,\n            uint256 _issuableLimitInUsd,\n            uint256 _issuableInUsd\n        )\n    {\n        _isHealthy = true;\n        uint256 _deposit = depositToken.balanceOf(_account);\n        _depositInUsd = masterOracle.quoteTokenToUsd(address(depositToken.underlying()), _deposit);\n        _debtInUsd = debtOf(_account);\n        _issuableLimitInUsd = _depositInUsd.wadMul(depositToken.collateralFactor());\n        _issuableInUsd = _debtInUsd < _issuableLimitInUsd ? _issuableLimitInUsd - _debtInUsd : 0;\n    }\n\n    function leverage(IERC20, IDepositToken, ISyntheticToken, uint256, uint256, uint256) external pure override {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function liquidate(\n        ISyntheticToken,\n        address,\n        uint256,\n        IDepositToken\n    ) external pure override returns (uint256, uint256, uint256) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function quoteLiquidateIn(\n        ISyntheticToken,\n        uint256,\n        IDepositToken\n    ) external pure returns (uint256, uint256, uint256) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function quoteLiquidateMax(ISyntheticToken, address, IDepositToken) external pure returns (uint256) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function quoteLiquidateOut(\n        ISyntheticToken,\n        uint256,\n        IDepositToken\n    ) external pure returns (uint256, uint256, uint256) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function quoteSwapIn(ISyntheticToken, ISyntheticToken, uint256) external pure override returns (uint256, uint256) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function quoteSwapOut(ISyntheticToken, ISyntheticToken, uint256) public pure override returns (uint256, uint256) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function swap(ISyntheticToken, ISyntheticToken, uint256) external pure override returns (uint256, uint256) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function updateDebtFloor(uint256 _newDebtFloorInUsd) external {\n        debtFloorInUsd = _newDebtFloorInUsd;\n    }\n\n    function doesSyntheticTokenExist(ISyntheticToken _syntheticToken) external view override returns (bool) {\n        return address(_syntheticToken) == address(syntheticToken);\n    }\n\n    function doesDebtTokenExist(IDebtToken) external pure returns (bool) {\n        return true;\n    }\n\n    function doesDepositTokenExist(IDepositToken) external pure override returns (bool) {\n        return true;\n    }\n\n    function updateTreasury(ITreasury _treasury) external {\n        treasury = _treasury;\n    }\n\n    function debtTokenOf(ISyntheticToken) external view override returns (IDebtToken) {\n        return debtToken;\n    }\n\n    function depositTokenOf(IERC20) external view override returns (IDepositToken) {\n        return depositToken;\n    }\n\n    function addToDepositTokensOfAccount(address) external pure override {}\n\n    function removeFromDepositTokensOfAccount(address) external pure override {}\n\n    function addToDebtTokensOfAccount(address) external pure override {}\n\n    function removeFromDebtTokensOfAccount(address) external pure override {}\n\n    function getDepositTokensOfAccount(address) external pure override returns (address[] memory) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function getDebtTokensOfAccount(address) external pure override returns (address[] memory) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function getRewardsDistributors() external pure override returns (address[] memory _rewardsDistributors) {}\n}\n"
    },
    "contracts/mock/SwapperMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/IERC20.sol\";\nimport \"../interfaces/external/IMasterOracle.sol\";\nimport \"../interfaces/external/ISwapper.sol\";\n\ncontract SwapperMock is ISwapper {\n    uint256 public rate = 1e18;\n    IMasterOracle masterOracle;\n\n    constructor(IMasterOracle masterOracle_) {\n        masterOracle = masterOracle_;\n    }\n\n    function swapExactInput(\n        address tokenIn_,\n        address tokenOut_,\n        uint256 amountIn_,\n        uint256 amountOutMin_,\n        address receiver_\n    ) external returns (uint256 _amountOut) {\n        IERC20(tokenIn_).transferFrom(msg.sender, address(this), amountIn_);\n\n        _amountOut = (masterOracle.quote(tokenIn_, tokenOut_, amountIn_) * rate) / 1e18;\n        require(_amountOut >= amountOutMin_, \"swapper-mock-slippage\");\n        require(_amountOut > 100, \"amount-out-zero\");\n\n        IERC20(tokenOut_).transfer(receiver_, _amountOut);\n    }\n\n    function updateRate(uint256 rate_) external {\n        rate = rate_;\n    }\n}\n"
    },
    "contracts/mock/TokenHolderMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../utils/TokenHolder.sol\";\n\ncontract TokenHolderMock is TokenHolder {\n    address public sweeper;\n    bool public acceptETH;\n\n    constructor(address _sweeper) {\n        sweeper = _sweeper;\n    }\n\n    function _requireCanSweep() internal view override {\n        require(msg.sender == sweeper, \"not-sweeper\");\n    }\n\n    function toggleAcceptETH() public {\n        acceptETH = !acceptETH;\n    }\n\n    receive() external payable override {\n        require(acceptETH, \"not-allowed-to-receive-eth\");\n    }\n}\n"
    },
    "contracts/mock/VPoolMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/ERC20.sol\";\nimport \"../interfaces/external/IVPool.sol\";\n\ncontract VPoolMock is IVPool, ERC20 {\n    address public token;\n\n    constructor(string memory name_, string memory symbol_, address token_) ERC20(name_, symbol_) {\n        token = token_;\n    }\n\n    function deposit(uint256 amount_) external {\n        IERC20(token).transferFrom(msg.sender, address(this), amount_);\n        _mint(msg.sender, amount_ * (10 ** (decimals() - IERC20Metadata(token).decimals())));\n    }\n\n    function withdraw(uint256 shares_) external {\n        _burn(msg.sender, shares_);\n        IERC20(token).transfer(msg.sender, shares_ / (10 ** (decimals() - IERC20Metadata(token).decimals())));\n    }\n\n    function mint(address to_, uint256 amount_) external {\n        _mint(to_, amount_);\n    }\n}\n"
    },
    "contracts/NativeTokenGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./utils/TokenHolder.sol\";\nimport \"./interfaces/external/IWETH.sol\";\nimport \"./interfaces/INativeTokenGateway.sol\";\nimport \"./interfaces/IDepositToken.sol\";\n\nerror SenderIsNotGovernor();\nerror SenderIsNotNativeToken();\nerror UnregisteredPool();\n\n/**\n * @title Helper contract to easily support native tokens (e.g. ETH/AVAX) as collateral\n */\ncontract NativeTokenGateway is ReentrancyGuard, TokenHolder, INativeTokenGateway {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IWETH;\n    using SafeERC20 for IDepositToken;\n\n    IPoolRegistry public immutable poolRegistry;\n    IWETH public immutable nativeToken;\n\n    modifier onlyGovernor() {\n        if (poolRegistry.governor() != msg.sender) revert SenderIsNotGovernor();\n        _;\n    }\n\n    constructor(IPoolRegistry poolRegistry_, IWETH nativeToken_) {\n        // Note: `NativeTokenGateway` isn't upgradable but extends `ReentrancyGuard` therefore we need to initialize it\n        __ReentrancyGuard_init();\n        poolRegistry = poolRegistry_;\n        nativeToken = nativeToken_;\n    }\n\n    /**\n     * @notice deposits NATIVE_TOKEN as collateral using native. A corresponding amount of the deposit token is minted.\n     * @param pool_ The Pool contract\n     */\n    function deposit(IPool pool_) external payable override {\n        if (!poolRegistry.isPoolRegistered(address(pool_))) revert UnregisteredPool();\n\n        nativeToken.deposit{value: msg.value}();\n        IDepositToken _depositToken = pool_.depositTokenOf(nativeToken);\n        nativeToken.safeApprove(address(_depositToken), 0);\n        nativeToken.safeApprove(address(_depositToken), msg.value);\n        _depositToken.deposit(msg.value, msg.sender);\n    }\n\n    /**\n     * @notice withdraws the NATIVE_TOKEN deposit of msg.sender.\n     * @param pool_ The Pool contract\n     * @param amount_ The amount of deposit tokens to withdraw and receive native ETH\n     */\n    function withdraw(IPool pool_, uint256 amount_) external override nonReentrant {\n        if (!poolRegistry.isPoolRegistered(address(pool_))) revert UnregisteredPool();\n\n        IDepositToken _depositToken = pool_.depositTokenOf(nativeToken);\n        _depositToken.safeTransferFrom(msg.sender, address(this), amount_);\n        (uint256 _withdrawn, ) = _depositToken.withdraw(amount_, address(this));\n        nativeToken.withdraw(_withdrawn);\n        Address.sendValue(payable(msg.sender), _withdrawn);\n    }\n\n    /// @inheritdoc TokenHolder\n    // solhint-disable-next-line no-empty-blocks\n    function _requireCanSweep() internal view override onlyGovernor {}\n\n    /**\n     * @dev Only `nativeToken` contract is allowed to transfer to here. Prevent other addresses to send coins to this contract.\n     */\n    receive() external payable override {\n        if (msg.sender != address(nativeToken)) revert SenderIsNotNativeToken();\n    }\n}\n"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./storage/PoolStorage.sol\";\nimport \"./lib/WadRayMath.sol\";\nimport \"./utils/Pauseable.sol\";\nimport \"./interfaces/external/IVPool.sol\";\n\nerror CollateralDoesNotExist();\nerror SyntheticDoesNotExist();\nerror SenderIsNotDebtToken();\nerror SenderIsNotDepositToken();\nerror UserReachedMaxTokens();\nerror PoolRegistryIsNull();\nerror DebtTokenAlreadyExists();\nerror DepositTokenAlreadyExists();\nerror LeverageTooLow();\nerror LeverageTooHigh();\nerror LeverageSlippageTooHigh();\nerror PositionIsNotHealthy();\nerror AmountIsZero();\nerror CanNotLiquidateOwnPosition();\nerror PositionIsHealthy();\nerror AmountGreaterThanMaxLiquidable();\nerror RemainingDebtIsLowerThanTheFloor();\nerror AmountIsTooHight();\nerror DebtTokenDoesNotExist();\nerror DepositTokenDoesNotExist();\nerror SwapFeatureIsInactive();\nerror AmountInIsInvalid();\nerror AddressIsNull();\nerror SyntheticIsNull();\nerror SyntheticIsInUse();\nerror UnderlyingAssetInUse();\nerror ReachedMaxDepositTokens();\nerror RewardDistributorAlreadyExists();\nerror RewardDistributorDoesNotExist();\nerror TotalSupplyIsNotZero();\nerror NewValueIsSameAsCurrent();\nerror FeeIsGreaterThanTheMax();\nerror MaxLiquidableTooHigh();\n\n/**\n * @title Pool contract\n */\ncontract Pool is ReentrancyGuard, Pauseable, PoolStorageV2 {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for ISyntheticToken;\n    using WadRayMath for uint256;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using MappedEnumerableSet for MappedEnumerableSet.AddressSet;\n\n    string public constant VERSION = \"1.1.0\";\n\n    /**\n     * @notice Maximum tokens per pool a user may have\n     */\n    uint256 public constant MAX_TOKENS_PER_USER = 30;\n\n    /// @notice Emitted when protocol liquidation fee is updated\n    event DebtFloorUpdated(uint256 oldDebtFloorInUsd, uint256 newDebtFloorInUsd);\n\n    /// @notice Emitted when debt token is enabled\n    event DebtTokenAdded(IDebtToken indexed debtToken);\n\n    /// @notice Emitted when debt token is disabled\n    event DebtTokenRemoved(IDebtToken indexed debtToken);\n\n    /// @notice Emitted when deposit token is enabled\n    event DepositTokenAdded(address indexed depositToken);\n\n    /// @notice Emitted when deposit token is disabled\n    event DepositTokenRemoved(IDepositToken indexed depositToken);\n\n    /// @notice Emitted when fee provider contract is updated\n    event FeeProviderUpdated(IFeeProvider indexed oldFeeProvider, IFeeProvider indexed newFeeProvider);\n\n    /// @notice Emitted when maxLiquidable (liquidation cap) is updated\n    event MaxLiquidableUpdated(uint256 oldMaxLiquidable, uint256 newMaxLiquidable);\n\n    /// @notice Emitted when a position is liquidated\n    event PositionLiquidated(\n        address indexed liquidator,\n        address indexed account,\n        ISyntheticToken indexed syntheticToken,\n        uint256 amountRepaid,\n        uint256 depositSeized,\n        uint256 fee\n    );\n\n    /// @notice Emitted when rewards distributor contract is added\n    event RewardsDistributorAdded(IRewardsDistributor indexed _distributor);\n\n    /// @notice Emitted when rewards distributor contract is removed\n    event RewardsDistributorRemoved(IRewardsDistributor _distributor);\n\n    /// @notice Emitted when the swap active flag is updated\n    event SwapActiveUpdated(bool newActive);\n\n    /// @notice Emitted when swapper contract is updated\n    event SwapperUpdated(ISwapper oldSwapFee, ISwapper newSwapFee);\n\n    /// @notice Emitted when synthetic token is swapped\n    event SyntheticTokenSwapped(\n        address indexed account,\n        ISyntheticToken indexed syntheticTokenIn,\n        ISyntheticToken indexed syntheticTokenOut,\n        uint256 amountIn,\n        uint256 amountOut,\n        uint256 fee\n    );\n\n    /// @notice Emitted when treasury contract is updated\n    event TreasuryUpdated(ITreasury indexed oldTreasury, ITreasury indexed newTreasury);\n\n    /**\n     * @dev Throws if token addition will reach the `account_`'s max\n     */\n    modifier onlyIfAdditionWillNotReachMaxTokens(address account_) {\n        if (debtTokensOfAccount.length(account_) + depositTokensOfAccount.length(account_) >= MAX_TOKENS_PER_USER) {\n            revert UserReachedMaxTokens();\n        }\n        _;\n    }\n\n    /**\n     * @dev Throws if deposit token doesn't exist\n     */\n    modifier onlyIfDepositTokenExists(IDepositToken depositToken_) {\n        if (!doesDepositTokenExist(depositToken_)) revert CollateralDoesNotExist();\n        _;\n    }\n\n    /**\n     * @dev Throws if synthetic token doesn't exist\n     */\n    modifier onlyIfSyntheticTokenExists(ISyntheticToken syntheticToken_) {\n        if (!doesSyntheticTokenExist(syntheticToken_)) revert SyntheticDoesNotExist();\n        _;\n    }\n\n    /**\n     * @dev Throws if `msg.sender` isn't a debt token\n     */\n    modifier onlyIfMsgSenderIsDebtToken() {\n        if (!doesDebtTokenExist(IDebtToken(msg.sender))) revert SenderIsNotDebtToken();\n        _;\n    }\n\n    /**\n     * @dev Throws if `msg.sender` isn't a deposit token\n     */\n    modifier onlyIfMsgSenderIsDepositToken() {\n        if (!doesDepositTokenExist(IDepositToken(msg.sender))) revert SenderIsNotDepositToken();\n        _;\n    }\n\n    function initialize(IPoolRegistry poolRegistry_) public initializer {\n        if (address(poolRegistry_) == address(0)) revert PoolRegistryIsNull();\n        __ReentrancyGuard_init();\n        __Pauseable_init();\n\n        poolRegistry = poolRegistry_;\n        isSwapActive = true;\n        maxLiquidable = 0.5e18; // 50%\n    }\n\n    /**\n     * @notice Add a debt token to the per-account list\n     * @dev This function is called from `DebtToken` when user's balance changes from `0`\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\n     * @param account_ The account address\n     */\n    function addToDebtTokensOfAccount(\n        address account_\n    ) external onlyIfMsgSenderIsDebtToken onlyIfAdditionWillNotReachMaxTokens(account_) {\n        if (!debtTokensOfAccount.add(account_, msg.sender)) revert DebtTokenAlreadyExists();\n    }\n\n    /**\n     * @notice Add a deposit token to the per-account list\n     * @dev This function is called from `DepositToken` when user's balance changes from `0`\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\n     * @param account_ The account address\n     */\n    function addToDepositTokensOfAccount(\n        address account_\n    ) external onlyIfMsgSenderIsDepositToken onlyIfAdditionWillNotReachMaxTokens(account_) {\n        if (!depositTokensOfAccount.add(account_, msg.sender)) revert DepositTokenAlreadyExists();\n    }\n\n    /**\n     * @notice Get account's debt by querying latest prices from oracles\n     * @param account_ The account to check\n     * @return _debtInUsd The debt value in USD\n     */\n    function debtOf(address account_) public view override returns (uint256 _debtInUsd) {\n        IMasterOracle _masterOracle = masterOracle();\n        uint256 _length = debtTokensOfAccount.length(account_);\n        for (uint256 i; i < _length; ++i) {\n            IDebtToken _debtToken = IDebtToken(debtTokensOfAccount.at(account_, i));\n            _debtInUsd += _masterOracle.quoteTokenToUsd(\n                address(_debtToken.syntheticToken()),\n                _debtToken.balanceOf(account_)\n            );\n        }\n    }\n\n    /**\n     * @notice Returns whether the debt position from an account is healthy\n     * @param account_ The account to check\n     * @return _isHealthy Whether the account's position is healthy\n     * @return _depositInUsd The total collateral deposited in USD\n     * @return _debtInUsd The total debt in USD\n     * @return _issuableLimitInUsd The max amount of debt (is USD) that can be created (considering collateral factors)\n     * @return _issuableInUsd The amount of debt (is USD) that is free (i.e. can be used to issue synthetic tokens)\n     */\n    function debtPositionOf(\n        address account_\n    )\n        public\n        view\n        override\n        returns (\n            bool _isHealthy,\n            uint256 _depositInUsd,\n            uint256 _debtInUsd,\n            uint256 _issuableLimitInUsd,\n            uint256 _issuableInUsd\n        )\n    {\n        _debtInUsd = debtOf(account_);\n        (_depositInUsd, _issuableLimitInUsd) = depositOf(account_);\n        _isHealthy = _debtInUsd <= _issuableLimitInUsd;\n        _issuableInUsd = _debtInUsd < _issuableLimitInUsd ? _issuableLimitInUsd - _debtInUsd : 0;\n    }\n\n    /**\n     * @notice Get account's total collateral deposited by querying latest prices from oracles\n     * @param account_ The account to check\n     * @return _depositInUsd The total deposit value in USD among all collaterals\n     * @return _issuableLimitInUsd The max value in USD that can be used to issue synthetic tokens\n     */\n    function depositOf(\n        address account_\n    ) public view override returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd) {\n        IMasterOracle _masterOracle = masterOracle();\n        uint256 _length = depositTokensOfAccount.length(account_);\n        for (uint256 i; i < _length; ++i) {\n            IDepositToken _depositToken = IDepositToken(depositTokensOfAccount.at(account_, i));\n            uint256 _amountInUsd = _masterOracle.quoteTokenToUsd(\n                address(_depositToken.underlying()),\n                _depositToken.balanceOf(account_)\n            );\n            _depositInUsd += _amountInUsd;\n            _issuableLimitInUsd += _amountInUsd.wadMul(_depositToken.collateralFactor());\n        }\n    }\n\n    /**\n     * @inheritdoc Pauseable\n     */\n    function everythingStopped() public view override(IPauseable, Pauseable) returns (bool) {\n        return super.everythingStopped() || poolRegistry.everythingStopped();\n    }\n\n    /**\n     * @notice Returns fee collector address\n     */\n    function feeCollector() external view override returns (address) {\n        return poolRegistry.feeCollector();\n    }\n\n    /**\n     * @notice Get all debt tokens\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees.\n     */\n    function getDebtTokens() external view override returns (address[] memory) {\n        return debtTokens.values();\n    }\n\n    /**\n     * @notice Get all debt tokens\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees.\n     */\n    function getDebtTokensOfAccount(address account_) external view override returns (address[] memory) {\n        return debtTokensOfAccount.values(account_);\n    }\n\n    /**\n     * @notice Get all deposit tokens\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees.\n     */\n    function getDepositTokens() external view override returns (address[] memory) {\n        return depositTokens.values();\n    }\n\n    /**\n     * @notice Get deposit tokens of an account\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees.\n     */\n    function getDepositTokensOfAccount(address account_) external view override returns (address[] memory) {\n        return depositTokensOfAccount.values(account_);\n    }\n\n    /**\n     * @notice Get all rewards distributors\n     */\n    function getRewardsDistributors() external view override returns (address[] memory) {\n        return rewardsDistributors.values();\n    }\n\n    /**\n     * @notice Check if token is part of the debt offerings\n     * @param debtToken_ Asset to check\n     * @return true if exist\n     */\n    function doesDebtTokenExist(IDebtToken debtToken_) public view override returns (bool) {\n        return debtTokens.contains(address(debtToken_));\n    }\n\n    /**\n     * @notice Check if collateral is supported\n     * @param depositToken_ Asset to check\n     * @return true if exist\n     */\n    function doesDepositTokenExist(IDepositToken depositToken_) public view override returns (bool) {\n        return depositTokens.contains(address(depositToken_));\n    }\n\n    /**\n     * @notice Check if token is part of the synthetic offerings\n     * @param syntheticToken_ Asset to check\n     * @return true if exist\n     */\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) public view override returns (bool) {\n        return address(debtTokenOf[syntheticToken_]) != address(0);\n    }\n\n    /**\n     * @notice Quote synth  `_amountToRepay` in order to seize `totalToSeized_`\n     * @param syntheticToken_ Synth for repayment\n     * @param totalToSeize_ Collateral total amount to size\n     * @param depositToken_ Collateral's deposit token\n     * @return _amountToRepay Synth amount to burn\n     * @return _toLiquidator Seized amount to the liquidator\n     * @return _fee The fee amount to collect\n     */\n    function quoteLiquidateIn(\n        ISyntheticToken syntheticToken_,\n        uint256 totalToSeize_,\n        IDepositToken depositToken_\n    ) public view override returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee) {\n        (uint128 _liquidatorIncentive, uint128 _protocolFee) = feeProvider.liquidationFees();\n        uint256 _totalFees = _protocolFee + _liquidatorIncentive;\n        uint256 _repayAmountInCollateral = totalToSeize_;\n\n        if (_totalFees > 0) {\n            _repayAmountInCollateral = _repayAmountInCollateral.wadDiv(1e18 + _totalFees);\n        }\n\n        _amountToRepay = masterOracle().quote(\n            address(depositToken_.underlying()),\n            address(syntheticToken_),\n            _repayAmountInCollateral\n        );\n\n        if (_protocolFee > 0) {\n            _fee = _repayAmountInCollateral.wadMul(_protocolFee);\n        }\n\n        if (_liquidatorIncentive > 0) {\n            _toLiquidator = _repayAmountInCollateral.wadMul(1e18 + _liquidatorIncentive);\n        }\n    }\n\n    /**\n     * @notice Quote max allowed synth to repay\n     * @dev I.e. Considers the min amount between collateral's balance and `maxLiquidable` param\n     * @param syntheticToken_ Synth for repayment\n     * @param account_ The account to liquidate\n     * @param depositToken_ Collateral's deposit token\n     * @return _maxAmountToRepay Synth amount to burn\n     */\n    function quoteLiquidateMax(\n        ISyntheticToken syntheticToken_,\n        address account_,\n        IDepositToken depositToken_\n    ) external view override returns (uint256 _maxAmountToRepay) {\n        (bool _isHealthy, , , , ) = debtPositionOf(account_);\n        if (_isHealthy) {\n            return 0;\n        }\n\n        (uint256 _amountToRepay, , ) = quoteLiquidateIn(\n            syntheticToken_,\n            depositToken_.balanceOf(account_),\n            depositToken_\n        );\n\n        _maxAmountToRepay = debtTokenOf[syntheticToken_].balanceOf(account_).wadMul(maxLiquidable);\n\n        if (_amountToRepay < _maxAmountToRepay) {\n            _maxAmountToRepay = _amountToRepay;\n        }\n    }\n\n    /**\n     * @notice Quote collateral  `totalToSeized_` by repaying `amountToRepay_`\n     * @param syntheticToken_ Synth for repayment\n     * @param amountToRepay_ Synth amount to burn\n     * @param depositToken_ Collateral's deposit token\n     * @return _totalToSeize Collateral total amount to size\n     * @return _toLiquidator Seized amount to the liquidator\n     * @return _fee The fee amount to collect\n     */\n    function quoteLiquidateOut(\n        ISyntheticToken syntheticToken_,\n        uint256 amountToRepay_,\n        IDepositToken depositToken_\n    ) public view override returns (uint256 _totalToSeize, uint256 _toLiquidator, uint256 _fee) {\n        _toLiquidator = masterOracle().quote(\n            address(syntheticToken_),\n            address(depositToken_.underlying()),\n            amountToRepay_\n        );\n\n        (uint128 _liquidatorIncentive, uint128 _protocolFee) = feeProvider.liquidationFees();\n\n        if (_protocolFee > 0) {\n            _fee = _toLiquidator.wadMul(_protocolFee);\n        }\n        if (_liquidatorIncentive > 0) {\n            _toLiquidator += _toLiquidator.wadMul(_liquidatorIncentive);\n        }\n\n        _totalToSeize = _fee + _toLiquidator;\n    }\n\n    /**\n     * @notice Quote `_amountIn` to get `amountOut_`\n     * @param syntheticTokenIn_ Synth in\n     * @param syntheticTokenOut_ Synth out\n     * @param amountOut_ Amount out\n     * @return _amountIn Amount in\n     * @return _fee Fee to charge in `syntheticTokenOut_`\n     */\n    function quoteSwapIn(\n        ISyntheticToken syntheticTokenIn_,\n        ISyntheticToken syntheticTokenOut_,\n        uint256 amountOut_\n    ) external view override returns (uint256 _amountIn, uint256 _fee) {\n        uint256 _swapFee = feeProvider.swapFeeFor(msg.sender);\n        if (_swapFee > 0) {\n            amountOut_ = amountOut_.wadDiv(1e18 - _swapFee);\n            _fee = amountOut_.wadMul(_swapFee);\n        }\n\n        _amountIn = poolRegistry.masterOracle().quote(\n            address(syntheticTokenOut_),\n            address(syntheticTokenIn_),\n            amountOut_\n        );\n    }\n\n    /**\n     * @notice Quote `amountOut_` get from `amountIn_`\n     * @param syntheticTokenIn_ Synth in\n     * @param syntheticTokenOut_ Synth out\n     * @param amountIn_ Amount in\n     * @return _amountOut Amount out\n     * @return _fee Fee to charge in `syntheticTokenOut_`\n     */\n    function quoteSwapOut(\n        ISyntheticToken syntheticTokenIn_,\n        ISyntheticToken syntheticTokenOut_,\n        uint256 amountIn_\n    ) public view override returns (uint256 _amountOut, uint256 _fee) {\n        _amountOut = poolRegistry.masterOracle().quote(\n            address(syntheticTokenIn_),\n            address(syntheticTokenOut_),\n            amountIn_\n        );\n\n        uint256 _swapFee = feeProvider.swapFeeFor(msg.sender);\n        if (_swapFee > 0) {\n            _fee = _amountOut.wadMul(_swapFee);\n            _amountOut -= _fee;\n        }\n    }\n\n    /**\n     * @notice Leverage yield position\n     * @param tokenIn_ The token to transfer\n     * @param depositToken_ The collateral to deposit\n     * @param syntheticToken_ The msAsset to mint\n     * @param amountIn_ The amount to deposit\n     * @param leverage_ The leverage X param (e.g. 1.5e18 for 1.5X)\n     * @param depositAmountMin_ The min final deposit amount (slippage)\n     */\n    function leverage(\n        IERC20 tokenIn_,\n        IDepositToken depositToken_,\n        ISyntheticToken syntheticToken_,\n        uint256 amountIn_,\n        uint256 leverage_,\n        uint256 depositAmountMin_\n    )\n        external\n        override\n        whenNotShutdown\n        nonReentrant\n        onlyIfDepositTokenExists(depositToken_)\n        onlyIfSyntheticTokenExists(syntheticToken_)\n    {\n        if (leverage_ <= 1e18) revert LeverageTooLow();\n        if (leverage_ > uint256(1e18).wadDiv(1e18 - depositToken_.collateralFactor())) revert LeverageTooHigh();\n        ISwapper _swapper = swapper;\n\n        // 1. transfer collateral\n        IERC20 _collateral = depositToken_.underlying();\n        if (address(tokenIn_) == address(0)) tokenIn_ = _collateral;\n        uint256 _balanceBefore = _collateral.balanceOf(address(this));\n        tokenIn_.safeTransferFrom(msg.sender, address(this), amountIn_);\n        if (tokenIn_ != _collateral) {\n            tokenIn_.safeApprove(address(_swapper), 0);\n            tokenIn_.safeApprove(address(_swapper), amountIn_);\n            _swapper.swapExactInput(address(tokenIn_), address(_collateral), amountIn_, 0, address(this));\n            amountIn_ = _collateral.balanceOf(address(this)) - _balanceBefore;\n        }\n\n        // 2. mint synth\n        uint256 _debtAmount = masterOracle().quote(\n            address(_collateral),\n            address(syntheticToken_),\n            (leverage_ - 1e18).wadMul(amountIn_)\n        );\n        (uint256 _issued, ) = debtTokenOf[syntheticToken_].flashIssue(msg.sender, _debtAmount);\n\n        // 3. swap synth for collateral\n        syntheticToken_.safeApprove(address(_swapper), 0);\n        syntheticToken_.safeApprove(address(_swapper), _issued);\n        _swapper.swapExactInput(address(syntheticToken_), address(_collateral), _issued, 0, address(this));\n        uint256 _depositAmount = _collateral.balanceOf(address(this)) - _balanceBefore;\n        if (_depositAmount < depositAmountMin_) revert LeverageSlippageTooHigh();\n\n        // 4. deposit collateral\n        _collateral.safeApprove(address(depositToken_), 0);\n        _collateral.safeApprove(address(depositToken_), _depositAmount);\n        depositToken_.deposit(_depositAmount, msg.sender);\n\n        // 5. check the health of the outcome position\n        (bool _isHealthy, , , , ) = debtPositionOf(msg.sender);\n        if (!_isHealthy) revert PositionIsNotHealthy();\n    }\n\n    /**\n     * @notice Burn synthetic token, unlock deposit token and send liquidator incentive\n     * @param syntheticToken_ The msAsset to use for repayment\n     * @param account_ The account with an unhealthy position\n     * @param amountToRepay_ The amount to repay in synthetic token\n     * @param depositToken_ The collateral to seize from\n     * @return _totalSeized Total deposit amount seized from the liquidated account\n     * @return _toLiquidator Share of `_totalSeized` sent to the liquidator\n     * @return _fee Share of `_totalSeized` collected as fee\n     */\n    function liquidate(\n        ISyntheticToken syntheticToken_,\n        address account_,\n        uint256 amountToRepay_,\n        IDepositToken depositToken_\n    )\n        external\n        override\n        whenNotShutdown\n        nonReentrant\n        onlyIfSyntheticTokenExists(syntheticToken_)\n        onlyIfDepositTokenExists(depositToken_)\n        returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee)\n    {\n        if (amountToRepay_ == 0) revert AmountIsZero();\n        if (msg.sender == account_) revert CanNotLiquidateOwnPosition();\n\n        IDebtToken _debtToken = debtTokenOf[syntheticToken_];\n        _debtToken.accrueInterest();\n\n        (bool _isHealthy, , , , ) = debtPositionOf(account_);\n\n        if (_isHealthy) {\n            revert PositionIsHealthy();\n        }\n\n        uint256 _debtTokenBalance = _debtToken.balanceOf(account_);\n\n        if (amountToRepay_.wadDiv(_debtTokenBalance) > maxLiquidable) {\n            revert AmountGreaterThanMaxLiquidable();\n        }\n\n        IMasterOracle _masterOracle = masterOracle();\n\n        if (debtFloorInUsd > 0) {\n            uint256 _newDebtInUsd = _masterOracle.quoteTokenToUsd(\n                address(syntheticToken_),\n                _debtTokenBalance - amountToRepay_\n            );\n            if (_newDebtInUsd > 0 && _newDebtInUsd < debtFloorInUsd) {\n                revert RemainingDebtIsLowerThanTheFloor();\n            }\n        }\n\n        (_totalSeized, _toLiquidator, _fee) = quoteLiquidateOut(syntheticToken_, amountToRepay_, depositToken_);\n\n        if (_totalSeized > depositToken_.balanceOf(account_)) {\n            revert AmountIsTooHight();\n        }\n\n        syntheticToken_.burn(msg.sender, amountToRepay_);\n        _debtToken.burn(account_, amountToRepay_);\n        depositToken_.seize(account_, msg.sender, _toLiquidator);\n\n        if (_fee > 0) {\n            depositToken_.seize(account_, poolRegistry.feeCollector(), _fee);\n        }\n\n        emit PositionLiquidated(msg.sender, account_, syntheticToken_, amountToRepay_, _totalSeized, _fee);\n    }\n\n    /**\n     * @notice Get MasterOracle contract\n     */\n    function masterOracle() public view override returns (IMasterOracle) {\n        return poolRegistry.masterOracle();\n    }\n\n    /**\n     * @inheritdoc Pauseable\n     */\n    function paused() public view override(IPauseable, Pauseable) returns (bool) {\n        return super.paused() || poolRegistry.paused();\n    }\n\n    /**\n     * @notice Remove a debt token from the per-account list\n     * @dev This function is called from `DebtToken` when user's balance changes to `0`\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\n     * @param account_ The account address\n     */\n    function removeFromDebtTokensOfAccount(address account_) external onlyIfMsgSenderIsDebtToken {\n        if (!debtTokensOfAccount.remove(account_, msg.sender)) revert DebtTokenDoesNotExist();\n    }\n\n    /**\n     * @notice Remove a deposit token from the per-account list\n     * @dev This function is called from `DepositToken` when user's balance changes to `0`\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\n     * @param account_ The account address\n     */\n    function removeFromDepositTokensOfAccount(address account_) external onlyIfMsgSenderIsDepositToken {\n        if (!depositTokensOfAccount.remove(account_, msg.sender)) revert DepositTokenDoesNotExist();\n    }\n\n    /**\n     * @notice Swap synthetic tokens\n     * @param syntheticTokenIn_ Synthetic token to sell\n     * @param syntheticTokenOut_ Synthetic token to buy\n     * @param amountIn_ Amount to swap\n     */\n    function swap(\n        ISyntheticToken syntheticTokenIn_,\n        ISyntheticToken syntheticTokenOut_,\n        uint256 amountIn_\n    )\n        external\n        override\n        whenNotShutdown\n        nonReentrant\n        onlyIfSyntheticTokenExists(syntheticTokenIn_)\n        onlyIfSyntheticTokenExists(syntheticTokenOut_)\n        returns (uint256 _amountOut, uint256 _fee)\n    {\n        if (!isSwapActive) revert SwapFeatureIsInactive();\n        if (amountIn_ == 0 || amountIn_ > syntheticTokenIn_.balanceOf(msg.sender)) revert AmountInIsInvalid();\n\n        syntheticTokenIn_.burn(msg.sender, amountIn_);\n\n        (_amountOut, _fee) = quoteSwapOut(syntheticTokenIn_, syntheticTokenOut_, amountIn_);\n\n        if (_fee > 0) {\n            syntheticTokenOut_.mint(poolRegistry.feeCollector(), _fee);\n        }\n\n        syntheticTokenOut_.mint(msg.sender, _amountOut);\n\n        emit SyntheticTokenSwapped(msg.sender, syntheticTokenIn_, syntheticTokenOut_, amountIn_, _amountOut, _fee);\n    }\n\n    /**\n     * @notice Add debt token to offerings\n     * @dev Must keep `debtTokenOf` mapping updated\n     */\n    function addDebtToken(IDebtToken debtToken_) external onlyGovernor {\n        if (address(debtToken_) == address(0)) revert AddressIsNull();\n        ISyntheticToken _syntheticToken = debtToken_.syntheticToken();\n        if (address(_syntheticToken) == address(0)) revert SyntheticIsNull();\n        if (address(debtTokenOf[_syntheticToken]) != address(0)) revert SyntheticIsInUse();\n\n        if (!debtTokens.add(address(debtToken_))) revert DebtTokenAlreadyExists();\n\n        debtTokenOf[_syntheticToken] = debtToken_;\n\n        emit DebtTokenAdded(debtToken_);\n    }\n\n    /**\n     * @notice Add deposit token (i.e. collateral) to Synth\n     */\n    function addDepositToken(address depositToken_) external onlyGovernor {\n        if (depositToken_ == address(0)) revert AddressIsNull();\n        IERC20 _underlying = IDepositToken(depositToken_).underlying();\n        if (address(depositTokenOf[_underlying]) != address(0)) revert UnderlyingAssetInUse();\n        // Note: Fee collector collects deposit tokens as fee\n        if (depositTokens.length() >= MAX_TOKENS_PER_USER) revert ReachedMaxDepositTokens();\n\n        if (!depositTokens.add(depositToken_)) revert DepositTokenAlreadyExists();\n\n        depositTokenOf[_underlying] = IDepositToken(depositToken_);\n\n        emit DepositTokenAdded(depositToken_);\n    }\n\n    /**\n     * @notice Add a RewardsDistributor contract\n     */\n    function addRewardsDistributor(IRewardsDistributor distributor_) external onlyGovernor {\n        if (address(distributor_) == address(0)) revert AddressIsNull();\n        if (!rewardsDistributors.add(address(distributor_))) revert RewardDistributorAlreadyExists();\n        emit RewardsDistributorAdded(distributor_);\n    }\n\n    /**\n     * @notice Remove debt token from offerings\n     * @dev Must keep `debtTokenOf` mapping updated\n     */\n    function removeDebtToken(IDebtToken debtToken_) external onlyGovernor {\n        if (debtToken_.totalSupply() > 0) revert TotalSupplyIsNotZero();\n        if (!debtTokens.remove(address(debtToken_))) revert DebtTokenDoesNotExist();\n\n        delete debtTokenOf[debtToken_.syntheticToken()];\n\n        emit DebtTokenRemoved(debtToken_);\n    }\n\n    /**\n     * @notice Remove deposit token (i.e. collateral) from Synth\n     */\n    function removeDepositToken(IDepositToken depositToken_) external onlyGovernor {\n        if (depositToken_.totalSupply() > 0) revert TotalSupplyIsNotZero();\n\n        if (!depositTokens.remove(address(depositToken_))) revert DepositTokenDoesNotExist();\n        delete depositTokenOf[depositToken_.underlying()];\n\n        emit DepositTokenRemoved(depositToken_);\n    }\n\n    /**\n     * @notice Remove a RewardsDistributor contract\n     */\n    function removeRewardsDistributor(IRewardsDistributor distributor_) external onlyGovernor {\n        if (address(distributor_) == address(0)) revert AddressIsNull();\n        if (!rewardsDistributors.remove(address(distributor_))) revert RewardDistributorDoesNotExist();\n\n        emit RewardsDistributorRemoved(distributor_);\n    }\n\n    /**\n     * @notice Turn swap on/off\n     */\n    function toggleIsSwapActive() external onlyGovernor {\n        bool _newIsSwapActive = !isSwapActive;\n        emit SwapActiveUpdated(_newIsSwapActive);\n        isSwapActive = _newIsSwapActive;\n    }\n\n    /**\n     * @notice Update debt floor\n     */\n    function updateDebtFloor(uint256 newDebtFloorInUsd_) external onlyGovernor {\n        uint256 _currentDebtFloorInUsd = debtFloorInUsd;\n        if (newDebtFloorInUsd_ == _currentDebtFloorInUsd) revert NewValueIsSameAsCurrent();\n        emit DebtFloorUpdated(_currentDebtFloorInUsd, newDebtFloorInUsd_);\n        debtFloorInUsd = newDebtFloorInUsd_;\n    }\n\n    /**\n     * @notice Update maxLiquidable (liquidation cap)\n     */\n    function updateMaxLiquidable(uint256 newMaxLiquidable_) external onlyGovernor {\n        if (newMaxLiquidable_ > 1e18) revert MaxLiquidableTooHigh();\n        uint256 _currentMaxLiquidable = maxLiquidable;\n        if (newMaxLiquidable_ == _currentMaxLiquidable) revert NewValueIsSameAsCurrent();\n        emit MaxLiquidableUpdated(_currentMaxLiquidable, newMaxLiquidable_);\n        maxLiquidable = newMaxLiquidable_;\n    }\n\n    /**\n     * @notice Update treasury contract - will migrate funds to the new contract\n     */\n    function updateTreasury(ITreasury newTreasury_) external onlyGovernor {\n        if (address(newTreasury_) == address(0)) revert AddressIsNull();\n        ITreasury _currentTreasury = treasury;\n        if (newTreasury_ == _currentTreasury) revert NewValueIsSameAsCurrent();\n\n        if (address(_currentTreasury) != address(0)) {\n            _currentTreasury.migrateTo(address(newTreasury_));\n        }\n\n        emit TreasuryUpdated(_currentTreasury, newTreasury_);\n        treasury = newTreasury_;\n    }\n\n    /**\n     * @notice Update FeeProvider contract\n     */\n    function updateFeeProvider(IFeeProvider feeProvider_) external onlyGovernor {\n        if (address(feeProvider_) == address(0)) revert AddressIsNull();\n        IFeeProvider _current = feeProvider;\n        if (feeProvider_ == _current) revert NewValueIsSameAsCurrent();\n        emit FeeProviderUpdated(_current, feeProvider_);\n        feeProvider = feeProvider_;\n    }\n\n    /**\n     * @notice Update swapper contract\n     */\n    function updateSwapper(ISwapper newSwapper_) external onlyGovernor {\n        if (address(newSwapper_) == address(0)) revert AddressIsNull();\n        ISwapper _currentSwapper = swapper;\n        if (newSwapper_ == _currentSwapper) revert NewValueIsSameAsCurrent();\n\n        emit SwapperUpdated(_currentSwapper, newSwapper_);\n        swapper = newSwapper_;\n    }\n}\n"
    },
    "contracts/PoolRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./lib/WadRayMath.sol\";\nimport \"./storage/PoolRegistryStorage.sol\";\nimport \"./interfaces/IPool.sol\";\nimport \"./utils/Pauseable.sol\";\n\nerror OracleIsNull();\nerror FeeCollectorIsNull();\nerror NativeTokenGatewayIsNull();\nerror AddressIsNull();\nerror AlreadyRegistered();\nerror UnregisteredPool();\nerror NewValueIsSameAsCurrent();\n\n/**\n * @title PoolRegistry contract\n */\ncontract PoolRegistry is ReentrancyGuard, Pauseable, PoolRegistryStorageV1 {\n    using WadRayMath for uint256;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    string public constant VERSION = \"1.1.0\";\n\n    /// @notice Emitted when fee collector is updated\n    event FeeCollectorUpdated(address indexed oldFeeCollector, address indexed newFeeCollector);\n\n    /// @notice Emitted when master oracle contract is updated\n    event MasterOracleUpdated(IMasterOracle indexed oldOracle, IMasterOracle indexed newOracle);\n\n    /// @notice Emitted when native token gateway is updated\n    event NativeTokenGatewayUpdated(address indexed oldGateway, address indexed newGateway);\n\n    /// @notice Emitted when a pool is registered\n    event PoolRegistered(uint256 indexed id, address indexed pool);\n\n    /// @notice Emitted when a pool is unregistered\n    event PoolUnregistered(uint256 indexed id, address indexed pool);\n\n    function initialize(IMasterOracle masterOracle_, address feeCollector_) external initializer {\n        if (address(masterOracle_) == address(0)) revert OracleIsNull();\n        if (feeCollector_ == address(0)) revert FeeCollectorIsNull();\n\n        __ReentrancyGuard_init();\n        __Pauseable_init();\n\n        masterOracle = masterOracle_;\n        feeCollector = feeCollector_;\n\n        nextPoolId = 1;\n    }\n\n    /**\n     * @notice Get all pools\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees.\n     */\n    function getPools() external view override returns (address[] memory) {\n        return pools.values();\n    }\n\n    /**\n     * @notice Check if pool is registered\n     * @param pool_ Pool to check\n     * @return true if exists\n     */\n    function isPoolRegistered(address pool_) external view override returns (bool) {\n        return pools.contains(pool_);\n    }\n\n    /**\n     * @notice Register pool\n     */\n    function registerPool(address pool_) external override onlyGovernor {\n        if (pool_ == address(0)) revert AddressIsNull();\n        if (!pools.add(pool_)) revert AlreadyRegistered();\n        uint256 _id = idOfPool[pool_];\n        if (_id == 0) {\n            _id = nextPoolId++;\n            idOfPool[pool_] = _id;\n        }\n        emit PoolRegistered(_id, pool_);\n    }\n\n    /**\n     * @notice Unregister pool\n     */\n    function unregisterPool(address pool_) external override onlyGovernor {\n        if (!pools.remove(pool_)) revert UnregisteredPool();\n        emit PoolUnregistered(idOfPool[pool_], pool_);\n    }\n\n    /**\n     * @notice Update fee collector\n     */\n    function updateFeeCollector(address newFeeCollector_) external override onlyGovernor {\n        if (newFeeCollector_ == address(0)) revert FeeCollectorIsNull();\n        address _currentFeeCollector = feeCollector;\n        if (newFeeCollector_ == _currentFeeCollector) revert NewValueIsSameAsCurrent();\n        emit FeeCollectorUpdated(_currentFeeCollector, newFeeCollector_);\n        feeCollector = newFeeCollector_;\n    }\n\n    /**\n     * @notice Update master oracle contract\n     */\n    function updateMasterOracle(IMasterOracle newMasterOracle_) external override onlyGovernor {\n        if (address(newMasterOracle_) == address(0)) revert OracleIsNull();\n        IMasterOracle _currentMasterOracle = masterOracle;\n        if (newMasterOracle_ == _currentMasterOracle) revert NewValueIsSameAsCurrent();\n        emit MasterOracleUpdated(_currentMasterOracle, newMasterOracle_);\n        masterOracle = newMasterOracle_;\n    }\n\n    /**\n     * @notice Update native token gateway\n     */\n    function updateNativeTokenGateway(address newGateway_) external override onlyGovernor {\n        if (address(newGateway_) == address(0)) revert NativeTokenGatewayIsNull();\n        address _currentGateway = nativeTokenGateway;\n        if (newGateway_ == _currentGateway) revert NewValueIsSameAsCurrent();\n        emit NativeTokenGatewayUpdated(_currentGateway, newGateway_);\n        nativeTokenGateway = newGateway_;\n    }\n}\n"
    },
    "contracts/RewardsDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/utils/math/SafeCast.sol\";\nimport \"./dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\";\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IDebtToken.sol\";\nimport \"./interfaces/IDepositToken.sol\";\nimport \"./access/Manageable.sol\";\nimport \"./storage/RewardsDistributorStorage.sol\";\nimport \"./lib/WadRayMath.sol\";\n\nerror DistributorDoesNotExist();\nerror InvalidToken();\nerror RewardTokenIsNull();\nerror ReachedMaxRewardTokens();\nerror ArraysLengthDoNotMatch();\n\n/**\n * @title RewardsDistributor contract\n */\ncontract RewardsDistributor is ReentrancyGuard, Manageable, RewardsDistributorStorageV1 {\n    using SafeERC20 for IERC20;\n    using SafeCast for uint256;\n    using WadRayMath for uint256;\n\n    string public constant VERSION = \"1.1.0\";\n\n    /// @notice The initial index\n    uint224 public constant INITIAL_INDEX = 1e18;\n\n    /// @notice Max reward tokens to avoid DoS scenario\n    uint224 public constant MAX_REWARD_TOKENS = 20;\n\n    /// @notice Emitted when reward is claimed\n    event RewardClaimed(address indexed account, uint256 amount);\n\n    /// @notice Emitted when updating accrued token\n    event TokensAccruedUpdated(IERC20 indexed token, address indexed account, uint256 tokensDelta, uint256 supplyIndex);\n\n    /// @notice Emitted when updating token speed\n    event TokenSpeedUpdated(IERC20 indexed token, uint256 oldSpeed, uint256 newSpeed);\n\n    /// @notice Emitted when updating token index\n    event TokenIndexUpdated(uint224 newIndex, uint32 newTimestamp);\n\n    /**\n     * @dev Throws if this contract isn't registered on pool\n     */\n    modifier onlyIfDistributorExists() {\n        bool _distributorAdded = false;\n        address[] memory _rewardsDistributors = pool.getRewardsDistributors();\n        uint256 _length = _rewardsDistributors.length;\n        for (uint256 i; i < _length; ++i) {\n            if (_rewardsDistributors[i] == address(this)) {\n                _distributorAdded = true;\n                break;\n            }\n        }\n        if (!_distributorAdded) revert DistributorDoesNotExist();\n        _;\n    }\n\n    /**\n     * @dev Throws if token doesn't exist\n     * @dev Should be a DepositToken (suppliers) or DebtToken (borrowers)\n     */\n    modifier onlyIfTokenExists(address token_) {\n        IPool _pool = pool;\n        if (!_pool.doesDebtTokenExist(IDebtToken(token_)) && !_pool.doesDepositTokenExist(IDepositToken(token_))) {\n            revert InvalidToken();\n        }\n        _;\n    }\n\n    function initialize(IPool pool_, IERC20 rewardToken_) external initializer {\n        if (address(rewardToken_) == address(0)) revert RewardTokenIsNull();\n\n        __ReentrancyGuard_init();\n        __Manageable_init(pool_);\n\n        rewardToken = rewardToken_;\n    }\n\n    /**\n     * @notice Returns claimable amount consider all tokens\n     */\n    function claimable(address account_) external view override returns (uint256 _claimable) {\n        for (uint256 i; i < tokens.length; ++i) {\n            _claimable += claimable(account_, tokens[i]);\n        }\n    }\n\n    /**\n     * @notice Returns updated claimable amount for given token\n     */\n    function claimable(address account_, IERC20 token_) public view override returns (uint256 _claimable) {\n        TokenState memory _tokenState = tokenStates[token_];\n        (uint224 _newIndex, uint32 _newTimestamp) = _calculateTokenIndex(_tokenState, token_);\n        if (_newIndex > 0 && _newTimestamp > 0) {\n            _tokenState = TokenState({index: _newIndex, timestamp: _newTimestamp});\n        } else if (_newTimestamp > 0) {\n            _tokenState.timestamp = _newTimestamp;\n        }\n        (, , _claimable) = _calculateTokensAccruedOf(_tokenState, token_, account_);\n    }\n\n    /**\n     * @notice Claim tokens accrued by account in all tokens\n     */\n    function claimRewards(address account_) external override {\n        claimRewards(account_, tokens);\n    }\n\n    /**\n     * @notice Claim tokens accrued by account in the specified tokens\n     */\n    function claimRewards(address account_, IERC20[] memory tokens_) public override {\n        address[] memory _accounts = new address[](1);\n        _accounts[0] = account_;\n        claimRewards(_accounts, tokens_);\n    }\n\n    /**\n     * @notice Claim tokens accrued by the accounts in the specified tokens\n     */\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) public override nonReentrant {\n        uint256 _accountsLength = accounts_.length;\n        uint256 _tokensLength = tokens_.length;\n        for (uint256 i; i < _tokensLength; ++i) {\n            IERC20 _token = tokens_[i];\n\n            if (tokenStates[_token].index > 0) {\n                _updateTokenIndex(_token);\n                for (uint256 j; j < _accountsLength; j++) {\n                    _updateTokensAccruedOf(_token, accounts_[j]);\n                }\n            }\n        }\n\n        for (uint256 j; j < _accountsLength; j++) {\n            address _account = accounts_[j];\n            _transferRewardIfEnoughTokens(_account, tokensAccruedOf[_account]);\n        }\n    }\n\n    /**\n     * @notice Update indexes on pre-mint and pre-burn\n     * @dev Called by DepositToken and DebtToken contracts\n     * This function also may be called by anyone to update stored indexes\n     */\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external override {\n        if (tokenStates[token_].index > 0) {\n            _updateTokenIndex(token_);\n            _updateTokensAccruedOf(token_, account_);\n        }\n    }\n\n    /**\n     * @notice Update indexes on pre-transfer\n     * @dev Called by DepositToken and DebtToken contracts\n     */\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external override {\n        if (tokenStates[token_].index > 0) {\n            _updateTokenIndex(token_);\n            _updateTokensAccruedOf(token_, from_);\n            _updateTokensAccruedOf(token_, to_);\n        }\n    }\n\n    /**\n     * @notice Calculate updated token index values\n     */\n    function _calculateTokenIndex(\n        TokenState memory _supplyState,\n        IERC20 token_\n    ) private view returns (uint224 _newIndex, uint32 _newTimestamp) {\n        uint256 _speed = tokenSpeeds[token_];\n        uint256 _deltaTimestamps = block.timestamp - uint256(_supplyState.timestamp);\n        if (_deltaTimestamps > 0 && _speed > 0) {\n            uint256 _totalSupply = token_.totalSupply();\n            uint256 _tokensAccrued = _deltaTimestamps * _speed;\n            uint256 _ratio = _totalSupply > 0 ? _tokensAccrued.wadDiv(_totalSupply) : 0;\n            _newIndex = (_supplyState.index + _ratio).toUint224();\n            _newTimestamp = block.timestamp.toUint32();\n        } else if (_deltaTimestamps > 0 && _supplyState.index > 0) {\n            _newTimestamp = block.timestamp.toUint32();\n        }\n    }\n\n    /**\n     * @notice Calculate updated account index and claimable values\n     */\n    function _calculateTokensAccruedOf(\n        TokenState memory _tokenState,\n        IERC20 token_,\n        address account_\n    ) private view returns (uint256 _tokenIndex, uint256 _tokensDelta, uint256 _tokensAccruedOf) {\n        _tokenIndex = _tokenState.index;\n        uint256 _accountIndex = accountIndexOf[token_][account_];\n\n        if (_accountIndex == 0 && _tokenIndex > INITIAL_INDEX) {\n            _accountIndex = INITIAL_INDEX;\n        }\n\n        uint256 _deltaIndex = _tokenIndex - _accountIndex;\n        _tokensDelta = token_.balanceOf(account_).wadMul(_deltaIndex);\n        _tokensAccruedOf = tokensAccruedOf[account_] + _tokensDelta;\n    }\n\n    /**\n     * @notice Transfer tokens to the user\n     * @dev If there is not enough tokens, we do not perform the transfer\n     */\n    function _transferRewardIfEnoughTokens(address account_, uint256 amount_) private {\n        IERC20 _rewardToken = rewardToken;\n        uint256 _balance = _rewardToken.balanceOf(address(this));\n        if (amount_ > 0 && amount_ <= _balance) {\n            tokensAccruedOf[account_] = 0;\n            _rewardToken.safeTransfer(account_, amount_);\n            emit RewardClaimed(account_, amount_);\n        }\n    }\n\n    /**\n     * @notice Calculate tokens accrued by an account\n     */\n    function _updateTokensAccruedOf(IERC20 token_, address account_) private {\n        (uint256 _tokenIndex, uint256 _tokensDelta, uint256 _tokensAccruedOf) = _calculateTokensAccruedOf(\n            tokenStates[token_],\n            token_,\n            account_\n        );\n        accountIndexOf[token_][account_] = _tokenIndex;\n        tokensAccruedOf[account_] = _tokensAccruedOf;\n        emit TokensAccruedUpdated(token_, account_, _tokensDelta, _tokenIndex);\n    }\n\n    /**\n     * @notice Accrue reward token by updating the index\n     */\n    function _updateTokenIndex(IERC20 token_) private {\n        TokenState storage _supplyState = tokenStates[token_];\n        (uint224 _newIndex, uint32 _newTimestamp) = _calculateTokenIndex(_supplyState, token_);\n        if (_newIndex > 0 && _newTimestamp > 0) {\n            _supplyState.index = _newIndex;\n            _supplyState.timestamp = _newTimestamp;\n            emit TokenIndexUpdated(_newIndex, _newTimestamp);\n        } else if (_newTimestamp > 0) {\n            _supplyState.timestamp = _newTimestamp;\n            emit TokenIndexUpdated(_supplyState.index, _newTimestamp);\n        }\n    }\n\n    /**\n     * @notice Update the speed for token\n     */\n    function _updateTokenSpeed(\n        IERC20 token_,\n        uint256 newSpeed_\n    ) private onlyIfDistributorExists onlyIfTokenExists(address(token_)) {\n        uint256 _currentSpeed = tokenSpeeds[token_];\n        if (_currentSpeed > 0) {\n            _updateTokenIndex(token_);\n        } else if (newSpeed_ > 0) {\n            // Add token to the list\n            if (tokenStates[token_].index == 0) {\n                if (tokens.length == MAX_REWARD_TOKENS) revert ReachedMaxRewardTokens();\n                tokenStates[token_] = TokenState({index: INITIAL_INDEX, timestamp: block.timestamp.toUint32()});\n                tokens.push(token_);\n            } else {\n                // Update timestamp to ensure extra interest is not accrued during the prior period\n                tokenStates[token_].timestamp = block.timestamp.toUint32();\n            }\n        }\n\n        if (_currentSpeed != newSpeed_) {\n            tokenSpeeds[token_] = newSpeed_;\n            emit TokenSpeedUpdated(token_, _currentSpeed, newSpeed_);\n        }\n    }\n\n    /**\n     * @notice Update speed for a single deposit token\n     */\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external override onlyGovernor {\n        _updateTokenSpeed(token_, newSpeed_);\n    }\n\n    /**\n     * @notice Update token speeds\n     */\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external override onlyGovernor {\n        uint256 _tokensLength = tokens_.length;\n        if (_tokensLength != speeds_.length) revert ArraysLengthDoNotMatch();\n\n        for (uint256 i; i < _tokensLength; ++i) {\n            _updateTokenSpeed(tokens_[i], speeds_[i]);\n        }\n    }\n}\n"
    },
    "contracts/storage/DebtTokenStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IDebtToken.sol\";\n\nabstract contract DebtTokenStorageV1 is IDebtToken {\n    /**\n     * @notice The name of the token\n     */\n    string public override name;\n\n    /**\n     * @notice The symbol of the token\n     */\n    string public override symbol;\n\n    /**\n     * @notice The mapping of the users' minted tokens\n     * @dev This value changes within the mint and burn operations\n     */\n    mapping(address => uint256) internal principalOf;\n\n    /**\n     * @notice The `debtIndex` \"snapshot\" of the account's latest `principalOf` update (i.e. mint/burn)\n     */\n    mapping(address => uint256) internal debtIndexOf;\n\n    /**\n     * @notice The supply cap\n     */\n    uint256 public override maxTotalSupply;\n\n    /**\n     * @notice The total amount of minted tokens\n     */\n    uint256 internal totalSupply_;\n\n    /**\n     * @notice The timestamp when interest accrual was calculated for the last time\n     */\n    uint256 public override lastTimestampAccrued;\n\n    /**\n     * @notice Accumulator of the total earned interest rate since the beginning\n     */\n    uint256 public override debtIndex;\n\n    /**\n     * @notice Interest rate\n     * @dev Use 0.1e18 for 10% APR\n     */\n    uint256 public override interestRate;\n\n    /**\n     * @notice The Synthetic token\n     */\n    ISyntheticToken public override syntheticToken;\n\n    /**\n     * @notice If true, disables msAsset minting on this pool\n     */\n    bool public override isActive;\n\n    /**\n     * @notice The decimals of the token\n     */\n    uint8 public override decimals;\n}\n\nabstract contract DebtTokenStorageV2 is DebtTokenStorageV1 {\n    /**\n     * @notice Pending interest fee to collect\n     */\n    uint256 public pendingInterestFee;\n}\n"
    },
    "contracts/storage/DepositTokenStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IDepositToken.sol\";\n\nabstract contract DepositTokenStorageV1 is IDepositToken {\n    /**\n     * @dev The amount of tokens owned by `account`\n     */\n    mapping(address => uint256) public override balanceOf;\n\n    /**\n     * @dev The remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}\n     */\n    mapping(address => mapping(address => uint256)) public override allowance;\n\n    /**\n     * @notice The name of the token\n     */\n    string public override name;\n\n    /**\n     * @notice The symbol of the token\n     */\n    string public override symbol;\n\n    /**\n     * @dev Amount of tokens in existence\n     */\n    uint256 public override totalSupply;\n\n    /**\n     * @notice The supply cap (in USD)\n     */\n    uint256 public override maxTotalSupply;\n\n    /**\n     * @notice Collateral factor for the deposit token\n     * @dev Use 18 decimals (e.g. 0.66e18 = 66%)\n     */\n    uint256 public override collateralFactor;\n\n    /**\n     * @notice Deposit underlying asset (e.g. MET)\n     */\n    IERC20 public override underlying;\n\n    /**\n     * @notice If a collateral isn't active, it disables minting new tokens\n     */\n    bool public override isActive;\n\n    /**\n     * @notice The decimals of the token\n     */\n    uint8 public override decimals;\n}\n"
    },
    "contracts/storage/FeeProviderStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IFeeProvider.sol\";\nimport \"../interfaces/IPoolRegistry.sol\";\nimport \"../interfaces/external/IESMET.sol\";\n\nabstract contract FeeProviderStorageV1 is IFeeProvider {\n    struct Tier {\n        uint128 min; // esMET min balance needed to be eligible for `discount`\n        uint128 discount; // discount in percentage to apply. Use 18 decimals (e.g. 1e16 = 1%)\n    }\n\n    /**\n     * @notice The fee discount tiers\n     */\n    Tier[] public tiers;\n\n    /**\n     * @notice The default fee charged when swapping synthetic tokens\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public override defaultSwapFee;\n\n    /**\n     * @notice The fee charged when depositing collateral\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public override depositFee;\n\n    /**\n     * @notice The fee charged when minting a synthetic token\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public override issueFee;\n\n    /**\n     * @notice The fee charged when withdrawing collateral\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public override withdrawFee;\n\n    /**\n     * @notice The fee charged when repaying debt\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public override repayFee;\n\n    /**\n     * @notice The fees charged when liquidating a position\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    LiquidationFees public override liquidationFees;\n\n    /**\n     * @dev The Pool Registry\n     */\n    IPoolRegistry public poolRegistry;\n\n    /**\n     * @notice The esMET contract\n     */\n    IESMET public esMET;\n}\n"
    },
    "contracts/storage/PoolRegistryStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/IPoolRegistry.sol\";\nimport \"../interfaces/external/IMasterOracle.sol\";\n\nabstract contract PoolRegistryStorageV1 is IPoolRegistry {\n    /**\n     * @notice Pools collection\n     */\n    EnumerableSet.AddressSet internal pools;\n\n    /**\n     * @notice Prices' oracle\n     */\n    IMasterOracle public override masterOracle;\n\n    /**\n     * @notice Fee collector address\n     */\n    address public override feeCollector;\n\n    /**\n     * @notice Native token gateway address\n     */\n    address public override nativeTokenGateway;\n\n    /**\n     * @notice Map of the ids of the pools\n     */\n    mapping(address => uint256) public override idOfPool;\n\n    /**\n     * @notice Counter of ids of the pools\n     */\n    uint256 public override nextPoolId;\n}\n"
    },
    "contracts/storage/PoolStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\";\nimport \"../lib/MappedEnumerableSet.sol\";\nimport \"../interfaces/IPool.sol\";\n\n// solhint-disable var-name-mixedcase, max-states-count\nabstract contract PoolStorageV1 is IPool {\n    /**\n     * @notice The debt floor (in USD) for each synthetic token\n     * This parameters is used to keep incentive for liquidators (i.e. cover gas and provide enough profit)\n     */\n    uint256 public override debtFloorInUsd;\n\n    uint256 private depositFee__DEPRECATED;\n\n    uint256 private issueFee__DEPRECATED;\n\n    uint256 private withdrawFee__DEPRECATED;\n\n    uint256 private repayFee__DEPRECATED;\n\n    uint256 private swapFee__DEPRECATED;\n\n    uint256 private liquidationFees__DEPRECATED;\n\n    /**\n     * @notice The max percent of the debt allowed to liquidate\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public override maxLiquidable;\n\n    /**\n     * @notice PoolRegistry\n     */\n    IPoolRegistry public override poolRegistry;\n\n    /**\n     * @notice Swap feature on/off flag\n     */\n    bool public override isSwapActive;\n\n    /**\n     * @notice Treasury contract\n     */\n    ITreasury public override treasury;\n\n    /**\n     * @notice Represents collateral's deposits\n     */\n    EnumerableSet.AddressSet internal depositTokens;\n\n    /**\n     * @notice Get the deposit token's address from given underlying asset\n     */\n    mapping(IERC20 => IDepositToken) public override depositTokenOf;\n\n    /**\n     * @notice Available debt tokens\n     */\n    EnumerableSet.AddressSet internal debtTokens;\n\n    /**\n     * @notice Per-account deposit tokens (i.e. tokens that user has balance > 0)\n     */\n    MappedEnumerableSet.AddressSet internal depositTokensOfAccount;\n\n    /**\n     * @notice Per-account debt tokens (i.e. tokens that user has balance > 0)\n     */\n    MappedEnumerableSet.AddressSet internal debtTokensOfAccount;\n\n    /**\n     * @notice RewardsDistributor contracts\n     */\n    IRewardsDistributor[] internal rewardsDistributors__DEPRECATED;\n\n    /**\n     * @notice Get the debt token's address from given synthetic asset\n     */\n    mapping(ISyntheticToken => IDebtToken) public override debtTokenOf;\n}\n\nabstract contract PoolStorageV2 is PoolStorageV1 {\n    /**\n     * @notice Swapper contract\n     */\n    ISwapper public swapper;\n\n    /**\n     * @notice FeeProvider contract\n     */\n    IFeeProvider public override feeProvider;\n\n    /**\n     * @notice RewardsDistributor contracts\n     */\n    EnumerableSet.AddressSet internal rewardsDistributors;\n}\n"
    },
    "contracts/storage/RewardsDistributorStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IRewardsDistributor.sol\";\n\nabstract contract RewardsDistributorStorageV1 is IRewardsDistributor {\n    struct TokenState {\n        uint224 index; // The last updated index\n        uint32 timestamp; // The timestamp of the latest index update\n    }\n\n    /**\n     * @notice The token to reward\n     */\n    IERC20 public override rewardToken;\n\n    /**\n     * @notice Track tokens for reward\n     */\n    IERC20[] public override tokens;\n\n    /**\n     * @notice The amount of token distributed for each token per second\n     */\n    mapping(IERC20 => uint256) public override tokenSpeeds;\n\n    /**\n     * @notice The reward state for each token\n     */\n    mapping(IERC20 => TokenState) public override tokenStates;\n\n    /**\n     * @notice The supply index for each token for each account as of the last time they accrued token\n     */\n    mapping(IERC20 => mapping(address => uint256)) public override accountIndexOf;\n\n    /**\n     * @notice The token accrued but not yet transferred to each user\n     */\n    mapping(address => uint256) public override tokensAccruedOf;\n}\n"
    },
    "contracts/storage/SyntheticTokenStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/ISyntheticToken.sol\";\n\nabstract contract SyntheticTokenStorageV1 is ISyntheticToken {\n    /**\n     * @notice The name of the token\n     */\n    string public override name;\n\n    /**\n     * @notice The symbol of the token\n     */\n    string public override symbol;\n\n    /**\n     * @dev The amount of tokens owned by `account`\n     */\n    mapping(address => uint256) public override balanceOf;\n\n    /**\n     * @dev The remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}\n     */\n    mapping(address => mapping(address => uint256)) public override allowance;\n\n    /**\n     * @dev Amount of tokens in existence\n     */\n    uint256 public override totalSupply;\n\n    /**\n     * @notice The supply cap\n     */\n    uint256 public override maxTotalSupply;\n\n    /**\n     * @dev The Pool Registry\n     */\n    IPoolRegistry public override poolRegistry;\n\n    /**\n     * @notice If true, disables msAsset minting globally\n     */\n    bool public override isActive;\n\n    /**\n     * @notice The decimals of the token\n     */\n    uint8 public override decimals;\n}\n"
    },
    "contracts/storage/TreasuryStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/ITreasury.sol\";\n\n// solhint-disable-next-line no-empty-blocks\nabstract contract TreasuryStorageV1 is ITreasury {\n\n}\n"
    },
    "contracts/SyntheticToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/proxy/utils/Initializable.sol\";\nimport \"./interfaces/IPool.sol\";\nimport \"./interfaces/IManageable.sol\";\nimport \"./lib/WadRayMath.sol\";\nimport \"./storage/SyntheticTokenStorage.sol\";\n\nerror SenderIsNotGovernor();\nerror SenderCanNotBurn();\nerror SenderCanNotMint();\nerror SenderCanNotSeize();\nerror SyntheticIsInactive();\nerror NameIsNull();\nerror SymbolIsNull();\nerror DecimalsIsNull();\nerror PoolRegistryIsNull();\nerror DecreasedAllowanceBelowZero();\nerror AmountExceedsAllowance();\nerror ApproveFromTheZeroAddress();\nerror ApproveToTheZeroAddress();\nerror BurnFromTheZeroAddress();\nerror BurnAmountExceedsBalance();\nerror MintToTheZeroAddress();\nerror SurpassMaxSynthSupply();\nerror TransferFromTheZeroAddress();\nerror TransferToTheZeroAddress();\nerror TransferAmountExceedsBalance();\nerror NewValueIsSameAsCurrent();\n\n/**\n * @title Synthetic Token contract\n */\ncontract SyntheticToken is Initializable, SyntheticTokenStorageV1 {\n    using WadRayMath for uint256;\n\n    string public constant VERSION = \"1.1.0\";\n\n    /// @notice Emitted when active flag is updated\n    event SyntheticTokenActiveUpdated(bool newActive);\n\n    /// @notice Emitted when max total supply is updated\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupply, uint256 newMaxTotalSupply);\n\n    /**\n     * @notice Throws if caller isn't the governor\n     */\n    modifier onlyGovernor() {\n        if (msg.sender != poolRegistry.governor()) revert SenderIsNotGovernor();\n        _;\n    }\n\n    /**\n     * @dev Throws if sender can't burn\n     */\n    modifier onlyIfCanBurn() {\n        if (!_isMsgSenderPool() && !_isMsgSenderDebtToken()) revert SenderCanNotBurn();\n        _;\n    }\n\n    /**\n     * @dev Throws if sender can't mint\n     */\n    modifier onlyIfCanMint() {\n        if (!_isMsgSenderPool() && !_isMsgSenderDebtToken()) revert SenderCanNotMint();\n        _;\n    }\n\n    /**\n     * @dev Throws if sender can't seize\n     */\n    modifier onlyIfCanSeize() {\n        if (!_isMsgSenderPool() && !_isMsgSenderDebtToken()) revert SenderCanNotSeize();\n        _;\n    }\n\n    /**\n     * @dev Throws if synthetic token isn't enabled\n     */\n    modifier onlyIfSyntheticTokenIsActive() {\n        if (!isActive) revert SyntheticIsInactive();\n        _;\n    }\n\n    function initialize(\n        string calldata name_,\n        string calldata symbol_,\n        uint8 decimals_,\n        IPoolRegistry poolRegistry_\n    ) external initializer {\n        if (bytes(name_).length == 0) revert NameIsNull();\n        if (bytes(symbol_).length == 0) revert SymbolIsNull();\n        if (decimals_ == 0) revert DecimalsIsNull();\n        if (address(poolRegistry_) == address(0)) revert PoolRegistryIsNull();\n\n        poolRegistry = poolRegistry_;\n        name = name_;\n        symbol = symbol_;\n        decimals = decimals_;\n        isActive = true;\n        maxTotalSupply = type(uint256).max;\n    }\n\n    /**\n     * @notice Set `amount` as the allowance of `spender` over the caller's tokens\n     */\n    function approve(address spender_, uint256 amount_) external override returns (bool) {\n        _approve(msg.sender, spender_, amount_);\n        return true;\n    }\n\n    /**\n     * @notice Burn synthetic token\n     * @param from_ The account to burn from\n     * @param amount_ The amount to burn\n     */\n    function burn(address from_, uint256 amount_) external override onlyIfCanBurn {\n        _burn(from_, amount_);\n    }\n\n    /**\n     * @notice Atomically decrease the allowance granted to `spender` by the caller\n     */\n    function decreaseAllowance(address spender_, uint256 subtractedValue_) external returns (bool) {\n        uint256 _currentAllowance = allowance[msg.sender][spender_];\n        if (_currentAllowance < subtractedValue_) revert DecreasedAllowanceBelowZero();\n        unchecked {\n            _approve(msg.sender, spender_, _currentAllowance - subtractedValue_);\n        }\n        return true;\n    }\n\n    /**\n     * @notice Atomically increase the allowance granted to `spender` by the caller\n     */\n    function increaseAllowance(address spender_, uint256 addedValue_) external returns (bool) {\n        _approve(msg.sender, spender_, allowance[msg.sender][spender_] + addedValue_);\n        return true;\n    }\n\n    /**\n     * @notice Mint synthetic token\n     * @param to_ The account to mint to\n     * @param amount_ The amount to mint\n     */\n    function mint(address to_, uint256 amount_) external override onlyIfCanMint {\n        _mint(to_, amount_);\n    }\n\n    /**\n     * @notice Seize synthetic tokens\n     * @dev Same as _transfer\n     * @param to_ The account to seize from\n     * @param to_ The beneficiary account\n     * @param amount_ The amount to seize\n     */\n    function seize(address from_, address to_, uint256 amount_) external override onlyIfCanSeize {\n        _transfer(from_, to_, amount_);\n    }\n\n    /// @inheritdoc IERC20\n    function transfer(address recipient_, uint256 amount_) external override returns (bool) {\n        _transfer(msg.sender, recipient_, amount_);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function transferFrom(address sender_, address recipient_, uint256 amount_) external override returns (bool) {\n        uint256 _currentAllowance = allowance[sender_][msg.sender];\n        if (_currentAllowance != type(uint256).max) {\n            if (_currentAllowance < amount_) revert AmountExceedsAllowance();\n            unchecked {\n                _approve(sender_, msg.sender, _currentAllowance - amount_);\n            }\n        }\n\n        _transfer(sender_, recipient_, amount_);\n\n        return true;\n    }\n\n    /**\n     * @notice Set `amount` as the allowance of `spender` over the `owner` s tokens\n     */\n    function _approve(address owner_, address spender_, uint256 amount_) private {\n        if (owner_ == address(0)) revert ApproveFromTheZeroAddress();\n        if (spender_ == address(0)) revert ApproveToTheZeroAddress();\n\n        allowance[owner_][spender_] = amount_;\n        emit Approval(owner_, spender_, amount_);\n    }\n\n    /**\n     * @notice Destroy `amount` tokens from `account`, reducing the\n     * total supply\n     */\n    function _burn(address account_, uint256 amount_) private {\n        if (account_ == address(0)) revert BurnFromTheZeroAddress();\n\n        uint256 _currentBalance = balanceOf[account_];\n        if (_currentBalance < amount_) revert BurnAmountExceedsBalance();\n        unchecked {\n            balanceOf[account_] = _currentBalance - amount_;\n            totalSupply -= amount_;\n        }\n\n        emit Transfer(account_, address(0), amount_);\n    }\n\n    /**\n     * @notice Check if the sender is a valid DebtToken contract\n     */\n    function _isMsgSenderDebtToken() private view returns (bool) {\n        IPool _pool = IManageable(msg.sender).pool();\n\n        return\n            poolRegistry.isPoolRegistered(address(_pool)) &&\n            _pool.doesDebtTokenExist(IDebtToken(msg.sender)) &&\n            IDebtToken(msg.sender).syntheticToken() == this;\n    }\n\n    /**\n     * @notice Check if the sender is a valid Pool contract\n     */\n    function _isMsgSenderPool() private view returns (bool) {\n        return poolRegistry.isPoolRegistered(msg.sender) && IPool(msg.sender).doesSyntheticTokenExist(this);\n    }\n\n    /**\n     * @notice Create `amount` tokens and assigns them to `account`, increasing\n     * the total supply\n     */\n    function _mint(address account_, uint256 amount_) private onlyIfSyntheticTokenIsActive {\n        if (account_ == address(0)) revert MintToTheZeroAddress();\n\n        totalSupply += amount_;\n        if (totalSupply > maxTotalSupply) revert SurpassMaxSynthSupply();\n        balanceOf[account_] += amount_;\n        emit Transfer(address(0), account_, amount_);\n    }\n\n    /**\n     * @notice Move `amount` of tokens from `sender` to `recipient`\n     */\n    function _transfer(address sender_, address recipient_, uint256 amount_) private {\n        if (sender_ == address(0)) revert TransferFromTheZeroAddress();\n        if (recipient_ == address(0)) revert TransferToTheZeroAddress();\n\n        uint256 senderBalance = balanceOf[sender_];\n        if (senderBalance < amount_) revert TransferAmountExceedsBalance();\n        unchecked {\n            balanceOf[sender_] = senderBalance - amount_;\n            balanceOf[recipient_] += amount_;\n        }\n\n        emit Transfer(sender_, recipient_, amount_);\n    }\n\n    /**\n     * @notice Enable/Disable Synthetic Token\n     */\n    function toggleIsActive() external override onlyGovernor {\n        bool _newIsActive = !isActive;\n        emit SyntheticTokenActiveUpdated(_newIsActive);\n        isActive = _newIsActive;\n    }\n\n    /**\n     * @notice Update max total supply\n     * @param newMaxTotalSupply_ The new max total supply\n     */\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external override onlyGovernor {\n        uint256 _currentMaxTotalSupply = maxTotalSupply;\n        if (newMaxTotalSupply_ == _currentMaxTotalSupply) revert NewValueIsSameAsCurrent();\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupply, newMaxTotalSupply_);\n        maxTotalSupply = newMaxTotalSupply_;\n    }\n}\n"
    },
    "contracts/Treasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\";\nimport \"./access/Manageable.sol\";\nimport \"./storage/TreasuryStorage.sol\";\n\nerror SenderIsNotDepositToken();\nerror AddressIsNull();\nerror RecipientIsNull();\nerror AmountIsZero();\n\n/**\n * @title Treasury contract\n */\ncontract Treasury is ReentrancyGuard, Manageable, TreasuryStorageV1 {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IDepositToken;\n\n    string public constant VERSION = \"1.1.0\";\n\n    /**\n     * @dev Throws if caller isn't a deposit token\n     */\n    modifier onlyIfDepositToken() {\n        if (!pool.doesDepositTokenExist(IDepositToken(msg.sender))) revert SenderIsNotDepositToken();\n        _;\n    }\n\n    function initialize(IPool pool_) external initializer {\n        __ReentrancyGuard_init();\n        __Manageable_init(pool_);\n    }\n\n    /**\n     * @notice Transfer all funds to another contract\n     * @dev This function can become too expensive depending on the length of the arrays\n     * @param newTreasury_ The new treasury\n     */\n    function migrateTo(address newTreasury_) external override onlyPool {\n        if (newTreasury_ == address(0)) revert AddressIsNull();\n\n        address[] memory _depositTokens = pool.getDepositTokens();\n        uint256 _depositTokensLength = _depositTokens.length;\n\n        for (uint256 i; i < _depositTokensLength; ++i) {\n            IERC20 _underlying = IDepositToken(_depositTokens[i]).underlying();\n\n            uint256 _underlyingBalance = _underlying.balanceOf(address(this));\n\n            if (_underlyingBalance > 0) {\n                _underlying.safeTransfer(newTreasury_, _underlyingBalance);\n            }\n        }\n    }\n\n    /**\n     * @notice Pull token from the Treasury\n     * @param to_ The transfer recipient\n     * @param amount_ The transfer amount\n     */\n    function pull(address to_, uint256 amount_) external override nonReentrant onlyIfDepositToken {\n        if (to_ == address(0)) revert RecipientIsNull();\n        if (amount_ == 0) revert AmountIsZero();\n        IDepositToken(msg.sender).underlying().safeTransfer(to_, amount_);\n    }\n}\n"
    },
    "contracts/upgraders/DebtTokenUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract DebtTokenUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    /// @inheritdoc UpgraderBase\n    function _calls() internal pure override returns (bytes[] memory _callsList) {\n        _callsList = new bytes[](11);\n        _callsList[0] = abi.encodeWithSignature(\"totalSupply()\");\n        _callsList[1] = abi.encodeWithSignature(\"lastTimestampAccrued()\");\n        _callsList[2] = abi.encodeWithSignature(\"maxTotalSupply()\");\n        _callsList[3] = abi.encodeWithSignature(\"interestRate()\");\n        _callsList[4] = abi.encodeWithSignature(\"debtIndex()\");\n        _callsList[5] = abi.encodeWithSignature(\"decimals()\");\n        _callsList[6] = abi.encodeWithSignature(\"name()\");\n        _callsList[7] = abi.encodeWithSignature(\"symbol()\");\n        _callsList[8] = abi.encodeWithSignature(\"syntheticToken()\");\n        _callsList[9] = abi.encodeWithSignature(\"isActive()\");\n        _callsList[10] = abi.encodeWithSignature(\"governor()\");\n    }\n}\n"
    },
    "contracts/upgraders/DepositTokenUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract DepositTokenUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    /// @inheritdoc UpgraderBase\n    function _calls() internal pure override returns (bytes[] memory _callsList) {\n        _callsList = new bytes[](9);\n        _callsList[0] = abi.encodeWithSignature(\"name()\");\n        _callsList[1] = abi.encodeWithSignature(\"symbol()\");\n        _callsList[2] = abi.encodeWithSignature(\"decimals()\");\n        _callsList[3] = abi.encodeWithSignature(\"totalSupply()\");\n        _callsList[4] = abi.encodeWithSignature(\"maxTotalSupply()\");\n        _callsList[5] = abi.encodeWithSignature(\"collateralFactor()\");\n        _callsList[6] = abi.encodeWithSignature(\"underlying()\");\n        _callsList[7] = abi.encodeWithSignature(\"isActive()\");\n        _callsList[8] = abi.encodeWithSignature(\"governor()\");\n    }\n}\n"
    },
    "contracts/upgraders/FeeProviderUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract FeeProviderUpgrader is UpgraderBase {\n    constructor(address owner_) {\n        transferOwnership(owner_);\n    }\n\n    /// @inheritdoc UpgraderBase\n    function _calls() internal pure override returns (bytes[] memory callsList_) {\n        callsList_ = new bytes[](6);\n        callsList_[0] = abi.encodeWithSignature(\"depositFee()\");\n        callsList_[1] = abi.encodeWithSignature(\"issueFee()\");\n        callsList_[2] = abi.encodeWithSignature(\"withdrawFee()\");\n        callsList_[3] = abi.encodeWithSignature(\"repayFee()\");\n        callsList_[4] = abi.encodeWithSignature(\"liquidationFees()\");\n        callsList_[5] = abi.encodeWithSignature(\"defaultSwapFee()\");\n    }\n}\n"
    },
    "contracts/upgraders/PoolRegistryUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract PoolRegistryUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    /// @inheritdoc UpgraderBase\n    function _calls() internal pure override returns (bytes[] memory _callsList) {\n        _callsList = new bytes[](3);\n        _callsList[0] = abi.encodeWithSignature(\"masterOracle()\");\n        _callsList[1] = abi.encodeWithSignature(\"feeCollector()\");\n        _callsList[2] = abi.encodeWithSignature(\"governor()\");\n    }\n}\n"
    },
    "contracts/upgraders/PoolUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract PoolUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    /// @inheritdoc UpgraderBase\n    function _calls() internal pure virtual override returns (bytes[] memory _callsList) {\n        _callsList = new bytes[](12);\n        _callsList[0] = abi.encodeWithSignature(\"debtFloorInUsd()\");\n        _callsList[1] = abi.encodeWithSignature(\"depositFee()\");\n        _callsList[2] = abi.encodeWithSignature(\"issueFee()\");\n        _callsList[3] = abi.encodeWithSignature(\"withdrawFee()\");\n        _callsList[4] = abi.encodeWithSignature(\"repayFee()\");\n        _callsList[5] = abi.encodeWithSignature(\"liquidationFees()\");\n        _callsList[6] = abi.encodeWithSignature(\"swapFee()\");\n        _callsList[7] = abi.encodeWithSignature(\"maxLiquidable()\");\n        _callsList[8] = abi.encodeWithSignature(\"treasury()\");\n        _callsList[9] = abi.encodeWithSignature(\"poolRegistry()\");\n        _callsList[10] = abi.encodeWithSignature(\"isSwapActive()\");\n        _callsList[11] = abi.encodeWithSignature(\"governor()\");\n    }\n}\n\ncontract PoolUpgraderV2 is PoolUpgrader {\n    // solhint-disable-next-line no-empty-blocks\n    constructor(address _owner) PoolUpgrader(_owner) {}\n\n    /// @inheritdoc UpgraderBase\n    function _calls() internal pure override returns (bytes[] memory _callsList) {\n        _callsList = new bytes[](6);\n        _callsList[0] = abi.encodeWithSignature(\"debtFloorInUsd()\");\n        _callsList[1] = abi.encodeWithSignature(\"maxLiquidable()\");\n        _callsList[2] = abi.encodeWithSignature(\"treasury()\");\n        _callsList[3] = abi.encodeWithSignature(\"poolRegistry()\");\n        _callsList[4] = abi.encodeWithSignature(\"isSwapActive()\");\n        _callsList[5] = abi.encodeWithSignature(\"governor()\");\n        // TODO: Add to V3 after V2 was deployed\n        // _callsList[6] = abi.encodeWithSignature(\"swapper()\");\n    }\n}\n"
    },
    "contracts/upgraders/RewardsDistributorUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract RewardsDistributorUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    /// @inheritdoc UpgraderBase\n    function _calls() internal pure override returns (bytes[] memory _callsList) {\n        _callsList = new bytes[](2);\n        _callsList[0] = abi.encodeWithSignature(\"rewardToken()\");\n        _callsList[1] = abi.encodeWithSignature(\"governor()\");\n    }\n}\n"
    },
    "contracts/upgraders/SyntheticTokenUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract SyntheticTokenUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    /// @inheritdoc UpgraderBase\n    function _calls() internal pure override returns (bytes[] memory _callsList) {\n        _callsList = new bytes[](7);\n        _callsList[0] = abi.encodeWithSignature(\"name()\");\n        _callsList[1] = abi.encodeWithSignature(\"symbol()\");\n        _callsList[2] = abi.encodeWithSignature(\"decimals()\");\n        _callsList[3] = abi.encodeWithSignature(\"totalSupply()\");\n        _callsList[4] = abi.encodeWithSignature(\"maxTotalSupply()\");\n        _callsList[5] = abi.encodeWithSignature(\"isActive()\");\n        _callsList[6] = abi.encodeWithSignature(\"poolRegistry()\");\n    }\n}\n"
    },
    "contracts/upgraders/TreasuryUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract TreasuryUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    /// @inheritdoc UpgraderBase\n    function _calls() internal pure override returns (bytes[] memory _callsList) {\n        _callsList = new bytes[](1);\n        _callsList[0] = abi.encodeWithSignature(\"governor()\");\n    }\n}\n"
    },
    "contracts/upgraders/UpgraderBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/proxy/transparent/ProxyAdmin.sol\";\nimport \"../dependencies/openzeppelin//proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"../interfaces/external/IMulticall.sol\";\n\nerror StorageValueIsNotEqual();\n\nabstract contract UpgraderBase is ProxyAdmin {\n    // Note: `Multicall3` contract has same address for all chains\n    // solhint-disable-next-line const-name-snakecase\n    address public constant multicall = 0xcA11bde05977b3631167028862bE2a173976CA11;\n\n    /// @inheritdoc ProxyAdmin\n    function upgrade(TransparentUpgradeableProxy proxy_, address implementation_) public override onlyOwner {\n        bytes[] memory _callsList = _calls();\n        bytes[] memory _beforeResults = _aggregate(proxy_, _callsList);\n\n        proxy_.upgradeTo(implementation_);\n\n        bytes[] memory _afterResults = _aggregate(proxy_, _callsList);\n        _checkResults(_beforeResults, _afterResults);\n    }\n\n    /// @inheritdoc ProxyAdmin\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy_,\n        address implementation_,\n        bytes calldata data_\n    ) public payable override onlyOwner {\n        bytes[] memory _callsList = _calls();\n        bytes[] memory _beforeResults = _aggregate(proxy_, _callsList);\n\n        TransparentUpgradeableProxy(payable(proxy_)).upgradeToAndCall{value: msg.value}(implementation_, data_);\n\n        bytes[] memory _afterResults = _aggregate(proxy_, _callsList);\n        _checkResults(_beforeResults, _afterResults);\n    }\n\n    /**\n     * @notice Execute storage check calls using `Multicall3` contract\n     * @param proxy_ The proxy being upgraded is the target contract\n     * @param callDatas_ The array of storage calls to check\n     * @return _results The storage values\n     */\n    function _aggregate(\n        TransparentUpgradeableProxy proxy_,\n        bytes[] memory callDatas_\n    ) private returns (bytes[] memory _results) {\n        uint256 _length = callDatas_.length;\n        IMulticall.Call[] memory _callsList = new IMulticall.Call[](_length);\n        for (uint256 i; i < _length; ++i) {\n            _callsList[i].target = address(proxy_);\n            _callsList[i].callData = callDatas_[i];\n        }\n        (, _results) = IMulticall(multicall).aggregate(_callsList);\n    }\n\n    /**\n     * @notice Return list of storage calls\n     * @dev The values of those calls will be compared before and after upgrade to check storage integrity\n     */\n    function _calls() internal virtual returns (bytes[] memory _callsList);\n\n    /**\n     * @notice Compare values\n     * @dev Throws if values are inconsistent\n     */\n    function _checkResults(bytes[] memory before_, bytes[] memory after_) private pure {\n        uint256 _length = before_.length;\n        for (uint256 i; i < _length; ++i) {\n            if (keccak256(before_[i]) != keccak256(after_[i])) revert StorageValueIsNotEqual();\n        }\n    }\n}\n"
    },
    "contracts/utils/Pauseable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IPauseable.sol\";\nimport \"../access/Governable.sol\";\n\nerror IsPaused();\nerror IsShutdown();\nerror IsNotPaused();\nerror IsNotShutdown();\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n */\nabstract contract Pauseable is IPauseable, Governable {\n    /// @notice Emitted when contract is turned on\n    event Open(address indexed caller);\n\n    /// @notice Emitted when contract is paused\n    event Paused(address indexed caller);\n\n    /// @notice Emitted when contract is shuted down\n    event Shutdown(address indexed caller);\n\n    /// @notice Emitted when contract is unpaused\n    event Unpaused(address indexed caller);\n\n    bool private _paused;\n    bool private _everythingStopped;\n\n    /**\n     * @dev Throws if contract is paused\n     */\n    modifier whenNotPaused() {\n        if (paused()) revert IsPaused();\n        _;\n    }\n\n    /**\n     * @dev Throws if contract is shutdown\n     */\n    modifier whenNotShutdown() {\n        if (everythingStopped()) revert IsShutdown();\n        _;\n    }\n\n    /**\n     * @dev Throws if contract is not paused\n     */\n    modifier whenPaused() {\n        if (!paused()) revert IsNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Throws if contract is not shutdown\n     */\n    modifier whenShutdown() {\n        if (!everythingStopped()) revert IsNotShutdown();\n        _;\n    }\n\n    /**\n     * @dev If inheriting child is using proxy then child contract can use\n     * __Pauseable_init() function to initialization this contract\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __Pauseable_init() internal initializer {\n        __Governable_init();\n    }\n\n    /**\n     * @notice Return `true` if contract is shutdown\n     */\n    function everythingStopped() public view virtual returns (bool) {\n        return _everythingStopped;\n    }\n\n    /**\n     * @notice Return `true` if contract is paused\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Open contract operations, if contract is in shutdown state\n     */\n    function open() external virtual whenShutdown onlyGovernor {\n        _everythingStopped = false;\n        emit Open(msg.sender);\n    }\n\n    /**\n     * @dev Suspend deposit feature, if contract is not paused.\n     */\n    function pause() external virtual whenNotPaused onlyGovernor {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev Suspend all features (issue, repay, deposit, withdraw, liquidate and swap), if not already shutdown.\n     */\n    function shutdown() external virtual whenNotShutdown onlyGovernor {\n        _everythingStopped = true;\n        _paused = true;\n        emit Shutdown(msg.sender);\n    }\n\n    /**\n     * @dev Unpause contract operations, allow only if contract is paused and not shutdown.\n     */\n    function unpause() external virtual whenPaused whenNotShutdown onlyGovernor {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n"
    },
    "contracts/utils/TokenHolder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\";\n\nerror FallbackIsNotAllowed();\nerror ReceiveIsNotAllowed();\n\n/**\n * @title Utils contract that handles tokens sent to it\n */\nabstract contract TokenHolder {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @dev Revert fallback calls\n     */\n    fallback() external payable {\n        revert FallbackIsNotAllowed();\n    }\n\n    /**\n     * @dev Revert when receiving by default\n     */\n    receive() external payable virtual {\n        revert ReceiveIsNotAllowed();\n    }\n\n    /**\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\n     * @param token_ The token to transfer\n     * @param to_ The recipient of the transfer\n     * @param amount_ The amount to send\n     */\n    function sweep(IERC20 token_, address to_, uint256 amount_) external {\n        _requireCanSweep();\n\n        if (address(token_) == address(0)) {\n            Address.sendValue(payable(to_), amount_);\n        } else {\n            token_.safeTransfer(to_, amount_);\n        }\n    }\n\n    /**\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\n     * @dev Usually requires the owner or governor as the caller\n     */\n    function _requireCanSweep() internal view virtual;\n}\n"
    },
    "contracts/VesperGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./utils/TokenHolder.sol\";\nimport \"./interfaces/IVesperGateway.sol\";\nimport \"./interfaces/IDepositToken.sol\";\n\nerror SenderIsNotGovernor();\nerror UnregisteredPool();\n\n/**\n * @title Helper contract to easily support vTokens as collateral\n */\ncontract VesperGateway is ReentrancyGuard, TokenHolder, IVesperGateway {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IDepositToken;\n    using SafeERC20 for IVPool;\n\n    IPoolRegistry public immutable poolRegistry;\n\n    modifier onlyGovernor() {\n        if (poolRegistry.governor() != msg.sender) revert SenderIsNotGovernor();\n        _;\n    }\n\n    constructor(IPoolRegistry poolRegistry_) {\n        // Note: This contract isn't upgradable but extends `ReentrancyGuard` therefore we need to initialize it\n        __ReentrancyGuard_init();\n        poolRegistry = poolRegistry_;\n    }\n\n    /**\n     * @notice Deposit `vToken` as collateral using underlying asset.\n     * @param pool_ The Pool contract\n     * @param vToken_ The vToken to deposit\n     * @param amount_ The amount of `underlying` asset to deposit\n     */\n    function deposit(IPool pool_, IVPool vToken_, uint256 amount_) external override {\n        if (!poolRegistry.isPoolRegistered(address(pool_))) revert UnregisteredPool();\n\n        // 1. Get `underlying` asset\n        IERC20 _underlying = IERC20(vToken_.token());\n        _underlying.safeTransferFrom(msg.sender, address(this), amount_);\n\n        // 2. Deposit `underlying` to `VPool`\n        _underlying.safeApprove(address(vToken_), 0);\n        _underlying.safeApprove(address(vToken_), amount_);\n        uint256 _balanceBefore = vToken_.balanceOf(address(this));\n        vToken_.deposit(amount_);\n        uint256 _vTokenAmount = vToken_.balanceOf(address(this)) - _balanceBefore;\n\n        // 3. Deposit `VPool` to `Synth` and send `msdTokens` to the `msg.sender`\n        IDepositToken _depositToken = pool_.depositTokenOf(vToken_);\n        vToken_.safeApprove(address(_depositToken), 0);\n        vToken_.safeApprove(address(_depositToken), _vTokenAmount);\n        _depositToken.deposit(_vTokenAmount, msg.sender);\n    }\n\n    /**\n     * @notice Withdraws the `vToken` deposit of msg.sender.\n     * @param pool_ The Pool contract\n     * @param vToken_ The vToken to withdraw\n     * @param amount_ The amount of deposit tokens to withdraw and receive underlying\n     */\n    function withdraw(IPool pool_, IVPool vToken_, uint256 amount_) external override nonReentrant {\n        if (!poolRegistry.isPoolRegistered(address(pool_))) revert UnregisteredPool();\n\n        // 1. Get `msdTokens`\n        IDepositToken _depositToken = pool_.depositTokenOf(vToken_);\n        _depositToken.safeTransferFrom(msg.sender, address(this), amount_);\n\n        // 2. Withdraw `vTokens` from `Synth`\n        (uint256 _vTokenAmount, ) = _depositToken.withdraw(amount_, address(this));\n\n        // 3. Withdraw `underlying` from `VPool`\n        IERC20 _underlying = IERC20(vToken_.token());\n        uint256 _balanceBefore = _underlying.balanceOf(address(this));\n        vToken_.withdraw(_vTokenAmount);\n        uint256 _underlyingAmount = _underlying.balanceOf(address(this)) - _balanceBefore;\n\n        // 4. Transfer `underlying` to the `msg.sender`\n        _underlying.safeTransfer(msg.sender, _underlyingAmount);\n    }\n\n    /// @inheritdoc TokenHolder\n    // solhint-disable-next-line no-empty-blocks\n    function _requireCanSweep() internal view override onlyGovernor {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}