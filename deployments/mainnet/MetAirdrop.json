{
  "address": "0x293aaC1fef48b2ebf95d0CB3a31A7B219e8Ece9E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FallbackIsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewMerkleRootSameAsCurrent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProofsFileIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedGovernorIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReceiveIsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotTheProposedGovernor",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        }
      ],
      "name": "MerkleRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ESMET",
      "outputs": [
        {
          "internalType": "contract IESMET",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MET",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof_",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proofsFileHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposedGovernor_",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockPeriod_",
          "type": "uint256"
        }
      ],
      "name": "updateLockPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot_",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "proofsFileHash_",
          "type": "bytes32"
        }
      ],
      "name": "updateMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x600bedda905dac684c7efceb444fbf2989644d27476cd55afabfbb072f4c0835",
  "receipt": {
    "to": null,
    "from": "0x7EEeF54Df0596633dbf6Fa3C88dEB1E3eA85ECE8",
    "contractAddress": "0x293aaC1fef48b2ebf95d0CB3a31A7B219e8Ece9E",
    "transactionIndex": 91,
    "gasUsed": "1149109",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000800000000000000000000000000400000000000000000000000000000000000000000000000000000000020000000400000000000800000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000800000000000000000000000000000008000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000020000000000020000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd56302f1cc8d815e2c2ffb6b0b7323dd6fbe3eff6dcb0c8b14a16a66aaed2c9c",
    "transactionHash": "0x600bedda905dac684c7efceb444fbf2989644d27476cd55afabfbb072f4c0835",
    "logs": [
      {
        "transactionIndex": 91,
        "blockNumber": 18520794,
        "transactionHash": "0x600bedda905dac684c7efceb444fbf2989644d27476cd55afabfbb072f4c0835",
        "address": "0x293aaC1fef48b2ebf95d0CB3a31A7B219e8Ece9E",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007eeef54df0596633dbf6fa3c88deb1e3ea85ece8"
        ],
        "data": "0x",
        "logIndex": 230,
        "blockHash": "0xd56302f1cc8d815e2c2ffb6b0b7323dd6fbe3eff6dcb0c8b14a16a66aaed2c9c"
      }
    ],
    "blockNumber": 18520794,
    "cumulativeGasUsed": "10559146",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ceb2ee7566b740b2473ec95f0384310e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FallbackIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewMerkleRootSameAsCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofsFileIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedGovernorIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceiveIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotTheProposedGovernor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"name\":\"MerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ESMET\",\"outputs\":[{\"internalType\":\"contract IESMET\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MET\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofsFileHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedGovernor_\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockPeriod_\",\"type\":\"uint256\"}],\"name\":\"updateLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"proofsFileHash_\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(uint256,bytes32[])\":{\"details\":\"Every tree leaf is a `[account, amount]` tuple, we assume that the `msg.sender` is the account\",\"params\":{\"amount_\":\"The amount to claim\",\"proof_\":\"The merkle tree proof for the given leaf\"}},\"sweep(address,address,uint256)\":{\"params\":{\"amount_\":\"The amount to send\",\"to_\":\"The recipient of the transfer\",\"token_\":\"The token to transfer\"}},\"transferGovernorship(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"proposedGovernor_\":\"The new proposed governor\"}},\"updateLockPeriod(uint256)\":{\"params\":{\"lockPeriod_\":\"The new value\"}},\"updateMerkleRoot(bytes32,bytes32)\":{\"params\":{\"merkleRoot_\":\"The merkle root\"}}},\"title\":\"MET Airdrop contract\",\"version\":1},\"userdoc\":{\"events\":{\"MerkleRootUpdated(bytes32,uint256)\":{\"notice\":\"Emitted when the merkle root is updated\"},\"RewardClaimed(address,uint256)\":{\"notice\":\"Emitted when an account claims reward\"}},\"kind\":\"user\",\"methods\":{\"acceptGovernorship()\":{\"notice\":\"Allows new governor to accept governorship of the contract.\"},\"claim(uint256,bytes32[])\":{\"notice\":\"Claim reward\"},\"claimed(address)\":{\"notice\":\"The Accumulated amount claimed for a given account\"},\"governor()\":{\"notice\":\"The governor\"},\"lockPeriod()\":{\"notice\":\"For how long `MET` tokens will be locked\"},\"merkleRoot()\":{\"notice\":\"The merkle root for the current distribution\"},\"proofsFileHash()\":{\"notice\":\"The proofs file's IPFS hash\"},\"proposedGovernor()\":{\"notice\":\"The proposed governor\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"},\"token()\":{\"notice\":\"The token to distribute\"},\"transferGovernorship(address)\":{\"notice\":\"Transfers governorship of the contract to a new account (`proposedGovernor`).\"},\"updateLockPeriod(uint256)\":{\"notice\":\"Update esMET lock period\"},\"updateMerkleRoot(bytes32,bytes32)\":{\"notice\":\"Update merkle tree root\"},\"updatedAt()\":{\"notice\":\"The timestamp of the latest merkle root update\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetAirdrop.sol\":\"MetAirdrop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/MetAirdrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/utils/math/Math.sol\\\";\\nimport \\\"./utils/RecurringAirdrop.sol\\\";\\nimport \\\"./interfaces/external/IESMET.sol\\\";\\n\\n/**\\n * @title MET Airdrop contract\\n */\\ncontract MetAirdrop is RecurringAirdrop {\\n    using SafeERC20 for IERC20;\\n    using Math for uint256;\\n\\n    IESMET public constant ESMET = IESMET(0xA28D70795a61Dc925D4c220762A4344803876bb8);\\n    IERC20 public constant MET = IERC20(0x2Ebd53d035150f328bd754D6DC66B99B0eDB89aa);\\n\\n    /// @notice For how long `MET` tokens will be locked\\n    uint256 public lockPeriod = 7 days;\\n\\n    constructor() RecurringAirdrop(MET) {}\\n\\n    /**\\n     * @inheritdoc RecurringAirdrop\\n     * @dev Locks the `MET` into `esMET` on user's behalf.\\n     * The `lockPeriod` starts from the current merkle root update (i.e. `updatedAt`)\\n     */\\n    function _transferReward(address to_, uint256 amount_) internal override {\\n        uint256 _end = updatedAt + lockPeriod;\\n\\n        if (_end < block.timestamp) {\\n            MET.safeTransfer(to_, amount_);\\n            return;\\n        }\\n\\n        uint256 _min = ESMET.MINIMUM_LOCK_PERIOD() + 1;\\n        uint256 _max = ESMET.MAXIMUM_LOCK_PERIOD();\\n\\n        // Ensures valid lock period\\n        uint256 _remainLockPeriod = Math.min(Math.max(_end - block.timestamp, _min), _max);\\n\\n        token.safeApprove(address(ESMET), 0);\\n        token.safeApprove(address(ESMET), amount_);\\n        ESMET.lockFor(to_, amount_, _remainLockPeriod);\\n    }\\n\\n    /**\\n     * @notice Update esMET lock period\\n     * @param lockPeriod_ The new value\\n     */\\n    function updateLockPeriod(uint256 lockPeriod_) public onlyGovernor {\\n        lockPeriod = lockPeriod_;\\n    }\\n}\\n\",\"keccak256\":\"0x9b632f43e0c263ebe017998d01c4960f1a89a1a776fb10cdefa50c7e0d6a8515\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/TokenHolder.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\n\\nerror SenderIsNotGovernor();\\nerror ProposedGovernorIsNull();\\nerror SenderIsNotTheProposedGovernor();\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, TokenHolder, Initializable {\\n    /**\\n     * @notice The governor\\n     * @dev By default the contract deployer is the initial governor\\n     */\\n    address public governor;\\n\\n    /**\\n     * @notice The proposed governor\\n     * @dev It will be empty (address(0)) if there isn't a proposed governor\\n     */\\n    address public proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    constructor() {\\n        governor = msg.sender;\\n        emit UpdatedGovernor(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal onlyInitializing {\\n        governor = msg.sender;\\n        emit UpdatedGovernor(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        if (governor != msg.sender) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    /// @inheritdoc TokenHolder\\n    // solhint-disable-next-line no-empty-blocks\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    /**\\n     * @notice Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * @dev Can only be called by the current owner.\\n     * @param proposedGovernor_ The new proposed governor\\n     */\\n    function transferGovernorship(address proposedGovernor_) external onlyGovernor {\\n        if (proposedGovernor_ == address(0)) revert ProposedGovernorIsNull();\\n        proposedGovernor = proposedGovernor_;\\n    }\\n\\n    /**\\n     * @notice Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        address _proposedGovernor = proposedGovernor;\\n        if (msg.sender != _proposedGovernor) revert SenderIsNotTheProposedGovernor();\\n        emit UpdatedGovernor(governor, _proposedGovernor);\\n        governor = _proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xbe892a132fcf0794df788324b569bc3eca8dde2e66f860bdb4aa3a2483d07988\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0xeee34bfb413657b6cd6c8e1e15c2080ba5ebaac479578515922804346fb63f7c\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/external/IESMET.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IESMET is IERC20 {\\n    struct LockPosition {\\n        uint256 lockedAmount; // MET locked\\n        uint256 boostedAmount; // based on the `lockPeriod`\\n        uint256 unlockTime; // now + `lockPeriod`\\n    }\\n\\n    function positions(uint256) external view returns (LockPosition memory);\\n\\n    function MINIMUM_LOCK_PERIOD() external view returns (uint256);\\n\\n    function MAXIMUM_LOCK_PERIOD() external view returns (uint256);\\n\\n    function balanceOf(address account_) external view returns (uint256);\\n\\n    function lock(uint256 amount_, uint256 lockPeriod_) external;\\n\\n    function lockFor(address to_, uint256 amount_, uint256 lockPeriod_) external;\\n}\\n\",\"keccak256\":\"0x154743f79dd30d0665e031ea046cdbe20f544dbc69ae7c4a40ee9a5ee4846b16\",\"license\":\"MIT\"},\"contracts/utils/RecurringAirdrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"../dependencies/openzeppelin/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\nerror NothingToClaim();\\nerror InvalidProof();\\nerror NewMerkleRootSameAsCurrent();\\nerror ProofsFileIsNull();\\n\\n/**\\n * @title Generic Recurring Airdrop contract\\n */\\ncontract RecurringAirdrop is ReentrancyGuard, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The token to distribute\\n    IERC20 public immutable token;\\n\\n    /// @notice The merkle root for the current distribution\\n    bytes32 public merkleRoot;\\n\\n    /// @notice The proofs file's IPFS hash\\n    bytes32 public proofsFileHash;\\n\\n    /// @notice The timestamp of the latest merkle root update\\n    uint256 public updatedAt;\\n\\n    /// @notice The Accumulated amount claimed for a given account\\n    mapping(address => uint256) public claimed;\\n\\n    /// @notice Emitted when an account claims reward\\n    event RewardClaimed(address indexed to, uint256 amount);\\n\\n    /// @notice Emitted when the merkle root is updated\\n    event MerkleRootUpdated(bytes32 merkleRoot, uint256 createdAt);\\n\\n    constructor(IERC20 token_) {\\n        token = token_;\\n    }\\n\\n    /**\\n     * @notice Claim reward\\n     * @dev Every tree leaf is a `[account, amount]` tuple, we assume that the `msg.sender` is the account\\n     * @param amount_ The amount to claim\\n     * @param proof_ The merkle tree proof for the given leaf\\n     */\\n    function claim(uint256 amount_, bytes32[] calldata proof_) external nonReentrant {\\n        if (merkleRoot == bytes32(0)) revert NothingToClaim();\\n\\n        bytes32 _leaf = keccak256(abi.encodePacked(msg.sender, amount_));\\n        if (!MerkleProof.verify(proof_, merkleRoot, _leaf)) revert InvalidProof();\\n\\n        uint256 _claimable = amount_ - claimed[msg.sender];\\n        if (_claimable == 0) revert NothingToClaim();\\n\\n        claimed[msg.sender] += _claimable;\\n\\n        _transferReward(msg.sender, _claimable);\\n\\n        emit RewardClaimed(msg.sender, _claimable);\\n    }\\n\\n    /**\\n     * @notice Transfer reward to the user\\n     * @param to_ The claim account\\n     * @param amount_ The reward amount\\n     */\\n    function _transferReward(address to_, uint256 amount_) internal virtual {\\n        token.safeTransfer(to_, amount_);\\n    }\\n\\n    /**\\n     * @notice Update merkle tree root\\n     * @param merkleRoot_ The merkle root\\n     */\\n    function updateMerkleRoot(bytes32 merkleRoot_, bytes32 proofsFileHash_) external onlyGovernor {\\n        if (merkleRoot_ == merkleRoot) revert NewMerkleRootSameAsCurrent();\\n        if (proofsFileHash_ == bytes32(0)) revert ProofsFileIsNull();\\n\\n        merkleRoot = merkleRoot_;\\n        updatedAt = block.timestamp;\\n        proofsFileHash = proofsFileHash_;\\n\\n        emit MerkleRootUpdated(merkleRoot_, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xd15df76f17a0ffd76e6474ac47b301ab7638c4790916b1f8e3e40fbe88c55874\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nerror FallbackIsNotAllowed();\\nerror ReceiveIsNotAllowed();\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert FallbackIsNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert ReceiveIsNotAllowed();\\n    }\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param token_ The token to transfer\\n     * @param to_ The recipient of the transfer\\n     * @param amount_ The amount to send\\n     */\\n    function sweep(IERC20 token_, address to_, uint256 amount_) external {\\n        _requireCanSweep();\\n\\n        if (address(token_) == address(0)) {\\n            Address.sendValue(payable(to_), amount_);\\n        } else {\\n            token_.safeTransfer(to_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     * @dev Usually requires the owner or governor as the caller\\n     */\\n    function _requireCanSweep() internal view virtual;\\n}\\n\",\"keccak256\":\"0x50e56ed45d496b188d90494d08122fe9621d9e6c8f655679ef334447801ea50d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405262093a8060075534801561001757600080fd5b5060016000818155815462010000600160b01b0319163362010000810291909117909255604051732ebd53d035150f328bd754d6dc66b99b0edb89aa9291907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a36001600160a01b03166080526080516112926100b06000396000818161033d015281816109a901526109f201526112926000f3fe6080604052600436106100f75760003560e01c806391db7b0d1161008a578063c3249e6311610059578063c3249e63146102c1578063c884ef83146102e9578063f3b27bc314610316578063fc0c546a1461032b57610115565b806391db7b0d1461024b578063a6a13bdc1461026b578063af88790514610281578063b6aa515b146102a157610115565b806348c5d41a116100c657806348c5d41a146101cd57806362c06767146101f55780637519ab50146102155780638a11a3701461022b57610115565b80630c340a241461012e5780632eb4a7ab146101715780632f52ebb7146101955780633fd8b02f146101b757610115565b3661011557604051636436c22d60e11b815260040160405180910390fd5b60405163a0152e6360e01b815260040160405180910390fd5b34801561013a57600080fd5b50600154610154906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017d57600080fd5b5061018760035481565b604051908152602001610168565b3480156101a157600080fd5b506101b56101b0366004610ffc565b61035f565b005b3480156101c357600080fd5b5061018760075481565b3480156101d957600080fd5b5061015473a28d70795a61dc925d4c220762a4344803876bb881565b34801561020157600080fd5b506101b5610210366004611093565b610524565b34801561022157600080fd5b5061018760055481565b34801561023757600080fd5b50600254610154906001600160a01b031681565b34801561025757600080fd5b506101b56102663660046110d4565b61055d565b34801561027757600080fd5b5061018760045481565b34801561028d57600080fd5b506101b561029c3660046110ed565b610593565b3480156102ad57600080fd5b506101b56102bc36600461110f565b610653565b3480156102cd57600080fd5b50610154732ebd53d035150f328bd754d6dc66b99b0edb89aa81565b3480156102f557600080fd5b5061018761030436600461110f565b60066020526000908152604090205481565b34801561032257600080fd5b506101b56106cd565b34801561033757600080fd5b506101547f000000000000000000000000000000000000000000000000000000000000000081565b600260005414156103b75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000556003546103dc576040516312d37ee560e31b815260040160405180910390fd5b6040516bffffffffffffffffffffffff193360601b1660208201526034810184905260009060540160405160208183030381529060405280519060200120905061045d838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506003549150849050610773565b61047a576040516309bde33960e01b815260040160405180910390fd5b336000908152600660205260408120546104949086611142565b9050806104b4576040516312d37ee560e31b815260040160405180910390fd5b33600090815260066020526040812080548392906104d3908490611159565b909155506104e390503382610824565b60405181815233907f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72419060200160405180910390a250506001600055505050565b61052c610ab0565b6001600160a01b038316610549576105448282610ae3565b505050565b6105446001600160a01b0384168383610bfc565b6001546201000090046001600160a01b0316331461058e57604051634b98449160e11b815260040160405180910390fd5b600755565b6001546201000090046001600160a01b031633146105c457604051634b98449160e11b815260040160405180910390fd5b6003548214156105e7576040516349b716b760e01b815260040160405180910390fd5b80610605576040516375cad62960e11b815260040160405180910390fd5b600382905542600581905560048290556040805184815260208101929092527fecb6e184c8c1ff50ab199b30650a76b7eb56fe2f261becc6284e0a3a1707be48910160405180910390a15050565b6001546201000090046001600160a01b0316331461068457604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166106ab57604051634c267bfb60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163381146106f95760405163038cdbad60e31b815260040160405180910390fd5b6001546040516001600160a01b038084169262010000900416907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600180546001600160a01b03909216620100000262010000600160b01b0319909216919091179055600280546001600160a01b0319169055565b600081815b855181101561081757600086828151811061079557610795611171565b602002602001015190508083116107d7576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610804565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061080f81611187565b915050610778565b50831490505b9392505050565b60006007546005546108369190611159565b90504281101561085f57610544732ebd53d035150f328bd754d6dc66b99b0edb89aa8484610bfc565b600073a28d70795a61dc925d4c220762a4344803876bb86001600160a01b03166321a405896040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e691906111a2565b6108f1906001611159565b9050600073a28d70795a61dc925d4c220762a4344803876bb86001600160a01b0316637faf90576040518163ffffffff1660e01b815260040160206040518083038186803b15801561094257600080fd5b505afa158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a91906111a2565b9050600061099a61099461098e4287611142565b85610c5f565b83610c76565b90506109e56001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673a28d70795a61dc925d4c220762a4344803876bb86000610c85565b610a2d6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673a28d70795a61dc925d4c220762a4344803876bb887610c85565b6040516341f12fc560e11b81526001600160a01b0387166004820152602481018690526044810182905273a28d70795a61dc925d4c220762a4344803876bb8906383e25f8a90606401600060405180830381600087803b158015610a9057600080fd5b505af1158015610aa4573d6000803e3d6000fd5b50505050505050505050565b6001546201000090046001600160a01b03163314610ae157604051634b98449160e11b815260040160405180910390fd5b565b80471015610b335760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016103ae565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610b80576040519150601f19603f3d011682016040523d82523d6000602084013e610b85565b606091505b50509050806105445760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016103ae565b6040516001600160a01b03831660248201526044810182905261054490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610da9565b600081831015610c6f578161081d565b5090919050565b6000818310610c6f578161081d565b801580610d0e5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610cd457600080fd5b505afa158015610ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c91906111a2565b155b610d795760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016103ae565b6040516001600160a01b03831660248201526044810182905261054490849063095ea7b360e01b90606401610c28565b6000610dfe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e7b9092919063ffffffff16565b8051909150156105445780806020019051810190610e1c91906111bb565b6105445760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ae565b6060610e8a8484600085610e92565b949350505050565b606082471015610ef35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103ae565b6001600160a01b0385163b610f4a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ae565b600080866001600160a01b03168587604051610f66919061120d565b60006040518083038185875af1925050503d8060008114610fa3576040519150601f19603f3d011682016040523d82523d6000602084013e610fa8565b606091505b5091509150610fb8828286610fc3565b979650505050505050565b60608315610fd257508161081d565b825115610fe25782518084602001fd5b8160405162461bcd60e51b81526004016103ae9190611229565b60008060006040848603121561101157600080fd5b83359250602084013567ffffffffffffffff8082111561103057600080fd5b818601915086601f83011261104457600080fd5b81358181111561105357600080fd5b8760208260051b850101111561106857600080fd5b6020830194508093505050509250925092565b6001600160a01b038116811461109057600080fd5b50565b6000806000606084860312156110a857600080fd5b83356110b38161107b565b925060208401356110c38161107b565b929592945050506040919091013590565b6000602082840312156110e657600080fd5b5035919050565b6000806040838503121561110057600080fd5b50508035926020909101359150565b60006020828403121561112157600080fd5b813561081d8161107b565b634e487b7160e01b600052601160045260246000fd5b6000828210156111545761115461112c565b500390565b6000821982111561116c5761116c61112c565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982141561119b5761119b61112c565b5060010190565b6000602082840312156111b457600080fd5b5051919050565b6000602082840312156111cd57600080fd5b8151801515811461081d57600080fd5b60005b838110156111f85781810151838201526020016111e0565b83811115611207576000848401525b50505050565b6000825161121f8184602087016111dd565b9190910192915050565b60208152600082518060208401526112488160408501602087016111dd565b601f01601f1916919091016040019291505056fea26469706673582212209cf8da6b86f2a75cfd06648a72cc9c3d4c3cde4247ce2aba437b40885908ccb364736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c806391db7b0d1161008a578063c3249e6311610059578063c3249e63146102c1578063c884ef83146102e9578063f3b27bc314610316578063fc0c546a1461032b57610115565b806391db7b0d1461024b578063a6a13bdc1461026b578063af88790514610281578063b6aa515b146102a157610115565b806348c5d41a116100c657806348c5d41a146101cd57806362c06767146101f55780637519ab50146102155780638a11a3701461022b57610115565b80630c340a241461012e5780632eb4a7ab146101715780632f52ebb7146101955780633fd8b02f146101b757610115565b3661011557604051636436c22d60e11b815260040160405180910390fd5b60405163a0152e6360e01b815260040160405180910390fd5b34801561013a57600080fd5b50600154610154906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017d57600080fd5b5061018760035481565b604051908152602001610168565b3480156101a157600080fd5b506101b56101b0366004610ffc565b61035f565b005b3480156101c357600080fd5b5061018760075481565b3480156101d957600080fd5b5061015473a28d70795a61dc925d4c220762a4344803876bb881565b34801561020157600080fd5b506101b5610210366004611093565b610524565b34801561022157600080fd5b5061018760055481565b34801561023757600080fd5b50600254610154906001600160a01b031681565b34801561025757600080fd5b506101b56102663660046110d4565b61055d565b34801561027757600080fd5b5061018760045481565b34801561028d57600080fd5b506101b561029c3660046110ed565b610593565b3480156102ad57600080fd5b506101b56102bc36600461110f565b610653565b3480156102cd57600080fd5b50610154732ebd53d035150f328bd754d6dc66b99b0edb89aa81565b3480156102f557600080fd5b5061018761030436600461110f565b60066020526000908152604090205481565b34801561032257600080fd5b506101b56106cd565b34801561033757600080fd5b506101547f000000000000000000000000000000000000000000000000000000000000000081565b600260005414156103b75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000556003546103dc576040516312d37ee560e31b815260040160405180910390fd5b6040516bffffffffffffffffffffffff193360601b1660208201526034810184905260009060540160405160208183030381529060405280519060200120905061045d838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506003549150849050610773565b61047a576040516309bde33960e01b815260040160405180910390fd5b336000908152600660205260408120546104949086611142565b9050806104b4576040516312d37ee560e31b815260040160405180910390fd5b33600090815260066020526040812080548392906104d3908490611159565b909155506104e390503382610824565b60405181815233907f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72419060200160405180910390a250506001600055505050565b61052c610ab0565b6001600160a01b038316610549576105448282610ae3565b505050565b6105446001600160a01b0384168383610bfc565b6001546201000090046001600160a01b0316331461058e57604051634b98449160e11b815260040160405180910390fd5b600755565b6001546201000090046001600160a01b031633146105c457604051634b98449160e11b815260040160405180910390fd5b6003548214156105e7576040516349b716b760e01b815260040160405180910390fd5b80610605576040516375cad62960e11b815260040160405180910390fd5b600382905542600581905560048290556040805184815260208101929092527fecb6e184c8c1ff50ab199b30650a76b7eb56fe2f261becc6284e0a3a1707be48910160405180910390a15050565b6001546201000090046001600160a01b0316331461068457604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166106ab57604051634c267bfb60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163381146106f95760405163038cdbad60e31b815260040160405180910390fd5b6001546040516001600160a01b038084169262010000900416907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600180546001600160a01b03909216620100000262010000600160b01b0319909216919091179055600280546001600160a01b0319169055565b600081815b855181101561081757600086828151811061079557610795611171565b602002602001015190508083116107d7576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610804565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061080f81611187565b915050610778565b50831490505b9392505050565b60006007546005546108369190611159565b90504281101561085f57610544732ebd53d035150f328bd754d6dc66b99b0edb89aa8484610bfc565b600073a28d70795a61dc925d4c220762a4344803876bb86001600160a01b03166321a405896040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ae57600080fd5b505afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e691906111a2565b6108f1906001611159565b9050600073a28d70795a61dc925d4c220762a4344803876bb86001600160a01b0316637faf90576040518163ffffffff1660e01b815260040160206040518083038186803b15801561094257600080fd5b505afa158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a91906111a2565b9050600061099a61099461098e4287611142565b85610c5f565b83610c76565b90506109e56001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673a28d70795a61dc925d4c220762a4344803876bb86000610c85565b610a2d6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673a28d70795a61dc925d4c220762a4344803876bb887610c85565b6040516341f12fc560e11b81526001600160a01b0387166004820152602481018690526044810182905273a28d70795a61dc925d4c220762a4344803876bb8906383e25f8a90606401600060405180830381600087803b158015610a9057600080fd5b505af1158015610aa4573d6000803e3d6000fd5b50505050505050505050565b6001546201000090046001600160a01b03163314610ae157604051634b98449160e11b815260040160405180910390fd5b565b80471015610b335760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016103ae565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610b80576040519150601f19603f3d011682016040523d82523d6000602084013e610b85565b606091505b50509050806105445760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016103ae565b6040516001600160a01b03831660248201526044810182905261054490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610da9565b600081831015610c6f578161081d565b5090919050565b6000818310610c6f578161081d565b801580610d0e5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610cd457600080fd5b505afa158015610ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c91906111a2565b155b610d795760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016103ae565b6040516001600160a01b03831660248201526044810182905261054490849063095ea7b360e01b90606401610c28565b6000610dfe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e7b9092919063ffffffff16565b8051909150156105445780806020019051810190610e1c91906111bb565b6105445760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ae565b6060610e8a8484600085610e92565b949350505050565b606082471015610ef35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103ae565b6001600160a01b0385163b610f4a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ae565b600080866001600160a01b03168587604051610f66919061120d565b60006040518083038185875af1925050503d8060008114610fa3576040519150601f19603f3d011682016040523d82523d6000602084013e610fa8565b606091505b5091509150610fb8828286610fc3565b979650505050505050565b60608315610fd257508161081d565b825115610fe25782518084602001fd5b8160405162461bcd60e51b81526004016103ae9190611229565b60008060006040848603121561101157600080fd5b83359250602084013567ffffffffffffffff8082111561103057600080fd5b818601915086601f83011261104457600080fd5b81358181111561105357600080fd5b8760208260051b850101111561106857600080fd5b6020830194508093505050509250925092565b6001600160a01b038116811461109057600080fd5b50565b6000806000606084860312156110a857600080fd5b83356110b38161107b565b925060208401356110c38161107b565b929592945050506040919091013590565b6000602082840312156110e657600080fd5b5035919050565b6000806040838503121561110057600080fd5b50508035926020909101359150565b60006020828403121561112157600080fd5b813561081d8161107b565b634e487b7160e01b600052601160045260246000fd5b6000828210156111545761115461112c565b500390565b6000821982111561116c5761116c61112c565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982141561119b5761119b61112c565b5060010190565b6000602082840312156111b457600080fd5b5051919050565b6000602082840312156111cd57600080fd5b8151801515811461081d57600080fd5b60005b838110156111f85781810151838201526020016111e0565b83811115611207576000848401525b50505050565b6000825161121f8184602087016111dd565b9190910192915050565b60208152600082518060208401526112488160408501602087016111dd565b601f01601f1916919091016040019291505056fea26469706673582212209cf8da6b86f2a75cfd06648a72cc9c3d4c3cde4247ce2aba437b40885908ccb364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(uint256,bytes32[])": {
        "details": "Every tree leaf is a `[account, amount]` tuple, we assume that the `msg.sender` is the account",
        "params": {
          "amount_": "The amount to claim",
          "proof_": "The merkle tree proof for the given leaf"
        }
      },
      "sweep(address,address,uint256)": {
        "params": {
          "amount_": "The amount to send",
          "to_": "The recipient of the transfer",
          "token_": "The token to transfer"
        }
      },
      "transferGovernorship(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "proposedGovernor_": "The new proposed governor"
        }
      },
      "updateLockPeriod(uint256)": {
        "params": {
          "lockPeriod_": "The new value"
        }
      },
      "updateMerkleRoot(bytes32,bytes32)": {
        "params": {
          "merkleRoot_": "The merkle root"
        }
      }
    },
    "title": "MET Airdrop contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MerkleRootUpdated(bytes32,uint256)": {
        "notice": "Emitted when the merkle root is updated"
      },
      "RewardClaimed(address,uint256)": {
        "notice": "Emitted when an account claims reward"
      }
    },
    "kind": "user",
    "methods": {
      "acceptGovernorship()": {
        "notice": "Allows new governor to accept governorship of the contract."
      },
      "claim(uint256,bytes32[])": {
        "notice": "Claim reward"
      },
      "claimed(address)": {
        "notice": "The Accumulated amount claimed for a given account"
      },
      "governor()": {
        "notice": "The governor"
      },
      "lockPeriod()": {
        "notice": "For how long `MET` tokens will be locked"
      },
      "merkleRoot()": {
        "notice": "The merkle root for the current distribution"
      },
      "proofsFileHash()": {
        "notice": "The proofs file's IPFS hash"
      },
      "proposedGovernor()": {
        "notice": "The proposed governor"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      },
      "token()": {
        "notice": "The token to distribute"
      },
      "transferGovernorship(address)": {
        "notice": "Transfers governorship of the contract to a new account (`proposedGovernor`)."
      },
      "updateLockPeriod(uint256)": {
        "notice": "Update esMET lock period"
      },
      "updateMerkleRoot(bytes32,bytes32)": {
        "notice": "Update merkle tree root"
      },
      "updatedAt()": {
        "notice": "The timestamp of the latest merkle root update"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18353,
        "contract": "contracts/MetAirdrop.sol:MetAirdrop",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 17018,
        "contract": "contracts/MetAirdrop.sol:MetAirdrop",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 17021,
        "contract": "contracts/MetAirdrop.sol:MetAirdrop",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 13894,
        "contract": "contracts/MetAirdrop.sol:MetAirdrop",
        "label": "governor",
        "offset": 2,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13897,
        "contract": "contracts/MetAirdrop.sol:MetAirdrop",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 25381,
        "contract": "contracts/MetAirdrop.sol:MetAirdrop",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 25384,
        "contract": "contracts/MetAirdrop.sol:MetAirdrop",
        "label": "proofsFileHash",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 25387,
        "contract": "contracts/MetAirdrop.sol:MetAirdrop",
        "label": "updatedAt",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 25392,
        "contract": "contracts/MetAirdrop.sol:MetAirdrop",
        "label": "claimed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5602,
        "contract": "contracts/MetAirdrop.sol:MetAirdrop",
        "label": "lockPeriod",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}