{
  "address": "0x2A00Cf0e99DE1198736EF5B9650873216005650d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressIsNull",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LZ_ADAPTER_PARAMS_VERSION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PT_SEND_AND_CALL",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SG_TYPE_SWAP_REMOTE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId_",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "dstChainId_",
          "type": "uint16"
        }
      ],
      "name": "getFlashRepaySwapAndCallbackLzArgs",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_lzArgs",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId_",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "dstChainId_",
          "type": "uint16"
        }
      ],
      "name": "getLeverageSwapAndCallbackLzArgs",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "_lzArgs",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "poolRegistry_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRegistry",
      "outputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProxyOFT",
          "name": "proxyOFT_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "lzArgs_",
          "type": "bytes"
        }
      ],
      "name": "quoteCrossChainFlashRepayNativeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_nativeFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IProxyOFT",
          "name": "proxyOFT_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "lzArgs_",
          "type": "bytes"
        }
      ],
      "name": "quoteCrossChainLeverageNativeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_nativeFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId_",
          "type": "uint16"
        }
      ],
      "name": "quoteFlashRepayCallbackNativeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_callbackTxNativeFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId_",
          "type": "uint16"
        }
      ],
      "name": "quoteLeverageCallbackNativeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_callbackTxNativeFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d735386075ffd64c26aea352c91d6b285ac9a10e05dfa89451ef9955016c2a5",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x2A00Cf0e99DE1198736EF5B9650873216005650d",
    "transactionIndex": 6,
    "gasUsed": "1286218",
    "logsBloom": "0x
    "blockHash": "0x758d596142642e0981161904938d36227181f1feaf59b062bb89f71ac87eb809",
    "transactionHash": "0x1d735386075ffd64c26aea352c91d6b285ac9a10e05dfa89451ef9955016c2a5",
    "logs": [],
    "blockNumber": 18314503,
    "cumulativeGasUsed": "1934068",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "545cb6254fd08cfae8ffa56eab2faa67",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressIsNull\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LZ_ADAPTER_PARAMS_VERSION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT_SEND_AND_CALL\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SG_TYPE_SWAP_REMOTE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId_\",\"type\":\"uint16\"}],\"name\":\"getFlashRepaySwapAndCallbackLzArgs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_lzArgs\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId_\",\"type\":\"uint16\"}],\"name\":\"getLeverageSwapAndCallbackLzArgs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_lzArgs\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"poolRegistry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProxyOFT\",\"name\":\"proxyOFT_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"lzArgs_\",\"type\":\"bytes\"}],\"name\":\"quoteCrossChainFlashRepayNativeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_nativeFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProxyOFT\",\"name\":\"proxyOFT_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"lzArgs_\",\"type\":\"bytes\"}],\"name\":\"quoteCrossChainLeverageNativeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_nativeFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"}],\"name\":\"quoteFlashRepayCallbackNativeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_callbackTxNativeFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"}],\"name\":\"quoteLeverageCallbackNativeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_callbackTxNativeFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getFlashRepaySwapAndCallbackLzArgs(uint16,uint16)\":{\"details\":\"Must be called on the chain where the swap will be executed (a.k.a. destination chain)\",\"params\":{\"dstChainId_\":\"Destination chain's LZ id (i.e. chain used for swap)\",\"srcChainId_\":\"Source chain's LZ id (i.e. user-facing chain)\"}},\"getLeverageSwapAndCallbackLzArgs(uint16,uint16)\":{\"details\":\"Must be called on the chain where the swap will be executed (a.k.a. destination chain)\",\"params\":{\"dstChainId_\":\"Destination chain's LZ id (i.e. chain used for swap)\",\"srcChainId_\":\"Source chain's LZ id (i.e. user-facing chain)\"}},\"quoteCrossChainFlashRepayNativeFee(address,bytes)\":{\"params\":{\"lzArgs_\":\"The LZ args for swap transaction (See: `getFlashRepaySwapAndCallbackLzArgs()`)\",\"proxyOFT_\":\"The synthetic token's Proxy OFT contract\"},\"returns\":{\"_nativeFee\":\"The fee in native coin\"}},\"quoteCrossChainLeverageNativeFee(address,bytes)\":{\"params\":{\"lzArgs_\":\"The LZ args for swap transaction (See: `getLeverageSwapAndCallbackLzArgs()`)\",\"proxyOFT_\":\"The synthetic token's Proxy OFT contract\"},\"returns\":{\"_nativeFee\":\"The fee in native coin\"}},\"quoteFlashRepayCallbackNativeFee(uint16)\":{\"params\":{\"srcChainId_\":\"Source chain's LZ id (i.e. user-facing chain)\"},\"returns\":{\"_callbackTxNativeFee\":\"The fee in native coin\"}},\"quoteLeverageCallbackNativeFee(uint16)\":{\"params\":{\"srcChainId_\":\"Source chain's LZ id (i.e. user-facing chain)\"},\"returns\":{\"_callbackTxNativeFee\":\"The fee in native coin\"}}},\"stateVariables\":{\"LZ_ADAPTER_PARAMS_VERSION\":{\"details\":\"LayerZero adapter param version See more: https://layerzero.gitbook.io/docs/evm-guides/advanced/relayer-adapter-parameters\"},\"PT_SEND_AND_CALL\":{\"details\":\"OFT packet type\"},\"SG_TYPE_SWAP_REMOTE\":{\"details\":\"Stargate swap function type See more: https://stargateprotocol.gitbook.io/stargate/developers/function-types\"}},\"title\":\"Quoter contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getFlashRepaySwapAndCallbackLzArgs(uint16,uint16)\":{\"notice\":\"Get LZ args for the swap and callback's trigger execution\"},\"getLeverageSwapAndCallbackLzArgs(uint16,uint16)\":{\"notice\":\"Get LZ args for the swap and callback's trigger execution\"},\"poolRegistry()\":{\"notice\":\"The pool registry contract\"},\"quoteCrossChainFlashRepayNativeFee(address,bytes)\":{\"notice\":\"Get the LZ (native) fee for the `triggerFlashRepay()` call\"},\"quoteCrossChainLeverageNativeFee(address,bytes)\":{\"notice\":\"Get the LZ (native) fee for the `triggerLeverageSwap()` call\"},\"quoteFlashRepayCallbackNativeFee(uint16)\":{\"notice\":\"Get the LZ (native) fee for the `crossChainFlashRepayCallback()` call\"},\"quoteLeverageCallbackNativeFee(uint16)\":{\"notice\":\"Get the LZ (native) fee for the `crossChainLeverageCallback()` call\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Quoter.sol\":\"Quoter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Quoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./storage/QuoterStorage.sol\\\";\\nimport \\\"./interfaces/external/IStargateBridge.sol\\\";\\nimport \\\"./lib/CrossChainLib.sol\\\";\\n\\nerror AddressIsNull();\\nerror NotAvailableOnThisChain();\\n\\n/**\\n * @title Quoter contract\\n */\\ncontract Quoter is Initializable, QuoterStorageV1 {\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    /**\\n     * @dev LayerZero adapter param version\\n     * See more: https://layerzero.gitbook.io/docs/evm-guides/advanced/relayer-adapter-parameters\\n     */\\n    uint16 public constant LZ_ADAPTER_PARAMS_VERSION = 2;\\n\\n    /**\\n     * @dev Stargate swap function type\\n     * See more: https://stargateprotocol.gitbook.io/stargate/developers/function-types\\n     */\\n    uint8 public constant SG_TYPE_SWAP_REMOTE = 1;\\n\\n    /**\\n     * @dev OFT packet type\\n     */\\n    uint16 public constant PT_SEND_AND_CALL = 1;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(IPoolRegistry poolRegistry_) external initializer {\\n        if (address(poolRegistry_) == address(0)) revert AddressIsNull();\\n        poolRegistry = poolRegistry_;\\n    }\\n\\n    /**\\n     * @notice Get LZ args for the swap and callback's trigger execution\\n     * @dev Must be called on the chain where the swap will be executed (a.k.a. destination chain)\\n     * @param srcChainId_ Source chain's LZ id (i.e. user-facing chain)\\n     * @param dstChainId_ Destination chain's LZ id (i.e. chain used for swap)\\n     */\\n    function getFlashRepaySwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory _lzArgs) {\\n        return\\n            CrossChainLib.encodeLzArgs({\\n                dstChainId_: dstChainId_,\\n                callbackNativeFee_: quoteFlashRepayCallbackNativeFee(srcChainId_),\\n                swapTxGasLimit_: _getCrossChainDispatcher().flashRepaySwapTxGasLimit()\\n            });\\n    }\\n\\n    /**\\n     * @notice Get LZ args for the swap and callback's trigger execution\\n     * @dev Must be called on the chain where the swap will be executed (a.k.a. destination chain)\\n     * @param srcChainId_ Source chain's LZ id (i.e. user-facing chain)\\n     * @param dstChainId_ Destination chain's LZ id (i.e. chain used for swap)\\n     */\\n    function getLeverageSwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory _lzArgs) {\\n        return\\n            CrossChainLib.encodeLzArgs({\\n                dstChainId_: dstChainId_,\\n                callbackNativeFee_: quoteLeverageCallbackNativeFee(srcChainId_),\\n                swapTxGasLimit_: _getCrossChainDispatcher().leverageSwapTxGasLimit()\\n            });\\n    }\\n\\n    /**\\n     * @notice Get the LZ (native) fee for the `crossChainLeverageCallback()` call\\n     * @param srcChainId_ Source chain's LZ id (i.e. user-facing chain)\\n     * @return _callbackTxNativeFee The fee in native coin\\n     */\\n    function quoteLeverageCallbackNativeFee(uint16 srcChainId_) public view returns (uint256 _callbackTxNativeFee) {\\n        ICrossChainDispatcher _crossChainDispatcher = _getCrossChainDispatcher();\\n        (_callbackTxNativeFee, ) = _crossChainDispatcher.stargateComposer().quoteLayerZeroFee({\\n            _dstChainId: srcChainId_,\\n            _functionType: SG_TYPE_SWAP_REMOTE,\\n            _toAddress: abi.encodePacked(address(type(uint160).max)),\\n            _transferAndCallPayload: CrossChainLib.encodeLeverageCallbackPayload(\\n                address(type(uint160).max),\\n                type(uint256).max\\n            ),\\n            _lzTxParams: IStargateRouter.lzTxObj({\\n                dstGasForCall: _crossChainDispatcher.leverageCallbackTxGasLimit(),\\n                dstNativeAmount: 0,\\n                dstNativeAddr: \\\"\\\"\\n            })\\n        });\\n    }\\n\\n    /**\\n     * @notice Get the LZ (native) fee for the `crossChainFlashRepayCallback()` call\\n     * @param srcChainId_ Source chain's LZ id (i.e. user-facing chain)\\n     * @return _callbackTxNativeFee The fee in native coin\\n     */\\n    function quoteFlashRepayCallbackNativeFee(uint16 srcChainId_) public view returns (uint256 _callbackTxNativeFee) {\\n        ICrossChainDispatcher _crossChainDispatcher = _getCrossChainDispatcher();\\n        uint64 _callbackTxGasLimit = _crossChainDispatcher.flashRepayCallbackTxGasLimit();\\n\\n        bytes memory _lzPayload = abi.encode(\\n            PT_SEND_AND_CALL,\\n            abi.encodePacked(msg.sender),\\n            abi.encodePacked(address(type(uint160).max)),\\n            type(uint256).max,\\n            CrossChainLib.encodeFlashRepayCallbackPayload(\\n                address(type(uint160).max),\\n                address(type(uint160).max),\\n                type(uint256).max\\n            ),\\n            _callbackTxGasLimit\\n        );\\n\\n        (_callbackTxNativeFee, ) = IStargateBridge(_crossChainDispatcher.stargateComposer().stargateBridge())\\n            .layerZeroEndpoint()\\n            .estimateFees(\\n                srcChainId_,\\n                address(this),\\n                _lzPayload,\\n                false,\\n                abi.encodePacked(\\n                    LZ_ADAPTER_PARAMS_VERSION,\\n                    uint256(_crossChainDispatcher.lzBaseGasLimit() + _callbackTxGasLimit),\\n                    uint256(0),\\n                    address(0)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Get the LZ (native) fee for the `triggerFlashRepay()` call\\n     * @param proxyOFT_ The synthetic token's Proxy OFT contract\\n     * @param lzArgs_ The LZ args for swap transaction (See: `getFlashRepaySwapAndCallbackLzArgs()`)\\n     * @return _nativeFee The fee in native coin\\n     */\\n    function quoteCrossChainFlashRepayNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee) {\\n        (uint16 _dstChainId, uint256 _callbackTxNativeFee, uint64 _swapTxGasLimit_) = CrossChainLib.decodeLzArgs(\\n            lzArgs_\\n        );\\n\\n        bytes memory _dstProxyOFT = abi.encodePacked(proxyOFT_.getProxyOFTOf(_dstChainId));\\n\\n        (_nativeFee, ) = _getCrossChainDispatcher().stargateComposer().quoteLayerZeroFee({\\n            _dstChainId: _dstChainId,\\n            _functionType: SG_TYPE_SWAP_REMOTE,\\n            _toAddress: _dstProxyOFT,\\n            _transferAndCallPayload: CrossChainLib.encodeFlashRepaySwapPayload(\\n                address(type(uint160).max),\\n                address(type(uint160).max),\\n                type(uint256).max,\\n                address(type(uint160).max),\\n                type(uint256).max\\n            ),\\n            _lzTxParams: IStargateRouter.lzTxObj({\\n                dstGasForCall: _swapTxGasLimit_,\\n                dstNativeAmount: _callbackTxNativeFee,\\n                dstNativeAddr: _dstProxyOFT\\n            })\\n        });\\n    }\\n\\n    /**\\n     * @notice Get the LZ (native) fee for the `triggerLeverageSwap()` call\\n     * @param proxyOFT_ The synthetic token's Proxy OFT contract\\n     * @param lzArgs_ The LZ args for swap transaction (See: `getLeverageSwapAndCallbackLzArgs()`)\\n     * @return _nativeFee The fee in native coin\\n     */\\n    function quoteCrossChainLeverageNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) public view returns (uint256 _nativeFee) {\\n        uint16 _dstChainId;\\n        address _dstProxyOFT;\\n        bytes memory _payload;\\n        bytes memory _adapterParams;\\n        uint64 _swapTxGasLimit;\\n        {\\n            _payload = CrossChainLib.encodeLeverageSwapPayload(\\n                address(type(uint160).max),\\n                address(type(uint160).max),\\n                type(uint256).max,\\n                type(uint256).max,\\n                address(type(uint160).max),\\n                type(uint256).max\\n            );\\n\\n            uint256 _callbackTxNativeFee;\\n            (_dstChainId, _callbackTxNativeFee, _swapTxGasLimit) = CrossChainLib.decodeLzArgs(lzArgs_);\\n\\n            _dstProxyOFT = proxyOFT_.getProxyOFTOf(_dstChainId);\\n\\n            _adapterParams = abi.encodePacked(\\n                LZ_ADAPTER_PARAMS_VERSION,\\n                uint256(_getCrossChainDispatcher().lzBaseGasLimit() + _swapTxGasLimit),\\n                _callbackTxNativeFee,\\n                _dstProxyOFT\\n            );\\n        }\\n\\n        (_nativeFee, ) = proxyOFT_.estimateSendAndCallFee({\\n            _dstChainId: _dstChainId,\\n            _toAddress: abi.encodePacked(_dstProxyOFT),\\n            _amount: type(uint256).max,\\n            _payload: _payload,\\n            _dstGasForCall: _swapTxGasLimit,\\n            _useZro: false,\\n            _adapterParams: _adapterParams\\n        });\\n    }\\n\\n    function _getCrossChainDispatcher() private view returns (ICrossChainDispatcher) {\\n        return poolRegistry.crossChainDispatcher();\\n    }\\n}\\n\",\"keccak256\":\"0x1fd8bf74cba56c3f21ae17c6f05161b49394fe623f9c438da49f25518ca54631\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/IOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../../../../openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCoreUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"keccak256\":\"0x22651924296f8308db8195d7a86a6781023241c53905418f2d3925e3f693f530\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../IOFTCoreUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the composable OFT core standard\\n */\\ninterface IComposableOFTCoreUpgradeable is IOFTCoreUpgradeable {\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function retryOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n\\n    event CallOFTReceivedFailure(\\n        uint16 indexed _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _from,\\n        address indexed _to,\\n        uint _amount,\\n        bytes _payload,\\n        bytes _reason\\n    );\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event RetryOFTReceivedSuccess(bytes32 _messageHash);\\n\\n    event NonContractAddress(address _address);\\n}\\n\",\"keccak256\":\"0x769b9356ad6019bdabdcfc11762f28d15eb9a4e262efc96835725f6862c5d9e9\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverUpgradeable {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x287036c704c57e34a6fc3f7e67c8dfaaade6eb3667b570576bc491c0f1f89a5b\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xa652155069d84b9f0c3e4bca7d145acc7c6cedb33ef48c873202acda27b92553\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xe3e50134e39aa3c0f916447d36367970c6e4df972d488b794227e0b052ce80d5\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStargateRouter.sol\\\";\\n\\ninterface IStargateComposer {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function factory() external view returns (address);\\n\\n    function stargateBridge() external view returns (address);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function peers(uint16 _chainId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdfdd1690bf176ac05803534a60227be90cc435b4bdd8fce2348f1a9417a9f63a\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe4d6bf9fa422e5e43dc1b6880f951d06611a4ed12c2dd7dd8c0b6a5d9e06ad0d\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function clearCachedSwap(uint16 _srcChainId, bytes calldata _srcAddress, uint256 _nonce) external;\\n\\n    function factory() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function cachedSwapLookup(\\n        uint16 _chainId_,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (address token, uint256 amountLD, address to, bytes memory payload);\\n}\\n\",\"keccak256\":\"0x92126df8e682b2c5647c7b22e7387da69f9e72480af86948ce5ed17dc2c9e0a7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICrossChainDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateRouter.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface ICrossChainDispatcher is IStargateReceiver, IOFTReceiverUpgradeable {\\n    function crossChainDispatcherOf(uint16 chainId_) external view returns (address);\\n\\n    function triggerFlashRepaySwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function triggerLeverageSwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function isBridgingActive() external view returns (bool);\\n\\n    function flashRepayCallbackTxGasLimit() external view returns (uint64);\\n\\n    function flashRepaySwapTxGasLimit() external view returns (uint64);\\n\\n    function leverageCallbackTxGasLimit() external view returns (uint64);\\n\\n    function leverageSwapTxGasLimit() external view returns (uint64);\\n\\n    function lzBaseGasLimit() external view returns (uint256);\\n\\n    function stargateComposer() external view returns (IStargateComposer);\\n\\n    function stargateSlippage() external view returns (uint256);\\n\\n    function stargatePoolIdOf(address token_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcaf05e625588dcfaa5706acc78a35fa46d50baeb2d28f689036963695a4e39cb\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address to_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xd2f04aa1bee06d6991b10aaf7c03c3ee09d85f8e48ba92feac595ad855881380\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"./IQuoter.sol\\\";\\nimport \\\"./ICrossChainDispatcher.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function feeCollector() external view returns (address);\\n\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function quoter() external view returns (IQuoter);\\n\\n    function crossChainDispatcher() external view returns (ICrossChainDispatcher);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool _exists);\\n}\\n\",\"keccak256\":\"0x9ffa9e5fd39a48ac2bda561af7fb4fc9df5f8ffb7a602ef1d4da8c068019e723\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\\\";\\n\\ninterface IProxyOFT is IComposableOFTCoreUpgradeable {\\n    function getProxyOFTOf(uint16 chainId_) external view returns (address _proxyOFT);\\n}\\n\",\"keccak256\":\"0x4041a90eb60de460c9e1631aaedfbf2bff2275b3f91964800b1c774546931cd5\",\"license\":\"MIT\"},\"contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface IQuoter {\\n    function quoteCrossChainFlashRepayNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteCrossChainLeverageNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteLeverageCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function quoteFlashRepayCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function getFlashRepaySwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n\\n    function getLeverageSwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n}\\n\",\"keccak256\":\"0x1e4d2dd779a09dc8ea6b6c244b167deddca3a48e71b73bf940da04113b40c752\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/IProxyOFT.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateProxyOFT(IProxyOFT newProxyOFT_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function proxyOFT() external view returns (IProxyOFT);\\n}\\n\",\"keccak256\":\"0xfaeb24d1067e85493a5c8818d6de06fc6dbc72c37e85f82811990d0120f8a0cf\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x2f080adc5880151dc4446ef43b54abab8e3711c5f2e526917ef39a05e3c16a00\",\"license\":\"MIT\"},\"contracts/interfaces/external/IStargateBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/@layerzerolabs/solidity-examples/interfaces/ILayerZeroEndpoint.sol\\\";\\n\\ninterface IStargateBridge {\\n    function layerZeroEndpoint() external view returns (ILayerZeroEndpoint _lzEndpoint);\\n}\\n\",\"keccak256\":\"0x45007a6d6eb5d1041dc80f6912e10a89a990ee89078668a8e39648df11ce9d5b\",\"license\":\"MIT\"},\"contracts/interfaces/external/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x75f04b225d0c310be7e0a09ee4c1aa6eeeb8d94e02fc0e4160a9597ce2d8d446\",\"license\":\"MIT\"},\"contracts/lib/CrossChainLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary CrossChainLib {\\n    /**\\n     * @notice Supported cross-chain operations\\n     */\\n    uint8 public constant LEVERAGE = 1;\\n    uint8 public constant FLASH_REPAY = 2;\\n\\n    function getOperationType(bytes memory payload_) internal pure returns (uint8 _op) {\\n        (_op, ) = abi.decode(payload_, (uint8, bytes));\\n    }\\n\\n    function encodeLeverageCallbackPayload(\\n        address srcSmartFarmingManager_,\\n        uint256 requestId_\\n    ) internal pure returns (bytes memory _payload) {\\n        return abi.encode(LEVERAGE, abi.encode(srcSmartFarmingManager_, requestId_));\\n    }\\n\\n    function decodeLeverageCallbackPayload(\\n        bytes memory payload_\\n    ) internal pure returns (address _srcSmartFarmingManager, uint256 _requestId) {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, uint256));\\n    }\\n\\n    function encodeFlashRepayCallbackPayload(\\n        address srcProxyOFT_,\\n        address srcSmartFarmingManager_,\\n        uint256 requestId_\\n    ) internal pure returns (bytes memory _payload) {\\n        return abi.encode(FLASH_REPAY, abi.encode(srcProxyOFT_, srcSmartFarmingManager_, requestId_));\\n    }\\n\\n    function decodeFlashRepayCallbackPayload(\\n        bytes memory payload_\\n    ) internal pure returns (address srcProxyOFT_, address _srcSmartFarmingManager, uint256 _requestId) {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, address, uint256));\\n    }\\n\\n    function encodeFlashRepaySwapPayload(\\n        address srcSmartFarmingManager_,\\n        address dstProxyOFT_,\\n        uint256 requestId_,\\n        address account_,\\n        uint256 amountOutMin_\\n    ) internal pure returns (bytes memory _payload) {\\n        return\\n            abi.encode(\\n                FLASH_REPAY,\\n                abi.encode(srcSmartFarmingManager_, dstProxyOFT_, requestId_, account_, amountOutMin_)\\n            );\\n    }\\n\\n    function decodeFlashRepaySwapPayload(\\n        bytes memory payload_\\n    )\\n        internal\\n        pure\\n        returns (\\n            address srcSmartFarmingManager_,\\n            address dstProxyOFT_,\\n            uint256 requestId_,\\n            address account_,\\n            uint256 amountOutMin_\\n        )\\n    {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, address, uint256, address, uint256));\\n    }\\n\\n    function encodeLeverageSwapPayload(\\n        address srcSmartFarmingManager_,\\n        address dstProxyOFT_,\\n        uint256 requestId_,\\n        uint256 sgPoolId_,\\n        address account_,\\n        uint256 amountOutMin_\\n    ) internal pure returns (bytes memory _payload) {\\n        return\\n            abi.encode(\\n                LEVERAGE,\\n                abi.encode(srcSmartFarmingManager_, dstProxyOFT_, requestId_, sgPoolId_, account_, amountOutMin_)\\n            );\\n    }\\n\\n    function decodeLeverageSwapPayload(\\n        bytes memory payload_\\n    )\\n        internal\\n        pure\\n        returns (\\n            address srcSmartFarmingManager_,\\n            address dstProxyOFT_,\\n            uint256 requestId_,\\n            uint256 sgPoolId_,\\n            address account_,\\n            uint256 amountOutMin_\\n        )\\n    {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, address, uint256, uint256, address, uint256));\\n    }\\n\\n    function encodeLzArgs(\\n        uint16 dstChainId_,\\n        uint256 callbackNativeFee_,\\n        uint64 swapTxGasLimit_\\n    ) internal pure returns (bytes memory _lzArgs) {\\n        return abi.encode(dstChainId_, callbackNativeFee_, swapTxGasLimit_);\\n    }\\n\\n    function decodeLzArgs(\\n        bytes memory lzArgs_\\n    ) internal pure returns (uint16 dstChainId_, uint256 callbackNativeFee_, uint64 swapTxGasLimit_) {\\n        return abi.decode(lzArgs_, (uint16, uint256, uint64));\\n    }\\n}\\n\",\"keccak256\":\"0x207930d2f144d84704364fc6bafdf7eb3bdb2f12ff7f74d75afded53ff035b90\",\"license\":\"MIT\"},\"contracts/storage/QuoterStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/IQuoter.sol\\\";\\n\\nabstract contract QuoterStorageV1 is IQuoter {\\n    /**\\n     * @notice The pool registry contract\\n     */\\n    IPoolRegistry public poolRegistry;\\n}\\n\",\"keccak256\":\"0xe8520d98aa00781fe447be32fbc3f5b3b9f81577bc0fc161cf428bca40225926\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b62000152565b6200002e60ff62000031565b50565b60008054610100900460ff1615620000ca578160ff1660011480156200006a575062000068306200014360201b62000da31760201c565b155b620000c25760405162461bcd60e51b815260206004820152602e60248201526000805160206200172f83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001295760405162461bcd60e51b815260206004820152602e60248201526000805160206200172f83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000b9565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b6115cd80620001626000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063cca8e39a11610071578063cca8e39a14610176578063d81e47d314610189578063e6a20ae61461019c578063e762fc3c146101b7578063eb9f7f18146101ca578063ffa1ad74146101d257600080fd5b806348dab843146100b95780634fbedeac146100e25780639a47014a14610103578063ab39c79414610116578063afcff50f14610130578063c4d66de814610161575b600080fd5b6100cc6100c73660046110cd565b6101f6565b6040516100d99190611153565b60405180910390f35b6100f56100f036600461117b565b610289565b6040519081526020016100d9565b6100cc6101113660046110cd565b6104c2565b61011e600181565b60405160ff90911681526020016100d9565b600054610149906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100d9565b61017461016f366004611200565b610511565b005b6100f561018436600461121d565b6105c8565b6100f561019736600461121d565b61095d565b6101a4600181565b60405161ffff90911681526020016100d9565b6100f56101c536600461117b565b610b42565b6101a4600281565b6100cc604051806040016040528060058152602001640312e332e360dc1b81525081565b606061028282610205856105c8565b61020d610db2565b6001600160a01b031663e7f4c16b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561024557600080fd5b505afa158015610259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027d9190611252565b610e3e565b9392505050565b6000806000806102ce86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8392505050565b6040516001627dd58f60e11b0319815261ffff8416600482015292955090935091506000906001600160a01b0389169063ff0454e29060240160206040518083038186803b15801561031f57600080fd5b505afa158015610333573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610357919061126d565b604051602001610367919061128a565b6040516020818303038152906040529050610380610db2565b6001600160a01b0316633352b6086040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b857600080fd5b505afa1580156103cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f0919061126d565b6001600160a01b0316630a512369856001846104216001600160a01b03806000196001600160a01b03600019610ea9565b60405180606001604052808967ffffffffffffffff1681526020018a8152602001888152506040518663ffffffff1660e01b81526004016104669594939291906112a7565b604080518083038186803b15801561047d57600080fd5b505afa158015610491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b5919061131d565b5098975050505050505050565b6060610282826104d18561095d565b6104d9610db2565b6001600160a01b031663e3d47ece6040518163ffffffff1660e01b815260040160206040518083038186803b15801561024557600080fd5b600061051d6001610f18565b90508015610535576000805461ff0019166101001790555b6001600160a01b03821661055c5760405163fb7566d760e01b815260040160405180910390fd5b6000805462010000600160b01b031916620100006001600160a01b0385160217905580156105c4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000806105d3610db2565b90506000816001600160a01b03166362491b356040518163ffffffff1660e01b815260040160206040518083038186803b15801561061057600080fd5b505afa158015610624573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106489190611252565b9050600060013360405160200161065f919061128a565b6040516020818303038152906040526001600160a01b03604051602001610686919061128a565b6040516020818303038152906040526000196106ac6001600160a01b0380600019610fae565b866040516020016106c296959493929190611341565b6040516020818303038152906040529050826001600160a01b0316633352b6086040518163ffffffff1660e01b815260040160206040518083038186803b15801561070c57600080fd5b505afa158015610720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610744919061126d565b6001600160a01b031663e0b63dee6040518163ffffffff1660e01b815260040160206040518083038186803b15801561077c57600080fd5b505afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b4919061126d565b6001600160a01b03166307968db16040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ec57600080fd5b505afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610824919061126d565b6001600160a01b03166340a7bb10863084600060028867ffffffffffffffff168a6001600160a01b0316636c77d24f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087d57600080fd5b505afa158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b591906113a8565b6108bf91906113c1565b6000806040516020016108d594939291906113e7565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610904959493929190611423565b604080518083038186803b15801561091b57600080fd5b505afa15801561092f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610953919061131d565b5095945050505050565b600080610968610db2565b9050806001600160a01b0316633352b6086040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a357600080fd5b505afa1580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db919061126d565b6001600160a01b0316630a5123698460016001600160a01b03604051602001610a04919061128a565b604051602081830303815290604052610a266001600160a01b03600019610ff1565b6040518060600160405280886001600160a01b0316630b211f0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6a57600080fd5b505afa158015610a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa29190611252565b67ffffffffffffffff16815260200160008152602001604051806020016040528060008152508152506040518663ffffffff1660e01b8152600401610aeb9594939291906112a7565b604080518083038186803b158015610b0257600080fd5b505afa158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a919061131d565b509392505050565b60008060006060806000610b6c6001600160a01b0380600019806001600160a01b03600019611042565b92506000610baf89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8392505050565b6040516001627dd58f60e11b0319815261ffff84166004820152929850935091506001600160a01b038b169063ff0454e29060240160206040518083038186803b158015610bfc57600080fd5b505afa158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c34919061126d565b945060028267ffffffffffffffff16610c4b610db2565b6001600160a01b0316636c77d24f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8357600080fd5b505afa158015610c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb91906113a8565b610cc591906113c1565b8287604051602001610cda94939291906113e7565b604051602081830303815290604052925050886001600160a01b031663c8598dca8686604051602001610d0d919061128a565b60405160208183030381529060405260001987866000896040518863ffffffff1660e01b8152600401610d469796959493929190611477565b604080518083038186803b158015610d5d57600080fd5b505afa158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d95919061131d565b509998505050505050505050565b6001600160a01b03163b151590565b60008060029054906101000a90046001600160a01b03166001600160a01b03166332c615b46040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0157600080fd5b505afa158015610e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e39919061126d565b905090565b6040805161ffff8516602082015290810183905267ffffffffffffffff8216606082810191909152906080015b60405160208183030381529060405290509392505050565b600080600083806020019051810190610e9c91906114e6565b9250925092509193909250565b604080516001600160a01b038781166020830152868116828401526060808301879052908516608083015260a08083018590528351808403909101815260c0830190935291610efe916002919060e001611525565b604051602081830303815290604052905095945050505050565b60008054610100900460ff1615610f68578160ff166001148015610f3b5750303b155b610f605760405162461bcd60e51b8152600401610f5790611549565b60405180910390fd5b506000919050565b60005460ff808416911610610f8f5760405162461bcd60e51b8152600401610f5790611549565b506000805460ff191660ff92909216919091179055600190565b919050565b604080516001600160a01b03858116602083015284168183015260608082018490528251808303820181526080830190935291610e6b916002919060a001611525565b604080516001600160a01b0384166020820152808201839052815180820383018152606080830190935261102b9160019190608001611525565b604051602081830303815290604052905092915050565b604080516001600160a01b0388811660208301528781168284015260608083018890526080830187905290851660a083015260c08083018590528351808403909101815260e083019093529161109f916001919061010001611525565b60405160208183030381529060405290509695505050505050565b61ffff811681146110ca57600080fd5b50565b600080604083850312156110e057600080fd5b82356110eb816110ba565b915060208301356110fb816110ba565b809150509250929050565b6000815180845260005b8181101561112c57602081850181015186830182015201611110565b8181111561113e576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006102826020830184611106565b6001600160a01b03811681146110ca57600080fd5b60008060006040848603121561119057600080fd5b833561119b81611166565b9250602084013567ffffffffffffffff808211156111b857600080fd5b818601915086601f8301126111cc57600080fd5b8135818111156111db57600080fd5b8760208285010111156111ed57600080fd5b6020830194508093505050509250925092565b60006020828403121561121257600080fd5b813561028281611166565b60006020828403121561122f57600080fd5b8135610282816110ba565b805167ffffffffffffffff81168114610fa957600080fd5b60006020828403121561126457600080fd5b6102828261123a565b60006020828403121561127f57600080fd5b815161028281611166565b60609190911b6bffffffffffffffffffffffff1916815260140190565b61ffff8616815260ff8516602082015260a0604082015260006112cd60a0830186611106565b82810360608401526112df8186611106565b9050828103608084015283518152602084015160208201526040840151606060408301526113106060830182611106565b9998505050505050505050565b6000806040838503121561133057600080fd5b505080516020909101519092909150565b61ffff8716815260c06020820152600061135e60c0830188611106565b82810360408401526113708188611106565b9050856060840152828103608084015261138a8186611106565b91505067ffffffffffffffff831660a0830152979650505050505050565b6000602082840312156113ba57600080fd5b5051919050565b600082198211156113e257634e487b7160e01b600052601160045260246000fd5b500190565b60f09490941b6001600160f01b03191684526002840192909252602283015260601b6bffffffffffffffffffffffff1916604282015260560190565b61ffff861681526001600160a01b038516602082015260a06040820181905260009061145190830186611106565b8415156060840152828103608084015261146b8185611106565b98975050505050505050565b61ffff8816815260e06020820152600061149460e0830189611106565b87604084015282810360608401526114ac8188611106565b905067ffffffffffffffff8616608084015284151560a084015282810360c08401526114d88185611106565b9a9950505050505050505050565b6000806000606084860312156114fb57600080fd5b8351611506816110ba565b6020850151909350915061151c6040850161123a565b90509250925092565b60ff831681526040602082015260006115416040830184611106565b949350505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea2646970667358221220bfbe23d7d6510714e067876ac59d002a9a7554bd8ccb9727b4f7ceae77304da064736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063cca8e39a11610071578063cca8e39a14610176578063d81e47d314610189578063e6a20ae61461019c578063e762fc3c146101b7578063eb9f7f18146101ca578063ffa1ad74146101d257600080fd5b806348dab843146100b95780634fbedeac146100e25780639a47014a14610103578063ab39c79414610116578063afcff50f14610130578063c4d66de814610161575b600080fd5b6100cc6100c73660046110cd565b6101f6565b6040516100d99190611153565b60405180910390f35b6100f56100f036600461117b565b610289565b6040519081526020016100d9565b6100cc6101113660046110cd565b6104c2565b61011e600181565b60405160ff90911681526020016100d9565b600054610149906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020016100d9565b61017461016f366004611200565b610511565b005b6100f561018436600461121d565b6105c8565b6100f561019736600461121d565b61095d565b6101a4600181565b60405161ffff90911681526020016100d9565b6100f56101c536600461117b565b610b42565b6101a4600281565b6100cc604051806040016040528060058152602001640312e332e360dc1b81525081565b606061028282610205856105c8565b61020d610db2565b6001600160a01b031663e7f4c16b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561024557600080fd5b505afa158015610259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027d9190611252565b610e3e565b9392505050565b6000806000806102ce86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8392505050565b6040516001627dd58f60e11b0319815261ffff8416600482015292955090935091506000906001600160a01b0389169063ff0454e29060240160206040518083038186803b15801561031f57600080fd5b505afa158015610333573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610357919061126d565b604051602001610367919061128a565b6040516020818303038152906040529050610380610db2565b6001600160a01b0316633352b6086040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b857600080fd5b505afa1580156103cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f0919061126d565b6001600160a01b0316630a512369856001846104216001600160a01b03806000196001600160a01b03600019610ea9565b60405180606001604052808967ffffffffffffffff1681526020018a8152602001888152506040518663ffffffff1660e01b81526004016104669594939291906112a7565b604080518083038186803b15801561047d57600080fd5b505afa158015610491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b5919061131d565b5098975050505050505050565b6060610282826104d18561095d565b6104d9610db2565b6001600160a01b031663e3d47ece6040518163ffffffff1660e01b815260040160206040518083038186803b15801561024557600080fd5b600061051d6001610f18565b90508015610535576000805461ff0019166101001790555b6001600160a01b03821661055c5760405163fb7566d760e01b815260040160405180910390fd5b6000805462010000600160b01b031916620100006001600160a01b0385160217905580156105c4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000806105d3610db2565b90506000816001600160a01b03166362491b356040518163ffffffff1660e01b815260040160206040518083038186803b15801561061057600080fd5b505afa158015610624573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106489190611252565b9050600060013360405160200161065f919061128a565b6040516020818303038152906040526001600160a01b03604051602001610686919061128a565b6040516020818303038152906040526000196106ac6001600160a01b0380600019610fae565b866040516020016106c296959493929190611341565b6040516020818303038152906040529050826001600160a01b0316633352b6086040518163ffffffff1660e01b815260040160206040518083038186803b15801561070c57600080fd5b505afa158015610720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610744919061126d565b6001600160a01b031663e0b63dee6040518163ffffffff1660e01b815260040160206040518083038186803b15801561077c57600080fd5b505afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b4919061126d565b6001600160a01b03166307968db16040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ec57600080fd5b505afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610824919061126d565b6001600160a01b03166340a7bb10863084600060028867ffffffffffffffff168a6001600160a01b0316636c77d24f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087d57600080fd5b505afa158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b591906113a8565b6108bf91906113c1565b6000806040516020016108d594939291906113e7565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610904959493929190611423565b604080518083038186803b15801561091b57600080fd5b505afa15801561092f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610953919061131d565b5095945050505050565b600080610968610db2565b9050806001600160a01b0316633352b6086040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a357600080fd5b505afa1580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db919061126d565b6001600160a01b0316630a5123698460016001600160a01b03604051602001610a04919061128a565b604051602081830303815290604052610a266001600160a01b03600019610ff1565b6040518060600160405280886001600160a01b0316630b211f0f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6a57600080fd5b505afa158015610a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa29190611252565b67ffffffffffffffff16815260200160008152602001604051806020016040528060008152508152506040518663ffffffff1660e01b8152600401610aeb9594939291906112a7565b604080518083038186803b158015610b0257600080fd5b505afa158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a919061131d565b509392505050565b60008060006060806000610b6c6001600160a01b0380600019806001600160a01b03600019611042565b92506000610baf89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8392505050565b6040516001627dd58f60e11b0319815261ffff84166004820152929850935091506001600160a01b038b169063ff0454e29060240160206040518083038186803b158015610bfc57600080fd5b505afa158015610c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c34919061126d565b945060028267ffffffffffffffff16610c4b610db2565b6001600160a01b0316636c77d24f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8357600080fd5b505afa158015610c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb91906113a8565b610cc591906113c1565b8287604051602001610cda94939291906113e7565b604051602081830303815290604052925050886001600160a01b031663c8598dca8686604051602001610d0d919061128a565b60405160208183030381529060405260001987866000896040518863ffffffff1660e01b8152600401610d469796959493929190611477565b604080518083038186803b158015610d5d57600080fd5b505afa158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d95919061131d565b509998505050505050505050565b6001600160a01b03163b151590565b60008060029054906101000a90046001600160a01b03166001600160a01b03166332c615b46040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0157600080fd5b505afa158015610e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e39919061126d565b905090565b6040805161ffff8516602082015290810183905267ffffffffffffffff8216606082810191909152906080015b60405160208183030381529060405290509392505050565b600080600083806020019051810190610e9c91906114e6565b9250925092509193909250565b604080516001600160a01b038781166020830152868116828401526060808301879052908516608083015260a08083018590528351808403909101815260c0830190935291610efe916002919060e001611525565b604051602081830303815290604052905095945050505050565b60008054610100900460ff1615610f68578160ff166001148015610f3b5750303b155b610f605760405162461bcd60e51b8152600401610f5790611549565b60405180910390fd5b506000919050565b60005460ff808416911610610f8f5760405162461bcd60e51b8152600401610f5790611549565b506000805460ff191660ff92909216919091179055600190565b919050565b604080516001600160a01b03858116602083015284168183015260608082018490528251808303820181526080830190935291610e6b916002919060a001611525565b604080516001600160a01b0384166020820152808201839052815180820383018152606080830190935261102b9160019190608001611525565b604051602081830303815290604052905092915050565b604080516001600160a01b0388811660208301528781168284015260608083018890526080830187905290851660a083015260c08083018590528351808403909101815260e083019093529161109f916001919061010001611525565b60405160208183030381529060405290509695505050505050565b61ffff811681146110ca57600080fd5b50565b600080604083850312156110e057600080fd5b82356110eb816110ba565b915060208301356110fb816110ba565b809150509250929050565b6000815180845260005b8181101561112c57602081850181015186830182015201611110565b8181111561113e576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006102826020830184611106565b6001600160a01b03811681146110ca57600080fd5b60008060006040848603121561119057600080fd5b833561119b81611166565b9250602084013567ffffffffffffffff808211156111b857600080fd5b818601915086601f8301126111cc57600080fd5b8135818111156111db57600080fd5b8760208285010111156111ed57600080fd5b6020830194508093505050509250925092565b60006020828403121561121257600080fd5b813561028281611166565b60006020828403121561122f57600080fd5b8135610282816110ba565b805167ffffffffffffffff81168114610fa957600080fd5b60006020828403121561126457600080fd5b6102828261123a565b60006020828403121561127f57600080fd5b815161028281611166565b60609190911b6bffffffffffffffffffffffff1916815260140190565b61ffff8616815260ff8516602082015260a0604082015260006112cd60a0830186611106565b82810360608401526112df8186611106565b9050828103608084015283518152602084015160208201526040840151606060408301526113106060830182611106565b9998505050505050505050565b6000806040838503121561133057600080fd5b505080516020909101519092909150565b61ffff8716815260c06020820152600061135e60c0830188611106565b82810360408401526113708188611106565b9050856060840152828103608084015261138a8186611106565b91505067ffffffffffffffff831660a0830152979650505050505050565b6000602082840312156113ba57600080fd5b5051919050565b600082198211156113e257634e487b7160e01b600052601160045260246000fd5b500190565b60f09490941b6001600160f01b03191684526002840192909252602283015260601b6bffffffffffffffffffffffff1916604282015260560190565b61ffff861681526001600160a01b038516602082015260a06040820181905260009061145190830186611106565b8415156060840152828103608084015261146b8185611106565b98975050505050505050565b61ffff8816815260e06020820152600061149460e0830189611106565b87604084015282810360608401526114ac8188611106565b905067ffffffffffffffff8616608084015284151560a084015282810360c08401526114d88185611106565b9a9950505050505050505050565b6000806000606084860312156114fb57600080fd5b8351611506816110ba565b6020850151909350915061151c6040850161123a565b90509250925092565b60ff831681526040602082015260006115416040830184611106565b949350505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea2646970667358221220bfbe23d7d6510714e067876ac59d002a9a7554bd8ccb9727b4f7ceae77304da064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getFlashRepaySwapAndCallbackLzArgs(uint16,uint16)": {
        "details": "Must be called on the chain where the swap will be executed (a.k.a. destination chain)",
        "params": {
          "dstChainId_": "Destination chain's LZ id (i.e. chain used for swap)",
          "srcChainId_": "Source chain's LZ id (i.e. user-facing chain)"
        }
      },
      "getLeverageSwapAndCallbackLzArgs(uint16,uint16)": {
        "details": "Must be called on the chain where the swap will be executed (a.k.a. destination chain)",
        "params": {
          "dstChainId_": "Destination chain's LZ id (i.e. chain used for swap)",
          "srcChainId_": "Source chain's LZ id (i.e. user-facing chain)"
        }
      },
      "quoteCrossChainFlashRepayNativeFee(address,bytes)": {
        "params": {
          "lzArgs_": "The LZ args for swap transaction (See: `getFlashRepaySwapAndCallbackLzArgs()`)",
          "proxyOFT_": "The synthetic token's Proxy OFT contract"
        },
        "returns": {
          "_nativeFee": "The fee in native coin"
        }
      },
      "quoteCrossChainLeverageNativeFee(address,bytes)": {
        "params": {
          "lzArgs_": "The LZ args for swap transaction (See: `getLeverageSwapAndCallbackLzArgs()`)",
          "proxyOFT_": "The synthetic token's Proxy OFT contract"
        },
        "returns": {
          "_nativeFee": "The fee in native coin"
        }
      },
      "quoteFlashRepayCallbackNativeFee(uint16)": {
        "params": {
          "srcChainId_": "Source chain's LZ id (i.e. user-facing chain)"
        },
        "returns": {
          "_callbackTxNativeFee": "The fee in native coin"
        }
      },
      "quoteLeverageCallbackNativeFee(uint16)": {
        "params": {
          "srcChainId_": "Source chain's LZ id (i.e. user-facing chain)"
        },
        "returns": {
          "_callbackTxNativeFee": "The fee in native coin"
        }
      }
    },
    "stateVariables": {
      "LZ_ADAPTER_PARAMS_VERSION": {
        "details": "LayerZero adapter param version See more: https://layerzero.gitbook.io/docs/evm-guides/advanced/relayer-adapter-parameters"
      },
      "PT_SEND_AND_CALL": {
        "details": "OFT packet type"
      },
      "SG_TYPE_SWAP_REMOTE": {
        "details": "Stargate swap function type See more: https://stargateprotocol.gitbook.io/stargate/developers/function-types"
      }
    },
    "title": "Quoter contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getFlashRepaySwapAndCallbackLzArgs(uint16,uint16)": {
        "notice": "Get LZ args for the swap and callback's trigger execution"
      },
      "getLeverageSwapAndCallbackLzArgs(uint16,uint16)": {
        "notice": "Get LZ args for the swap and callback's trigger execution"
      },
      "poolRegistry()": {
        "notice": "The pool registry contract"
      },
      "quoteCrossChainFlashRepayNativeFee(address,bytes)": {
        "notice": "Get the LZ (native) fee for the `triggerFlashRepay()` call"
      },
      "quoteCrossChainLeverageNativeFee(address,bytes)": {
        "notice": "Get the LZ (native) fee for the `triggerLeverageSwap()` call"
      },
      "quoteFlashRepayCallbackNativeFee(uint16)": {
        "notice": "Get the LZ (native) fee for the `crossChainFlashRepayCallback()` call"
      },
      "quoteLeverageCallbackNativeFee(uint16)": {
        "notice": "Get the LZ (native) fee for the `crossChainLeverageCallback()` call"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19514,
        "contract": "contracts/Quoter.sol:Quoter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 19517,
        "contract": "contracts/Quoter.sol:Quoter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 30945,
        "contract": "contracts/Quoter.sol:Quoter",
        "label": "poolRegistry",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IPoolRegistry)27760"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPoolRegistry)27760": {
        "encoding": "inplace",
        "label": "contract IPoolRegistry",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}