{
  "address": "0xE8109320737Bafa017eE6ee2e22Ac4d72Ca7f26c",
  "abi": [
    {
      "inputs": [],
      "name": "AllowanceNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnFromNullAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DebtLowerThanTheFloor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DebtTokenInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackIsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsShutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToNullAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NameIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewValueIsSameAsCurrent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolAddressIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReceiveIsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RemainingDebtIsLowerThanTheFloor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SurpassMaxDebtSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SymbolIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SyntheticDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SyntheticIsInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SyntheticIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "DebtRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newActive",
          "type": "bool"
        }
      ],
      "name": "DebtTokenActiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldInterestRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInterestRate",
          "type": "uint256"
        }
      ],
      "name": "InterestRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "issued",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SyntheticTokenIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "contract IPool",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interestRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRatePerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        }
      ],
      "name": "issue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_issued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimestampAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToIssue_",
          "type": "uint256"
        }
      ],
      "name": "quoteIssueIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "quoteIssueOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountToIssue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToRepay_",
          "type": "uint256"
        }
      ],
      "name": "quoteRepayIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "quoteRepayOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountToRepay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "onBehalfOf_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_repaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "onBehalfOf_",
          "type": "address"
        }
      ],
      "name": "repayAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_repaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticToken",
      "outputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterestRate_",
          "type": "uint256"
        }
      ],
      "name": "updateInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa84e2ec6a7692f538e0f13d88ca0eca4b4bf5a76c82980723bcf4ec0f92f3bdf",
  "receipt": {
    "to": null,
    "from": "0x421af9aBC87197A917b87f8d2b2D8B0213D47Dbe",
    "contractAddress": "0xE8109320737Bafa017eE6ee2e22Ac4d72Ca7f26c",
    "transactionIndex": 65,
    "gasUsed": "2749223",
    "logsBloom": "0x
    "blockHash": "0xd3dbd71557d3c6c14446a2febf677ccea90a2d49e5936107edd95b0a6338c1a1",
    "transactionHash": "0xa84e2ec6a7692f538e0f13d88ca0eca4b4bf5a76c82980723bcf4ec0f92f3bdf",
    "logs": [],
    "blockNumber": 16192099,
    "cumulativeGasUsed": "7592072",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "90a16760c1e9eb3a1fb6ca594389bd73",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AllowanceNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnFromNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtLowerThanTheFloor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtTokenInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewValueIsSameAsCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceiveIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemainingDebtIsLowerThanTheFloor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SurpassMaxDebtSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SymbolIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticIsInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DebtRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newActive\",\"type\":\"bool\"}],\"name\":\"DebtTokenActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldInterestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInterestRate\",\"type\":\"uint256\"}],\"name\":\"InterestRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SyntheticTokenIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"SECONDS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract IPool\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRatePerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_issued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimestampAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToIssue_\",\"type\":\"uint256\"}],\"name\":\"quoteIssueIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"quoteIssueOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToIssue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRepay_\",\"type\":\"uint256\"}],\"name\":\"quoteRepayIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"quoteRepayOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_repaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf_\",\"type\":\"address\"}],\"name\":\"repayAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_repaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticToken\",\"outputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterestRate_\",\"type\":\"uint256\"}],\"name\":\"updateInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"updateMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"burn(address,uint256)\":{\"params\":{\"amount_\":\"The amount to burn\",\"from_\":\"The account to burn from\"}},\"governor()\":{\"returns\":{\"_governor\":\"The governor\"}},\"issue(uint256,address)\":{\"params\":{\"amount_\":\"The amount to mint\",\"to_\":\"The beneficiary account\"},\"returns\":{\"_fee\":\"The fee amount collected\",\"_issued\":\"The amount issued after fees\"}},\"quoteIssueIn(uint256)\":{\"params\":{\"amountToIssue_\":\"Synth to issue\"},\"returns\":{\"_amount\":\"Gross amount\",\"_fee\":\"The fee amount to collect\"}},\"quoteIssueOut(uint256)\":{\"params\":{\"amount_\":\"Gross amount\"},\"returns\":{\"_amountToIssue\":\"Synth to issue\",\"_fee\":\"The fee amount to collect\"}},\"quoteRepayIn(uint256)\":{\"params\":{\"amountToRepay_\":\"Debt amount to repay\"},\"returns\":{\"_amount\":\"Gross amount\",\"_fee\":\"The fee amount to collect\"}},\"quoteRepayOut(uint256)\":{\"params\":{\"amount_\":\"Gross amount\"},\"returns\":{\"_amountToRepay\":\"Debt amount to repay\",\"_fee\":\"The fee amount to collect\"}},\"repay(address,uint256)\":{\"details\":\"The msg.sender is the payer and the account beneficed\",\"params\":{\"amount_\":\"The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)\",\"onBehalfOf_\":\"The account that will have debt decreased\"},\"returns\":{\"_repaid\":\"The amount repaid after fees\"}},\"repayAll(address)\":{\"details\":\"This function helps users to no leave debt dust behind\",\"params\":{\"onBehalfOf_\":\"The account that will have debt decreased\"},\"returns\":{\"_fee\":\"The fee amount collected\",\"_repaid\":\"The amount repaid after fees\"}},\"sweep(address,address,uint256)\":{\"params\":{\"amount_\":\"The amount to send\",\"to_\":\"The recipient of the transfer\",\"token_\":\"The token to transfer\"}},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"title\":\"Non-transferable token that represents users' debts\",\"version\":1},\"userdoc\":{\"events\":{\"DebtRepaid(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when synthetic's debt is repaid\"},\"DebtTokenActiveUpdated(bool)\":{\"notice\":\"Emitted when active flag is updated\"},\"InterestRateUpdated(uint256,uint256)\":{\"notice\":\"Emitted when interest rate is updated\"},\"MaxTotalSupplyUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max total supply is updated\"},\"SyntheticTokenIssued(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when synthetic token is issued\"}},\"kind\":\"user\",\"methods\":{\"accrueInterest()\":{\"notice\":\"Accrue interest over debt supply\"},\"balanceOf(address)\":{\"notice\":\"Get the updated (principal + interest) user's debt\"},\"burn(address,uint256)\":{\"notice\":\"Burn debt token\"},\"debtIndex()\":{\"notice\":\"Accumulator of the total earned interest rate since the beginning\"},\"decimals()\":{\"notice\":\"The decimals of the token\"},\"governor()\":{\"notice\":\"Get the governor\"},\"interestRate()\":{\"notice\":\"Interest rate\"},\"interestRatePerSecond()\":{\"notice\":\"Return interest rate (in percent) per second\"},\"isActive()\":{\"notice\":\"If true, disables msAsset minting on this pool\"},\"issue(uint256,address)\":{\"notice\":\"Lock collateral and mint synthetic token\"},\"lastTimestampAccrued()\":{\"notice\":\"The timestamp when interest accrual was calculated for the last time\"},\"maxTotalSupply()\":{\"notice\":\"The supply cap\"},\"name()\":{\"notice\":\"The name of the token\"},\"pool()\":{\"notice\":\"Pool contract\"},\"quoteIssueIn(uint256)\":{\"notice\":\"Quote gross `_amount` to issue `amountToIssue_` synthetic tokens\"},\"quoteIssueOut(uint256)\":{\"notice\":\"Quote synthetic tokens `_amountToIssue` by using gross `_amount`\"},\"quoteRepayIn(uint256)\":{\"notice\":\"Quote synthetic token `_amount` need to repay `amountToRepay_` debt\"},\"quoteRepayOut(uint256)\":{\"notice\":\"Quote debt `_amountToRepay` by burning `_amount` synthetic tokens\"},\"repay(address,uint256)\":{\"notice\":\"Send synthetic token to decrease debt\"},\"repayAll(address)\":{\"notice\":\"Send synthetic token to decrease debt\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"},\"symbol()\":{\"notice\":\"The symbol of the token\"},\"syntheticToken()\":{\"notice\":\"The Synthetic token\"},\"toggleIsActive()\":{\"notice\":\"Enable/Disable the Debt Token\"},\"totalSupply()\":{\"notice\":\"Return the total supply\"},\"updateInterestRate(uint256)\":{\"notice\":\"Update interest rate (APR)\"},\"updateMaxTotalSupply(uint256)\":{\"notice\":\"Update max total supply\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DebtToken.sol\":\"DebtToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"./access/Manageable.sol\\\";\\nimport \\\"./storage/DebtTokenStorage.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\n\\nerror SyntheticDoesNotExist();\\nerror SyntheticIsInactive();\\nerror DebtTokenInactive();\\nerror NameIsNull();\\nerror SymbolIsNull();\\nerror PoolIsNull();\\nerror SyntheticIsNull();\\nerror AllowanceNotSupported();\\nerror ApprovalNotSupported();\\nerror AmountIsZero();\\nerror NotEnoughCollateral();\\nerror DebtLowerThanTheFloor();\\nerror RemainingDebtIsLowerThanTheFloor();\\nerror TransferNotSupported();\\nerror BurnFromNullAddress();\\nerror BurnAmountExceedsBalance();\\nerror MintToNullAddress();\\nerror SurpassMaxDebtSupply();\\nerror NewValueIsSameAsCurrent();\\n\\n/**\\n * @title Non-transferable token that represents users' debts\\n */\\ncontract DebtToken is ReentrancyGuard, Manageable, DebtTokenStorageV1 {\\n    using WadRayMath for uint256;\\n\\n    uint256 public constant SECONDS_PER_YEAR = 365.25 days;\\n    uint256 private constant HUNDRED_PERCENT = 1e18;\\n\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    /// @notice Emitted when synthetic's debt is repaid\\n    event DebtRepaid(address indexed payer, address indexed account, uint256 amount, uint256 repaid, uint256 fee);\\n\\n    /// @notice Emitted when active flag is updated\\n    event DebtTokenActiveUpdated(bool newActive);\\n\\n    /// @notice Emitted when interest rate is updated\\n    event InterestRateUpdated(uint256 oldInterestRate, uint256 newInterestRate);\\n\\n    /// @notice Emitted when max total supply is updated\\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupply, uint256 newMaxTotalSupply);\\n\\n    /// @notice Emitted when synthetic token is issued\\n    event SyntheticTokenIssued(\\n        address indexed account,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 issued,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Throws if sender can't burn\\n     */\\n    modifier onlyIfCanBurn() {\\n        if (msg.sender != address(pool)) revert SenderIsNotPool();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token doesn't exist\\n     */\\n    modifier onlyIfSyntheticTokenExists() {\\n        if (!pool.doesSyntheticTokenExist(syntheticToken)) revert SyntheticDoesNotExist();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token isn't enabled\\n     */\\n    modifier onlyIfSyntheticTokenIsActive() {\\n        if (!syntheticToken.isActive()) revert SyntheticIsInactive();\\n        if (!isActive) revert DebtTokenInactive();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update reward contracts' states\\n     * @dev Should be called before balance changes (i.e. mint/burn)\\n     */\\n    modifier updateRewardsBeforeMintOrBurn(address account_) {\\n        IRewardsDistributor[] memory _rewardsDistributors = pool.getRewardsDistributors();\\n        ISyntheticToken _syntheticToken = syntheticToken;\\n        uint256 _length = _rewardsDistributors.length;\\n        for (uint256 i; i < _length; ++i) {\\n            _rewardsDistributors[i].updateBeforeMintOrBurn(_syntheticToken, account_);\\n        }\\n        _;\\n    }\\n\\n    function initialize(\\n        string calldata name_,\\n        string calldata symbol_,\\n        IPool pool_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 interestRate_,\\n        uint256 maxTotalSupply_\\n    ) external initializer {\\n        if (bytes(name_).length == 0) revert NameIsNull();\\n        if (bytes(symbol_).length == 0) revert SymbolIsNull();\\n        if (address(pool_) == address(0)) revert PoolIsNull();\\n        if (address(syntheticToken_) == address(0)) revert SyntheticIsNull();\\n\\n        __ReentrancyGuard_init();\\n        __Manageable_init(pool_);\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = syntheticToken_.decimals();\\n        syntheticToken = syntheticToken_;\\n        lastTimestampAccrued = block.timestamp;\\n        debtIndex = 1e18;\\n        interestRate = interestRate_;\\n        maxTotalSupply = maxTotalSupply_;\\n        isActive = true;\\n    }\\n\\n    /**\\n     * @notice Accrue interest over debt supply\\n     */\\n    function accrueInterest() public override {\\n        (\\n            uint256 _interestAmountAccrued,\\n            uint256 _debtIndex,\\n            uint256 _lastTimestampAccrued\\n        ) = _calculateInterestAccrual();\\n\\n        if (block.timestamp == _lastTimestampAccrued) {\\n            return;\\n        }\\n\\n        lastTimestampAccrued = block.timestamp;\\n\\n        if (_interestAmountAccrued > 0) {\\n            totalSupply_ += _interestAmountAccrued;\\n            debtIndex = _debtIndex;\\n            // Note: We could save gas by having an accumulator and a function to mint accumulated fee\\n            syntheticToken.mint(pool.feeCollector(), _interestAmountAccrued);\\n        }\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(\\n        address, /*owner_*/\\n        address /*spender_*/\\n    ) external pure override returns (uint256) {\\n        revert AllowanceNotSupported();\\n    }\\n\\n    /// @inheritdoc IERC20\\n    // solhint-disable-next-line\\n    function approve(\\n        address, /*spender_*/\\n        uint256 /*amount_*/\\n    ) external override returns (bool) {\\n        revert ApprovalNotSupported();\\n    }\\n\\n    /**\\n     * @notice Get the updated (principal + interest) user's debt\\n     */\\n    function balanceOf(address account_) public view override returns (uint256) {\\n        uint256 _principal = principalOf[account_];\\n        if (_principal == 0) {\\n            return 0;\\n        }\\n\\n        (, uint256 _debtIndex, ) = _calculateInterestAccrual();\\n\\n        // Note: The `debtIndex / debtIndexOf` gives the interest to apply to the principal amount\\n        return (_principal * _debtIndex) / debtIndexOf[account_];\\n    }\\n\\n    /**\\n     * @notice Burn debt token\\n     * @param from_ The account to burn from\\n     * @param amount_ The amount to burn\\n     */\\n    function burn(address from_, uint256 amount_) external override onlyIfCanBurn {\\n        _burn(from_, amount_);\\n    }\\n\\n    /**\\n     * @notice Lock collateral and mint synthetic token\\n     * @param amount_ The amount to mint\\n     * @param to_ The beneficiary account\\n     * @return _issued The amount issued after fees\\n     * @return _fee The fee amount collected\\n     */\\n    function issue(uint256 amount_, address to_)\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfSyntheticTokenExists\\n        onlyIfSyntheticTokenIsActive\\n        returns (uint256 _issued, uint256 _fee)\\n    {\\n        if (amount_ == 0) revert AmountIsZero();\\n\\n        accrueInterest();\\n\\n        IPool _pool = pool;\\n        ISyntheticToken _syntheticToken = syntheticToken;\\n\\n        (, , , , uint256 _issuableInUsd) = _pool.debtPositionOf(msg.sender);\\n\\n        IMasterOracle _masterOracle = _pool.masterOracle();\\n\\n        if (amount_ > _masterOracle.quoteUsdToToken(address(syntheticToken), _issuableInUsd)) {\\n            revert NotEnoughCollateral();\\n        }\\n\\n        uint256 _debtFloorInUsd = _pool.debtFloorInUsd();\\n\\n        if (\\n            _debtFloorInUsd > 0 &&\\n            _masterOracle.quoteTokenToUsd(address(syntheticToken), balanceOf(msg.sender) + amount_) < _debtFloorInUsd\\n        ) {\\n            revert DebtLowerThanTheFloor();\\n        }\\n\\n        (_issued, _fee) = quoteIssueOut(amount_);\\n        if (_fee > 0) {\\n            _syntheticToken.mint(_pool.feeCollector(), _fee);\\n        }\\n\\n        _syntheticToken.mint(to_, _issued);\\n        _mint(msg.sender, amount_);\\n\\n        emit SyntheticTokenIssued(msg.sender, to_, amount_, _issued, _fee);\\n    }\\n\\n    /**\\n     * @notice Return interest rate (in percent) per second\\n     */\\n    function interestRatePerSecond() public view override returns (uint256) {\\n        return interestRate / SECONDS_PER_YEAR;\\n    }\\n\\n    /**\\n     * @notice Quote gross `_amount` to issue `amountToIssue_` synthetic tokens\\n     * @param amountToIssue_ Synth to issue\\n     * @return _amount Gross amount\\n     * @return _fee The fee amount to collect\\n     */\\n    function quoteIssueIn(uint256 amountToIssue_) external view override returns (uint256 _amount, uint256 _fee) {\\n        uint256 _issueFee = pool.issueFee();\\n        if (_issueFee == 0) {\\n            return (amountToIssue_, _fee);\\n        }\\n\\n        _amount = amountToIssue_.wadDiv(HUNDRED_PERCENT - _issueFee);\\n        _fee = _amount - amountToIssue_;\\n    }\\n\\n    /**\\n     * @notice Quote synthetic tokens `_amountToIssue` by using gross `_amount`\\n     * @param amount_ Gross amount\\n     * @return _amountToIssue Synth to issue\\n     * @return _fee The fee amount to collect\\n     */\\n    function quoteIssueOut(uint256 amount_) public view override returns (uint256 _amountToIssue, uint256 _fee) {\\n        uint256 _issueFee = pool.issueFee();\\n        if (_issueFee == 0) {\\n            return (amount_, _fee);\\n        }\\n\\n        _fee = amount_.wadMul(_issueFee);\\n        _amountToIssue = amount_ - _fee;\\n    }\\n\\n    /**\\n     * @notice Quote synthetic token `_amount` need to repay `amountToRepay_` debt\\n     * @param amountToRepay_ Debt amount to repay\\n     * @return _amount Gross amount\\n     * @return _fee The fee amount to collect\\n     */\\n    function quoteRepayIn(uint256 amountToRepay_) public view override returns (uint256 _amount, uint256 _fee) {\\n        uint256 _repayFee = pool.repayFee();\\n        if (_repayFee == 0) {\\n            return (amountToRepay_, _fee);\\n        }\\n\\n        _fee = amountToRepay_.wadMul(_repayFee);\\n        _amount = amountToRepay_ + _fee;\\n    }\\n\\n    /**\\n     * @notice Quote debt `_amountToRepay` by burning `_amount` synthetic tokens\\n     * @param amount_ Gross amount\\n     * @return _amountToRepay Debt amount to repay\\n     * @return _fee The fee amount to collect\\n     */\\n    function quoteRepayOut(uint256 amount_) public view override returns (uint256 _amountToRepay, uint256 _fee) {\\n        uint256 _repayFee = pool.repayFee();\\n        if (_repayFee == 0) {\\n            return (amount_, _fee);\\n        }\\n\\n        _amountToRepay = amount_.wadDiv(HUNDRED_PERCENT + _repayFee);\\n        _fee = amount_ - _amountToRepay;\\n    }\\n\\n    /**\\n     * @notice Send synthetic token to decrease debt\\n     * @dev The msg.sender is the payer and the account beneficed\\n     * @param onBehalfOf_ The account that will have debt decreased\\n     * @param amount_ The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)\\n     * @return _repaid The amount repaid after fees\\n     */\\n    function repay(address onBehalfOf_, uint256 amount_)\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        returns (uint256 _repaid, uint256 _fee)\\n    {\\n        if (amount_ == 0) revert AmountIsZero();\\n\\n        accrueInterest();\\n\\n        IPool _pool = pool;\\n        ISyntheticToken _syntheticToken = syntheticToken;\\n\\n        (_repaid, _fee) = quoteRepayOut(amount_);\\n        if (_fee > 0) {\\n            _syntheticToken.seize(msg.sender, _pool.feeCollector(), _fee);\\n        }\\n\\n        uint256 _debtFloorInUsd = _pool.debtFloorInUsd();\\n        if (_debtFloorInUsd > 0) {\\n            uint256 _newDebtInUsd = _pool.masterOracle().quoteTokenToUsd(\\n                address(_syntheticToken),\\n                balanceOf(onBehalfOf_) - _repaid\\n            );\\n            if (_newDebtInUsd > 0 && _newDebtInUsd < _debtFloorInUsd) {\\n                revert RemainingDebtIsLowerThanTheFloor();\\n            }\\n        }\\n\\n        _syntheticToken.burn(msg.sender, _repaid);\\n        _burn(onBehalfOf_, _repaid);\\n\\n        emit DebtRepaid(msg.sender, onBehalfOf_, amount_, _repaid, _fee);\\n    }\\n\\n    /**\\n     * @notice Send synthetic token to decrease debt\\n     * @dev This function helps users to no leave debt dust behind\\n     * @param onBehalfOf_ The account that will have debt decreased\\n     * @return _repaid The amount repaid after fees\\n     * @return _fee The fee amount collected\\n     */\\n    function repayAll(address onBehalfOf_)\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        returns (uint256 _repaid, uint256 _fee)\\n    {\\n        accrueInterest();\\n\\n        _repaid = balanceOf(onBehalfOf_);\\n        if (_repaid == 0) revert AmountIsZero();\\n\\n        ISyntheticToken _syntheticToken = syntheticToken;\\n\\n        uint256 _amount;\\n        (_amount, _fee) = quoteRepayIn(_repaid);\\n\\n        if (_fee > 0) {\\n            _syntheticToken.seize(msg.sender, pool.feeCollector(), _fee);\\n        }\\n\\n        _syntheticToken.burn(msg.sender, _repaid);\\n        _burn(onBehalfOf_, _repaid);\\n\\n        emit DebtRepaid(msg.sender, onBehalfOf_, _amount, _repaid, _fee);\\n    }\\n\\n    /**\\n     * @notice Return the total supply\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        (uint256 _interestAmountAccrued, , ) = _calculateInterestAccrual();\\n        return totalSupply_ + _interestAmountAccrued;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    // solhint-disable-next-line\\n    function transfer(\\n        address, /*recipient_*/\\n        uint256 /*amount_*/\\n    ) external override returns (bool) {\\n        revert TransferNotSupported();\\n    }\\n\\n    /// @inheritdoc IERC20\\n    // solhint-disable-next-line\\n    function transferFrom(\\n        address, /*sender_*/\\n        address, /*recipient_*/\\n        uint256 /*amount_*/\\n    ) external override returns (bool) {\\n        revert TransferNotSupported();\\n    }\\n\\n    /**\\n     * @notice Add this token to the debt tokens list if the recipient is receiving it for the 1st time\\n     */\\n    function _addToDebtTokensOfRecipientIfNeeded(address recipient_, uint256 recipientBalanceBefore_) private {\\n        if (recipientBalanceBefore_ == 0) {\\n            pool.addToDebtTokensOfAccount(recipient_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Destroy `amount` tokens from `account`, reducing the\\n     * total supply\\n     */\\n    function _burn(address account_, uint256 amount_) private updateRewardsBeforeMintOrBurn(account_) {\\n        if (account_ == address(0)) revert BurnFromNullAddress();\\n\\n        uint256 _accountBalance = balanceOf(account_);\\n        if (_accountBalance < amount_) revert BurnAmountExceedsBalance();\\n\\n        unchecked {\\n            principalOf[account_] = _accountBalance - amount_;\\n            debtIndexOf[account_] = debtIndex;\\n            totalSupply_ -= amount_;\\n        }\\n\\n        emit Transfer(account_, address(0), amount_);\\n\\n        _removeFromDebtTokensOfSenderIfNeeded(account_, balanceOf(account_));\\n    }\\n\\n    /**\\n     * @notice Calculate interest to accrue\\n     * @dev This util function avoids code duplication across `balanceOf` and `accrueInterest`\\n     * @return _interestAmountAccrued The total amount of debt tokens accrued\\n     * @return _debtIndex The new `debtIndex` value\\n     */\\n    function _calculateInterestAccrual()\\n        private\\n        view\\n        returns (\\n            uint256 _interestAmountAccrued,\\n            uint256 _debtIndex,\\n            uint256 _lastTimestampAccrued\\n        )\\n    {\\n        _lastTimestampAccrued = lastTimestampAccrued;\\n        _debtIndex = debtIndex;\\n\\n        if (block.timestamp > _lastTimestampAccrued) {\\n            uint256 _interestRateToAccrue = interestRatePerSecond() * (block.timestamp - _lastTimestampAccrued);\\n            if (_interestRateToAccrue > 0) {\\n                _interestAmountAccrued = _interestRateToAccrue.wadMul(totalSupply_);\\n                _debtIndex += _interestRateToAccrue.wadMul(debtIndex);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Create `amount` tokens and assigns them to `account`, increasing\\n     * the total supply\\n     */\\n    function _mint(address account_, uint256 amount_) private updateRewardsBeforeMintOrBurn(account_) {\\n        if (account_ == address(0)) revert MintToNullAddress();\\n\\n        uint256 _balanceBefore = balanceOf(account_);\\n\\n        totalSupply_ += amount_;\\n        if (totalSupply_ > maxTotalSupply) revert SurpassMaxDebtSupply();\\n\\n        principalOf[account_] += amount_;\\n        debtIndexOf[account_] = debtIndex;\\n        emit Transfer(address(0), account_, amount_);\\n\\n        _addToDebtTokensOfRecipientIfNeeded(account_, _balanceBefore);\\n    }\\n\\n    /**\\n     * @notice Remove this token to the debt tokens list if the sender's balance goes to zero\\n     */\\n    function _removeFromDebtTokensOfSenderIfNeeded(address sender_, uint256 senderBalanceAfter_) private {\\n        if (senderBalanceAfter_ == 0) {\\n            pool.removeFromDebtTokensOfAccount(sender_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update max total supply\\n     */\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external override onlyGovernor {\\n        uint256 _currentMaxTotalSupply = maxTotalSupply;\\n        if (newMaxTotalSupply_ == _currentMaxTotalSupply) revert NewValueIsSameAsCurrent();\\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupply, newMaxTotalSupply_);\\n        maxTotalSupply = newMaxTotalSupply_;\\n    }\\n\\n    /**\\n     * @notice Update interest rate (APR)\\n     */\\n    function updateInterestRate(uint256 newInterestRate_) external override onlyGovernor {\\n        accrueInterest();\\n        uint256 _currentInterestRate = interestRate;\\n        if (newInterestRate_ == _currentInterestRate) revert NewValueIsSameAsCurrent();\\n        emit InterestRateUpdated(_currentInterestRate, newInterestRate_);\\n        interestRate = newInterestRate_;\\n    }\\n\\n    /**\\n     * @notice Enable/Disable the Debt Token\\n     */\\n    function toggleIsActive() external override onlyGovernor {\\n        bool _newIsActive = !isActive;\\n        emit DebtTokenActiveUpdated(_newIsActive);\\n        isActive = _newIsActive;\\n    }\\n}\\n\",\"keccak256\":\"0xbba6e42e8b987549a6e240f151c550bb20930db12d1c29d58aab727780fde67d\",\"license\":\"MIT\"},\"contracts/access/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/TokenHolder.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\nimport \\\"../interfaces/IManageable.sol\\\";\\n\\nerror SenderIsNotPool();\\nerror SenderIsNotGovernor();\\nerror IsPaused();\\nerror IsShutdown();\\nerror PoolAddressIsNull();\\n\\n/**\\n * @title Reusable contract that handles accesses\\n */\\nabstract contract Manageable is IManageable, TokenHolder, Initializable {\\n    /**\\n     * @notice Pool contract\\n     */\\n    IPool public pool;\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't the pool\\n     */\\n    modifier onlyPool() {\\n        if (msg.sender != address(pool)) revert SenderIsNotPool();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't the governor\\n     */\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor()) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is paused\\n     */\\n    modifier whenNotPaused() {\\n        if (pool.paused()) revert IsPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is shutdown\\n     */\\n    modifier whenNotShutdown() {\\n        if (pool.everythingStopped()) revert IsShutdown();\\n        _;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Manageable_init(IPool pool_) internal initializer {\\n        if (address(pool_) == address(0)) revert PoolAddressIsNull();\\n        pool = pool_;\\n    }\\n\\n    /**\\n     * @notice Get the governor\\n     * @return _governor The governor\\n     */\\n    function governor() public view returns (address _governor) {\\n        _governor = IGovernable(address(pool)).governor();\\n    }\\n\\n    /// @inheritdoc TokenHolder\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd2c7eee457d95b6cb75ce79a5a87e2f4fe5909e956ba3d2581cedef4a82cd407\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xc790f8419ee2c68721d6203ed1b5f81e89eb7e1dca19be3a9f54cb5de44491f1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xf7597a45234124b616732ed58980c691fdb247ee0d5a7608f320003be8b3fb12\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralFactor() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\\n\\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\\n\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0xa509141eb25915ce1873147400a4186c2eb38994a2a022d1f3022a7725465e47\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\",\"keccak256\":\"0xac88e0997a26942cb9cbda1a7dd9756e28ba2025813e5b07e55939fbf8538ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\\n\\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(address account_)\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function addDebtToken(IDebtToken debtToken_) external;\\n\\n    function removeDebtToken(IDebtToken debtToken_) external;\\n\\n    function addDepositToken(address depositToken_) external;\\n\\n    function removeDepositToken(IDepositToken depositToken_) external;\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    )\\n        external\\n        returns (\\n            uint256 _totalSeized,\\n            uint256 _toLiquidator,\\n            uint256 _fee\\n        );\\n\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeized_,\\n        IDepositToken depositToken_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _amountToRepay,\\n            uint256 _toLiquidator,\\n            uint256 _fee\\n        );\\n\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _maxAmountToRepay);\\n\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _totalSeized,\\n            uint256 _toLiquidator,\\n            uint256 _fee\\n        );\\n\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view returns (uint256 _amountIn, uint256 _fee);\\n\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _fee);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _fee);\\n\\n    function updateSwapFee(uint256 newSwapFee_) external;\\n\\n    function updateDebtFloor(uint256 newDebtFloorInUsd_) external;\\n\\n    function updateDepositFee(uint256 newDepositFee_) external;\\n\\n    function updateIssueFee(uint256 newIssueFee_) external;\\n\\n    function updateWithdrawFee(uint256 newWithdrawFee_) external;\\n\\n    function updateRepayFee(uint256 newRepayFee_) external;\\n\\n    function updateLiquidatorIncentive(uint128 newLiquidatorIncentive_) external;\\n\\n    function updateProtocolLiquidationFee(uint128 newProtocolLiquidationFee_) external;\\n\\n    function updateMaxLiquidable(uint256 newMaxLiquidable_) external;\\n\\n    function updateTreasury(ITreasury newTreasury_) external;\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function addRewardsDistributor(IRewardsDistributor distributor_) external;\\n\\n    function removeRewardsDistributor(IRewardsDistributor distributor_) external;\\n\\n    function toggleIsSwapActive() external;\\n\\n    function isSwapActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9d4108c5a9094a2cce800de437bd8ad3184f1a91816e1cc88b4330f4fb785112\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateMasterOracle(IMasterOracle newOracle_) external;\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function updateNativeTokenGateway(address newGateway_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd4f5f60c3943b5fa9ffb34ef1909d5a8ef4ca62fd35ea0567cd0402c15d6ee2a\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(\\n        IERC20 token_,\\n        address from_,\\n        address to_\\n    ) external;\\n\\n    function claimable(address account_) external view returns (uint256 _claimable);\\n\\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\\n\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\\n\\n    function tokens(uint256) external view returns (IERC20);\\n\\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\\n\\n    function accountIndexOf(IERC20, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe4788b0600dd65d8beac4a92f7009539f8564f3dbf91471b098c173caa7df4a3\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8a0b33c53de18a546b7e1ed60d436c18152c17cda6aa4aaf8a284ed21da0f695\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(\\n        address _assetIn,\\n        address _assetOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x711e4ad224403589238cd425781689ac98afc42314a2e6a5a2ac4c6ed5bfa273\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/DebtTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IDebtToken.sol\\\";\\n\\nabstract contract DebtTokenStorageV1 is IDebtToken {\\n    /**\\n     * @notice The name of the token\\n     */\\n    string public override name;\\n\\n    /**\\n     * @notice The symbol of the token\\n     */\\n    string public override symbol;\\n\\n    /**\\n     * @notice The mapping of the users' minted tokens\\n     * @dev This value changes within the mint and burn operations\\n     */\\n    mapping(address => uint256) internal principalOf;\\n\\n    /**\\n     * @notice The `debtIndex` \\\"snapshot\\\" of the account's latest `principalOf` update (i.e. mint/burn)\\n     */\\n    mapping(address => uint256) internal debtIndexOf;\\n\\n    /**\\n     * @notice The supply cap\\n     */\\n    uint256 public override maxTotalSupply;\\n\\n    /**\\n     * @notice The total amount of minted tokens\\n     */\\n    uint256 internal totalSupply_;\\n\\n    /**\\n     * @notice The timestamp when interest accrual was calculated for the last time\\n     */\\n    uint256 public override lastTimestampAccrued;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the beginning\\n     */\\n    uint256 public override debtIndex;\\n\\n    /**\\n     * @notice Interest rate\\n     * @dev Use 0.1e18 for 10% APR\\n     */\\n    uint256 public override interestRate;\\n\\n    /**\\n     * @notice The Synthetic token\\n     */\\n    ISyntheticToken public override syntheticToken;\\n\\n    /**\\n     * @notice If true, disables msAsset minting on this pool\\n     */\\n    bool public override isActive;\\n\\n    /**\\n     * @notice The decimals of the token\\n     */\\n    uint8 public override decimals;\\n}\\n\",\"keccak256\":\"0xdff24b074953e6d1ff63e65693559433e87e04bae3975e1bf80dc88a870705ce\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nerror FallbackIsNotAllowed();\\nerror ReceiveIsNotAllowed();\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert FallbackIsNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert ReceiveIsNotAllowed();\\n    }\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param token_ The token to transfer\\n     * @param to_ The recipient of the transfer\\n     * @param amount_ The amount to send\\n     */\\n    function sweep(\\n        IERC20 token_,\\n        address to_,\\n        uint256 amount_\\n    ) external {\\n        _requireCanSweep();\\n\\n        if (address(token_) == address(0)) {\\n            Address.sendValue(payable(to_), amount_);\\n        } else {\\n            token_.safeTransfer(to_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     * @dev Usually requires the owner or governor as the caller\\n     */\\n    function _requireCanSweep() internal view virtual;\\n}\\n\",\"keccak256\":\"0x6f1b04f011e197949917d3b81df55a4854f12b8e4d3ee9c955838e47545a3788\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506130c9806100206000396000f3fe6080604052600436106101fd5760003560e01c8063752a50a61161010d578063a9059cbb116100a0578063d25933291161006f578063d2593329146105dc578063d38f2ba9146105f1578063dd62ed3e14610611578063e6a69ab814610631578063ffa1ad74146106495761021b565b8063a9059cbb1461056b578063b696a6ad14610586578063bb8c631f146105a6578063c9dc4b4d146105bc5761021b565b806395d89b41116100dc57806395d89b411461050c5780639cc820da146105215780639dc29fac14610536578063a6afed95146105565761021b565b8063752a50a6146104965780637c27383b146104b65780637c3a00fd146104d65780638230ecd6146104ec5761021b565b806323b872dd116101905780634754d1761161015f5780634754d17614610400578063565f3d4f1461042057806362c067671461043657806370a082311461045657806374e87e1e146104765761021b565b806323b872dd146103775780632ab4d052146103975780632d4aeea1146103ad578063313ce567146103cd5761021b565b8063172f50a4116101cc578063172f50a4146102dc57806318160ddd146102fe57806322867d781461032157806322f3e2d4146103565761021b565b806306fdde0314610234578063095ea7b31461025f5780630c340a241461028f57806316f0115b146102bc5761021b565b3661021b57604051636436c22d60e11b815260040160405180910390fd5b60405163a0152e6360e01b815260040160405180910390fd5b34801561024057600080fd5b5061024961067a565b6040516102569190612b11565b60405180910390f35b34801561026b57600080fd5b5061027f61027a366004612b59565b610708565b6040519015158152602001610256565b34801561029b57600080fd5b506102a4610723565b6040516001600160a01b039091168152602001610256565b3480156102c857600080fd5b506002546102a4906001600160a01b031681565b3480156102e857600080fd5b506102fc6102f7366004612b85565b6107a5565b005b34801561030a57600080fd5b50610313610841565b604051908152602001610256565b34801561032d57600080fd5b5061034161033c366004612b59565b610864565b60408051928352602083019190915201610256565b34801561036257600080fd5b50603d5461027f90600160a01b900460ff1681565b34801561038357600080fd5b5061027f610392366004612b9e565b610cf8565b3480156103a357600080fd5b5061031360385481565b3480156103b957600080fd5b506103416103c8366004612b85565b610d13565b3480156103d957600080fd5b50603d546103ee90600160a81b900460ff1681565b60405160ff9091168152602001610256565b34801561040c57600080fd5b5061034161041b366004612b85565b610ddc565b34801561042c57600080fd5b50610313603a5481565b34801561044257600080fd5b506102fc610451366004612b9e565b610e93565b34801561046257600080fd5b50610313610471366004612bdf565b610ecc565b34801561048257600080fd5b506102fc610491366004612c45565b610f38565b3480156104a257600080fd5b506102fc6104b1366004612b85565b61112c565b3480156104c257600080fd5b506103416104d1366004612bdf565b6111d0565b3480156104e257600080fd5b50610313603c5481565b3480156104f857600080fd5b50603d546102a4906001600160a01b031681565b34801561051857600080fd5b506102496114b4565b34801561052d57600080fd5b506103136114c1565b34801561054257600080fd5b506102fc610551366004612b59565b6114d5565b34801561056257600080fd5b506102fc61150e565b34801561057757600080fd5b5061027f610392366004612b59565b34801561059257600080fd5b506103416105a1366004612cec565b611640565b3480156105b257600080fd5b50610313603b5481565b3480156105c857600080fd5b506103416105d7366004612b85565b611d4d565b3480156105e857600080fd5b506102fc611dfc565b3480156105fd57600080fd5b5061034161060c366004612b85565b611e96565b34801561061d57600080fd5b5061031361062c366004612d1c565b611f50565b34801561063d57600080fd5b506103136301e187e081565b34801561065557600080fd5b50610249604051806040016040528060058152602001640312e302e360dc1b81525081565b6034805461068790612d4a565b80601f01602080910402602001604051908101604052809291908181526020018280546106b390612d4a565b80156107005780601f106106d557610100808354040283529160200191610700565b820191906000526020600020905b8154815290600101906020018083116106e357829003601f168201915b505050505081565b6000604051631b48e8f360e21b815260040160405180910390fd5b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b15801561076857600080fd5b505afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190612d85565b905090565b6107ad610723565b6001600160a01b0316336001600160a01b0316146107de57604051634b98449160e11b815260040160405180910390fd5b6038548181141561080257604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603855565b60008061084c611f6b565b505090508060395461085e9190612db8565b91505090565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b557600080fd5b505afa1580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed9190612de5565b1561090b57604051631b0e923f60e11b815260040160405180910390fd5b600260015414156109375760405162461bcd60e51b815260040161092e90612e00565b60405180910390fd5b60026001558261095a576040516310eb483f60e21b815260040160405180910390fd5b61096261150e565b600254603d546001600160a01b03918216911661097e85610d13565b90945092508215610a7257806001600160a01b031663b2a02ff133846001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109d257600080fd5b505afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a9190612d85565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101869052606401600060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050505b6000826001600160a01b031663f60928096040518163ffffffff1660e01b815260040160206040518083038186803b158015610aad57600080fd5b505afa158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae59190612e37565b90508015610c30576000836001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2857600080fd5b505afa158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b609190612d85565b6001600160a01b0316638d0dba008488610b798c610ecc565b610b839190612e50565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610bc757600080fd5b505afa158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff9190612e37565b9050600081118015610c1057508181105b15610c2e576040516332b9d47360e01b815260040160405180910390fd5b505b604051632770a7eb60e21b8152336004820152602481018690526001600160a01b03831690639dc29fac90604401600060405180830381600087803b158015610c7857600080fd5b505af1158015610c8c573d6000803e3d6000fd5b50505050610c9a8786611fdb565b60408051878152602081018790529081018590526001600160a01b0388169033907fe02887340b03318642b6755f258294b795be42ed57d4b5d0ef27be3038d8a7649060600160405180910390a35050600180555090939092509050565b600060405163d21ad44b60e01b815260040160405180910390fd5b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316637c0f59f46040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6657600080fd5b505afa158015610d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9e9190612e37565b905080610dac575091929050565b610dc8610dc182670de0b6b3a7640000612db8565b85906121e4565b9250610dd48385612e50565b915050915091565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316632a9133c16040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2f57600080fd5b505afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e679190612e37565b905080610e75575091929050565b610e7f8482612221565b9150610e8b8285612e50565b925050915091565b610e9b612259565b6001600160a01b038316610eb857610eb38282612294565b505050565b610eb36001600160a01b03841683836123ad565b6001600160a01b03811660009081526036602052604081205480610ef35750600092915050565b6000610efd611f6b565b506001600160a01b0386166000908152603760205260409020549092509050610f268284612e67565b610f309190612e86565b949350505050565b600054610100900460ff1680610f51575060005460ff16155b610f6d5760405162461bcd60e51b815260040161092e90612ea8565b600054610100900460ff16158015610f8f576000805461ffff19166101011790555b87610fad57604051636e83f50760e01b815260040160405180910390fd5b85610fcb576040516330507cff60e11b815260040160405180910390fd5b6001600160a01b038516610ff257604051633cb1fb1f60e11b815260040160405180910390fd5b6001600160a01b0384166110195760405163013a1b4360e51b815260040160405180910390fd5b6110216123ff565b61102a8561246f565b61103660348a8a612a48565b5061104360358888612a48565b50836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561107d57600080fd5b505afa158015611091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b59190612ef6565b603d805442603a55670de0b6b3a7640000603b55603c86905560388590556001600160a81b031960ff93909316600160a81b02929092166001600160b01b0319909216919091176001600160a01b03861617600160a01b1790558015611121576000805461ff00191690555b505050505050505050565b611134610723565b6001600160a01b0316336001600160a01b03161461116557604051634b98449160e11b815260040160405180910390fd5b61116d61150e565b603c548181141561119157604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f41e376fd99913dea7fda140f5c0bd997515b1a181acc58737320322548ec6e72910160405180910390a150603c55565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561122157600080fd5b505afa158015611235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112599190612de5565b1561127757604051631b0e923f60e11b815260040160405180910390fd5b6002600154141561129a5760405162461bcd60e51b815260040161092e90612e00565b60026001556112a761150e565b6112b083610ecc565b9150816112d0576040516310eb483f60e21b815260040160405180910390fd5b603d546001600160a01b031660006112e784611d4d565b9350905082156113ef57816001600160a01b031663b2a02ff133600260009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561134f57600080fd5b505afa158015611363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113879190612d85565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101869052606401600060405180830381600087803b1580156113d657600080fd5b505af11580156113ea573d6000803e3d6000fd5b505050505b604051632770a7eb60e21b8152336004820152602481018590526001600160a01b03831690639dc29fac90604401600060405180830381600087803b15801561143757600080fd5b505af115801561144b573d6000803e3d6000fd5b505050506114598585611fdb565b60408051828152602081018690529081018490526001600160a01b0386169033907fe02887340b03318642b6755f258294b795be42ed57d4b5d0ef27be3038d8a7649060600160405180910390a35050600180559092909150565b6035805461068790612d4a565b60006301e187e0603c546107a09190612e86565b6002546001600160a01b031633146115005760405163531f2aa960e11b815260040160405180910390fd5b61150a8282611fdb565b5050565b600080600061151b611f6b565b9250925092508042141561152e57505050565b42603a558215610eb357826039600082825461154a9190612db8565b9091555050603b829055603d54600254604080516331056e5760e21b815290516001600160a01b03938416936340c10f1993169163c415b95c916004808301926020929190829003018186803b1580156115a357600080fd5b505afa1580156115b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115db9190612d85565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b15801561162357600080fd5b505af1158015611637573d6000803e3d6000fd5b50505050505050565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561169157600080fd5b505afa1580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c99190612de5565b156116e757604051631b0e923f60e11b815260040160405180910390fd5b6002600154141561170a5760405162461bcd60e51b815260040161092e90612e00565b6002600181905554603d54604051631a0dd00b60e01b81526001600160a01b039182166004820152911690631a0dd00b9060240160206040518083038186803b15801561175657600080fd5b505afa15801561176a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178e9190612de5565b6117ab5760405163a596698b60e01b815260040160405180910390fd5b603d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f957600080fd5b505afa15801561180d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118319190612de5565b61184e576040516303127d9160e31b815260040160405180910390fd5b603d54600160a01b900460ff166118785760405163a4382ae360e01b815260040160405180910390fd5b83611896576040516310eb483f60e21b815260040160405180910390fd5b61189e61150e565b600254603d5460405163dde3ab9560e01b81523360048201526001600160a01b039283169290911690600090839063dde3ab959060240160a06040518083038186803b1580156118ed57600080fd5b505afa158015611901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119259190612f19565b9450505050506000836001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b15801561196657600080fd5b505afa15801561197a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199e9190612d85565b603d5460405163b5e9bef560e01b81526001600160a01b0391821660048201526024810185905291925082169063b5e9bef59060440160206040518083038186803b1580156119ec57600080fd5b505afa158015611a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a249190612e37565b881115611a435760405162d11df360e61b815260040160405180910390fd5b6000846001600160a01b031663f60928096040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7e57600080fd5b505afa158015611a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab69190612e37565b9050600081118015611b6d5750603d5481906001600160a01b0380851691638d0dba0091168c611ae533610ecc565b611aef9190612db8565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015611b3357600080fd5b505afa158015611b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6b9190612e37565b105b15611b8b57604051637e76d52960e11b815260040160405180910390fd5b611b9489610ddc565b90975095508515611c8057836001600160a01b03166340c10f19866001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611be757600080fd5b505afa158015611bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1f9190612d85565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101899052604401600060405180830381600087803b158015611c6757600080fd5b505af1158015611c7b573d6000803e3d6000fd5b505050505b6040516340c10f1960e01b81526001600160a01b038981166004830152602482018990528516906340c10f1990604401600060405180830381600087803b158015611cca57600080fd5b505af1158015611cde573d6000803e3d6000fd5b50505050611cec338a61251d565b604080518a8152602081018990529081018790526001600160a01b0389169033907f197d5e1e72d62df9dad3add8609553402104dbeb4f83f9789e33aeb6723a78399060600160405180910390a35050505050600180819055509250929050565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316637c0f59f46040518163ffffffff1660e01b815260040160206040518083038186803b158015611da057600080fd5b505afa158015611db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd89190612e37565b905080611de6575091929050565b611df08482612221565b9150610e8b8285612db8565b611e04610723565b6001600160a01b0316336001600160a01b031614611e3557604051634b98449160e11b815260040160405180910390fd5b603d54604051600160a01b90910460ff1615808252907fb1d9ceb4467fd05a16930f966760d70eb5926cf0c1c19a7b6bfe59d805c190459060200160405180910390a1603d8054911515600160a01b0260ff60a01b19909216919091179055565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316632a9133c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee957600080fd5b505afa158015611efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f219190612e37565b905080611f2f575091929050565b611f44610dc182670de0b6b3a7640000612e50565b9250610dd48484612e50565b600060405163effde13d60e01b815260040160405180910390fd5b603a54603b5460009142811015611fd6576000611f888242612e50565b611f906114c1565b611f9a9190612e67565b90508015611fd457603954611fb0908290612221565b9350611fc7603b548261222190919063ffffffff16565b611fd19084612db8565b92505b505b909192565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561202c57600080fd5b505afa158015612040573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120689190810190612f81565b603d5481519192506001600160a01b03169060005b818110156121165783818151811061209757612097613046565b6020908102919091010151604051626cc3c360e61b81526001600160a01b038581166004830152878116602483015290911690631b30f0c090604401600060405180830381600087803b1580156120ed57600080fd5b505af1158015612101573d6000803e3d6000fd5b505050508061210f9061305c565b905061207d565b506001600160a01b03861661213e5760405163170476af60e21b815260040160405180910390fd5b600061214987610ecc565b90508581101561216c57604051630bba337f60e11b815260040160405180910390fd5b6001600160a01b03871660008181526036602090815260408083208a86039055603b546037835281842055603980548b90039055518981529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611637876121df89610ecc565b61275c565b6000816121f2600282612e86565b612204670de0b6b3a764000086612e67565b61220e9190612db8565b6122189190612e86565b90505b92915050565b600082158061222e575081155b1561223b5750600061221b565b670de0b6b3a764000061224f600282612e86565b6122048486612e67565b612261610723565b6001600160a01b0316336001600160a01b03161461229257604051634b98449160e11b815260040160405180910390fd5b565b804710156122e45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161092e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612331576040519150601f19603f3d011682016040523d82523d6000602084013e612336565b606091505b5050905080610eb35760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161092e565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610eb39084906127c5565b600054610100900460ff1680612418575060005460ff16155b6124345760405162461bcd60e51b815260040161092e90612ea8565b600054610100900460ff16158015612456576000805461ffff19166101011790555b60018055801561246c576000805461ff00191690555b50565b600054610100900460ff1680612488575060005460ff16155b6124a45760405162461bcd60e51b815260040161092e90612ea8565b600054610100900460ff161580156124c6576000805461ffff19166101011790555b6001600160a01b0382166124ed5760405163724f500960e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b038416179055801561150a576000805461ff00191690555050565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561256e57600080fd5b505afa158015612582573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125aa9190810190612f81565b603d5481519192506001600160a01b03169060005b81811015612658578381815181106125d9576125d9613046565b6020908102919091010151604051626cc3c360e61b81526001600160a01b038581166004830152878116602483015290911690631b30f0c090604401600060405180830381600087803b15801561262f57600080fd5b505af1158015612643573d6000803e3d6000fd5b50505050806126519061305c565b90506125bf565b506001600160a01b03861661268057604051632b61339160e21b815260040160405180910390fd5b600061268b87610ecc565b9050856039600082825461269f9190612db8565b909155505060385460395411156126c957604051634aed251160e11b815260040160405180910390fd5b6001600160a01b038716600090815260366020526040812080548892906126f1908490612db8565b9091555050603b546001600160a01b0388166000818152603760205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061274a908a815260200190565b60405180910390a36116378782612897565b8061150a57600254604051631d71be3b60e21b81526001600160a01b038481166004830152909116906375c6f8ec906024015b600060405180830381600087803b1580156127a957600080fd5b505af11580156127bd573d6000803e3d6000fd5b505050505050565b600061281a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128ce9092919063ffffffff16565b805190915015610eb357808060200190518101906128389190612de5565b610eb35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161092e565b8061150a57600254604051631dc2da6d60e21b81526001600160a01b0384811660048301529091169063770b69b49060240161278f565b60606128dd84846000856128e7565b90505b9392505050565b6060824710156129485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161092e565b843b6129965760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161092e565b600080866001600160a01b031685876040516129b29190613077565b60006040518083038185875af1925050503d80600081146129ef576040519150601f19603f3d011682016040523d82523d6000602084013e6129f4565b606091505b5091509150612a04828286612a0f565b979650505050505050565b60608315612a1e5750816128e0565b825115612a2e5782518084602001fd5b8160405162461bcd60e51b815260040161092e9190612b11565b828054612a5490612d4a565b90600052602060002090601f016020900481019282612a765760008555612abc565b82601f10612a8f5782800160ff19823516178555612abc565b82800160010185558215612abc579182015b82811115612abc578235825591602001919060010190612aa1565b50612ac8929150612acc565b5090565b5b80821115612ac85760008155600101612acd565b60005b83811015612afc578181015183820152602001612ae4565b83811115612b0b576000848401525b50505050565b6020815260008251806020840152612b30816040850160208701612ae1565b601f01601f19169190910160400192915050565b6001600160a01b038116811461246c57600080fd5b60008060408385031215612b6c57600080fd5b8235612b7781612b44565b946020939093013593505050565b600060208284031215612b9757600080fd5b5035919050565b600080600060608486031215612bb357600080fd5b8335612bbe81612b44565b92506020840135612bce81612b44565b929592945050506040919091013590565b600060208284031215612bf157600080fd5b81356128e081612b44565b60008083601f840112612c0e57600080fd5b50813567ffffffffffffffff811115612c2657600080fd5b602083019150836020828501011115612c3e57600080fd5b9250929050565b60008060008060008060008060c0898b031215612c6157600080fd5b883567ffffffffffffffff80821115612c7957600080fd5b612c858c838d01612bfc565b909a50985060208b0135915080821115612c9e57600080fd5b50612cab8b828c01612bfc565b9097509550506040890135612cbf81612b44565b93506060890135612ccf81612b44565b979a969950949793969295929450505060808201359160a0013590565b60008060408385031215612cff57600080fd5b823591506020830135612d1181612b44565b809150509250929050565b60008060408385031215612d2f57600080fd5b8235612d3a81612b44565b91506020830135612d1181612b44565b600181811c90821680612d5e57607f821691505b60208210811415612d7f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612d9757600080fd5b81516128e081612b44565b634e487b7160e01b600052601160045260246000fd5b60008219821115612dcb57612dcb612da2565b500190565b80518015158114612de057600080fd5b919050565b600060208284031215612df757600080fd5b61221882612dd0565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215612e4957600080fd5b5051919050565b600082821015612e6257612e62612da2565b500390565b6000816000190483118215151615612e8157612e81612da2565b500290565b600082612ea357634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215612f0857600080fd5b815160ff811681146128e057600080fd5b600080600080600060a08688031215612f3157600080fd5b612f3a86612dd0565b602087015160408801516060890151608090990151929a91995097965090945092505050565b634e487b7160e01b600052604160045260246000fd5b8051612de081612b44565b60006020808385031215612f9457600080fd5b825167ffffffffffffffff80821115612fac57600080fd5b818501915085601f830112612fc057600080fd5b815181811115612fd257612fd2612f60565b8060051b604051601f19603f83011681018181108582111715612ff757612ff7612f60565b60405291825284820192508381018501918883111561301557600080fd5b938501935b8285101561303a5761302b85612f76565b8452938501939285019261301a565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561307057613070612da2565b5060010190565b60008251613089818460208701612ae1565b919091019291505056fea2646970667358221220a796e9a8945bcc9805a32bb7f62ac0775f358b473e549db50450fe256de4be4f64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101fd5760003560e01c8063752a50a61161010d578063a9059cbb116100a0578063d25933291161006f578063d2593329146105dc578063d38f2ba9146105f1578063dd62ed3e14610611578063e6a69ab814610631578063ffa1ad74146106495761021b565b8063a9059cbb1461056b578063b696a6ad14610586578063bb8c631f146105a6578063c9dc4b4d146105bc5761021b565b806395d89b41116100dc57806395d89b411461050c5780639cc820da146105215780639dc29fac14610536578063a6afed95146105565761021b565b8063752a50a6146104965780637c27383b146104b65780637c3a00fd146104d65780638230ecd6146104ec5761021b565b806323b872dd116101905780634754d1761161015f5780634754d17614610400578063565f3d4f1461042057806362c067671461043657806370a082311461045657806374e87e1e146104765761021b565b806323b872dd146103775780632ab4d052146103975780632d4aeea1146103ad578063313ce567146103cd5761021b565b8063172f50a4116101cc578063172f50a4146102dc57806318160ddd146102fe57806322867d781461032157806322f3e2d4146103565761021b565b806306fdde0314610234578063095ea7b31461025f5780630c340a241461028f57806316f0115b146102bc5761021b565b3661021b57604051636436c22d60e11b815260040160405180910390fd5b60405163a0152e6360e01b815260040160405180910390fd5b34801561024057600080fd5b5061024961067a565b6040516102569190612b11565b60405180910390f35b34801561026b57600080fd5b5061027f61027a366004612b59565b610708565b6040519015158152602001610256565b34801561029b57600080fd5b506102a4610723565b6040516001600160a01b039091168152602001610256565b3480156102c857600080fd5b506002546102a4906001600160a01b031681565b3480156102e857600080fd5b506102fc6102f7366004612b85565b6107a5565b005b34801561030a57600080fd5b50610313610841565b604051908152602001610256565b34801561032d57600080fd5b5061034161033c366004612b59565b610864565b60408051928352602083019190915201610256565b34801561036257600080fd5b50603d5461027f90600160a01b900460ff1681565b34801561038357600080fd5b5061027f610392366004612b9e565b610cf8565b3480156103a357600080fd5b5061031360385481565b3480156103b957600080fd5b506103416103c8366004612b85565b610d13565b3480156103d957600080fd5b50603d546103ee90600160a81b900460ff1681565b60405160ff9091168152602001610256565b34801561040c57600080fd5b5061034161041b366004612b85565b610ddc565b34801561042c57600080fd5b50610313603a5481565b34801561044257600080fd5b506102fc610451366004612b9e565b610e93565b34801561046257600080fd5b50610313610471366004612bdf565b610ecc565b34801561048257600080fd5b506102fc610491366004612c45565b610f38565b3480156104a257600080fd5b506102fc6104b1366004612b85565b61112c565b3480156104c257600080fd5b506103416104d1366004612bdf565b6111d0565b3480156104e257600080fd5b50610313603c5481565b3480156104f857600080fd5b50603d546102a4906001600160a01b031681565b34801561051857600080fd5b506102496114b4565b34801561052d57600080fd5b506103136114c1565b34801561054257600080fd5b506102fc610551366004612b59565b6114d5565b34801561056257600080fd5b506102fc61150e565b34801561057757600080fd5b5061027f610392366004612b59565b34801561059257600080fd5b506103416105a1366004612cec565b611640565b3480156105b257600080fd5b50610313603b5481565b3480156105c857600080fd5b506103416105d7366004612b85565b611d4d565b3480156105e857600080fd5b506102fc611dfc565b3480156105fd57600080fd5b5061034161060c366004612b85565b611e96565b34801561061d57600080fd5b5061031361062c366004612d1c565b611f50565b34801561063d57600080fd5b506103136301e187e081565b34801561065557600080fd5b50610249604051806040016040528060058152602001640312e302e360dc1b81525081565b6034805461068790612d4a565b80601f01602080910402602001604051908101604052809291908181526020018280546106b390612d4a565b80156107005780601f106106d557610100808354040283529160200191610700565b820191906000526020600020905b8154815290600101906020018083116106e357829003601f168201915b505050505081565b6000604051631b48e8f360e21b815260040160405180910390fd5b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b15801561076857600080fd5b505afa15801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190612d85565b905090565b6107ad610723565b6001600160a01b0316336001600160a01b0316146107de57604051634b98449160e11b815260040160405180910390fd5b6038548181141561080257604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603855565b60008061084c611f6b565b505090508060395461085e9190612db8565b91505090565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b557600080fd5b505afa1580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed9190612de5565b1561090b57604051631b0e923f60e11b815260040160405180910390fd5b600260015414156109375760405162461bcd60e51b815260040161092e90612e00565b60405180910390fd5b60026001558261095a576040516310eb483f60e21b815260040160405180910390fd5b61096261150e565b600254603d546001600160a01b03918216911661097e85610d13565b90945092508215610a7257806001600160a01b031663b2a02ff133846001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109d257600080fd5b505afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a9190612d85565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101869052606401600060405180830381600087803b158015610a5957600080fd5b505af1158015610a6d573d6000803e3d6000fd5b505050505b6000826001600160a01b031663f60928096040518163ffffffff1660e01b815260040160206040518083038186803b158015610aad57600080fd5b505afa158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae59190612e37565b90508015610c30576000836001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2857600080fd5b505afa158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b609190612d85565b6001600160a01b0316638d0dba008488610b798c610ecc565b610b839190612e50565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015610bc757600080fd5b505afa158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff9190612e37565b9050600081118015610c1057508181105b15610c2e576040516332b9d47360e01b815260040160405180910390fd5b505b604051632770a7eb60e21b8152336004820152602481018690526001600160a01b03831690639dc29fac90604401600060405180830381600087803b158015610c7857600080fd5b505af1158015610c8c573d6000803e3d6000fd5b50505050610c9a8786611fdb565b60408051878152602081018790529081018590526001600160a01b0388169033907fe02887340b03318642b6755f258294b795be42ed57d4b5d0ef27be3038d8a7649060600160405180910390a35050600180555090939092509050565b600060405163d21ad44b60e01b815260040160405180910390fd5b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316637c0f59f46040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6657600080fd5b505afa158015610d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9e9190612e37565b905080610dac575091929050565b610dc8610dc182670de0b6b3a7640000612db8565b85906121e4565b9250610dd48385612e50565b915050915091565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316632a9133c16040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2f57600080fd5b505afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e679190612e37565b905080610e75575091929050565b610e7f8482612221565b9150610e8b8285612e50565b925050915091565b610e9b612259565b6001600160a01b038316610eb857610eb38282612294565b505050565b610eb36001600160a01b03841683836123ad565b6001600160a01b03811660009081526036602052604081205480610ef35750600092915050565b6000610efd611f6b565b506001600160a01b0386166000908152603760205260409020549092509050610f268284612e67565b610f309190612e86565b949350505050565b600054610100900460ff1680610f51575060005460ff16155b610f6d5760405162461bcd60e51b815260040161092e90612ea8565b600054610100900460ff16158015610f8f576000805461ffff19166101011790555b87610fad57604051636e83f50760e01b815260040160405180910390fd5b85610fcb576040516330507cff60e11b815260040160405180910390fd5b6001600160a01b038516610ff257604051633cb1fb1f60e11b815260040160405180910390fd5b6001600160a01b0384166110195760405163013a1b4360e51b815260040160405180910390fd5b6110216123ff565b61102a8561246f565b61103660348a8a612a48565b5061104360358888612a48565b50836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561107d57600080fd5b505afa158015611091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b59190612ef6565b603d805442603a55670de0b6b3a7640000603b55603c86905560388590556001600160a81b031960ff93909316600160a81b02929092166001600160b01b0319909216919091176001600160a01b03861617600160a01b1790558015611121576000805461ff00191690555b505050505050505050565b611134610723565b6001600160a01b0316336001600160a01b03161461116557604051634b98449160e11b815260040160405180910390fd5b61116d61150e565b603c548181141561119157604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f41e376fd99913dea7fda140f5c0bd997515b1a181acc58737320322548ec6e72910160405180910390a150603c55565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561122157600080fd5b505afa158015611235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112599190612de5565b1561127757604051631b0e923f60e11b815260040160405180910390fd5b6002600154141561129a5760405162461bcd60e51b815260040161092e90612e00565b60026001556112a761150e565b6112b083610ecc565b9150816112d0576040516310eb483f60e21b815260040160405180910390fd5b603d546001600160a01b031660006112e784611d4d565b9350905082156113ef57816001600160a01b031663b2a02ff133600260009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561134f57600080fd5b505afa158015611363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113879190612d85565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101869052606401600060405180830381600087803b1580156113d657600080fd5b505af11580156113ea573d6000803e3d6000fd5b505050505b604051632770a7eb60e21b8152336004820152602481018590526001600160a01b03831690639dc29fac90604401600060405180830381600087803b15801561143757600080fd5b505af115801561144b573d6000803e3d6000fd5b505050506114598585611fdb565b60408051828152602081018690529081018490526001600160a01b0386169033907fe02887340b03318642b6755f258294b795be42ed57d4b5d0ef27be3038d8a7649060600160405180910390a35050600180559092909150565b6035805461068790612d4a565b60006301e187e0603c546107a09190612e86565b6002546001600160a01b031633146115005760405163531f2aa960e11b815260040160405180910390fd5b61150a8282611fdb565b5050565b600080600061151b611f6b565b9250925092508042141561152e57505050565b42603a558215610eb357826039600082825461154a9190612db8565b9091555050603b829055603d54600254604080516331056e5760e21b815290516001600160a01b03938416936340c10f1993169163c415b95c916004808301926020929190829003018186803b1580156115a357600080fd5b505afa1580156115b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115db9190612d85565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b15801561162357600080fd5b505af1158015611637573d6000803e3d6000fd5b50505050505050565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561169157600080fd5b505afa1580156116a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c99190612de5565b156116e757604051631b0e923f60e11b815260040160405180910390fd5b6002600154141561170a5760405162461bcd60e51b815260040161092e90612e00565b6002600181905554603d54604051631a0dd00b60e01b81526001600160a01b039182166004820152911690631a0dd00b9060240160206040518083038186803b15801561175657600080fd5b505afa15801561176a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178e9190612de5565b6117ab5760405163a596698b60e01b815260040160405180910390fd5b603d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f957600080fd5b505afa15801561180d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118319190612de5565b61184e576040516303127d9160e31b815260040160405180910390fd5b603d54600160a01b900460ff166118785760405163a4382ae360e01b815260040160405180910390fd5b83611896576040516310eb483f60e21b815260040160405180910390fd5b61189e61150e565b600254603d5460405163dde3ab9560e01b81523360048201526001600160a01b039283169290911690600090839063dde3ab959060240160a06040518083038186803b1580156118ed57600080fd5b505afa158015611901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119259190612f19565b9450505050506000836001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b15801561196657600080fd5b505afa15801561197a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199e9190612d85565b603d5460405163b5e9bef560e01b81526001600160a01b0391821660048201526024810185905291925082169063b5e9bef59060440160206040518083038186803b1580156119ec57600080fd5b505afa158015611a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a249190612e37565b881115611a435760405162d11df360e61b815260040160405180910390fd5b6000846001600160a01b031663f60928096040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7e57600080fd5b505afa158015611a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab69190612e37565b9050600081118015611b6d5750603d5481906001600160a01b0380851691638d0dba0091168c611ae533610ecc565b611aef9190612db8565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260440160206040518083038186803b158015611b3357600080fd5b505afa158015611b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6b9190612e37565b105b15611b8b57604051637e76d52960e11b815260040160405180910390fd5b611b9489610ddc565b90975095508515611c8057836001600160a01b03166340c10f19866001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611be757600080fd5b505afa158015611bfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1f9190612d85565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101899052604401600060405180830381600087803b158015611c6757600080fd5b505af1158015611c7b573d6000803e3d6000fd5b505050505b6040516340c10f1960e01b81526001600160a01b038981166004830152602482018990528516906340c10f1990604401600060405180830381600087803b158015611cca57600080fd5b505af1158015611cde573d6000803e3d6000fd5b50505050611cec338a61251d565b604080518a8152602081018990529081018790526001600160a01b0389169033907f197d5e1e72d62df9dad3add8609553402104dbeb4f83f9789e33aeb6723a78399060600160405180910390a35050505050600180819055509250929050565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316637c0f59f46040518163ffffffff1660e01b815260040160206040518083038186803b158015611da057600080fd5b505afa158015611db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd89190612e37565b905080611de6575091929050565b611df08482612221565b9150610e8b8285612db8565b611e04610723565b6001600160a01b0316336001600160a01b031614611e3557604051634b98449160e11b815260040160405180910390fd5b603d54604051600160a01b90910460ff1615808252907fb1d9ceb4467fd05a16930f966760d70eb5926cf0c1c19a7b6bfe59d805c190459060200160405180910390a1603d8054911515600160a01b0260ff60a01b19909216919091179055565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316632a9133c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee957600080fd5b505afa158015611efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f219190612e37565b905080611f2f575091929050565b611f44610dc182670de0b6b3a7640000612e50565b9250610dd48484612e50565b600060405163effde13d60e01b815260040160405180910390fd5b603a54603b5460009142811015611fd6576000611f888242612e50565b611f906114c1565b611f9a9190612e67565b90508015611fd457603954611fb0908290612221565b9350611fc7603b548261222190919063ffffffff16565b611fd19084612db8565b92505b505b909192565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561202c57600080fd5b505afa158015612040573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120689190810190612f81565b603d5481519192506001600160a01b03169060005b818110156121165783818151811061209757612097613046565b6020908102919091010151604051626cc3c360e61b81526001600160a01b038581166004830152878116602483015290911690631b30f0c090604401600060405180830381600087803b1580156120ed57600080fd5b505af1158015612101573d6000803e3d6000fd5b505050508061210f9061305c565b905061207d565b506001600160a01b03861661213e5760405163170476af60e21b815260040160405180910390fd5b600061214987610ecc565b90508581101561216c57604051630bba337f60e11b815260040160405180910390fd5b6001600160a01b03871660008181526036602090815260408083208a86039055603b546037835281842055603980548b90039055518981529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3611637876121df89610ecc565b61275c565b6000816121f2600282612e86565b612204670de0b6b3a764000086612e67565b61220e9190612db8565b6122189190612e86565b90505b92915050565b600082158061222e575081155b1561223b5750600061221b565b670de0b6b3a764000061224f600282612e86565b6122048486612e67565b612261610723565b6001600160a01b0316336001600160a01b03161461229257604051634b98449160e11b815260040160405180910390fd5b565b804710156122e45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161092e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612331576040519150601f19603f3d011682016040523d82523d6000602084013e612336565b606091505b5050905080610eb35760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161092e565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610eb39084906127c5565b600054610100900460ff1680612418575060005460ff16155b6124345760405162461bcd60e51b815260040161092e90612ea8565b600054610100900460ff16158015612456576000805461ffff19166101011790555b60018055801561246c576000805461ff00191690555b50565b600054610100900460ff1680612488575060005460ff16155b6124a45760405162461bcd60e51b815260040161092e90612ea8565b600054610100900460ff161580156124c6576000805461ffff19166101011790555b6001600160a01b0382166124ed5760405163724f500960e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b038416179055801561150a576000805461ff00191690555050565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561256e57600080fd5b505afa158015612582573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125aa9190810190612f81565b603d5481519192506001600160a01b03169060005b81811015612658578381815181106125d9576125d9613046565b6020908102919091010151604051626cc3c360e61b81526001600160a01b038581166004830152878116602483015290911690631b30f0c090604401600060405180830381600087803b15801561262f57600080fd5b505af1158015612643573d6000803e3d6000fd5b50505050806126519061305c565b90506125bf565b506001600160a01b03861661268057604051632b61339160e21b815260040160405180910390fd5b600061268b87610ecc565b9050856039600082825461269f9190612db8565b909155505060385460395411156126c957604051634aed251160e11b815260040160405180910390fd5b6001600160a01b038716600090815260366020526040812080548892906126f1908490612db8565b9091555050603b546001600160a01b0388166000818152603760205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061274a908a815260200190565b60405180910390a36116378782612897565b8061150a57600254604051631d71be3b60e21b81526001600160a01b038481166004830152909116906375c6f8ec906024015b600060405180830381600087803b1580156127a957600080fd5b505af11580156127bd573d6000803e3d6000fd5b505050505050565b600061281a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128ce9092919063ffffffff16565b805190915015610eb357808060200190518101906128389190612de5565b610eb35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161092e565b8061150a57600254604051631dc2da6d60e21b81526001600160a01b0384811660048301529091169063770b69b49060240161278f565b60606128dd84846000856128e7565b90505b9392505050565b6060824710156129485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161092e565b843b6129965760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161092e565b600080866001600160a01b031685876040516129b29190613077565b60006040518083038185875af1925050503d80600081146129ef576040519150601f19603f3d011682016040523d82523d6000602084013e6129f4565b606091505b5091509150612a04828286612a0f565b979650505050505050565b60608315612a1e5750816128e0565b825115612a2e5782518084602001fd5b8160405162461bcd60e51b815260040161092e9190612b11565b828054612a5490612d4a565b90600052602060002090601f016020900481019282612a765760008555612abc565b82601f10612a8f5782800160ff19823516178555612abc565b82800160010185558215612abc579182015b82811115612abc578235825591602001919060010190612aa1565b50612ac8929150612acc565b5090565b5b80821115612ac85760008155600101612acd565b60005b83811015612afc578181015183820152602001612ae4565b83811115612b0b576000848401525b50505050565b6020815260008251806020840152612b30816040850160208701612ae1565b601f01601f19169190910160400192915050565b6001600160a01b038116811461246c57600080fd5b60008060408385031215612b6c57600080fd5b8235612b7781612b44565b946020939093013593505050565b600060208284031215612b9757600080fd5b5035919050565b600080600060608486031215612bb357600080fd5b8335612bbe81612b44565b92506020840135612bce81612b44565b929592945050506040919091013590565b600060208284031215612bf157600080fd5b81356128e081612b44565b60008083601f840112612c0e57600080fd5b50813567ffffffffffffffff811115612c2657600080fd5b602083019150836020828501011115612c3e57600080fd5b9250929050565b60008060008060008060008060c0898b031215612c6157600080fd5b883567ffffffffffffffff80821115612c7957600080fd5b612c858c838d01612bfc565b909a50985060208b0135915080821115612c9e57600080fd5b50612cab8b828c01612bfc565b9097509550506040890135612cbf81612b44565b93506060890135612ccf81612b44565b979a969950949793969295929450505060808201359160a0013590565b60008060408385031215612cff57600080fd5b823591506020830135612d1181612b44565b809150509250929050565b60008060408385031215612d2f57600080fd5b8235612d3a81612b44565b91506020830135612d1181612b44565b600181811c90821680612d5e57607f821691505b60208210811415612d7f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612d9757600080fd5b81516128e081612b44565b634e487b7160e01b600052601160045260246000fd5b60008219821115612dcb57612dcb612da2565b500190565b80518015158114612de057600080fd5b919050565b600060208284031215612df757600080fd5b61221882612dd0565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060208284031215612e4957600080fd5b5051919050565b600082821015612e6257612e62612da2565b500390565b6000816000190483118215151615612e8157612e81612da2565b500290565b600082612ea357634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215612f0857600080fd5b815160ff811681146128e057600080fd5b600080600080600060a08688031215612f3157600080fd5b612f3a86612dd0565b602087015160408801516060890151608090990151929a91995097965090945092505050565b634e487b7160e01b600052604160045260246000fd5b8051612de081612b44565b60006020808385031215612f9457600080fd5b825167ffffffffffffffff80821115612fac57600080fd5b818501915085601f830112612fc057600080fd5b815181811115612fd257612fd2612f60565b8060051b604051601f19603f83011681018181108582111715612ff757612ff7612f60565b60405291825284820192508381018501918883111561301557600080fd5b938501935b8285101561303a5761302b85612f76565b8452938501939285019261301a565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561307057613070612da2565b5060010190565b60008251613089818460208701612ae1565b919091019291505056fea2646970667358221220a796e9a8945bcc9805a32bb7f62ac0775f358b473e549db50450fe256de4be4f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "burn(address,uint256)": {
        "params": {
          "amount_": "The amount to burn",
          "from_": "The account to burn from"
        }
      },
      "governor()": {
        "returns": {
          "_governor": "The governor"
        }
      },
      "issue(uint256,address)": {
        "params": {
          "amount_": "The amount to mint",
          "to_": "The beneficiary account"
        },
        "returns": {
          "_fee": "The fee amount collected",
          "_issued": "The amount issued after fees"
        }
      },
      "quoteIssueIn(uint256)": {
        "params": {
          "amountToIssue_": "Synth to issue"
        },
        "returns": {
          "_amount": "Gross amount",
          "_fee": "The fee amount to collect"
        }
      },
      "quoteIssueOut(uint256)": {
        "params": {
          "amount_": "Gross amount"
        },
        "returns": {
          "_amountToIssue": "Synth to issue",
          "_fee": "The fee amount to collect"
        }
      },
      "quoteRepayIn(uint256)": {
        "params": {
          "amountToRepay_": "Debt amount to repay"
        },
        "returns": {
          "_amount": "Gross amount",
          "_fee": "The fee amount to collect"
        }
      },
      "quoteRepayOut(uint256)": {
        "params": {
          "amount_": "Gross amount"
        },
        "returns": {
          "_amountToRepay": "Debt amount to repay",
          "_fee": "The fee amount to collect"
        }
      },
      "repay(address,uint256)": {
        "details": "The msg.sender is the payer and the account beneficed",
        "params": {
          "amount_": "The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)",
          "onBehalfOf_": "The account that will have debt decreased"
        },
        "returns": {
          "_repaid": "The amount repaid after fees"
        }
      },
      "repayAll(address)": {
        "details": "This function helps users to no leave debt dust behind",
        "params": {
          "onBehalfOf_": "The account that will have debt decreased"
        },
        "returns": {
          "_fee": "The fee amount collected",
          "_repaid": "The amount repaid after fees"
        }
      },
      "sweep(address,address,uint256)": {
        "params": {
          "amount_": "The amount to send",
          "to_": "The recipient of the transfer",
          "token_": "The token to transfer"
        }
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      }
    },
    "title": "Non-transferable token that represents users' debts",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DebtRepaid(address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when synthetic's debt is repaid"
      },
      "DebtTokenActiveUpdated(bool)": {
        "notice": "Emitted when active flag is updated"
      },
      "InterestRateUpdated(uint256,uint256)": {
        "notice": "Emitted when interest rate is updated"
      },
      "MaxTotalSupplyUpdated(uint256,uint256)": {
        "notice": "Emitted when max total supply is updated"
      },
      "SyntheticTokenIssued(address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when synthetic token is issued"
      }
    },
    "kind": "user",
    "methods": {
      "accrueInterest()": {
        "notice": "Accrue interest over debt supply"
      },
      "balanceOf(address)": {
        "notice": "Get the updated (principal + interest) user's debt"
      },
      "burn(address,uint256)": {
        "notice": "Burn debt token"
      },
      "debtIndex()": {
        "notice": "Accumulator of the total earned interest rate since the beginning"
      },
      "decimals()": {
        "notice": "The decimals of the token"
      },
      "governor()": {
        "notice": "Get the governor"
      },
      "interestRate()": {
        "notice": "Interest rate"
      },
      "interestRatePerSecond()": {
        "notice": "Return interest rate (in percent) per second"
      },
      "isActive()": {
        "notice": "If true, disables msAsset minting on this pool"
      },
      "issue(uint256,address)": {
        "notice": "Lock collateral and mint synthetic token"
      },
      "lastTimestampAccrued()": {
        "notice": "The timestamp when interest accrual was calculated for the last time"
      },
      "maxTotalSupply()": {
        "notice": "The supply cap"
      },
      "name()": {
        "notice": "The name of the token"
      },
      "pool()": {
        "notice": "Pool contract"
      },
      "quoteIssueIn(uint256)": {
        "notice": "Quote gross `_amount` to issue `amountToIssue_` synthetic tokens"
      },
      "quoteIssueOut(uint256)": {
        "notice": "Quote synthetic tokens `_amountToIssue` by using gross `_amount`"
      },
      "quoteRepayIn(uint256)": {
        "notice": "Quote synthetic token `_amount` need to repay `amountToRepay_` debt"
      },
      "quoteRepayOut(uint256)": {
        "notice": "Quote debt `_amountToRepay` by burning `_amount` synthetic tokens"
      },
      "repay(address,uint256)": {
        "notice": "Send synthetic token to decrease debt"
      },
      "repayAll(address)": {
        "notice": "Send synthetic token to decrease debt"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      },
      "symbol()": {
        "notice": "The symbol of the token"
      },
      "syntheticToken()": {
        "notice": "The Synthetic token"
      },
      "toggleIsActive()": {
        "notice": "Enable/Disable the Debt Token"
      },
      "totalSupply()": {
        "notice": "Return the total supply"
      },
      "updateInterestRate(uint256)": {
        "notice": "Update interest rate (APR)"
      },
      "updateMaxTotalSupply(uint256)": {
        "notice": "Update max total supply"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7824,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7827,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7878,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7707,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPool)10334"
      },
      {
        "astId": 7817,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11851,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "name",
        "offset": 0,
        "slot": "52",
        "type": "t_string_storage"
      },
      {
        "astId": 11855,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "symbol",
        "offset": 0,
        "slot": "53",
        "type": "t_string_storage"
      },
      {
        "astId": 11860,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "principalOf",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11865,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "debtIndexOf",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11869,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "maxTotalSupply",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 11872,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "totalSupply_",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 11876,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "lastTimestampAccrued",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 11880,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "debtIndex",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 11884,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "interestRate",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 11889,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "syntheticToken",
        "offset": 0,
        "slot": "61",
        "type": "t_contract(ISyntheticToken)10598"
      },
      {
        "astId": 11893,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "isActive",
        "offset": 20,
        "slot": "61",
        "type": "t_bool"
      },
      {
        "astId": 11897,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "decimals",
        "offset": 21,
        "slot": "61",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPool)10334": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(ISyntheticToken)10598": {
        "encoding": "inplace",
        "label": "contract ISyntheticToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}