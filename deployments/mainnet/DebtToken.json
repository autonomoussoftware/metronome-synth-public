{
  "address": "0xE2DbE32823Be67E346b0c6DB9395ce79133084d0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AllowanceNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnFromNullAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DebtLowerThanTheFloor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DebtTokenInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackIsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsShutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToNullAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NameIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewValueIsSameAsCurrent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolAddressIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReceiveIsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RemainingDebtIsLowerThanTheFloor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotSmartFarmingManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SurpassMaxDebtSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SymbolIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SyntheticDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SyntheticIsInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SyntheticIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferNotSupported",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "DebtRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newActive",
          "type": "bool"
        }
      ],
      "name": "DebtTokenActiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldInterestRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInterestRate",
          "type": "uint256"
        }
      ],
      "name": "InterestRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "issued",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SyntheticTokenIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectPendingInterestFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "flashIssue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_issued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "contract IPool",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interestRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRatePerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        }
      ],
      "name": "issue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_issued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimestampAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingInterestFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToIssue_",
          "type": "uint256"
        }
      ],
      "name": "quoteIssueIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "quoteIssueOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountToIssue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToRepay_",
          "type": "uint256"
        }
      ],
      "name": "quoteRepayIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "quoteRepayOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountToRepay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "onBehalfOf_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_repaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "onBehalfOf_",
          "type": "address"
        }
      ],
      "name": "repayAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_repaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticToken",
      "outputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newInterestRate_",
          "type": "uint256"
        }
      ],
      "name": "updateInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x025769e108d1a934fa3cc3dff382ecdf9d9c35321ac3146440513f65c79fccfe",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0xE2DbE32823Be67E346b0c6DB9395ce79133084d0",
    "transactionIndex": 92,
    "gasUsed": "3431734",
    "logsBloom": "0x
    "blockHash": "0x2f841065bc6a7e990177317eaf598fe2732af89d4e2c57fa5b1610ba0dda6282",
    "transactionHash": "0x025769e108d1a934fa3cc3dff382ecdf9d9c35321ac3146440513f65c79fccfe",
    "logs": [],
    "blockNumber": 18314492,
    "cumulativeGasUsed": "9957050",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "545cb6254fd08cfae8ffa56eab2faa67",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllowanceNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnFromNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtLowerThanTheFloor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtTokenInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewValueIsSameAsCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceiveIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemainingDebtIsLowerThanTheFloor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotSmartFarmingManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SurpassMaxDebtSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SymbolIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticIsInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DebtRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newActive\",\"type\":\"bool\"}],\"name\":\"DebtTokenActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldInterestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInterestRate\",\"type\":\"uint256\"}],\"name\":\"InterestRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SyntheticTokenIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"SECONDS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectPendingInterestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"flashIssue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_issued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract IPool\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interestRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRatePerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_issued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimestampAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingInterestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToIssue_\",\"type\":\"uint256\"}],\"name\":\"quoteIssueIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"quoteIssueOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToIssue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRepay_\",\"type\":\"uint256\"}],\"name\":\"quoteRepayIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"quoteRepayOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_repaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf_\",\"type\":\"address\"}],\"name\":\"repayAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_repaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticToken\",\"outputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInterestRate_\",\"type\":\"uint256\"}],\"name\":\"updateInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"updateMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"burn(address,uint256)\":{\"params\":{\"amount_\":\"The amount to burn\",\"from_\":\"The account to burn from\"}},\"flashIssue(address,uint256)\":{\"details\":\"The healthy of outcome position must be done afterhand\",\"params\":{\"amount_\":\"The amount to mint\",\"to_\":\"The beneficiary account\"},\"returns\":{\"_fee\":\"The fee amount collected\",\"_issued\":\"The amount issued after fees\"}},\"governor()\":{\"returns\":{\"_governor\":\"The governor\"}},\"issue(uint256,address)\":{\"params\":{\"amount_\":\"The amount to mint\",\"to_\":\"The beneficiary account\"},\"returns\":{\"_fee\":\"The fee amount collected\",\"_issued\":\"The amount issued after fees\"}},\"mint(address,uint256)\":{\"params\":{\"amount_\":\"Token amount to mint\",\"to_\":\"Receiver address\"}},\"quoteIssueIn(uint256)\":{\"params\":{\"amountToIssue_\":\"Synth to issue\"},\"returns\":{\"_amount\":\"Gross amount\",\"_fee\":\"The fee amount to collect\"}},\"quoteIssueOut(uint256)\":{\"params\":{\"amount_\":\"Gross amount\"},\"returns\":{\"_amountToIssue\":\"Synth to issue\",\"_fee\":\"The fee amount to collect\"}},\"quoteRepayIn(uint256)\":{\"params\":{\"amountToRepay_\":\"Debt amount to repay\"},\"returns\":{\"_amount\":\"Gross amount\",\"_fee\":\"The fee amount to collect\"}},\"quoteRepayOut(uint256)\":{\"params\":{\"amount_\":\"Gross amount\"},\"returns\":{\"_amountToRepay\":\"Debt amount to repay\",\"_fee\":\"The fee amount to collect\"}},\"repay(address,uint256)\":{\"details\":\"The msg.sender is the payer and the account beneficed\",\"params\":{\"amount_\":\"The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)\",\"onBehalfOf_\":\"The account that will have debt decreased\"},\"returns\":{\"_repaid\":\"The amount repaid after fees\"}},\"repayAll(address)\":{\"details\":\"This function helps users to no leave debt dust behind\",\"params\":{\"onBehalfOf_\":\"The account that will have debt decreased\"},\"returns\":{\"_fee\":\"The fee amount collected\",\"_repaid\":\"The amount repaid after fees\"}},\"sweep(address,address,uint256)\":{\"params\":{\"amount_\":\"The amount to send\",\"to_\":\"The recipient of the transfer\",\"token_\":\"The token to transfer\"}},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"title\":\"Non-transferable token that represents users' debts\",\"version\":1},\"userdoc\":{\"events\":{\"DebtRepaid(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when synthetic's debt is repaid\"},\"DebtTokenActiveUpdated(bool)\":{\"notice\":\"Emitted when active flag is updated\"},\"InterestRateUpdated(uint256,uint256)\":{\"notice\":\"Emitted when interest rate is updated\"},\"MaxTotalSupplyUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max total supply is updated\"},\"SyntheticTokenIssued(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when synthetic token is issued\"}},\"kind\":\"user\",\"methods\":{\"accrueInterest()\":{\"notice\":\"Accrue interest over debt supply\"},\"balanceOf(address)\":{\"notice\":\"Get the updated (principal + interest) user's debt\"},\"burn(address,uint256)\":{\"notice\":\"Burn debt token\"},\"collectPendingInterestFee()\":{\"notice\":\"Collect pending interest fee if any\"},\"debtIndex()\":{\"notice\":\"Accumulator of the total earned interest rate since the beginning\"},\"decimals()\":{\"notice\":\"The decimals of the token\"},\"flashIssue(address,uint256)\":{\"notice\":\"Issue synth without checking collateral and without minting debt tokens\"},\"governor()\":{\"notice\":\"Get the governor\"},\"interestRate()\":{\"notice\":\"Interest rate\"},\"interestRatePerSecond()\":{\"notice\":\"Return interest rate (in percent) per second\"},\"isActive()\":{\"notice\":\"If true, disables msAsset minting on this pool\"},\"issue(uint256,address)\":{\"notice\":\"Lock collateral and mint synthetic token\"},\"lastTimestampAccrued()\":{\"notice\":\"The timestamp when interest accrual was calculated for the last time\"},\"maxTotalSupply()\":{\"notice\":\"The supply cap\"},\"mint(address,uint256)\":{\"notice\":\"onlySmartFarmingManager:: Mint `amount_` of debtToken at `to_`.\"},\"name()\":{\"notice\":\"The name of the token\"},\"pendingInterestFee()\":{\"notice\":\"Pending interest fee to collect\"},\"pool()\":{\"notice\":\"Pool contract\"},\"quoteIssueIn(uint256)\":{\"notice\":\"Quote gross `_amount` to issue `amountToIssue_` synthetic tokens\"},\"quoteIssueOut(uint256)\":{\"notice\":\"Quote synthetic tokens `_amountToIssue` by using gross `_amount`\"},\"quoteRepayIn(uint256)\":{\"notice\":\"Quote synthetic token `_amount` need to repay `amountToRepay_` debt\"},\"quoteRepayOut(uint256)\":{\"notice\":\"Quote debt `_amountToRepay` by burning `_amount` synthetic tokens\"},\"repay(address,uint256)\":{\"notice\":\"Send synthetic token to decrease debt\"},\"repayAll(address)\":{\"notice\":\"Send synthetic token to decrease debt\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"},\"symbol()\":{\"notice\":\"The symbol of the token\"},\"syntheticToken()\":{\"notice\":\"The Synthetic token\"},\"toggleIsActive()\":{\"notice\":\"Enable/Disable the Debt Token\"},\"totalSupply()\":{\"notice\":\"Return the total supply\"},\"updateInterestRate(uint256)\":{\"notice\":\"Update interest rate (APR)\"},\"updateMaxTotalSupply(uint256)\":{\"notice\":\"Update max total supply\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DebtToken.sol\":\"DebtToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./utils/TokenHolder.sol\\\";\\nimport \\\"./access/Manageable.sol\\\";\\nimport \\\"./storage/DebtTokenStorage.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\n\\nerror SyntheticDoesNotExist();\\nerror SyntheticIsInactive();\\nerror DebtTokenInactive();\\nerror NameIsNull();\\nerror SymbolIsNull();\\nerror PoolIsNull();\\nerror SyntheticIsNull();\\nerror AllowanceNotSupported();\\nerror ApprovalNotSupported();\\nerror AmountIsZero();\\nerror NotEnoughCollateral();\\nerror DebtLowerThanTheFloor();\\nerror RemainingDebtIsLowerThanTheFloor();\\nerror TransferNotSupported();\\nerror BurnFromNullAddress();\\nerror BurnAmountExceedsBalance();\\nerror MintToNullAddress();\\nerror SurpassMaxDebtSupply();\\nerror NewValueIsSameAsCurrent();\\nerror SenderIsNotSmartFarmingManager();\\n\\n/**\\n * @title Non-transferable token that represents users' debts\\n */\\ncontract DebtToken is ReentrancyGuard, TokenHolder, Manageable, DebtTokenStorageV2 {\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    uint256 public constant SECONDS_PER_YEAR = 365.25 days;\\n    uint256 private constant HUNDRED_PERCENT = 1e18;\\n\\n    /// @notice Emitted when synthetic's debt is repaid\\n    event DebtRepaid(address indexed payer, address indexed account, uint256 amount, uint256 repaid, uint256 fee);\\n\\n    /// @notice Emitted when active flag is updated\\n    event DebtTokenActiveUpdated(bool newActive);\\n\\n    /// @notice Emitted when interest rate is updated\\n    event InterestRateUpdated(uint256 oldInterestRate, uint256 newInterestRate);\\n\\n    /// @notice Emitted when max total supply is updated\\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupply, uint256 newMaxTotalSupply);\\n\\n    /// @notice Emitted when synthetic token is issued\\n    event SyntheticTokenIssued(\\n        address indexed account,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 issued,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Throws if sender is not SmartFarmingManager\\n     */\\n    modifier onlyIfSmartFarmingManager() {\\n        if (msg.sender != address(pool.smartFarmingManager())) revert SenderIsNotSmartFarmingManager();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token doesn't exist\\n     */\\n    modifier onlyIfSyntheticTokenExists() {\\n        if (!pool.doesSyntheticTokenExist(syntheticToken)) revert SyntheticDoesNotExist();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if debt token isn't enabled\\n     */\\n    modifier onlyIfDebtTokenIsActive() {\\n        if (!isActive) revert DebtTokenInactive();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token isn't enabled\\n     */\\n    modifier onlyIfSyntheticTokenIsActive() {\\n        if (!syntheticToken.isActive()) revert SyntheticIsInactive();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update reward contracts' states\\n     * @dev Should be called before balance changes (i.e. mint/burn)\\n     */\\n    modifier updateRewardsBeforeMintOrBurn(address account_) {\\n        address[] memory _rewardsDistributors = pool.getRewardsDistributors();\\n        ISyntheticToken _syntheticToken = syntheticToken;\\n        uint256 _length = _rewardsDistributors.length;\\n        for (uint256 i; i < _length; ++i) {\\n            IRewardsDistributor(_rewardsDistributors[i]).updateBeforeMintOrBurn(_syntheticToken, account_);\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        string calldata name_,\\n        string calldata symbol_,\\n        IPool pool_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 interestRate_,\\n        uint256 maxTotalSupply_\\n    ) external initializer {\\n        if (bytes(name_).length == 0) revert NameIsNull();\\n        if (bytes(symbol_).length == 0) revert SymbolIsNull();\\n        if (address(pool_) == address(0)) revert PoolIsNull();\\n        if (address(syntheticToken_) == address(0)) revert SyntheticIsNull();\\n\\n        __ReentrancyGuard_init();\\n        __Manageable_init(pool_);\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = syntheticToken_.decimals();\\n        syntheticToken = syntheticToken_;\\n        lastTimestampAccrued = block.timestamp;\\n        debtIndex = 1e18;\\n        interestRate = interestRate_;\\n        maxTotalSupply = maxTotalSupply_;\\n        isActive = true;\\n    }\\n\\n    /**\\n     * @notice Accrue interest over debt supply\\n     */\\n    function accrueInterest() public override {\\n        (\\n            uint256 _interestAmountAccrued,\\n            uint256 _debtIndex,\\n            uint256 _lastTimestampAccrued\\n        ) = _calculateInterestAccrual();\\n\\n        if (block.timestamp == _lastTimestampAccrued) {\\n            return;\\n        }\\n\\n        lastTimestampAccrued = block.timestamp;\\n\\n        if (_interestAmountAccrued > 0) {\\n            totalSupply_ += _interestAmountAccrued;\\n            debtIndex = _debtIndex;\\n\\n            // Note: Address states where minting will fail (e.g. the token is inactive, it reached max supply, etc)\\n            try syntheticToken.mint(pool.feeCollector(), _interestAmountAccrued + pendingInterestFee) {\\n                pendingInterestFee = 0;\\n            } catch {\\n                pendingInterestFee += _interestAmountAccrued;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address /*owner_*/, address /*spender_*/) external pure override returns (uint256) {\\n        revert AllowanceNotSupported();\\n    }\\n\\n    /// @inheritdoc IERC20\\n    // solhint-disable-next-line\\n    function approve(address /*spender_*/, uint256 /*amount_*/) external override returns (bool) {\\n        revert ApprovalNotSupported();\\n    }\\n\\n    /**\\n     * @notice Get the updated (principal + interest) user's debt\\n     */\\n    function balanceOf(address account_) public view override returns (uint256) {\\n        uint256 _principal = principalOf[account_];\\n        if (_principal == 0) {\\n            return 0;\\n        }\\n\\n        (, uint256 _debtIndex, ) = _calculateInterestAccrual();\\n\\n        // Note: The `debtIndex / debtIndexOf` gives the interest to apply to the principal amount\\n        return (_principal * _debtIndex) / debtIndexOf[account_];\\n    }\\n\\n    /**\\n     * @notice Burn debt token\\n     * @param from_ The account to burn from\\n     * @param amount_ The amount to burn\\n     */\\n    function burn(address from_, uint256 amount_) external override onlyPool {\\n        _burn(from_, amount_);\\n    }\\n\\n    /**\\n     * @notice Collect pending interest fee if any\\n     */\\n    function collectPendingInterestFee() external {\\n        uint256 _pendingInterestFee = pendingInterestFee;\\n        if (_pendingInterestFee > 0) {\\n            syntheticToken.mint(pool.feeCollector(), _pendingInterestFee);\\n            pendingInterestFee = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Lock collateral and mint synthetic token\\n     * @param amount_ The amount to mint\\n     * @param to_ The beneficiary account\\n     * @return _issued The amount issued after fees\\n     * @return _fee The fee amount collected\\n     */\\n    function issue(\\n        uint256 amount_,\\n        address to_\\n    )\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfSyntheticTokenExists\\n        returns (uint256 _issued, uint256 _fee)\\n    {\\n        if (amount_ == 0) revert AmountIsZero();\\n\\n        accrueInterest();\\n\\n        IPool _pool = pool;\\n        ISyntheticToken _syntheticToken = syntheticToken;\\n\\n        (, , , , uint256 _issuableInUsd) = _pool.debtPositionOf(msg.sender);\\n\\n        IMasterOracle _masterOracle = _pool.masterOracle();\\n\\n        if (amount_ > _masterOracle.quoteUsdToToken(address(_syntheticToken), _issuableInUsd)) {\\n            revert NotEnoughCollateral();\\n        }\\n\\n        _mint(_pool, _masterOracle, msg.sender, amount_);\\n\\n        (_issued, _fee) = quoteIssueOut(amount_);\\n        if (_fee > 0) {\\n            _syntheticToken.mint(_pool.feeCollector(), _fee);\\n        }\\n        _syntheticToken.mint(to_, _issued);\\n\\n        emit SyntheticTokenIssued(msg.sender, to_, amount_, _issued, _fee);\\n    }\\n\\n    /**\\n     * @notice Issue synth without checking collateral and without minting debt tokens\\n     * @dev The healthy of outcome position must be done afterhand\\n     * @param to_ The beneficiary account\\n     * @param amount_ The amount to mint\\n     * @return _issued The amount issued after fees\\n     * @return _fee The fee amount collected\\n     */\\n    function flashIssue(\\n        address to_,\\n        uint256 amount_\\n    )\\n        external\\n        override\\n        onlyIfSmartFarmingManager\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfSyntheticTokenExists\\n        onlyIfDebtTokenIsActive\\n        returns (uint256 _issued, uint256 _fee)\\n    {\\n        if (amount_ == 0) revert AmountIsZero();\\n\\n        accrueInterest();\\n\\n        ISyntheticToken _syntheticToken = syntheticToken;\\n\\n        (_issued, _fee) = quoteIssueOut(amount_);\\n        if (_fee > 0) {\\n            _syntheticToken.mint(pool.feeCollector(), _fee);\\n        }\\n        _syntheticToken.mint(to_, _issued);\\n    }\\n\\n    /**\\n     * @notice Return interest rate (in percent) per second\\n     */\\n    function interestRatePerSecond() public view override returns (uint256) {\\n        return interestRate / SECONDS_PER_YEAR;\\n    }\\n\\n    /**\\n     * @notice onlySmartFarmingManager:: Mint `amount_` of debtToken at `to_`.\\n     * @param to_ Receiver address\\n     * @param amount_ Token amount to mint\\n     */\\n    function mint(\\n        address to_,\\n        uint256 amount_\\n    )\\n        external\\n        override\\n        onlyIfSmartFarmingManager\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfSyntheticTokenExists\\n        onlyIfSyntheticTokenIsActive\\n    {\\n        accrueInterest();\\n\\n        IPool _pool = pool;\\n\\n        _mint(_pool, _pool.masterOracle(), to_, amount_);\\n    }\\n\\n    /**\\n     * @notice Quote gross `_amount` to issue `amountToIssue_` synthetic tokens\\n     * @param amountToIssue_ Synth to issue\\n     * @return _amount Gross amount\\n     * @return _fee The fee amount to collect\\n     */\\n    function quoteIssueIn(uint256 amountToIssue_) external view override returns (uint256 _amount, uint256 _fee) {\\n        uint256 _issueFee = pool.feeProvider().issueFee();\\n        if (_issueFee == 0) {\\n            return (amountToIssue_, _fee);\\n        }\\n\\n        _amount = amountToIssue_.wadDiv(HUNDRED_PERCENT - _issueFee);\\n        _fee = _amount - amountToIssue_;\\n    }\\n\\n    /**\\n     * @notice Quote synthetic tokens `_amountToIssue` by using gross `_amount`\\n     * @param amount_ Gross amount\\n     * @return _amountToIssue Synth to issue\\n     * @return _fee The fee amount to collect\\n     */\\n    function quoteIssueOut(uint256 amount_) public view override returns (uint256 _amountToIssue, uint256 _fee) {\\n        uint256 _issueFee = pool.feeProvider().issueFee();\\n        if (_issueFee == 0) {\\n            return (amount_, _fee);\\n        }\\n\\n        _fee = amount_.wadMul(_issueFee);\\n        _amountToIssue = amount_ - _fee;\\n    }\\n\\n    /**\\n     * @notice Quote synthetic token `_amount` need to repay `amountToRepay_` debt\\n     * @param amountToRepay_ Debt amount to repay\\n     * @return _amount Gross amount\\n     * @return _fee The fee amount to collect\\n     */\\n    function quoteRepayIn(uint256 amountToRepay_) public view override returns (uint256 _amount, uint256 _fee) {\\n        uint256 _repayFee = pool.feeProvider().repayFee();\\n        if (_repayFee == 0) {\\n            return (amountToRepay_, _fee);\\n        }\\n\\n        _fee = amountToRepay_.wadMul(_repayFee);\\n        _amount = amountToRepay_ + _fee;\\n    }\\n\\n    /**\\n     * @notice Quote debt `_amountToRepay` by burning `_amount` synthetic tokens\\n     * @param amount_ Gross amount\\n     * @return _amountToRepay Debt amount to repay\\n     * @return _fee The fee amount to collect\\n     */\\n    function quoteRepayOut(uint256 amount_) public view override returns (uint256 _amountToRepay, uint256 _fee) {\\n        uint256 _repayFee = pool.feeProvider().repayFee();\\n        if (_repayFee == 0) {\\n            return (amount_, _fee);\\n        }\\n\\n        _amountToRepay = amount_.wadDiv(HUNDRED_PERCENT + _repayFee);\\n        _fee = amount_ - _amountToRepay;\\n    }\\n\\n    /**\\n     * @notice Send synthetic token to decrease debt\\n     * @dev The msg.sender is the payer and the account beneficed\\n     * @param onBehalfOf_ The account that will have debt decreased\\n     * @param amount_ The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)\\n     * @return _repaid The amount repaid after fees\\n     */\\n    function repay(\\n        address onBehalfOf_,\\n        uint256 amount_\\n    )\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfSyntheticTokenExists\\n        returns (uint256 _repaid, uint256 _fee)\\n    {\\n        if (amount_ == 0) revert AmountIsZero();\\n\\n        accrueInterest();\\n\\n        IPool _pool = pool;\\n        ISyntheticToken _syntheticToken = syntheticToken;\\n\\n        (_repaid, _fee) = quoteRepayOut(amount_);\\n        if (_fee > 0) {\\n            _syntheticToken.seize(msg.sender, _pool.feeCollector(), _fee);\\n        }\\n\\n        uint256 _debtFloorInUsd = _pool.debtFloorInUsd();\\n        if (_debtFloorInUsd > 0) {\\n            uint256 _newDebtInUsd = _pool.masterOracle().quoteTokenToUsd(\\n                address(_syntheticToken),\\n                balanceOf(onBehalfOf_) - _repaid\\n            );\\n            if (_newDebtInUsd > 0 && _newDebtInUsd < _debtFloorInUsd) {\\n                revert RemainingDebtIsLowerThanTheFloor();\\n            }\\n        }\\n\\n        _syntheticToken.burn(msg.sender, _repaid);\\n        _burn(onBehalfOf_, _repaid);\\n\\n        emit DebtRepaid(msg.sender, onBehalfOf_, amount_, _repaid, _fee);\\n    }\\n\\n    /**\\n     * @notice Send synthetic token to decrease debt\\n     * @dev This function helps users to no leave debt dust behind\\n     * @param onBehalfOf_ The account that will have debt decreased\\n     * @return _repaid The amount repaid after fees\\n     * @return _fee The fee amount collected\\n     */\\n    function repayAll(\\n        address onBehalfOf_\\n    )\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfSyntheticTokenExists\\n        returns (uint256 _repaid, uint256 _fee)\\n    {\\n        accrueInterest();\\n\\n        _repaid = balanceOf(onBehalfOf_);\\n        if (_repaid == 0) revert AmountIsZero();\\n\\n        ISyntheticToken _syntheticToken = syntheticToken;\\n\\n        uint256 _amount;\\n        (_amount, _fee) = quoteRepayIn(_repaid);\\n\\n        if (_fee > 0) {\\n            _syntheticToken.seize(msg.sender, pool.feeCollector(), _fee);\\n        }\\n\\n        _syntheticToken.burn(msg.sender, _repaid);\\n        _burn(onBehalfOf_, _repaid);\\n\\n        emit DebtRepaid(msg.sender, onBehalfOf_, _amount, _repaid, _fee);\\n    }\\n\\n    /**\\n     * @notice Return the total supply\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        (uint256 _interestAmountAccrued, , ) = _calculateInterestAccrual();\\n        return totalSupply_ + _interestAmountAccrued;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    // solhint-disable-next-line\\n    function transfer(address /*recipient_*/, uint256 /*amount_*/) external override returns (bool) {\\n        revert TransferNotSupported();\\n    }\\n\\n    /// @inheritdoc IERC20\\n    // solhint-disable-next-line\\n    function transferFrom(\\n        address /*sender_*/,\\n        address /*recipient_*/,\\n        uint256 /*amount_*/\\n    ) external override returns (bool) {\\n        revert TransferNotSupported();\\n    }\\n\\n    /**\\n     * @notice Destroy `amount` tokens from `account`, reducing the\\n     * total supply\\n     */\\n    function _burn(address account_, uint256 amount_) private updateRewardsBeforeMintOrBurn(account_) {\\n        if (account_ == address(0)) revert BurnFromNullAddress();\\n\\n        uint256 _accountBalance = balanceOf(account_);\\n        if (_accountBalance < amount_) revert BurnAmountExceedsBalance();\\n\\n        unchecked {\\n            principalOf[account_] = _accountBalance - amount_;\\n            debtIndexOf[account_] = debtIndex;\\n            totalSupply_ -= amount_;\\n        }\\n\\n        emit Transfer(account_, address(0), amount_);\\n\\n        // Remove this token from the debt tokens list if the sender's balance goes to zero\\n        if (amount_ > 0 && balanceOf(account_) == 0) {\\n            pool.removeFromDebtTokensOfAccount(account_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate interest to accrue\\n     * @dev This util function avoids code duplication across `balanceOf` and `accrueInterest`\\n     * @return _interestAmountAccrued The total amount of debt tokens accrued\\n     * @return _debtIndex The new `debtIndex` value\\n     */\\n    function _calculateInterestAccrual()\\n        private\\n        view\\n        returns (uint256 _interestAmountAccrued, uint256 _debtIndex, uint256 _lastTimestampAccrued)\\n    {\\n        _lastTimestampAccrued = lastTimestampAccrued;\\n        _debtIndex = debtIndex;\\n\\n        if (block.timestamp > _lastTimestampAccrued) {\\n            uint256 _interestRateToAccrue = interestRatePerSecond() * (block.timestamp - _lastTimestampAccrued);\\n            if (_interestRateToAccrue > 0) {\\n                _interestAmountAccrued = _interestRateToAccrue.wadMul(totalSupply_);\\n                _debtIndex += _interestRateToAccrue.wadMul(debtIndex);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Create `amount` tokens and assigns them to `account`, increasing\\n     * the total supply\\n     */\\n    function _mint(\\n        IPool pool_,\\n        IMasterOracle masterOracle_,\\n        address account_,\\n        uint256 amount_\\n    ) private onlyIfDebtTokenIsActive updateRewardsBeforeMintOrBurn(account_) {\\n        if (account_ == address(0)) revert MintToNullAddress();\\n\\n        uint256 _debtFloorInUsd = pool_.debtFloorInUsd();\\n        uint256 _balanceBefore = balanceOf(account_);\\n\\n        if (\\n            _debtFloorInUsd > 0 &&\\n            masterOracle_.quoteTokenToUsd(address(syntheticToken), _balanceBefore + amount_) < _debtFloorInUsd\\n        ) {\\n            revert DebtLowerThanTheFloor();\\n        }\\n\\n        totalSupply_ += amount_;\\n        if (totalSupply_ > maxTotalSupply) revert SurpassMaxDebtSupply();\\n\\n        principalOf[account_] = _balanceBefore + amount_;\\n        debtIndexOf[account_] = debtIndex;\\n        emit Transfer(address(0), account_, amount_);\\n\\n        //  Add this token to the debt tokens list if the recipient is receiving it for the 1st time\\n        if (_balanceBefore == 0 && amount_ > 0) {\\n            pool.addToDebtTokensOfAccount(account_);\\n        }\\n    }\\n\\n    /// @inheritdoc TokenHolder\\n    // solhint-disable-next-line no-empty-blocks\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    /**\\n     * @notice Update max total supply\\n     */\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external override onlyGovernor {\\n        uint256 _currentMaxTotalSupply = maxTotalSupply;\\n        if (newMaxTotalSupply_ == _currentMaxTotalSupply) revert NewValueIsSameAsCurrent();\\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupply, newMaxTotalSupply_);\\n        maxTotalSupply = newMaxTotalSupply_;\\n    }\\n\\n    /**\\n     * @notice Update interest rate (APR)\\n     */\\n    function updateInterestRate(uint256 newInterestRate_) external override onlyGovernor {\\n        accrueInterest();\\n        uint256 _currentInterestRate = interestRate;\\n        if (newInterestRate_ == _currentInterestRate) revert NewValueIsSameAsCurrent();\\n        emit InterestRateUpdated(_currentInterestRate, newInterestRate_);\\n        interestRate = newInterestRate_;\\n    }\\n\\n    /**\\n     * @notice Enable/Disable the Debt Token\\n     */\\n    function toggleIsActive() external override onlyGovernor {\\n        bool _newIsActive = !isActive;\\n        emit DebtTokenActiveUpdated(_newIsActive);\\n        isActive = _newIsActive;\\n    }\\n}\\n\",\"keccak256\":\"0xca599abdded922c6f052798471f5738e9fab6e7cbe6727a88341e39226592ded\",\"license\":\"MIT\"},\"contracts/access/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\nimport \\\"../interfaces/IManageable.sol\\\";\\n\\nerror SenderIsNotPool();\\nerror SenderIsNotGovernor();\\nerror IsPaused();\\nerror IsShutdown();\\nerror PoolAddressIsNull();\\n\\n/**\\n * @title Reusable contract that handles accesses\\n */\\nabstract contract Manageable is IManageable, Initializable {\\n    /**\\n     * @notice Pool contract\\n     */\\n    IPool public pool;\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't the pool\\n     */\\n    modifier onlyPool() {\\n        if (msg.sender != address(pool)) revert SenderIsNotPool();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't the governor\\n     */\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor()) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is paused\\n     */\\n    modifier whenNotPaused() {\\n        if (pool.paused()) revert IsPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is shutdown\\n     */\\n    modifier whenNotShutdown() {\\n        if (pool.everythingStopped()) revert IsShutdown();\\n        _;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Manageable_init(IPool pool_) internal onlyInitializing {\\n        if (address(pool_) == address(0)) revert PoolAddressIsNull();\\n        pool = pool_;\\n    }\\n\\n    /**\\n     * @notice Get the governor\\n     * @return _governor The governor\\n     */\\n    function governor() public view returns (address _governor) {\\n        _governor = IGovernable(address(pool)).governor();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x95964544ea9b3a0799e14959d5cd1d33dbf8fd9463260d3bc33358c3945812b9\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/IOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../../../../openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCoreUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"keccak256\":\"0x22651924296f8308db8195d7a86a6781023241c53905418f2d3925e3f693f530\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../IOFTCoreUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the composable OFT core standard\\n */\\ninterface IComposableOFTCoreUpgradeable is IOFTCoreUpgradeable {\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function retryOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n\\n    event CallOFTReceivedFailure(\\n        uint16 indexed _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _from,\\n        address indexed _to,\\n        uint _amount,\\n        bytes _payload,\\n        bytes _reason\\n    );\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event RetryOFTReceivedSuccess(bytes32 _messageHash);\\n\\n    event NonContractAddress(address _address);\\n}\\n\",\"keccak256\":\"0x769b9356ad6019bdabdcfc11762f28d15eb9a4e262efc96835725f6862c5d9e9\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverUpgradeable {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x287036c704c57e34a6fc3f7e67c8dfaaade6eb3667b570576bc491c0f1f89a5b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStargateRouter.sol\\\";\\n\\ninterface IStargateComposer {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function factory() external view returns (address);\\n\\n    function stargateBridge() external view returns (address);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function peers(uint16 _chainId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdfdd1690bf176ac05803534a60227be90cc435b4bdd8fce2348f1a9417a9f63a\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe4d6bf9fa422e5e43dc1b6880f951d06611a4ed12c2dd7dd8c0b6a5d9e06ad0d\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function clearCachedSwap(uint16 _srcChainId, bytes calldata _srcAddress, uint256 _nonce) external;\\n\\n    function factory() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function cachedSwapLookup(\\n        uint16 _chainId_,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (address token, uint256 amountLD, address to, bytes memory payload);\\n}\\n\",\"keccak256\":\"0x92126df8e682b2c5647c7b22e7387da69f9e72480af86948ce5ed17dc2c9e0a7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICrossChainDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateRouter.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface ICrossChainDispatcher is IStargateReceiver, IOFTReceiverUpgradeable {\\n    function crossChainDispatcherOf(uint16 chainId_) external view returns (address);\\n\\n    function triggerFlashRepaySwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function triggerLeverageSwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function isBridgingActive() external view returns (bool);\\n\\n    function flashRepayCallbackTxGasLimit() external view returns (uint64);\\n\\n    function flashRepaySwapTxGasLimit() external view returns (uint64);\\n\\n    function leverageCallbackTxGasLimit() external view returns (uint64);\\n\\n    function leverageSwapTxGasLimit() external view returns (uint64);\\n\\n    function lzBaseGasLimit() external view returns (uint256);\\n\\n    function stargateComposer() external view returns (IStargateComposer);\\n\\n    function stargateSlippage() external view returns (uint256);\\n\\n    function stargatePoolIdOf(address token_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcaf05e625588dcfaa5706acc78a35fa46d50baeb2d28f689036963695a4e39cb\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address to_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xd2f04aa1bee06d6991b10aaf7c03c3ee09d85f8e48ba92feac595ad855881380\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralFactor() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function flashWithdraw(address account_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\\n\\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\\n\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function withdrawFrom(address from_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n}\\n\",\"keccak256\":\"0xb27092f9450d9c48c1a215925007ca9c7282cfe6cf257b34ab3dbe6e745b6bd1\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3b132b42090c167b2c0aef6d78d833c669c43b9e55593a7a21a96ed5d3082700\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\",\"keccak256\":\"0xac88e0997a26942cb9cbda1a7dd9756e28ba2025813e5b07e55939fbf8538ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IFeeProvider.sol\\\";\\nimport \\\"./ISmartFarmingManager.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function feeProvider() external view returns (IFeeProvider);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\\n\\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(\\n        address account_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeized_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _maxAmountToRepay);\\n\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view returns (uint256 _amountIn, uint256 _fee);\\n\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _fee);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _fee);\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function isSwapActive() external view returns (bool);\\n\\n    function smartFarmingManager() external view returns (ISmartFarmingManager);\\n}\\n\",\"keccak256\":\"0x0f0a869451cca858ba52b56970db167360fe161f2450557a053c4da938558816\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"./IQuoter.sol\\\";\\nimport \\\"./ICrossChainDispatcher.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function feeCollector() external view returns (address);\\n\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function quoter() external view returns (IQuoter);\\n\\n    function crossChainDispatcher() external view returns (ICrossChainDispatcher);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool _exists);\\n}\\n\",\"keccak256\":\"0x9ffa9e5fd39a48ac2bda561af7fb4fc9df5f8ffb7a602ef1d4da8c068019e723\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\\\";\\n\\ninterface IProxyOFT is IComposableOFTCoreUpgradeable {\\n    function getProxyOFTOf(uint16 chainId_) external view returns (address _proxyOFT);\\n}\\n\",\"keccak256\":\"0x4041a90eb60de460c9e1631aaedfbf2bff2275b3f91964800b1c774546931cd5\",\"license\":\"MIT\"},\"contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface IQuoter {\\n    function quoteCrossChainFlashRepayNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteCrossChainLeverageNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteLeverageCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function quoteFlashRepayCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function getFlashRepaySwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n\\n    function getLeverageSwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n}\\n\",\"keccak256\":\"0x1e4d2dd779a09dc8ea6b6c244b167deddca3a48e71b73bf940da04113b40c752\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external;\\n\\n    function claimable(address account_) external view returns (uint256 _claimable);\\n\\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\\n\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\\n\\n    function tokens(uint256) external view returns (IERC20);\\n\\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\\n\\n    function accountIndexOf(IERC20, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f527eeae61b6a5bff7d3b48037234ef718ae7f71dc452e8cab3b60581f0d810\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartFarmingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IManageable.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\n/**\\n * @notice SmartFarmingManager interface\\n */\\ninterface ISmartFarmingManager {\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    ) external returns (uint256 _withdrawn, uint256 _repaid);\\n\\n    function crossChainFlashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        IERC20 bridgeToken_,\\n        uint256 bridgeTokenAmountMin_,\\n        uint256 swapAmountOutMin_,\\n        uint256 repayAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 swapAmountOutMin_,\\n        uint256 depositAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverageCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _deposited);\\n\\n    function crossChainFlashRepayCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _repaid);\\n\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    ) external returns (uint256 _deposited, uint256 _issued);\\n}\\n\",\"keccak256\":\"0x7544a9d308a49e24d6984c3cfcfe2c1cfb7d9ce4655408438e1c12f37175a3b0\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/IProxyOFT.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateProxyOFT(IProxyOFT newProxyOFT_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function proxyOFT() external view returns (IProxyOFT);\\n}\\n\",\"keccak256\":\"0xfaeb24d1067e85493a5c8818d6de06fc6dbc72c37e85f82811990d0120f8a0cf\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x2f080adc5880151dc4446ef43b54abab8e3711c5f2e526917ef39a05e3c16a00\",\"license\":\"MIT\"},\"contracts/interfaces/external/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x75f04b225d0c310be7e0a09ee4c1aa6eeeb8d94e02fc0e4160a9597ce2d8d446\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/DebtTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IDebtToken.sol\\\";\\n\\nabstract contract DebtTokenStorageV1 is IDebtToken {\\n    /**\\n     * @notice The name of the token\\n     */\\n    string public override name;\\n\\n    /**\\n     * @notice The symbol of the token\\n     */\\n    string public override symbol;\\n\\n    /**\\n     * @notice The mapping of the users' minted tokens\\n     * @dev This value changes within the mint and burn operations\\n     */\\n    mapping(address => uint256) internal principalOf;\\n\\n    /**\\n     * @notice The `debtIndex` \\\"snapshot\\\" of the account's latest `principalOf` update (i.e. mint/burn)\\n     */\\n    mapping(address => uint256) internal debtIndexOf;\\n\\n    /**\\n     * @notice The supply cap\\n     */\\n    uint256 public override maxTotalSupply;\\n\\n    /**\\n     * @notice The total amount of minted tokens\\n     */\\n    uint256 internal totalSupply_;\\n\\n    /**\\n     * @notice The timestamp when interest accrual was calculated for the last time\\n     */\\n    uint256 public override lastTimestampAccrued;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the beginning\\n     */\\n    uint256 public override debtIndex;\\n\\n    /**\\n     * @notice Interest rate\\n     * @dev Use 0.1e18 for 10% APR\\n     */\\n    uint256 public override interestRate;\\n\\n    /**\\n     * @notice The Synthetic token\\n     */\\n    ISyntheticToken public override syntheticToken;\\n\\n    /**\\n     * @notice If true, disables msAsset minting on this pool\\n     */\\n    bool public override isActive;\\n\\n    /**\\n     * @notice The decimals of the token\\n     */\\n    uint8 public override decimals;\\n}\\n\\nabstract contract DebtTokenStorageV2 is DebtTokenStorageV1 {\\n    /**\\n     * @notice Pending interest fee to collect\\n     */\\n    uint256 public pendingInterestFee;\\n}\\n\",\"keccak256\":\"0x07c7ea0008fb59909c8d5137b114cad457b9509e785262073d058b918a794a82\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x3bf3c3de5a638ca101f25dfcaec5268e9c8a1c29a9a278d70be4459768fb41fe\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nerror FallbackIsNotAllowed();\\nerror ReceiveIsNotAllowed();\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert FallbackIsNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert ReceiveIsNotAllowed();\\n    }\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param token_ The token to transfer\\n     * @param to_ The recipient of the transfer\\n     * @param amount_ The amount to send\\n     */\\n    function sweep(IERC20 token_, address to_, uint256 amount_) external {\\n        _requireCanSweep();\\n\\n        if (address(token_) == address(0)) {\\n            Address.sendValue(payable(to_), amount_);\\n        } else {\\n            token_.safeTransfer(to_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     * @dev Usually requires the owner or governor as the caller\\n     */\\n    function _requireCanSweep() internal view virtual;\\n}\\n\",\"keccak256\":\"0x50e56ed45d496b188d90494d08122fe9621d9e6c8f655679ef334447801ea50d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b62000152565b6200002e60ff62000031565b50565b60008054610100900460ff1615620000ca578160ff1660011480156200006a575062000068306200014360201b620029091760201c565b155b620000c25760405162461bcd60e51b815260206004820152602e602482015260008051602062003dfe83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001295760405162461bcd60e51b815260206004820152602e602482015260008051602062003dfe83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000b9565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b613c9c80620001626000396000f3fe6080604052600436106102295760003560e01c8063752a50a611610123578063b696a6ad116100ab578063d38f2ba91161006f578063d38f2ba914610672578063d7da606614610692578063dd62ed3e146106a8578063e6a69ab8146106c8578063ffa1ad74146106e057610247565b8063b696a6ad146105e7578063bb8c631f14610607578063bfa176561461061d578063c9dc4b4d1461063d578063d25933291461065d57610247565b806395d89b41116100f257806395d89b411461056d5780639cc820da146105825780639dc29fac14610597578063a6afed95146105b7578063a9059cbb146105cc57610247565b8063752a50a6146104f75780637c27383b146105175780637c3a00fd146105375780638230ecd61461054d57610247565b80632ab4d052116101b15780634754d176116101755780634754d17614610461578063565f3d4f1461048157806362c067671461049757806370a08231146104b757806374e87e1e146104d757610247565b80632ab4d052146103c35780632d4aeea1146103d9578063313ce567146103f957806336248ab41461042c57806340c10f191461044157610247565b8063172f50a4116101f8578063172f50a41461030857806318160ddd1461032a57806322867d781461034d57806322f3e2d41461038257806323b872dd146103a357610247565b806306fdde0314610260578063095ea7b31461028b5780630c340a24146102bb57806316f0115b146102e857610247565b3661024757604051636436c22d60e11b815260040160405180910390fd5b60405163a0152e6360e01b815260040160405180910390fd5b34801561026c57600080fd5b50610275610711565b6040516102829190613685565b60405180910390f35b34801561029757600080fd5b506102ab6102a63660046136cd565b61079f565b6040519015158152602001610282565b3480156102c757600080fd5b506102d06107ba565b6040516001600160a01b039091168152602001610282565b3480156102f457600080fd5b506002546102d0906001600160a01b031681565b34801561031457600080fd5b506103286103233660046136f9565b61083c565b005b34801561033657600080fd5b5061033f6108d8565b604051908152602001610282565b34801561035957600080fd5b5061036d6103683660046136cd565b6108fb565b60408051928352602083019190915201610282565b34801561038e57600080fd5b50603d546102ab90600160a01b900460ff1681565b3480156103af57600080fd5b506102ab6103be366004613712565b610e1c565b3480156103cf57600080fd5b5061033f60385481565b3480156103e557600080fd5b5061036d6103f43660046136f9565b610e37565b34801561040557600080fd5b50603d5461041a90600160a81b900460ff1681565b60405160ff9091168152602001610282565b34801561043857600080fd5b50610328610f70565b34801561044d57600080fd5b5061032861045c3660046136cd565b611059565b34801561046d57600080fd5b5061036d61047c3660046136f9565b6113b7565b34801561048d57600080fd5b5061033f603a5481565b3480156104a357600080fd5b506103286104b2366004613712565b6114de565b3480156104c357600080fd5b5061033f6104d2366004613753565b611517565b3480156104e357600080fd5b506103286104f23660046137b9565b611583565b34801561050357600080fd5b506103286105123660046136f9565b611778565b34801561052357600080fd5b5061036d610532366004613753565b61181c565b34801561054357600080fd5b5061033f603c5481565b34801561055957600080fd5b50603d546102d0906001600160a01b031681565b34801561057957600080fd5b50610275611b9c565b34801561058e57600080fd5b5061033f611ba9565b3480156105a357600080fd5b506103286105b23660046136cd565b611bbd565b3480156105c357600080fd5b50610328611bf6565b3480156105d857600080fd5b506102ab6103be3660046136cd565b3480156105f357600080fd5b5061036d610602366004613860565b611d43565b34801561061357600080fd5b5061033f603b5481565b34801561062957600080fd5b5061036d6106383660046136cd565b612224565b34801561064957600080fd5b5061036d6106583660046136f9565b61260b565b34801561066957600080fd5b5061032861272a565b34801561067e57600080fd5b5061036d61068d3660046136f9565b6127c4565b34801561069e57600080fd5b5061033f603e5481565b3480156106b457600080fd5b5061033f6106c3366004613890565b6128ee565b3480156106d457600080fd5b5061033f6301e187e081565b3480156106ec57600080fd5b50610275604051806040016040528060058152602001640312e332e360dc1b81525081565b6034805461071e906138be565b80601f016020809104026020016040519081016040528092919081815260200182805461074a906138be565b80156107975780601f1061076c57610100808354040283529160200191610797565b820191906000526020600020905b81548152906001019060200180831161077a57829003601f168201915b505050505081565b6000604051631b48e8f360e21b815260040160405180910390fd5b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b1580156107ff57600080fd5b505afa158015610813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108379190613904565b905090565b6108446107ba565b6001600160a01b0316336001600160a01b03161461087557604051634b98449160e11b815260040160405180910390fd5b6038548181141561089957604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603855565b6000806108e3612918565b50509050806039546108f59190613937565b91505090565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561094c57600080fd5b505afa158015610960573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610984919061395f565b156109a257604051631b0e923f60e11b815260040160405180910390fd5b600260015414156109ce5760405162461bcd60e51b81526004016109c59061397a565b60405180910390fd5b6002600181905554603d54604051631a0dd00b60e01b81526001600160a01b039182166004820152911690631a0dd00b9060240160206040518083038186803b158015610a1a57600080fd5b505afa158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a52919061395f565b610a6f5760405163a596698b60e01b815260040160405180910390fd5b82610a8d576040516310eb483f60e21b815260040160405180910390fd5b610a95611bf6565b600254603d546001600160a01b039182169116610ab185610e37565b90945092508215610ba557806001600160a01b031663b2a02ff133846001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0557600080fd5b505afa158015610b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3d9190613904565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101869052606401600060405180830381600087803b158015610b8c57600080fd5b505af1158015610ba0573d6000803e3d6000fd5b505050505b6000826001600160a01b031663f60928096040518163ffffffff1660e01b815260040160206040518083038186803b158015610be057600080fd5b505afa158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1891906139b1565b90508015610d54576000836001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5b57600080fd5b505afa158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c939190613904565b6001600160a01b0316638d0dba008488610cac8c611517565b610cb691906139ca565b6040518363ffffffff1660e01b8152600401610cd39291906139e1565b60206040518083038186803b158015610ceb57600080fd5b505afa158015610cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2391906139b1565b9050600081118015610d3457508181105b15610d52576040516332b9d47360e01b815260040160405180910390fd5b505b604051632770a7eb60e21b81526001600160a01b03831690639dc29fac90610d8290339089906004016139e1565b600060405180830381600087803b158015610d9c57600080fd5b505af1158015610db0573d6000803e3d6000fd5b50505050610dbe8786612988565b60408051878152602081018790529081018590526001600160a01b0388169033907fe02887340b03318642b6755f258294b795be42ed57d4b5d0ef27be3038d8a7649060600160405180910390a35050600180555090939092509050565b600060405163d21ad44b60e01b815260040160405180910390fd5b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8a57600080fd5b505afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190613904565b6001600160a01b0316637c0f59f46040518163ffffffff1660e01b815260040160206040518083038186803b158015610efa57600080fd5b505afa158015610f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3291906139b1565b905080610f40575091929050565b610f5c610f5582670de0b6b3a7640000613937565b8590612c03565b9250610f6883856139ca565b915050915091565b603e54801561105657603d54600254604080516331056e5760e21b815290516001600160a01b03938416936340c10f1993169163c415b95c916004808301926020929190829003018186803b158015610fc857600080fd5b505afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110009190613904565b836040518363ffffffff1660e01b815260040161101e9291906139e1565b600060405180830381600087803b15801561103857600080fd5b505af115801561104c573d6000803e3d6000fd5b50506000603e5550505b50565b600260009054906101000a90046001600160a01b03166001600160a01b03166396aaccfe6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a757600080fd5b505afa1580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df9190613904565b6001600160a01b0316336001600160a01b03161461111057604051630935fed760e11b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561115e57600080fd5b505afa158015611172573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611196919061395f565b156111b457604051631b0e923f60e11b815260040160405180910390fd5b600260015414156111d75760405162461bcd60e51b81526004016109c59061397a565b6002600181905554603d54604051631a0dd00b60e01b81526001600160a01b039182166004820152911690631a0dd00b9060240160206040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b919061395f565b6112785760405163a596698b60e01b815260040160405180910390fd5b603d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c657600080fd5b505afa1580156112da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fe919061395f565b61131b576040516303127d9160e31b815260040160405180910390fd5b611323611bf6565b60025460408051637556d1c160e11b815290516001600160a01b03909216916113ae918391829163eaada382916004808301926020929190829003018186803b15801561136f57600080fd5b505afa158015611383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a79190613904565b8585612c40565b50506001805550565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190613904565b6001600160a01b0316632a9133c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561147a57600080fd5b505afa15801561148e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b291906139b1565b9050806114c0575091929050565b6114ca848261302c565b91506114d682856139ca565b925050915091565b6114e6613064565b6001600160a01b038316611503576114fe828261309f565b505050565b6114fe6001600160a01b03841683836131b8565b6001600160a01b0381166000908152603660205260408120548061153e5750600092915050565b6000611548612918565b506001600160a01b038616600090815260376020526040902054909250905061157182846139fa565b61157b9190613a19565b949350505050565b600061158f600161320e565b905080156115a7576000805461ff0019166101001790555b876115c557604051636e83f50760e01b815260040160405180910390fd5b856115e3576040516330507cff60e11b815260040160405180910390fd5b6001600160a01b03851661160a57604051633cb1fb1f60e11b815260040160405180910390fd5b6001600160a01b0384166116315760405163013a1b4360e51b815260040160405180910390fd5b61163961329b565b611642856132ca565b61164e60348a8a6135bc565b5061165b603588886135bc565b50836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561169557600080fd5b505afa1580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd9190613a3b565b603d805442603a55670de0b6b3a7640000603b55603c86905560388590556001600160a81b031960ff93909316600160a81b02929092166001600160b01b0319909216919091176001600160a01b03861617600160a01b179055801561176d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6117806107ba565b6001600160a01b0316336001600160a01b0316146117b157604051634b98449160e11b815260040160405180910390fd5b6117b9611bf6565b603c54818114156117dd57604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f41e376fd99913dea7fda140f5c0bd997515b1a181acc58737320322548ec6e72910160405180910390a150603c55565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561186d57600080fd5b505afa158015611881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a5919061395f565b156118c357604051631b0e923f60e11b815260040160405180910390fd5b600260015414156118e65760405162461bcd60e51b81526004016109c59061397a565b6002600181905554603d54604051631a0dd00b60e01b81526001600160a01b039182166004820152911690631a0dd00b9060240160206040518083038186803b15801561193257600080fd5b505afa158015611946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196a919061395f565b6119875760405163a596698b60e01b815260040160405180910390fd5b61198f611bf6565b61199883611517565b9150816119b8576040516310eb483f60e21b815260040160405180910390fd5b603d546001600160a01b031660006119cf8461260b565b935090508215611ad757816001600160a01b031663b2a02ff133600260009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3757600080fd5b505afa158015611a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6f9190613904565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101869052606401600060405180830381600087803b158015611abe57600080fd5b505af1158015611ad2573d6000803e3d6000fd5b505050505b604051632770a7eb60e21b81526001600160a01b03831690639dc29fac90611b0590339088906004016139e1565b600060405180830381600087803b158015611b1f57600080fd5b505af1158015611b33573d6000803e3d6000fd5b50505050611b418585612988565b60408051828152602081018690529081018490526001600160a01b0386169033907fe02887340b03318642b6755f258294b795be42ed57d4b5d0ef27be3038d8a7649060600160405180910390a35050600180559092909150565b6035805461071e906138be565b60006301e187e0603c546108379190613a19565b6002546001600160a01b03163314611be85760405163531f2aa960e11b815260040160405180910390fd5b611bf28282612988565b5050565b6000806000611c03612918565b92509250925080421415611c1657505050565b42603a5582156114fe578260396000828254611c329190613937565b9091555050603b829055603d54600254604080516331056e5760e21b815290516001600160a01b03938416936340c10f1993169163c415b95c916004808301926020929190829003018186803b158015611c8b57600080fd5b505afa158015611c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc39190613904565b603e54611cd09087613937565b6040518363ffffffff1660e01b8152600401611ced9291906139e1565b600060405180830381600087803b158015611d0757600080fd5b505af1925050508015611d18575060015b611d395782603e6000828254611d2e9190613937565b909155506114fe9050565b6000603e55505050565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b158015611d9457600080fd5b505afa158015611da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcc919061395f565b15611dea57604051631b0e923f60e11b815260040160405180910390fd5b60026001541415611e0d5760405162461bcd60e51b81526004016109c59061397a565b6002600181905554603d54604051631a0dd00b60e01b81526001600160a01b039182166004820152911690631a0dd00b9060240160206040518083038186803b158015611e5957600080fd5b505afa158015611e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e91919061395f565b611eae5760405163a596698b60e01b815260040160405180910390fd5b83611ecc576040516310eb483f60e21b815260040160405180910390fd5b611ed4611bf6565b600254603d5460405163dde3ab9560e01b81523360048201526001600160a01b039283169290911690600090839063dde3ab959060240160a06040518083038186803b158015611f2357600080fd5b505afa158015611f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5b9190613a5e565b9450505050506000836001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b158015611f9c57600080fd5b505afa158015611fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd49190613904565b60405163b5e9bef560e01b81529091506001600160a01b0382169063b5e9bef59061200590869086906004016139e1565b60206040518083038186803b15801561201d57600080fd5b505afa158015612031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205591906139b1565b8811156120745760405162d11df360e61b815260040160405180910390fd5b6120808482338b612c40565b612089886113b7565b9096509450841561216557826001600160a01b03166340c10f19856001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120dc57600080fd5b505afa1580156120f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121149190613904565b876040518363ffffffff1660e01b81526004016121329291906139e1565b600060405180830381600087803b15801561214c57600080fd5b505af1158015612160573d6000803e3d6000fd5b505050505b6040516340c10f1960e01b81526001600160a01b038416906340c10f1990612193908a908a906004016139e1565b600060405180830381600087803b1580156121ad57600080fd5b505af11580156121c1573d6000803e3d6000fd5b5050604080518b8152602081018a90529081018890526001600160a01b038a1692503391507f197d5e1e72d62df9dad3add8609553402104dbeb4f83f9789e33aeb6723a78399060600160405180910390a3505060018055509194909350915050565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166396aaccfe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561227557600080fd5b505afa158015612289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ad9190613904565b6001600160a01b0316336001600160a01b0316146122de57604051630935fed760e11b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561232c57600080fd5b505afa158015612340573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612364919061395f565b1561238257604051631b0e923f60e11b815260040160405180910390fd5b600260015414156123a55760405162461bcd60e51b81526004016109c59061397a565b6002600181905554603d54604051631a0dd00b60e01b81526001600160a01b039182166004820152911690631a0dd00b9060240160206040518083038186803b1580156123f157600080fd5b505afa158015612405573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612429919061395f565b6124465760405163a596698b60e01b815260040160405180910390fd5b603d54600160a01b900460ff166124705760405163a4382ae360e01b815260040160405180910390fd5b8261248e576040516310eb483f60e21b815260040160405180910390fd5b612496611bf6565b603d546001600160a01b03166124ab846113b7565b9093509150811561259c57806001600160a01b03166340c10f19600260009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561251357600080fd5b505afa158015612527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254b9190613904565b846040518363ffffffff1660e01b81526004016125699291906139e1565b600060405180830381600087803b15801561258357600080fd5b505af1158015612597573d6000803e3d6000fd5b505050505b6040516340c10f1960e01b81526001600160a01b038216906340c10f19906125ca90889087906004016139e1565b600060405180830381600087803b1580156125e457600080fd5b505af11580156125f8573d6000803e3d6000fd5b5050505050600180819055509250929050565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561265e57600080fd5b505afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126969190613904565b6001600160a01b0316637c0f59f46040518163ffffffff1660e01b815260040160206040518083038186803b1580156126ce57600080fd5b505afa1580156126e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270691906139b1565b905080612714575091929050565b61271e848261302c565b91506114d68285613937565b6127326107ba565b6001600160a01b0316336001600160a01b03161461276357604051634b98449160e11b815260040160405180910390fd5b603d54604051600160a01b90910460ff1615808252907fb1d9ceb4467fd05a16930f966760d70eb5926cf0c1c19a7b6bfe59d805c190459060200160405180910390a1603d8054911515600160a01b0260ff60a01b19909216919091179055565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561281757600080fd5b505afa15801561282b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284f9190613904565b6001600160a01b0316632a9133c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561288757600080fd5b505afa15801561289b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bf91906139b1565b9050806128cd575091929050565b6128e2610f5582670de0b6b3a76400006139ca565b9250610f6884846139ca565b600060405163effde13d60e01b815260040160405180910390fd5b6001600160a01b03163b151590565b603a54603b546000914281101561298357600061293582426139ca565b61293d611ba9565b61294791906139fa565b905080156129815760395461295d90829061302c565b9350612974603b548261302c90919063ffffffff16565b61297e9084613937565b92505b505b909192565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156129d957600080fd5b505afa1580156129ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a159190810190613abb565b603d5481519192506001600160a01b03169060005b81811015612ac357838181518110612a4457612a44613b80565b6020908102919091010151604051626cc3c360e61b81526001600160a01b038581166004830152878116602483015290911690631b30f0c090604401600060405180830381600087803b158015612a9a57600080fd5b505af1158015612aae573d6000803e3d6000fd5b5050505080612abc90613b96565b9050612a2a565b506001600160a01b038616612aeb5760405163170476af60e21b815260040160405180910390fd5b6000612af687611517565b905085811015612b1957604051630bba337f60e11b815260040160405180910390fd5b6001600160a01b03871660008181526036602090815260408083208a86039055603b546037835281842055603980548b90039055518981529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3600086118015612b955750612b9387611517565b155b15612bfa57600254604051631d71be3b60e21b81526001600160a01b038981166004830152909116906375c6f8ec90602401600060405180830381600087803b158015612be157600080fd5b505af1158015612bf5573d6000803e3d6000fd5b505050505b50505050505050565b600081612c11600282613a19565b612c23670de0b6b3a7640000866139fa565b612c2d9190613937565b612c379190613a19565b90505b92915050565b603d54600160a01b900460ff16612c6a5760405163a4382ae360e01b815260040160405180910390fd5b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015612cbb57600080fd5b505afa158015612ccf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cf79190810190613abb565b603d5481519192506001600160a01b03169060005b81811015612da557838181518110612d2657612d26613b80565b6020908102919091010151604051626cc3c360e61b81526001600160a01b038581166004830152878116602483015290911690631b30f0c090604401600060405180830381600087803b158015612d7c57600080fd5b505af1158015612d90573d6000803e3d6000fd5b5050505080612d9e90613b96565b9050612d0c565b506001600160a01b038616612dcd57604051632b61339160e21b815260040160405180910390fd5b6000886001600160a01b031663f60928096040518163ffffffff1660e01b815260040160206040518083038186803b158015612e0857600080fd5b505afa158015612e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4091906139b1565b90506000612e4d88611517565b9050600082118015612eeb5750603d5482906001600160a01b03808c1691638d0dba009116612e7c8b86613937565b6040518363ffffffff1660e01b8152600401612e999291906139e1565b60206040518083038186803b158015612eb157600080fd5b505afa158015612ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee991906139b1565b105b15612f0957604051637e76d52960e11b815260040160405180910390fd5b8660396000828254612f1b9190613937565b90915550506038546039541115612f4557604051634aed251160e11b815260040160405180910390fd5b612f4f8782613937565b6001600160a01b038916600081815260366020908152604080832094909455603b54603782528483205592518a8152919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a380158015612fbb5750600087115b1561302057600254604051631dc2da6d60e21b81526001600160a01b038a811660048301529091169063770b69b490602401600060405180830381600087803b15801561300757600080fd5b505af115801561301b573d6000803e3d6000fd5b505050505b50505050505050505050565b6000821580613039575081155b1561304657506000612c3a565b670de0b6b3a764000061305a600282613a19565b612c2384866139fa565b61306c6107ba565b6001600160a01b0316336001600160a01b03161461309d57604051634b98449160e11b815260040160405180910390fd5b565b804710156130ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016109c5565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461313c576040519150601f19603f3d011682016040523d82523d6000602084013e613141565b606091505b50509050806114fe5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016109c5565b6114fe8363a9059cbb60e01b84846040516024016131d79291906139e1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261333a565b60008054610100900460ff1615613255578160ff1660011480156132315750303b155b61324d5760405162461bcd60e51b81526004016109c590613bb1565b506000919050565b60005460ff80841691161061327c5760405162461bcd60e51b81526004016109c590613bb1565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166132c25760405162461bcd60e51b81526004016109c590613bff565b61309d61340c565b600054610100900460ff166132f15760405162461bcd60e51b81526004016109c590613bff565b6001600160a01b0381166133185760405163724f500960e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600061338f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134399092919063ffffffff16565b8051909150156114fe57808060200190518101906133ad919061395f565b6114fe5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109c5565b600054610100900460ff166134335760405162461bcd60e51b81526004016109c590613bff565b60018055565b60606134488484600085613452565b90505b9392505050565b6060824710156134b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016109c5565b6001600160a01b0385163b61350a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109c5565b600080866001600160a01b031685876040516135269190613c4a565b60006040518083038185875af1925050503d8060008114613563576040519150601f19603f3d011682016040523d82523d6000602084013e613568565b606091505b5091509150613578828286613583565b979650505050505050565b6060831561359257508161344b565b8251156135a25782518084602001fd5b8160405162461bcd60e51b81526004016109c59190613685565b8280546135c8906138be565b90600052602060002090601f0160209004810192826135ea5760008555613630565b82601f106136035782800160ff19823516178555613630565b82800160010185558215613630579182015b82811115613630578235825591602001919060010190613615565b5061363c929150613640565b5090565b5b8082111561363c5760008155600101613641565b60005b83811015613670578181015183820152602001613658565b8381111561367f576000848401525b50505050565b60208152600082518060208401526136a4816040850160208701613655565b601f01601f19169190910160400192915050565b6001600160a01b038116811461105657600080fd5b600080604083850312156136e057600080fd5b82356136eb816136b8565b946020939093013593505050565b60006020828403121561370b57600080fd5b5035919050565b60008060006060848603121561372757600080fd5b8335613732816136b8565b92506020840135613742816136b8565b929592945050506040919091013590565b60006020828403121561376557600080fd5b813561344b816136b8565b60008083601f84011261378257600080fd5b50813567ffffffffffffffff81111561379a57600080fd5b6020830191508360208285010111156137b257600080fd5b9250929050565b60008060008060008060008060c0898b0312156137d557600080fd5b883567ffffffffffffffff808211156137ed57600080fd5b6137f98c838d01613770565b909a50985060208b013591508082111561381257600080fd5b5061381f8b828c01613770565b9097509550506040890135613833816136b8565b93506060890135613843816136b8565b979a969950949793969295929450505060808201359160a0013590565b6000806040838503121561387357600080fd5b823591506020830135613885816136b8565b809150509250929050565b600080604083850312156138a357600080fd5b82356138ae816136b8565b91506020830135613885816136b8565b600181811c908216806138d257607f821691505b602082108114156138f357634e487b7160e01b600052602260045260246000fd5b50919050565b8051613296816136b8565b60006020828403121561391657600080fd5b815161344b816136b8565b634e487b7160e01b600052601160045260246000fd5b6000821982111561394a5761394a613921565b500190565b8051801515811461329657600080fd5b60006020828403121561397157600080fd5b612c378261394f565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156139c357600080fd5b5051919050565b6000828210156139dc576139dc613921565b500390565b6001600160a01b03929092168252602082015260400190565b6000816000190483118215151615613a1457613a14613921565b500290565b600082613a3657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613a4d57600080fd5b815160ff8116811461344b57600080fd5b600080600080600060a08688031215613a7657600080fd5b613a7f8661394f565b602087015160408801516060890151608090990151929a91995097965090945092505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215613ace57600080fd5b825167ffffffffffffffff80821115613ae657600080fd5b818501915085601f830112613afa57600080fd5b815181811115613b0c57613b0c613aa5565b8060051b604051601f19603f83011681018181108582111715613b3157613b31613aa5565b604052918252848201925083810185019188831115613b4f57600080fd5b938501935b82851015613b7457613b65856138f9565b84529385019392850192613b54565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613baa57613baa613921565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251613c5c818460208701613655565b919091019291505056fea26469706673582212202a942e4446d0845826179dd94c6f9bde886db2b71bc4497729679f81e179a56a64736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x6080604052600436106102295760003560e01c8063752a50a611610123578063b696a6ad116100ab578063d38f2ba91161006f578063d38f2ba914610672578063d7da606614610692578063dd62ed3e146106a8578063e6a69ab8146106c8578063ffa1ad74146106e057610247565b8063b696a6ad146105e7578063bb8c631f14610607578063bfa176561461061d578063c9dc4b4d1461063d578063d25933291461065d57610247565b806395d89b41116100f257806395d89b411461056d5780639cc820da146105825780639dc29fac14610597578063a6afed95146105b7578063a9059cbb146105cc57610247565b8063752a50a6146104f75780637c27383b146105175780637c3a00fd146105375780638230ecd61461054d57610247565b80632ab4d052116101b15780634754d176116101755780634754d17614610461578063565f3d4f1461048157806362c067671461049757806370a08231146104b757806374e87e1e146104d757610247565b80632ab4d052146103c35780632d4aeea1146103d9578063313ce567146103f957806336248ab41461042c57806340c10f191461044157610247565b8063172f50a4116101f8578063172f50a41461030857806318160ddd1461032a57806322867d781461034d57806322f3e2d41461038257806323b872dd146103a357610247565b806306fdde0314610260578063095ea7b31461028b5780630c340a24146102bb57806316f0115b146102e857610247565b3661024757604051636436c22d60e11b815260040160405180910390fd5b60405163a0152e6360e01b815260040160405180910390fd5b34801561026c57600080fd5b50610275610711565b6040516102829190613685565b60405180910390f35b34801561029757600080fd5b506102ab6102a63660046136cd565b61079f565b6040519015158152602001610282565b3480156102c757600080fd5b506102d06107ba565b6040516001600160a01b039091168152602001610282565b3480156102f457600080fd5b506002546102d0906001600160a01b031681565b34801561031457600080fd5b506103286103233660046136f9565b61083c565b005b34801561033657600080fd5b5061033f6108d8565b604051908152602001610282565b34801561035957600080fd5b5061036d6103683660046136cd565b6108fb565b60408051928352602083019190915201610282565b34801561038e57600080fd5b50603d546102ab90600160a01b900460ff1681565b3480156103af57600080fd5b506102ab6103be366004613712565b610e1c565b3480156103cf57600080fd5b5061033f60385481565b3480156103e557600080fd5b5061036d6103f43660046136f9565b610e37565b34801561040557600080fd5b50603d5461041a90600160a81b900460ff1681565b60405160ff9091168152602001610282565b34801561043857600080fd5b50610328610f70565b34801561044d57600080fd5b5061032861045c3660046136cd565b611059565b34801561046d57600080fd5b5061036d61047c3660046136f9565b6113b7565b34801561048d57600080fd5b5061033f603a5481565b3480156104a357600080fd5b506103286104b2366004613712565b6114de565b3480156104c357600080fd5b5061033f6104d2366004613753565b611517565b3480156104e357600080fd5b506103286104f23660046137b9565b611583565b34801561050357600080fd5b506103286105123660046136f9565b611778565b34801561052357600080fd5b5061036d610532366004613753565b61181c565b34801561054357600080fd5b5061033f603c5481565b34801561055957600080fd5b50603d546102d0906001600160a01b031681565b34801561057957600080fd5b50610275611b9c565b34801561058e57600080fd5b5061033f611ba9565b3480156105a357600080fd5b506103286105b23660046136cd565b611bbd565b3480156105c357600080fd5b50610328611bf6565b3480156105d857600080fd5b506102ab6103be3660046136cd565b3480156105f357600080fd5b5061036d610602366004613860565b611d43565b34801561061357600080fd5b5061033f603b5481565b34801561062957600080fd5b5061036d6106383660046136cd565b612224565b34801561064957600080fd5b5061036d6106583660046136f9565b61260b565b34801561066957600080fd5b5061032861272a565b34801561067e57600080fd5b5061036d61068d3660046136f9565b6127c4565b34801561069e57600080fd5b5061033f603e5481565b3480156106b457600080fd5b5061033f6106c3366004613890565b6128ee565b3480156106d457600080fd5b5061033f6301e187e081565b3480156106ec57600080fd5b50610275604051806040016040528060058152602001640312e332e360dc1b81525081565b6034805461071e906138be565b80601f016020809104026020016040519081016040528092919081815260200182805461074a906138be565b80156107975780601f1061076c57610100808354040283529160200191610797565b820191906000526020600020905b81548152906001019060200180831161077a57829003601f168201915b505050505081565b6000604051631b48e8f360e21b815260040160405180910390fd5b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b1580156107ff57600080fd5b505afa158015610813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108379190613904565b905090565b6108446107ba565b6001600160a01b0316336001600160a01b03161461087557604051634b98449160e11b815260040160405180910390fd5b6038548181141561089957604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603855565b6000806108e3612918565b50509050806039546108f59190613937565b91505090565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561094c57600080fd5b505afa158015610960573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610984919061395f565b156109a257604051631b0e923f60e11b815260040160405180910390fd5b600260015414156109ce5760405162461bcd60e51b81526004016109c59061397a565b60405180910390fd5b6002600181905554603d54604051631a0dd00b60e01b81526001600160a01b039182166004820152911690631a0dd00b9060240160206040518083038186803b158015610a1a57600080fd5b505afa158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a52919061395f565b610a6f5760405163a596698b60e01b815260040160405180910390fd5b82610a8d576040516310eb483f60e21b815260040160405180910390fd5b610a95611bf6565b600254603d546001600160a01b039182169116610ab185610e37565b90945092508215610ba557806001600160a01b031663b2a02ff133846001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0557600080fd5b505afa158015610b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3d9190613904565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101869052606401600060405180830381600087803b158015610b8c57600080fd5b505af1158015610ba0573d6000803e3d6000fd5b505050505b6000826001600160a01b031663f60928096040518163ffffffff1660e01b815260040160206040518083038186803b158015610be057600080fd5b505afa158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1891906139b1565b90508015610d54576000836001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5b57600080fd5b505afa158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c939190613904565b6001600160a01b0316638d0dba008488610cac8c611517565b610cb691906139ca565b6040518363ffffffff1660e01b8152600401610cd39291906139e1565b60206040518083038186803b158015610ceb57600080fd5b505afa158015610cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2391906139b1565b9050600081118015610d3457508181105b15610d52576040516332b9d47360e01b815260040160405180910390fd5b505b604051632770a7eb60e21b81526001600160a01b03831690639dc29fac90610d8290339089906004016139e1565b600060405180830381600087803b158015610d9c57600080fd5b505af1158015610db0573d6000803e3d6000fd5b50505050610dbe8786612988565b60408051878152602081018790529081018590526001600160a01b0388169033907fe02887340b03318642b6755f258294b795be42ed57d4b5d0ef27be3038d8a7649060600160405180910390a35050600180555090939092509050565b600060405163d21ad44b60e01b815260040160405180910390fd5b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8a57600080fd5b505afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190613904565b6001600160a01b0316637c0f59f46040518163ffffffff1660e01b815260040160206040518083038186803b158015610efa57600080fd5b505afa158015610f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3291906139b1565b905080610f40575091929050565b610f5c610f5582670de0b6b3a7640000613937565b8590612c03565b9250610f6883856139ca565b915050915091565b603e54801561105657603d54600254604080516331056e5760e21b815290516001600160a01b03938416936340c10f1993169163c415b95c916004808301926020929190829003018186803b158015610fc857600080fd5b505afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110009190613904565b836040518363ffffffff1660e01b815260040161101e9291906139e1565b600060405180830381600087803b15801561103857600080fd5b505af115801561104c573d6000803e3d6000fd5b50506000603e5550505b50565b600260009054906101000a90046001600160a01b03166001600160a01b03166396aaccfe6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a757600080fd5b505afa1580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df9190613904565b6001600160a01b0316336001600160a01b03161461111057604051630935fed760e11b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561115e57600080fd5b505afa158015611172573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611196919061395f565b156111b457604051631b0e923f60e11b815260040160405180910390fd5b600260015414156111d75760405162461bcd60e51b81526004016109c59061397a565b6002600181905554603d54604051631a0dd00b60e01b81526001600160a01b039182166004820152911690631a0dd00b9060240160206040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b919061395f565b6112785760405163a596698b60e01b815260040160405180910390fd5b603d60009054906101000a90046001600160a01b03166001600160a01b03166322f3e2d46040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c657600080fd5b505afa1580156112da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fe919061395f565b61131b576040516303127d9160e31b815260040160405180910390fd5b611323611bf6565b60025460408051637556d1c160e11b815290516001600160a01b03909216916113ae918391829163eaada382916004808301926020929190829003018186803b15801561136f57600080fd5b505afa158015611383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a79190613904565b8585612c40565b50506001805550565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190613904565b6001600160a01b0316632a9133c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561147a57600080fd5b505afa15801561148e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b291906139b1565b9050806114c0575091929050565b6114ca848261302c565b91506114d682856139ca565b925050915091565b6114e6613064565b6001600160a01b038316611503576114fe828261309f565b505050565b6114fe6001600160a01b03841683836131b8565b6001600160a01b0381166000908152603660205260408120548061153e5750600092915050565b6000611548612918565b506001600160a01b038616600090815260376020526040902054909250905061157182846139fa565b61157b9190613a19565b949350505050565b600061158f600161320e565b905080156115a7576000805461ff0019166101001790555b876115c557604051636e83f50760e01b815260040160405180910390fd5b856115e3576040516330507cff60e11b815260040160405180910390fd5b6001600160a01b03851661160a57604051633cb1fb1f60e11b815260040160405180910390fd5b6001600160a01b0384166116315760405163013a1b4360e51b815260040160405180910390fd5b61163961329b565b611642856132ca565b61164e60348a8a6135bc565b5061165b603588886135bc565b50836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561169557600080fd5b505afa1580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd9190613a3b565b603d805442603a55670de0b6b3a7640000603b55603c86905560388590556001600160a81b031960ff93909316600160a81b02929092166001600160b01b0319909216919091176001600160a01b03861617600160a01b179055801561176d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6117806107ba565b6001600160a01b0316336001600160a01b0316146117b157604051634b98449160e11b815260040160405180910390fd5b6117b9611bf6565b603c54818114156117dd57604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f41e376fd99913dea7fda140f5c0bd997515b1a181acc58737320322548ec6e72910160405180910390a150603c55565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561186d57600080fd5b505afa158015611881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a5919061395f565b156118c357604051631b0e923f60e11b815260040160405180910390fd5b600260015414156118e65760405162461bcd60e51b81526004016109c59061397a565b6002600181905554603d54604051631a0dd00b60e01b81526001600160a01b039182166004820152911690631a0dd00b9060240160206040518083038186803b15801561193257600080fd5b505afa158015611946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196a919061395f565b6119875760405163a596698b60e01b815260040160405180910390fd5b61198f611bf6565b61199883611517565b9150816119b8576040516310eb483f60e21b815260040160405180910390fd5b603d546001600160a01b031660006119cf8461260b565b935090508215611ad757816001600160a01b031663b2a02ff133600260009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3757600080fd5b505afa158015611a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6f9190613904565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101869052606401600060405180830381600087803b158015611abe57600080fd5b505af1158015611ad2573d6000803e3d6000fd5b505050505b604051632770a7eb60e21b81526001600160a01b03831690639dc29fac90611b0590339088906004016139e1565b600060405180830381600087803b158015611b1f57600080fd5b505af1158015611b33573d6000803e3d6000fd5b50505050611b418585612988565b60408051828152602081018690529081018490526001600160a01b0386169033907fe02887340b03318642b6755f258294b795be42ed57d4b5d0ef27be3038d8a7649060600160405180910390a35050600180559092909150565b6035805461071e906138be565b60006301e187e0603c546108379190613a19565b6002546001600160a01b03163314611be85760405163531f2aa960e11b815260040160405180910390fd5b611bf28282612988565b5050565b6000806000611c03612918565b92509250925080421415611c1657505050565b42603a5582156114fe578260396000828254611c329190613937565b9091555050603b829055603d54600254604080516331056e5760e21b815290516001600160a01b03938416936340c10f1993169163c415b95c916004808301926020929190829003018186803b158015611c8b57600080fd5b505afa158015611c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc39190613904565b603e54611cd09087613937565b6040518363ffffffff1660e01b8152600401611ced9291906139e1565b600060405180830381600087803b158015611d0757600080fd5b505af1925050508015611d18575060015b611d395782603e6000828254611d2e9190613937565b909155506114fe9050565b6000603e55505050565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b158015611d9457600080fd5b505afa158015611da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcc919061395f565b15611dea57604051631b0e923f60e11b815260040160405180910390fd5b60026001541415611e0d5760405162461bcd60e51b81526004016109c59061397a565b6002600181905554603d54604051631a0dd00b60e01b81526001600160a01b039182166004820152911690631a0dd00b9060240160206040518083038186803b158015611e5957600080fd5b505afa158015611e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e91919061395f565b611eae5760405163a596698b60e01b815260040160405180910390fd5b83611ecc576040516310eb483f60e21b815260040160405180910390fd5b611ed4611bf6565b600254603d5460405163dde3ab9560e01b81523360048201526001600160a01b039283169290911690600090839063dde3ab959060240160a06040518083038186803b158015611f2357600080fd5b505afa158015611f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5b9190613a5e565b9450505050506000836001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b158015611f9c57600080fd5b505afa158015611fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd49190613904565b60405163b5e9bef560e01b81529091506001600160a01b0382169063b5e9bef59061200590869086906004016139e1565b60206040518083038186803b15801561201d57600080fd5b505afa158015612031573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205591906139b1565b8811156120745760405162d11df360e61b815260040160405180910390fd5b6120808482338b612c40565b612089886113b7565b9096509450841561216557826001600160a01b03166340c10f19856001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120dc57600080fd5b505afa1580156120f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121149190613904565b876040518363ffffffff1660e01b81526004016121329291906139e1565b600060405180830381600087803b15801561214c57600080fd5b505af1158015612160573d6000803e3d6000fd5b505050505b6040516340c10f1960e01b81526001600160a01b038416906340c10f1990612193908a908a906004016139e1565b600060405180830381600087803b1580156121ad57600080fd5b505af11580156121c1573d6000803e3d6000fd5b5050604080518b8152602081018a90529081018890526001600160a01b038a1692503391507f197d5e1e72d62df9dad3add8609553402104dbeb4f83f9789e33aeb6723a78399060600160405180910390a3505060018055509194909350915050565b600080600260009054906101000a90046001600160a01b03166001600160a01b03166396aaccfe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561227557600080fd5b505afa158015612289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ad9190613904565b6001600160a01b0316336001600160a01b0316146122de57604051630935fed760e11b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561232c57600080fd5b505afa158015612340573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612364919061395f565b1561238257604051631b0e923f60e11b815260040160405180910390fd5b600260015414156123a55760405162461bcd60e51b81526004016109c59061397a565b6002600181905554603d54604051631a0dd00b60e01b81526001600160a01b039182166004820152911690631a0dd00b9060240160206040518083038186803b1580156123f157600080fd5b505afa158015612405573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612429919061395f565b6124465760405163a596698b60e01b815260040160405180910390fd5b603d54600160a01b900460ff166124705760405163a4382ae360e01b815260040160405180910390fd5b8261248e576040516310eb483f60e21b815260040160405180910390fd5b612496611bf6565b603d546001600160a01b03166124ab846113b7565b9093509150811561259c57806001600160a01b03166340c10f19600260009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561251357600080fd5b505afa158015612527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254b9190613904565b846040518363ffffffff1660e01b81526004016125699291906139e1565b600060405180830381600087803b15801561258357600080fd5b505af1158015612597573d6000803e3d6000fd5b505050505b6040516340c10f1960e01b81526001600160a01b038216906340c10f19906125ca90889087906004016139e1565b600060405180830381600087803b1580156125e457600080fd5b505af11580156125f8573d6000803e3d6000fd5b5050505050600180819055509250929050565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561265e57600080fd5b505afa158015612672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126969190613904565b6001600160a01b0316637c0f59f46040518163ffffffff1660e01b815260040160206040518083038186803b1580156126ce57600080fd5b505afa1580156126e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270691906139b1565b905080612714575091929050565b61271e848261302c565b91506114d68285613937565b6127326107ba565b6001600160a01b0316336001600160a01b03161461276357604051634b98449160e11b815260040160405180910390fd5b603d54604051600160a01b90910460ff1615808252907fb1d9ceb4467fd05a16930f966760d70eb5926cf0c1c19a7b6bfe59d805c190459060200160405180910390a1603d8054911515600160a01b0260ff60a01b19909216919091179055565b6000806000600260009054906101000a90046001600160a01b03166001600160a01b0316634066fdea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561281757600080fd5b505afa15801561282b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284f9190613904565b6001600160a01b0316632a9133c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561288757600080fd5b505afa15801561289b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bf91906139b1565b9050806128cd575091929050565b6128e2610f5582670de0b6b3a76400006139ca565b9250610f6884846139ca565b600060405163effde13d60e01b815260040160405180910390fd5b6001600160a01b03163b151590565b603a54603b546000914281101561298357600061293582426139ca565b61293d611ba9565b61294791906139fa565b905080156129815760395461295d90829061302c565b9350612974603b548261302c90919063ffffffff16565b61297e9084613937565b92505b505b909192565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156129d957600080fd5b505afa1580156129ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a159190810190613abb565b603d5481519192506001600160a01b03169060005b81811015612ac357838181518110612a4457612a44613b80565b6020908102919091010151604051626cc3c360e61b81526001600160a01b038581166004830152878116602483015290911690631b30f0c090604401600060405180830381600087803b158015612a9a57600080fd5b505af1158015612aae573d6000803e3d6000fd5b5050505080612abc90613b96565b9050612a2a565b506001600160a01b038616612aeb5760405163170476af60e21b815260040160405180910390fd5b6000612af687611517565b905085811015612b1957604051630bba337f60e11b815260040160405180910390fd5b6001600160a01b03871660008181526036602090815260408083208a86039055603b546037835281842055603980548b90039055518981529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3600086118015612b955750612b9387611517565b155b15612bfa57600254604051631d71be3b60e21b81526001600160a01b038981166004830152909116906375c6f8ec90602401600060405180830381600087803b158015612be157600080fd5b505af1158015612bf5573d6000803e3d6000fd5b505050505b50505050505050565b600081612c11600282613a19565b612c23670de0b6b3a7640000866139fa565b612c2d9190613937565b612c379190613a19565b90505b92915050565b603d54600160a01b900460ff16612c6a5760405163a4382ae360e01b815260040160405180910390fd5b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015612cbb57600080fd5b505afa158015612ccf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cf79190810190613abb565b603d5481519192506001600160a01b03169060005b81811015612da557838181518110612d2657612d26613b80565b6020908102919091010151604051626cc3c360e61b81526001600160a01b038581166004830152878116602483015290911690631b30f0c090604401600060405180830381600087803b158015612d7c57600080fd5b505af1158015612d90573d6000803e3d6000fd5b5050505080612d9e90613b96565b9050612d0c565b506001600160a01b038616612dcd57604051632b61339160e21b815260040160405180910390fd5b6000886001600160a01b031663f60928096040518163ffffffff1660e01b815260040160206040518083038186803b158015612e0857600080fd5b505afa158015612e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e4091906139b1565b90506000612e4d88611517565b9050600082118015612eeb5750603d5482906001600160a01b03808c1691638d0dba009116612e7c8b86613937565b6040518363ffffffff1660e01b8152600401612e999291906139e1565b60206040518083038186803b158015612eb157600080fd5b505afa158015612ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee991906139b1565b105b15612f0957604051637e76d52960e11b815260040160405180910390fd5b8660396000828254612f1b9190613937565b90915550506038546039541115612f4557604051634aed251160e11b815260040160405180910390fd5b612f4f8782613937565b6001600160a01b038916600081815260366020908152604080832094909455603b54603782528483205592518a8152919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a380158015612fbb5750600087115b1561302057600254604051631dc2da6d60e21b81526001600160a01b038a811660048301529091169063770b69b490602401600060405180830381600087803b15801561300757600080fd5b505af115801561301b573d6000803e3d6000fd5b505050505b50505050505050505050565b6000821580613039575081155b1561304657506000612c3a565b670de0b6b3a764000061305a600282613a19565b612c2384866139fa565b61306c6107ba565b6001600160a01b0316336001600160a01b03161461309d57604051634b98449160e11b815260040160405180910390fd5b565b804710156130ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016109c5565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461313c576040519150601f19603f3d011682016040523d82523d6000602084013e613141565b606091505b50509050806114fe5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016109c5565b6114fe8363a9059cbb60e01b84846040516024016131d79291906139e1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261333a565b60008054610100900460ff1615613255578160ff1660011480156132315750303b155b61324d5760405162461bcd60e51b81526004016109c590613bb1565b506000919050565b60005460ff80841691161061327c5760405162461bcd60e51b81526004016109c590613bb1565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166132c25760405162461bcd60e51b81526004016109c590613bff565b61309d61340c565b600054610100900460ff166132f15760405162461bcd60e51b81526004016109c590613bff565b6001600160a01b0381166133185760405163724f500960e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600061338f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134399092919063ffffffff16565b8051909150156114fe57808060200190518101906133ad919061395f565b6114fe5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016109c5565b600054610100900460ff166134335760405162461bcd60e51b81526004016109c590613bff565b60018055565b60606134488484600085613452565b90505b9392505050565b6060824710156134b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016109c5565b6001600160a01b0385163b61350a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109c5565b600080866001600160a01b031685876040516135269190613c4a565b60006040518083038185875af1925050503d8060008114613563576040519150601f19603f3d011682016040523d82523d6000602084013e613568565b606091505b5091509150613578828286613583565b979650505050505050565b6060831561359257508161344b565b8251156135a25782518084602001fd5b8160405162461bcd60e51b81526004016109c59190613685565b8280546135c8906138be565b90600052602060002090601f0160209004810192826135ea5760008555613630565b82601f106136035782800160ff19823516178555613630565b82800160010185558215613630579182015b82811115613630578235825591602001919060010190613615565b5061363c929150613640565b5090565b5b8082111561363c5760008155600101613641565b60005b83811015613670578181015183820152602001613658565b8381111561367f576000848401525b50505050565b60208152600082518060208401526136a4816040850160208701613655565b601f01601f19169190910160400192915050565b6001600160a01b038116811461105657600080fd5b600080604083850312156136e057600080fd5b82356136eb816136b8565b946020939093013593505050565b60006020828403121561370b57600080fd5b5035919050565b60008060006060848603121561372757600080fd5b8335613732816136b8565b92506020840135613742816136b8565b929592945050506040919091013590565b60006020828403121561376557600080fd5b813561344b816136b8565b60008083601f84011261378257600080fd5b50813567ffffffffffffffff81111561379a57600080fd5b6020830191508360208285010111156137b257600080fd5b9250929050565b60008060008060008060008060c0898b0312156137d557600080fd5b883567ffffffffffffffff808211156137ed57600080fd5b6137f98c838d01613770565b909a50985060208b013591508082111561381257600080fd5b5061381f8b828c01613770565b9097509550506040890135613833816136b8565b93506060890135613843816136b8565b979a969950949793969295929450505060808201359160a0013590565b6000806040838503121561387357600080fd5b823591506020830135613885816136b8565b809150509250929050565b600080604083850312156138a357600080fd5b82356138ae816136b8565b91506020830135613885816136b8565b600181811c908216806138d257607f821691505b602082108114156138f357634e487b7160e01b600052602260045260246000fd5b50919050565b8051613296816136b8565b60006020828403121561391657600080fd5b815161344b816136b8565b634e487b7160e01b600052601160045260246000fd5b6000821982111561394a5761394a613921565b500190565b8051801515811461329657600080fd5b60006020828403121561397157600080fd5b612c378261394f565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156139c357600080fd5b5051919050565b6000828210156139dc576139dc613921565b500390565b6001600160a01b03929092168252602082015260400190565b6000816000190483118215151615613a1457613a14613921565b500290565b600082613a3657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613a4d57600080fd5b815160ff8116811461344b57600080fd5b600080600080600060a08688031215613a7657600080fd5b613a7f8661394f565b602087015160408801516060890151608090990151929a91995097965090945092505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215613ace57600080fd5b825167ffffffffffffffff80821115613ae657600080fd5b818501915085601f830112613afa57600080fd5b815181811115613b0c57613b0c613aa5565b8060051b604051601f19603f83011681018181108582111715613b3157613b31613aa5565b604052918252848201925083810185019188831115613b4f57600080fd5b938501935b82851015613b7457613b65856138f9565b84529385019392850192613b54565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613baa57613baa613921565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251613c5c818460208701613655565b919091019291505056fea26469706673582212202a942e4446d0845826179dd94c6f9bde886db2b71bc4497729679f81e179a56a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "burn(address,uint256)": {
        "params": {
          "amount_": "The amount to burn",
          "from_": "The account to burn from"
        }
      },
      "flashIssue(address,uint256)": {
        "details": "The healthy of outcome position must be done afterhand",
        "params": {
          "amount_": "The amount to mint",
          "to_": "The beneficiary account"
        },
        "returns": {
          "_fee": "The fee amount collected",
          "_issued": "The amount issued after fees"
        }
      },
      "governor()": {
        "returns": {
          "_governor": "The governor"
        }
      },
      "issue(uint256,address)": {
        "params": {
          "amount_": "The amount to mint",
          "to_": "The beneficiary account"
        },
        "returns": {
          "_fee": "The fee amount collected",
          "_issued": "The amount issued after fees"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "amount_": "Token amount to mint",
          "to_": "Receiver address"
        }
      },
      "quoteIssueIn(uint256)": {
        "params": {
          "amountToIssue_": "Synth to issue"
        },
        "returns": {
          "_amount": "Gross amount",
          "_fee": "The fee amount to collect"
        }
      },
      "quoteIssueOut(uint256)": {
        "params": {
          "amount_": "Gross amount"
        },
        "returns": {
          "_amountToIssue": "Synth to issue",
          "_fee": "The fee amount to collect"
        }
      },
      "quoteRepayIn(uint256)": {
        "params": {
          "amountToRepay_": "Debt amount to repay"
        },
        "returns": {
          "_amount": "Gross amount",
          "_fee": "The fee amount to collect"
        }
      },
      "quoteRepayOut(uint256)": {
        "params": {
          "amount_": "Gross amount"
        },
        "returns": {
          "_amountToRepay": "Debt amount to repay",
          "_fee": "The fee amount to collect"
        }
      },
      "repay(address,uint256)": {
        "details": "The msg.sender is the payer and the account beneficed",
        "params": {
          "amount_": "The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)",
          "onBehalfOf_": "The account that will have debt decreased"
        },
        "returns": {
          "_repaid": "The amount repaid after fees"
        }
      },
      "repayAll(address)": {
        "details": "This function helps users to no leave debt dust behind",
        "params": {
          "onBehalfOf_": "The account that will have debt decreased"
        },
        "returns": {
          "_fee": "The fee amount collected",
          "_repaid": "The amount repaid after fees"
        }
      },
      "sweep(address,address,uint256)": {
        "params": {
          "amount_": "The amount to send",
          "to_": "The recipient of the transfer",
          "token_": "The token to transfer"
        }
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      }
    },
    "title": "Non-transferable token that represents users' debts",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DebtRepaid(address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when synthetic's debt is repaid"
      },
      "DebtTokenActiveUpdated(bool)": {
        "notice": "Emitted when active flag is updated"
      },
      "InterestRateUpdated(uint256,uint256)": {
        "notice": "Emitted when interest rate is updated"
      },
      "MaxTotalSupplyUpdated(uint256,uint256)": {
        "notice": "Emitted when max total supply is updated"
      },
      "SyntheticTokenIssued(address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when synthetic token is issued"
      }
    },
    "kind": "user",
    "methods": {
      "accrueInterest()": {
        "notice": "Accrue interest over debt supply"
      },
      "balanceOf(address)": {
        "notice": "Get the updated (principal + interest) user's debt"
      },
      "burn(address,uint256)": {
        "notice": "Burn debt token"
      },
      "collectPendingInterestFee()": {
        "notice": "Collect pending interest fee if any"
      },
      "debtIndex()": {
        "notice": "Accumulator of the total earned interest rate since the beginning"
      },
      "decimals()": {
        "notice": "The decimals of the token"
      },
      "flashIssue(address,uint256)": {
        "notice": "Issue synth without checking collateral and without minting debt tokens"
      },
      "governor()": {
        "notice": "Get the governor"
      },
      "interestRate()": {
        "notice": "Interest rate"
      },
      "interestRatePerSecond()": {
        "notice": "Return interest rate (in percent) per second"
      },
      "isActive()": {
        "notice": "If true, disables msAsset minting on this pool"
      },
      "issue(uint256,address)": {
        "notice": "Lock collateral and mint synthetic token"
      },
      "lastTimestampAccrued()": {
        "notice": "The timestamp when interest accrual was calculated for the last time"
      },
      "maxTotalSupply()": {
        "notice": "The supply cap"
      },
      "mint(address,uint256)": {
        "notice": "onlySmartFarmingManager:: Mint `amount_` of debtToken at `to_`."
      },
      "name()": {
        "notice": "The name of the token"
      },
      "pendingInterestFee()": {
        "notice": "Pending interest fee to collect"
      },
      "pool()": {
        "notice": "Pool contract"
      },
      "quoteIssueIn(uint256)": {
        "notice": "Quote gross `_amount` to issue `amountToIssue_` synthetic tokens"
      },
      "quoteIssueOut(uint256)": {
        "notice": "Quote synthetic tokens `_amountToIssue` by using gross `_amount`"
      },
      "quoteRepayIn(uint256)": {
        "notice": "Quote synthetic token `_amount` need to repay `amountToRepay_` debt"
      },
      "quoteRepayOut(uint256)": {
        "notice": "Quote debt `_amountToRepay` by burning `_amount` synthetic tokens"
      },
      "repay(address,uint256)": {
        "notice": "Send synthetic token to decrease debt"
      },
      "repayAll(address)": {
        "notice": "Send synthetic token to decrease debt"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      },
      "symbol()": {
        "notice": "The symbol of the token"
      },
      "syntheticToken()": {
        "notice": "The Synthetic token"
      },
      "toggleIsActive()": {
        "notice": "Enable/Disable the Debt Token"
      },
      "totalSupply()": {
        "notice": "Return the total supply"
      },
      "updateInterestRate(uint256)": {
        "notice": "Update interest rate (APR)"
      },
      "updateMaxTotalSupply(uint256)": {
        "notice": "Update max total supply"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19514,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 19517,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 33193,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 14015,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPool)27664"
      },
      {
        "astId": 14117,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 30616,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "name",
        "offset": 0,
        "slot": "52",
        "type": "t_string_storage"
      },
      {
        "astId": 30620,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "symbol",
        "offset": 0,
        "slot": "53",
        "type": "t_string_storage"
      },
      {
        "astId": 30625,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "principalOf",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 30630,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "debtIndexOf",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 30634,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "maxTotalSupply",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 30637,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "totalSupply_",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 30641,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "lastTimestampAccrued",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 30645,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "debtIndex",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 30649,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "interestRate",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 30654,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "syntheticToken",
        "offset": 0,
        "slot": "61",
        "type": "t_contract(ISyntheticToken)28137"
      },
      {
        "astId": 30658,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "isActive",
        "offset": 20,
        "slot": "61",
        "type": "t_bool"
      },
      {
        "astId": 30662,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "decimals",
        "offset": 21,
        "slot": "61",
        "type": "t_uint8"
      },
      {
        "astId": 30668,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "pendingInterestFee",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPool)27664": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(ISyntheticToken)28137": {
        "encoding": "inplace",
        "label": "contract ISyntheticToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}