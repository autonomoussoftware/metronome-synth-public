{
  "address": "0x025347F4CC7865068dE5A139951411084E7bCAD7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSpeed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "TokenSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supplyIndex",
          "type": "uint256"
        }
      ],
      "name": "TokensAccruedUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "INITIAL_INDEX",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_REWARD_TOKENS",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens_",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts_",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens_",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "rewardToken_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenStates",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensAccruedOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "updateBeforeMintOrBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        }
      ],
      "name": "updateBeforeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newSpeed_",
          "type": "uint256"
        }
      ],
      "name": "updateTokenSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "speeds_",
          "type": "uint256[]"
        }
      ],
      "name": "updateTokenSpeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7efea8a4c2fa1f3262dd4a5941fa7215efd2a7bb9096ae239eb0e2eb3621a238",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x025347F4CC7865068dE5A139951411084E7bCAD7",
    "transactionIndex": 26,
    "gasUsed": "1838460",
    "logsBloom": "0x
    "blockHash": "0xf035c8e4f5bb599218d95f53d6ef6094010b69411675d013991d854a0a69ffc7",
    "transactionHash": "0x7efea8a4c2fa1f3262dd4a5941fa7215efd2a7bb9096ae239eb0e2eb3621a238",
    "logs": [],
    "blockNumber": 15876828,
    "cumulativeGasUsed": "3897248",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8f9ac8ece838b75cf20cef638b1903fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSpeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"TokenSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplyIndex\",\"type\":\"uint256\"}],\"name\":\"TokensAccruedUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"INITIAL_INDEX\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARD_TOKENS\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens_\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts_\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens_\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStates\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensAccruedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"updateBeforeMintOrBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"updateBeforeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newSpeed_\",\"type\":\"uint256\"}],\"name\":\"updateTokenSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"speeds_\",\"type\":\"uint256[]\"}],\"name\":\"updateTokenSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"sweep(address,address,uint256)\":{\"params\":{\"amount_\":\"The amount to send\",\"to_\":\"The recipient of the transfer\",\"token_\":\"The token to transfer\"}},\"updateBeforeMintOrBurn(address,address)\":{\"details\":\"Called by DepositToken and DebtToken contracts\"},\"updateBeforeTransfer(address,address,address)\":{\"details\":\"Called by DepositToken and DebtToken contracts\"}},\"title\":\"RewardsDistributor contract\",\"version\":1},\"userdoc\":{\"events\":{\"RewardClaimed(address,uint256)\":{\"notice\":\"Emitted when reward is claimed\"},\"TokenSpeedUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when updating token speed\"},\"TokensAccruedUpdated(address,address,uint256,uint256)\":{\"notice\":\"Emitted when updating accrued token\"}},\"kind\":\"user\",\"methods\":{\"INITIAL_INDEX()\":{\"notice\":\"The initial index\"},\"MAX_REWARD_TOKENS()\":{\"notice\":\"Max reward tokens to avoid DoS scenario\"},\"accountIndexOf(address,address)\":{\"notice\":\"The supply index for each token for each account as of the last time they accrued token\"},\"claimRewards(address)\":{\"notice\":\"Claim tokens accrued by account in all tokens\"},\"claimRewards(address,address[])\":{\"notice\":\"Claim tokens accrued by account in the specified tokens\"},\"claimRewards(address[],address[])\":{\"notice\":\"Claim tokens accrued by the accounts in the specified tokens\"},\"pool()\":{\"notice\":\"Pool contract\"},\"rewardToken()\":{\"notice\":\"The token to reward\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"},\"tokenSpeeds(address)\":{\"notice\":\"The amount of token distributed for each token per second\"},\"tokenStates(address)\":{\"notice\":\"The reward state for each token\"},\"tokens(uint256)\":{\"notice\":\"Track tokens for reward\"},\"tokensAccruedOf(address)\":{\"notice\":\"The token accrued but not yet transferred to each user\"},\"updateBeforeMintOrBurn(address,address)\":{\"notice\":\"Update indexes on pre-mint and pre-burn\"},\"updateBeforeTransfer(address,address,address)\":{\"notice\":\"Update indexes on pre-transfer\"},\"updateTokenSpeed(address,uint256)\":{\"notice\":\"Update speed for a single deposit token\"},\"updateTokenSpeeds(address[],uint256[])\":{\"notice\":\"Update token speeds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardsDistributor.sol\":\"RewardsDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/utils/math/SafeCast.sol\\\";\\nimport \\\"./dependencies/openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IDebtToken.sol\\\";\\nimport \\\"./interfaces/IDepositToken.sol\\\";\\nimport \\\"./access/Manageable.sol\\\";\\nimport \\\"./storage/RewardsDistributorStorage.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\n\\n/**\\n * @title RewardsDistributor contract\\n */\\ncontract RewardsDistributor is ReentrancyGuard, Manageable, RewardsDistributorStorageV1 {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n    using WadRayMath for uint256;\\n\\n    /// @notice The initial index\\n    uint224 public constant INITIAL_INDEX = 1e18;\\n\\n    /// @notice Max reward tokens to avoid DoS scenario\\n    uint224 public constant MAX_REWARD_TOKENS = 20;\\n\\n    /// @notice Emitted when reward is claimed\\n    event RewardClaimed(address account, uint256 amount);\\n\\n    /// @notice Emitted when updating accrued token\\n    event TokensAccruedUpdated(IERC20 indexed token, address indexed account, uint256 tokensDelta, uint256 supplyIndex);\\n\\n    /// @notice Emitted when updating token speed\\n    event TokenSpeedUpdated(IERC20 indexed token, uint256 oldSpeed, uint256 newSpeed);\\n\\n    /**\\n     * @dev Throws if this contract isn't registered on pool\\n     */\\n    modifier onlyIfDistributorExists() {\\n        bool _distributorAdded = false;\\n        IRewardsDistributor[] memory _rewardsDistributors = pool.getRewardsDistributors();\\n        uint256 _length = _rewardsDistributors.length;\\n        for (uint256 i; i < _length; ++i) {\\n            if (_rewardsDistributors[i] == this) {\\n                _distributorAdded = true;\\n                break;\\n            }\\n        }\\n        require(_distributorAdded, \\\"distributor-not-added\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if token doesn't exist\\n     * @dev Should be a DepositToken (suppliers) or DebtToken (borrowers)\\n     */\\n    modifier onlyIfTokenExists(address token_) {\\n        IPool _pool = pool;\\n        require(\\n            _pool.isDebtTokenExists(IDebtToken(token_)) || _pool.isDepositTokenExists(IDepositToken(token_)),\\n            \\\"invalid-token\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(IPool pool_, IERC20 rewardToken_) external initializer {\\n        require(address(rewardToken_) != address(0), \\\"reward-token-is-null\\\");\\n\\n        __ReentrancyGuard_init();\\n        __Manageable_init(pool_);\\n\\n        rewardToken = rewardToken_;\\n    }\\n\\n    /**\\n     * @notice Claim tokens accrued by account in all tokens\\n     */\\n    function claimRewards(address account_) external {\\n        claimRewards(account_, tokens);\\n    }\\n\\n    /**\\n     * @notice Claim tokens accrued by account in the specified tokens\\n     */\\n    function claimRewards(address account_, IERC20[] memory tokens_) public {\\n        address[] memory _accounts = new address[](1);\\n        _accounts[0] = account_;\\n        claimRewards(_accounts, tokens_);\\n    }\\n\\n    /**\\n     * @notice Claim tokens accrued by the accounts in the specified tokens\\n     */\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) public nonReentrant {\\n        uint256 _accountsLength = accounts_.length;\\n        uint256 _tokensLength = tokens_.length;\\n        for (uint256 i; i < _tokensLength; ++i) {\\n            IERC20 _token = tokens_[i];\\n\\n            if (tokenStates[_token].index > 0) {\\n                _updateTokenIndex(_token);\\n                for (uint256 j; j < _accountsLength; j++) {\\n                    _updateTokensAccruedOf(_token, accounts_[j]);\\n                }\\n            }\\n        }\\n\\n        for (uint256 j; j < _accountsLength; j++) {\\n            address _account = accounts_[j];\\n            _transferRewardIfEnoughTokens(_account, tokensAccruedOf[_account]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update indexes on pre-mint and pre-burn\\n     * @dev Called by DepositToken and DebtToken contracts\\n     */\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external {\\n        if (tokenStates[token_].index > 0) {\\n            _updateTokenIndex(token_);\\n            _updateTokensAccruedOf(token_, account_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update indexes on pre-transfer\\n     * @dev Called by DepositToken and DebtToken contracts\\n     */\\n    function updateBeforeTransfer(\\n        IERC20 token_,\\n        address from_,\\n        address to_\\n    ) external {\\n        if (tokenStates[token_].index > 0) {\\n            _updateTokenIndex(token_);\\n            _updateTokensAccruedOf(token_, from_);\\n            _updateTokensAccruedOf(token_, to_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer tokens to the user\\n     * @dev If there is not enough tokens, we do not perform the transfer\\n     */\\n    function _transferRewardIfEnoughTokens(address account_, uint256 amount_) private {\\n        IERC20 _rewardToken = rewardToken;\\n        uint256 _balance = _rewardToken.balanceOf(address(this));\\n        if (amount_ > 0 && amount_ <= _balance) {\\n            tokensAccruedOf[account_] = 0;\\n            _rewardToken.safeTransfer(account_, amount_);\\n            emit RewardClaimed(account_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate tokens accrued by an account\\n     */\\n    function _updateTokensAccruedOf(IERC20 token_, address account_) private {\\n        uint256 _tokenIndex = tokenStates[token_].index;\\n        uint256 _accountIndex = accountIndexOf[token_][account_];\\n        accountIndexOf[token_][account_] = _tokenIndex;\\n\\n        if (_accountIndex == 0 && _tokenIndex > 0) {\\n            _accountIndex = INITIAL_INDEX;\\n        }\\n\\n        uint256 _deltaIndex = _tokenIndex - _accountIndex;\\n        uint256 _tokensDelta = token_.balanceOf(account_).wadMul(_deltaIndex);\\n        tokensAccruedOf[account_] += _tokensDelta;\\n        emit TokensAccruedUpdated(token_, account_, _tokensDelta, _tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Accrue reward token by updating the index\\n     */\\n    function _updateTokenIndex(IERC20 token_) private {\\n        TokenState storage _supplyState = tokenStates[token_];\\n        uint256 _speed = tokenSpeeds[token_];\\n        uint256 _deltaTimestamps = block.timestamp - uint256(_supplyState.timestamp);\\n        if (_deltaTimestamps > 0 && _speed > 0) {\\n            uint256 _totalSupply = token_.totalSupply();\\n            uint256 _tokensAccrued = _deltaTimestamps * _speed;\\n            uint256 _ratio = _totalSupply > 0 ? _tokensAccrued.wadDiv(_totalSupply) : 0;\\n            uint256 _newIndex = _supplyState.index + _ratio;\\n            tokenStates[token_] = TokenState({index: _newIndex.toUint224(), timestamp: block.timestamp.toUint32()});\\n        } else if (_deltaTimestamps > 0 && _supplyState.index > 0) {\\n            _supplyState.timestamp = block.timestamp.toUint32();\\n        }\\n    }\\n\\n    /**\\n     * @notice Update the speed for token\\n     */\\n    function _updateTokenSpeed(IERC20 token_, uint256 newSpeed_)\\n        private\\n        onlyIfDistributorExists\\n        onlyIfTokenExists(address(token_))\\n    {\\n        uint256 _currentSpeed = tokenSpeeds[token_];\\n        if (_currentSpeed > 0) {\\n            _updateTokenIndex(token_);\\n        } else if (newSpeed_ > 0) {\\n            // Add token token to the list\\n            if (tokenStates[token_].index == 0) {\\n                require(tokens.length < MAX_REWARD_TOKENS, \\\"reached-max-reward-tokens\\\");\\n                tokenStates[token_] = TokenState({index: INITIAL_INDEX, timestamp: block.timestamp.toUint32()});\\n                tokens.push(token_);\\n            } else {\\n                // Update timestamp to ensure extra interest is not accrued during the prior period\\n                tokenStates[token_].timestamp = block.timestamp.toUint32();\\n            }\\n        }\\n\\n        if (_currentSpeed != newSpeed_) {\\n            tokenSpeeds[token_] = newSpeed_;\\n            emit TokenSpeedUpdated(token_, _currentSpeed, newSpeed_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update speed for a single deposit token\\n     */\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external onlyGovernor {\\n        _updateTokenSpeed(token_, newSpeed_);\\n    }\\n\\n    /**\\n     * @notice Update token speeds\\n     */\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external onlyGovernor {\\n        uint256 _tokensLength = tokens_.length;\\n        require(_tokensLength == speeds_.length, \\\"invalid-input\\\");\\n\\n        for (uint256 i; i < _tokensLength; ++i) {\\n            _updateTokenSpeed(tokens_[i], speeds_[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x407ceb03092ff22f85962f9a5cc9b97768cb1d661c7ef36cc77b12eec9c5e5a1\",\"license\":\"MIT\"},\"contracts/access/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/TokenHolder.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\nimport \\\"../interfaces/IManageable.sol\\\";\\n\\n/**\\n * @title Reusable contract that handles accesses\\n */\\nabstract contract Manageable is IManageable, TokenHolder, Initializable {\\n    /**\\n     * @notice Pool contract\\n     */\\n    IPool public pool;\\n\\n    /**\\n     * @notice Requires that the caller is the Pool contract\\n     */\\n    modifier onlyPool() {\\n        require(msg.sender == address(pool), \\\"not-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Requires that the caller is the Pool contract\\n     */\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!pool.paused(), \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotShutdown() {\\n        require(!pool.everythingStopped(), \\\"shutdown\\\");\\n        _;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Manageable_init(IPool pool_) internal initializer {\\n        require(address(pool_) != address(0), \\\"pool-address-is-zero\\\");\\n        pool = pool_;\\n    }\\n\\n    function governor() public view returns (address _governor) {\\n        _governor = IGovernable(address(pool)).governor();\\n    }\\n\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x0dc9eeda21a9a0fb81227a1da7bb873a1cb6a0e406b374ebe0579b416225868e\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xc790f8419ee2c68721d6203ed1b5f81e89eb7e1dca19be3a9f54cb5de44491f1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0x180688649a756828572d3efa734666c8d3ea9b0e980260b9e4b827520c6dba55\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralizationRatio() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external;\\n\\n    function withdraw(uint256 amount_, address to_) external;\\n\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    function updateCollateralizationRatio(uint128 newCollateralizationRatio_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0xf52bfa4257a00a71fa591b948127115837257485aa3d8f833135323961756a3f\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\",\"keccak256\":\"0xac88e0997a26942cb9cbda1a7dd9756e28ba2025813e5b07e55939fbf8538ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable {\\n    function debtFloorInUsd() external returns (uint256);\\n\\n    function depositFee() external returns (uint256);\\n\\n    function issueFee() external returns (uint256);\\n\\n    function withdrawFee() external returns (uint256);\\n\\n    function repayFee() external returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isSyntheticTokenExists(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function isDebtTokenExists(IDebtToken debtToken_) external view returns (bool);\\n\\n    function isDepositTokenExists(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(address account_)\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function addDebtToken(IDebtToken debtToken_) external;\\n\\n    function removeDebtToken(IDebtToken debtToken_) external;\\n\\n    function addDepositToken(address depositToken_) external;\\n\\n    function removeDepositToken(IDepositToken depositToken_) external;\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external;\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut);\\n\\n    function updateSwapFee(uint256 newSwapFee_) external;\\n\\n    function updateDebtFloor(uint256 newDebtFloorInUsd_) external;\\n\\n    function updateDepositFee(uint256 newDepositFee_) external;\\n\\n    function updateIssueFee(uint256 newIssueFee_) external;\\n\\n    function updateWithdrawFee(uint256 newWithdrawFee_) external;\\n\\n    function updateRepayFee(uint256 newRepayFee_) external;\\n\\n    function updateLiquidatorLiquidationFee(uint128 newLiquidatorLiquidationFee_) external;\\n\\n    function updateProtocolLiquidationFee(uint128 newProtocolLiquidationFee_) external;\\n\\n    function updateMaxLiquidable(uint256 newMaxLiquidable_) external;\\n\\n    function updateTreasury(ITreasury newTreasury_) external;\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function addRewardsDistributor(IRewardsDistributor distributor_) external;\\n\\n    function toggleIsSwapActive() external;\\n}\\n\",\"keccak256\":\"0x37aee2641c9e13119b557ffd6720d317ed90436037ba7f6a8fc8cd35a9e2a905\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function poolExists(address pool_) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateMasterOracle(IMasterOracle newOracle_) external;\\n}\\n\",\"keccak256\":\"0x958edd140ecfbe458bfd7f1505f4c1c3f3359adfe1ab6a8f200455f67d159330\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(\\n        IERC20 token_,\\n        address from_,\\n        address to_\\n    ) external;\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n}\\n\",\"keccak256\":\"0xc47213c524b56177843ef6c1b5ba0e4f5dc211eadf77a0b66ed666c0b39aa9c2\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function toggleIsActive() external;\\n\\n    function seize(\\n        address from_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0x27e7644e788023b54410e27735bf7ffab768df1469d5aff0e0a65e1108830978\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(\\n        address _assetIn,\\n        address _assetOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x711e4ad224403589238cd425781689ac98afc42314a2e6a5a2ac4c6ed5bfa273\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/RewardsDistributorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IRewardsDistributor.sol\\\";\\n\\nabstract contract RewardsDistributorStorageV1 is IRewardsDistributor {\\n    struct TokenState {\\n        uint224 index; // The last updated index\\n        uint32 timestamp; // The timestamp of the latest index update\\n    }\\n\\n    /**\\n     * @notice The token to reward\\n     */\\n    IERC20 public rewardToken;\\n\\n    /**\\n     * @notice Track tokens for reward\\n     */\\n    IERC20[] public tokens;\\n\\n    /**\\n     * @notice The amount of token distributed for each token per second\\n     */\\n    mapping(IERC20 => uint256) public tokenSpeeds;\\n\\n    /**\\n     * @notice The reward state for each token\\n     */\\n    mapping(IERC20 => TokenState) public tokenStates;\\n\\n    /**\\n     * @notice The supply index for each token for each account as of the last time they accrued token\\n     */\\n    mapping(IERC20 => mapping(address => uint256)) public accountIndexOf;\\n\\n    /**\\n     * @notice The token accrued but not yet transferred to each user\\n     */\\n    mapping(address => uint256) public tokensAccruedOf;\\n}\\n\",\"keccak256\":\"0x6b096df5a3c9712d2d8b6c77a19ca435930cf65e43f5af100a07428a783ffd4c\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert(\\\"fallback-not-allowed\\\");\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert(\\\"receive-not-allowed\\\");\\n    }\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param token_ The token to transfer\\n     * @param to_ The recipient of the transfer\\n     * @param amount_ The amount to send\\n     */\\n    function sweep(\\n        IERC20 token_,\\n        address to_,\\n        uint256 amount_\\n    ) external {\\n        _requireCanSweep();\\n\\n        if (address(token_) == address(0)) {\\n            Address.sendValue(payable(to_), amount_);\\n        } else {\\n            token_.safeTransfer(to_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     */\\n    function _requireCanSweep() internal view virtual;\\n}\\n\",\"keccak256\":\"0xfbe591f37ce392a1ce68b05923b997209e9b5612a3d84aa9a503e8eb6375b7a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101185760003560e01c80635d0cde97116100a0578063aa62997511610064578063aa629975146103f8578063b17b23a014610425578063b9afda2d14610445578063ef5cfb8c14610465578063f7c618c11461048557610160565b80635d0cde971461030d57806362c067671461032257806389cb096a14610342578063a0cfa0dd146103ab578063a428d9c8146103d857610160565b806316f0115b116100e757806316f0115b1461026d5780631b30f0c01461028d5780632026ffa3146102ad578063485cc955146102cd5780634f64b2be146102ed57610160565b8063013bc51c1461019f57806301bc3acb146101ea5780630c340a241461020c578063160c3a031461023957610160565b366101605760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b6044820152606401610157565b3480156101ab57600080fd5b506101d76101ba3660046119c4565b603860209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156101f657600080fd5b5061020a610205366004611a49565b6104a5565b005b34801561021857600080fd5b50610221610588565b6040516001600160a01b0390911681526020016101e1565b34801561024557600080fd5b50610255670de0b6b3a764000081565b6040516001600160e01b0390911681526020016101e1565b34801561027957600080fd5b50600254610221906001600160a01b031681565b34801561029957600080fd5b5061020a6102a83660046119c4565b61060a565b3480156102b957600080fd5b5061020a6102c8366004611b94565b610648565b3480156102d957600080fd5b5061020a6102e83660046119c4565b6106ad565b3480156102f957600080fd5b50610221610308366004611be4565b610793565b34801561031957600080fd5b50610255601481565b34801561032e57600080fd5b5061020a61033d366004611bfd565b6107bd565b34801561034e57600080fd5b5061038761035d366004611c3e565b6037602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604080516001600160e01b03909316835263ffffffff9091166020830152016101e1565b3480156103b757600080fd5b506101d76103c6366004611c3e565b60366020526000908152604090205481565b3480156103e457600080fd5b5061020a6103f3366004611c5b565b6107f1565b34801561040457600080fd5b506101d7610413366004611c3e565b60396020526000908152604090205481565b34801561043157600080fd5b5061020a610440366004611d13565b610976565b34801561045157600080fd5b5061020a610460366004611d5e565b6109ba565b34801561047157600080fd5b5061020a610480366004611c3e565b6109fc565b34801561049157600080fd5b50603454610221906001600160a01b031681565b6104ad610588565b6001600160a01b0316336001600160a01b0316146104dd5760405162461bcd60e51b815260040161015790611d8a565b8281811461051d5760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a590b5a5b9c1d5d609a1b6044820152606401610157565b60005b818110156105805761057086868381811061053d5761053d611db0565b90506020020160208101906105529190611c3e565b85858481811061056457610564611db0565b90506020020135610a63565b61057981611ddc565b9050610520565b505050505050565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b1580156105cd57600080fd5b505afa1580156105e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106059190611df7565b905090565b6001600160a01b0382166000908152603760205260409020546001600160e01b0316156106445761063a82610eda565b61064482826110b5565b5050565b60408051600180825281830190925260009160208083019080368337019050509050828160008151811061067e5761067e611db0565b60200260200101906001600160a01b031690816001600160a01b0316815250506106a881836107f1565b505050565b600054610100900460ff16806106c6575060005460ff16155b6106e25760405162461bcd60e51b815260040161015790611e14565b600054610100900460ff16158015610704576000805461ffff19166101011790555b6001600160a01b0382166107515760405162461bcd60e51b81526020600482015260146024820152731c995dd85c990b5d1bdad95b8b5a5ccb5b9d5b1b60621b6044820152606401610157565b61075961122e565b6107628361129d565b603480546001600160a01b0319166001600160a01b03841617905580156106a8576000805461ff0019169055505050565b603581815481106107a357600080fd5b6000918252602090912001546001600160a01b0316905081565b6107c5611371565b6001600160a01b0383166107dd576106a882826113ab565b6106a86001600160a01b03841683836114c4565b600260015414156108445760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610157565b60026001558151815160005b818110156108ff57600084828151811061086c5761086c611db0565b6020908102919091018101516001600160a01b038116600090815260379092526040909120549091506001600160e01b0316156108ee576108ac81610eda565b60005b848110156108ec576108da828883815181106108cd576108cd611db0565b60200260200101516110b5565b806108e481611ddc565b9150506108af565b505b506108f881611ddc565b9050610850565b5060005b8281101561096b57600085828151811061091f5761091f611db0565b602002602001015190506109588160396000846001600160a01b03166001600160a01b0316815260200190815260200160002054611516565b508061096381611ddc565b915050610903565b505060018055505050565b6001600160a01b0383166000908152603760205260409020546001600160e01b0316156106a8576109a683610eda565b6109b083836110b5565b6106a883826110b5565b6109c2610588565b6001600160a01b0316336001600160a01b0316146109f25760405162461bcd60e51b815260040161015790611d8a565b6106448282610a63565b610a60816035805480602002602001604051908101604052809291908181526020018280548015610a5657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a38575b5050505050610648565b50565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610ab457600080fd5b505afa158015610ac8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610af09190810190611e62565b805190915060005b81811015610b4c57306001600160a01b0316838281518110610b1c57610b1c611db0565b60200260200101516001600160a01b03161415610b3c5760019350610b4c565b610b4581611ddc565b9050610af8565b5082610b925760405162461bcd60e51b8152602060048201526015602482015274191a5cdd1c9a589d5d1bdc8b5b9bdd0b5859191959605a1b6044820152606401610157565b60025460405163020484bb60e11b81526001600160a01b03808816600483015287921690819063040909769060240160206040518083038186803b158015610bd957600080fd5b505afa158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c119190611ef1565b80610c905750604051633af5be4760e01b81526001600160a01b038381166004830152821690633af5be479060240160206040518083038186803b158015610c5857600080fd5b505afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190611ef1565b610ccc5760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b216ba37b5b2b760991b6044820152606401610157565b6001600160a01b0387166000908152603660205260409020548015610cf957610cf488610eda565b610e73565b8615610e73576001600160a01b0388166000908152603760205260409020546001600160e01b0316610e2f57603554601411610d775760405162461bcd60e51b815260206004820152601960248201527f726561636865642d6d61782d7265776172642d746f6b656e73000000000000006044820152606401610157565b6040518060400160405280670de0b6b3a76400006001600160e01b03168152602001610da24261161c565b63ffffffff9081169091526001600160a01b038a166000818152603760209081526040822085519590910151909316600160e01b026001600160e01b03909416939093179091556035805460018101825592527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d90910180546001600160a01b0319169091179055610e73565b610e384261161c565b6001600160a01b0389166000908152603760205260409020805463ffffffff92909216600160e01b026001600160e01b039092169190911790555b868114610ed0576001600160a01b0388166000818152603660209081526040918290208a905581518481529081018a90527f07295410ddc875d5ff9b778ece2c279c9b91abeefd296803662b28cf6ad33c08910160405180910390a25b5050505050505050565b6001600160a01b03811660009081526037602090815260408083206036909252822054815491929091610f1a90600160e01b900463ffffffff1642611f13565b9050600081118015610f2c5750600082115b15611068576000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6c57600080fd5b505afa158015610f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa49190611f2a565b90506000610fb28484611f43565b90506000808311610fc4576000610fce565b610fce8284611685565b8654909150600090610fea9083906001600160e01b0316611f62565b90506040518060400160405280611000836116c2565b6001600160e01b031681526020016110174261161c565b63ffffffff9081169091526001600160a01b038a16600090815260376020908152604090912083519390910151909116600160e01b026001600160e01b03909216919091179055506110af92505050565b600081118015611081575082546001600160e01b031615155b156110af5761108f4261161c565b835463ffffffff91909116600160e01b026001600160e01b039091161783555b50505050565b6001600160a01b0382811660009081526037602090815260408083205460388352818420948616845293909152902080546001600160e01b039092169081905590801580156111045750600082115b156111145750670de0b6b3a76400005b60006111208284611f13565b6040516370a0823160e01b81526001600160a01b0386811660048301529192506000916111ab9184918916906370a082319060240160206040518083038186803b15801561116d57600080fd5b505afa158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a59190611f2a565b9061172b565b6001600160a01b0386166000908152603960205260408120805492935083929091906111d8908490611f62565b909155505060408051828152602081018690526001600160a01b0380881692908916917f49abdf3748a8d465b0d3d5d126dab076f5109ea80b761c4c1c45b2710165087b910160405180910390a3505050505050565b600054610100900460ff1680611247575060005460ff16155b6112635760405162461bcd60e51b815260040161015790611e14565b600054610100900460ff16158015611285576000805461ffff19166101011790555b600180558015610a60576000805461ff001916905550565b600054610100900460ff16806112b6575060005460ff16155b6112d25760405162461bcd60e51b815260040161015790611e14565b600054610100900460ff161580156112f4576000805461ffff19166101011790555b6001600160a01b0382166113415760405162461bcd60e51b8152602060048201526014602482015273706f6f6c2d616464726573732d69732d7a65726f60601b6044820152606401610157565b600280546001600160a01b0319166001600160a01b0384161790558015610644576000805461ff00191690555050565b611379610588565b6001600160a01b0316336001600160a01b0316146113a95760405162461bcd60e51b815260040161015790611d8a565b565b804710156113fb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610157565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611448576040519150601f19603f3d011682016040523d82523d6000602084013e61144d565b606091505b50509050806106a85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610157565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526106a8908490611763565b6034546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a082319060240160206040518083038186803b15801561155e57600080fd5b505afa158015611572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115969190611f2a565b90506000831180156115a85750808311155b156110af576001600160a01b038085166000908152603960205260408120556115d490831685856114c4565b604080516001600160a01b0386168152602081018590527f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241910160405180910390a150505050565b600063ffffffff8211156116815760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610157565b5090565b600081611693600282611f7a565b6116a5670de0b6b3a764000086611f43565b6116af9190611f62565b6116b99190611f7a565b90505b92915050565b60006001600160e01b038211156116815760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610157565b6000821580611738575081155b15611745575060006116bc565b670de0b6b3a7640000611759600282611f7a565b6116a58486611f43565b60006117b8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118359092919063ffffffff16565b8051909150156106a857808060200190518101906117d69190611ef1565b6106a85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610157565b6060611844848460008561184e565b90505b9392505050565b6060824710156118af5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610157565b843b6118fd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610157565b600080866001600160a01b031685876040516119199190611fc8565b60006040518083038185875af1925050503d8060008114611956576040519150601f19603f3d011682016040523d82523d6000602084013e61195b565b606091505b509150915061196b828286611976565b979650505050505050565b60608315611985575081611847565b8251156119955782518084602001fd5b8160405162461bcd60e51b81526004016101579190611fe4565b6001600160a01b0381168114610a6057600080fd5b600080604083850312156119d757600080fd5b82356119e2816119af565b915060208301356119f2816119af565b809150509250929050565b60008083601f840112611a0f57600080fd5b50813567ffffffffffffffff811115611a2757600080fd5b6020830191508360208260051b8501011115611a4257600080fd5b9250929050565b60008060008060408587031215611a5f57600080fd5b843567ffffffffffffffff80821115611a7757600080fd5b611a83888389016119fd565b90965094506020870135915080821115611a9c57600080fd5b50611aa9878288016119fd565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611af457611af4611ab5565b604052919050565b600067ffffffffffffffff821115611b1657611b16611ab5565b5060051b60200190565b600082601f830112611b3157600080fd5b81356020611b46611b4183611afc565b611acb565b82815260059290921b84018101918181019086841115611b6557600080fd5b8286015b84811015611b89578035611b7c816119af565b8352918301918301611b69565b509695505050505050565b60008060408385031215611ba757600080fd5b8235611bb2816119af565b9150602083013567ffffffffffffffff811115611bce57600080fd5b611bda85828601611b20565b9150509250929050565b600060208284031215611bf657600080fd5b5035919050565b600080600060608486031215611c1257600080fd5b8335611c1d816119af565b92506020840135611c2d816119af565b929592945050506040919091013590565b600060208284031215611c5057600080fd5b8135611847816119af565b60008060408385031215611c6e57600080fd5b823567ffffffffffffffff80821115611c8657600080fd5b818501915085601f830112611c9a57600080fd5b81356020611caa611b4183611afc565b82815260059290921b84018101918181019089841115611cc957600080fd5b948201945b83861015611cf0578535611ce1816119af565b82529482019490820190611cce565b96505086013592505080821115611d0657600080fd5b50611bda85828601611b20565b600080600060608486031215611d2857600080fd5b8335611d33816119af565b92506020840135611d43816119af565b91506040840135611d53816119af565b809150509250925092565b60008060408385031215611d7157600080fd5b8235611d7c816119af565b946020939093013593505050565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611df057611df0611dc6565b5060010190565b600060208284031215611e0957600080fd5b8151611847816119af565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020808385031215611e7557600080fd5b825167ffffffffffffffff811115611e8c57600080fd5b8301601f81018513611e9d57600080fd5b8051611eab611b4182611afc565b81815260059190911b82018301908381019087831115611eca57600080fd5b928401925b8284101561196b578351611ee2816119af565b82529284019290840190611ecf565b600060208284031215611f0357600080fd5b8151801515811461184757600080fd5b600082821015611f2557611f25611dc6565b500390565b600060208284031215611f3c57600080fd5b5051919050565b6000816000190483118215151615611f5d57611f5d611dc6565b500290565b60008219821115611f7557611f75611dc6565b500190565b600082611f9757634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015611fb7578181015183820152602001611f9f565b838111156110af5750506000910152565b60008251611fda818460208701611f9c565b9190910192915050565b6020815260008251806020840152612003816040850160208701611f9c565b601f01601f1916919091016040019291505056fea26469706673582212204f7d7664623205c6fa5d799b5f3c3a72d0989bb244c2bc4c1d8453c667358dd664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "sweep(address,address,uint256)": {
        "params": {
          "amount_": "The amount to send",
          "to_": "The recipient of the transfer",
          "token_": "The token to transfer"
        }
      },
      "updateBeforeMintOrBurn(address,address)": {
        "details": "Called by DepositToken and DebtToken contracts"
      },
      "updateBeforeTransfer(address,address,address)": {
        "details": "Called by DepositToken and DebtToken contracts"
      }
    },
    "title": "RewardsDistributor contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RewardClaimed(address,uint256)": {
        "notice": "Emitted when reward is claimed"
      },
      "TokenSpeedUpdated(address,uint256,uint256)": {
        "notice": "Emitted when updating token speed"
      },
      "TokensAccruedUpdated(address,address,uint256,uint256)": {
        "notice": "Emitted when updating accrued token"
      }
    },
    "kind": "user",
    "methods": {
      "INITIAL_INDEX()": {
        "notice": "The initial index"
      },
      "MAX_REWARD_TOKENS()": {
        "notice": "Max reward tokens to avoid DoS scenario"
      },
      "accountIndexOf(address,address)": {
        "notice": "The supply index for each token for each account as of the last time they accrued token"
      },
      "claimRewards(address)": {
        "notice": "Claim tokens accrued by account in all tokens"
      },
      "claimRewards(address,address[])": {
        "notice": "Claim tokens accrued by account in the specified tokens"
      },
      "claimRewards(address[],address[])": {
        "notice": "Claim tokens accrued by the accounts in the specified tokens"
      },
      "pool()": {
        "notice": "Pool contract"
      },
      "rewardToken()": {
        "notice": "The token to reward"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      },
      "tokenSpeeds(address)": {
        "notice": "The amount of token distributed for each token per second"
      },
      "tokenStates(address)": {
        "notice": "The reward state for each token"
      },
      "tokens(uint256)": {
        "notice": "Track tokens for reward"
      },
      "tokensAccruedOf(address)": {
        "notice": "The token accrued but not yet transferred to each user"
      },
      "updateBeforeMintOrBurn(address,address)": {
        "notice": "Update indexes on pre-mint and pre-burn"
      },
      "updateBeforeTransfer(address,address,address)": {
        "notice": "Update indexes on pre-transfer"
      },
      "updateTokenSpeed(address,uint256)": {
        "notice": "Update speed for a single deposit token"
      },
      "updateTokenSpeeds(address[],uint256[])": {
        "notice": "Update token speeds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7177,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7180,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7231,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6148,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPool)11091"
      },
      {
        "astId": 6256,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13159,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "rewardToken",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IERC20)7886"
      },
      {
        "astId": 13164,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokens",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_contract(IERC20)7886)dyn_storage"
      },
      {
        "astId": 13170,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokenSpeeds",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_contract(IERC20)7886,t_uint256)"
      },
      {
        "astId": 13177,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokenStates",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_contract(IERC20)7886,t_struct(TokenState)13155_storage)"
      },
      {
        "astId": 13185,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "accountIndexOf",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_contract(IERC20)7886,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 13190,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokensAccruedOf",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)7886)dyn_storage": {
        "base": "t_contract(IERC20)7886",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)7886": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)11091": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)7886,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)7886",
        "label": "mapping(contract IERC20 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)7886,t_struct(TokenState)13155_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)7886",
        "label": "mapping(contract IERC20 => struct RewardsDistributorStorageV1.TokenState)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenState)13155_storage"
      },
      "t_mapping(t_contract(IERC20)7886,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)7886",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TokenState)13155_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributorStorageV1.TokenState",
        "members": [
          {
            "astId": 13152,
            "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 13154,
            "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
            "label": "timestamp",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}