{
  "address": "0xF68431Ee10b20A4F8d0C23592e7bbd22a3124A53",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArraysLengthDoNotMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DistributorDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTokenSpeedKeeper",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolAddressIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReachedMaxRewardTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardTokenIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotGovernor",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint224",
          "name": "newIndex",
          "type": "uint224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newTimestamp",
          "type": "uint32"
        }
      ],
      "name": "TokenIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSpeed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "TokenSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supplyIndex",
          "type": "uint256"
        }
      ],
      "name": "TokensAccruedUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INITIAL_INDEX",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_REWARD_TOKENS",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens_",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts_",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens_",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_claimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "rewardToken_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDepositToken",
          "name": "depositToken_",
          "type": "address"
        }
      ],
      "name": "syncTokenSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenSpeedKeeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenStates",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensAccruedOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "updateBeforeMintOrBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        }
      ],
      "name": "updateBeforeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newSpeed_",
          "type": "uint256"
        }
      ],
      "name": "updateTokenSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "keeper_",
          "type": "address"
        }
      ],
      "name": "updateTokenSpeedKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "speeds_",
          "type": "uint256[]"
        }
      ],
      "name": "updateTokenSpeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdab925a27649dbadfe58ee7f418a2cc2850de160800db460790d010be309f0ed",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0xF68431Ee10b20A4F8d0C23592e7bbd22a3124A53",
    "transactionIndex": 95,
    "gasUsed": "2062835",
    "logsBloom": "0x
    "blockHash": "0x5e5d4e0a96827e29982ef8d91b242779d73dfbd8ddb6639dca46b6a8ba008889",
    "transactionHash": "0xdab925a27649dbadfe58ee7f418a2cc2850de160800db460790d010be309f0ed",
    "logs": [],
    "blockNumber": 18314493,
    "cumulativeGasUsed": "9038799",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "545cb6254fd08cfae8ffa56eab2faa67",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArraysLengthDoNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributorDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenSpeedKeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReachedMaxRewardTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardTokenIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint224\",\"name\":\"newIndex\",\"type\":\"uint224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newTimestamp\",\"type\":\"uint32\"}],\"name\":\"TokenIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSpeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"TokenSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplyIndex\",\"type\":\"uint256\"}],\"name\":\"TokensAccruedUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INITIAL_INDEX\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARD_TOKENS\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens_\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts_\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens_\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"syncTokenSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSpeedKeeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStates\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensAccruedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"updateBeforeMintOrBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"updateBeforeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newSpeed_\",\"type\":\"uint256\"}],\"name\":\"updateTokenSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper_\",\"type\":\"address\"}],\"name\":\"updateTokenSpeedKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"speeds_\",\"type\":\"uint256[]\"}],\"name\":\"updateTokenSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimable(address,address)\":{\"details\":\"Removing this function will change interface and will result updating other contracts using interface.\"},\"governor()\":{\"returns\":{\"_governor\":\"The governor\"}},\"updateBeforeMintOrBurn(address,address)\":{\"details\":\"Called by DepositToken and DebtToken contracts This function also may be called by anyone to update stored indexes\"},\"updateBeforeTransfer(address,address,address)\":{\"details\":\"Called by DepositToken and DebtToken contracts\"}},\"title\":\"RewardsDistributor contract\",\"version\":1},\"userdoc\":{\"events\":{\"RewardClaimed(address,uint256)\":{\"notice\":\"Emitted when reward is claimed\"},\"TokenIndexUpdated(uint224,uint32)\":{\"notice\":\"Emitted when updating token index\"},\"TokenSpeedUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when updating token speed\"},\"TokensAccruedUpdated(address,address,uint256,uint256)\":{\"notice\":\"Emitted when updating accrued token\"}},\"kind\":\"user\",\"methods\":{\"INITIAL_INDEX()\":{\"notice\":\"The initial index\"},\"MAX_REWARD_TOKENS()\":{\"notice\":\"Max reward tokens to avoid DoS scenario\"},\"accountIndexOf(address,address)\":{\"notice\":\"The supply index for each token for each account as of the last time they accrued token\"},\"claimRewards(address)\":{\"notice\":\"Claim tokens accrued by account in all tokens\"},\"claimRewards(address,address[])\":{\"notice\":\"Claim tokens accrued by account in the specified tokens\"},\"claimRewards(address[],address[])\":{\"notice\":\"Claim tokens accrued by the accounts in the specified tokens\"},\"claimable(address)\":{\"notice\":\"Returns claimable amount consider all tokens\"},\"claimable(address,address)\":{\"notice\":\"Returns updated claimable amount for given token\"},\"governor()\":{\"notice\":\"Get the governor\"},\"pool()\":{\"notice\":\"Pool contract\"},\"rewardToken()\":{\"notice\":\"The token to reward\"},\"syncTokenSpeed(address)\":{\"notice\":\"This is temporary fix to keep tokenSpeed and rewardRate from Vesper in sync.\"},\"tokenSpeeds(address)\":{\"notice\":\"The amount of token distributed for each token per second\"},\"tokenStates(address)\":{\"notice\":\"The reward state for each token\"},\"tokens(uint256)\":{\"notice\":\"Track tokens for reward\"},\"tokensAccruedOf(address)\":{\"notice\":\"The token accrued but not yet transferred to each user\"},\"updateBeforeMintOrBurn(address,address)\":{\"notice\":\"Update indexes on pre-mint and pre-burn\"},\"updateBeforeTransfer(address,address,address)\":{\"notice\":\"Update indexes on pre-transfer\"},\"updateTokenSpeed(address,uint256)\":{\"notice\":\"Update speed for a single deposit token\"},\"updateTokenSpeedKeeper(address)\":{\"notice\":\"This function is part of temporary fix to keep tokenSpeed and rewardRate in sync.\"},\"updateTokenSpeeds(address[],uint256[])\":{\"notice\":\"Update token speeds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardsDistributor.sol\":\"RewardsDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/utils/math/SafeCast.sol\\\";\\nimport \\\"./dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IDebtToken.sol\\\";\\nimport \\\"./interfaces/IDepositToken.sol\\\";\\nimport \\\"./access/Manageable.sol\\\";\\nimport \\\"./storage/RewardsDistributorStorage.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./interfaces/external/IVPool.sol\\\";\\nimport \\\"./interfaces/external/IPoolRewards.sol\\\";\\n\\n/// @notice Updated to IPoolRewards will trigger treasury upgrade and we want to avoid it.\\n/// Hence defining new interface here.\\ninterface IPoolRewardsExt is IPoolRewards {\\n    function rewardRates(address rewardToken_) external returns (uint256);\\n}\\n\\nerror AddressIsNull();\\nerror NotTokenSpeedKeeper();\\n\\nerror DistributorDoesNotExist();\\nerror InvalidToken();\\nerror RewardTokenIsNull();\\nerror ReachedMaxRewardTokens();\\nerror ArraysLengthDoNotMatch();\\n\\n/**\\n * @title RewardsDistributor contract\\n */\\ncontract RewardsDistributor is ReentrancyGuard, Manageable, RewardsDistributorStorageV2 {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    /// @notice The initial index\\n    uint224 public constant INITIAL_INDEX = 1e18;\\n\\n    /// @notice Max reward tokens to avoid DoS scenario\\n    uint224 public constant MAX_REWARD_TOKENS = 20;\\n\\n    /// @notice Emitted when reward is claimed\\n    event RewardClaimed(address indexed account, uint256 amount);\\n\\n    /// @notice Emitted when updating accrued token\\n    event TokensAccruedUpdated(IERC20 indexed token, address indexed account, uint256 tokensDelta, uint256 supplyIndex);\\n\\n    /// @notice Emitted when updating token speed\\n    event TokenSpeedUpdated(IERC20 indexed token, uint256 oldSpeed, uint256 newSpeed);\\n\\n    /// @notice Emitted when updating token index\\n    event TokenIndexUpdated(uint224 newIndex, uint32 newTimestamp);\\n\\n    /**\\n     * @dev Throws if this contract isn't registered on pool\\n     */\\n    modifier onlyIfDistributorExists() {\\n        bool _distributorAdded = false;\\n        address[] memory _rewardsDistributors = pool.getRewardsDistributors();\\n        uint256 _length = _rewardsDistributors.length;\\n        for (uint256 i; i < _length; ++i) {\\n            if (_rewardsDistributors[i] == address(this)) {\\n                _distributorAdded = true;\\n                break;\\n            }\\n        }\\n        if (!_distributorAdded) revert DistributorDoesNotExist();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if token doesn't exist\\n     * @dev Should be a DepositToken (suppliers) or DebtToken (borrowers)\\n     */\\n    modifier onlyIfTokenExists(address token_) {\\n        IPool _pool = pool;\\n        if (!_pool.doesDebtTokenExist(IDebtToken(token_)) && !_pool.doesDepositTokenExist(IDepositToken(token_))) {\\n            revert InvalidToken();\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(IPool pool_, IERC20 rewardToken_) external initializer {\\n        if (address(rewardToken_) == address(0)) revert RewardTokenIsNull();\\n\\n        __ReentrancyGuard_init();\\n        __Manageable_init(pool_);\\n\\n        rewardToken = rewardToken_;\\n    }\\n\\n    /**\\n     * @notice Returns claimable amount consider all tokens\\n     */\\n    function claimable(address account_) external view override returns (uint256 _claimable) {\\n        _claimable = tokensAccruedOf[account_];\\n        for (uint256 i; i < tokens.length; ++i) {\\n            _claimable += _claimableRewards(account_, tokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns updated claimable amount for given token\\n     * @dev Removing this function will change interface and will result\\n     * updating other contracts using interface.\\n     */\\n    function claimable(address, IERC20) public view override returns (uint256) {\\n        revert(\\\"Unsupported\\\");\\n    }\\n\\n    /**\\n     * @notice Claim tokens accrued by account in all tokens\\n     */\\n    function claimRewards(address account_) external override {\\n        claimRewards(account_, tokens);\\n    }\\n\\n    /**\\n     * @notice Claim tokens accrued by account in the specified tokens\\n     */\\n    function claimRewards(address account_, IERC20[] memory tokens_) public override {\\n        address[] memory _accounts = new address[](1);\\n        _accounts[0] = account_;\\n        claimRewards(_accounts, tokens_);\\n    }\\n\\n    /**\\n     * @notice Claim tokens accrued by the accounts in the specified tokens\\n     */\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) public override nonReentrant {\\n        uint256 _accountsLength = accounts_.length;\\n        uint256 _tokensLength = tokens_.length;\\n        for (uint256 i; i < _tokensLength; ++i) {\\n            IERC20 _token = tokens_[i];\\n\\n            if (tokenStates[_token].index > 0) {\\n                _updateTokenIndex(_token);\\n                for (uint256 j; j < _accountsLength; j++) {\\n                    _updateTokensAccruedOf(_token, accounts_[j]);\\n                }\\n            }\\n        }\\n\\n        for (uint256 j; j < _accountsLength; j++) {\\n            address _account = accounts_[j];\\n            _transferRewardIfEnoughTokens(_account, tokensAccruedOf[_account]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update indexes on pre-mint and pre-burn\\n     * @dev Called by DepositToken and DebtToken contracts\\n     * This function also may be called by anyone to update stored indexes\\n     */\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external override {\\n        if (tokenStates[token_].index > 0) {\\n            _updateTokenIndex(token_);\\n            _updateTokensAccruedOf(token_, account_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update indexes on pre-transfer\\n     * @dev Called by DepositToken and DebtToken contracts\\n     */\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external override {\\n        if (tokenStates[token_].index > 0) {\\n            _updateTokenIndex(token_);\\n            _updateTokensAccruedOf(token_, from_);\\n            _updateTokensAccruedOf(token_, to_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate updated token index values\\n     */\\n    function _calculateTokenIndex(\\n        TokenState memory _supplyState,\\n        IERC20 token_\\n    ) private view returns (uint224 _newIndex, uint32 _newTimestamp) {\\n        uint256 _speed = tokenSpeeds[token_];\\n        uint256 _deltaTimestamps = block.timestamp - uint256(_supplyState.timestamp);\\n        if (_deltaTimestamps > 0 && _speed > 0) {\\n            uint256 _totalSupply = token_.totalSupply();\\n            uint256 _tokensAccrued = _deltaTimestamps * _speed;\\n            uint256 _ratio = _totalSupply > 0 ? _tokensAccrued.wadDiv(_totalSupply) : 0;\\n            _newIndex = (_supplyState.index + _ratio).toUint224();\\n            _newTimestamp = block.timestamp.toUint32();\\n        } else if (_deltaTimestamps > 0 && _supplyState.index > 0) {\\n            _newTimestamp = block.timestamp.toUint32();\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate updated account index and claimable values\\n     */\\n    function _calculateTokenDelta(\\n        TokenState memory _tokenState,\\n        IERC20 token_,\\n        address account_\\n    ) private view returns (uint256 _tokenIndex, uint256 _tokensDelta) {\\n        _tokenIndex = _tokenState.index;\\n        uint256 _accountIndex = accountIndexOf[token_][account_];\\n\\n        if (_accountIndex == 0 && _tokenIndex > INITIAL_INDEX) {\\n            _accountIndex = INITIAL_INDEX;\\n        }\\n\\n        uint256 _deltaIndex = _tokenIndex - _accountIndex;\\n        _tokensDelta = token_.balanceOf(account_).wadMul(_deltaIndex);\\n    }\\n\\n    function _claimableRewards(address account_, IERC20 token_) internal view returns (uint256 _claimableDelta) {\\n        TokenState memory _tokenState = tokenStates[token_];\\n        (uint224 _newIndex, uint32 _newTimestamp) = _calculateTokenIndex(_tokenState, token_);\\n        if (_newIndex > 0 && _newTimestamp > 0) {\\n            _tokenState = TokenState({index: _newIndex, timestamp: _newTimestamp});\\n        } else if (_newTimestamp > 0) {\\n            _tokenState.timestamp = _newTimestamp;\\n        }\\n        (, _claimableDelta) = _calculateTokenDelta(_tokenState, token_, account_);\\n    }\\n\\n    /**\\n     * @notice Transfer tokens to the user\\n     * @dev If there is not enough tokens, we do not perform the transfer\\n     */\\n    function _transferRewardIfEnoughTokens(address account_, uint256 amount_) private {\\n        IERC20 _rewardToken = rewardToken;\\n        uint256 _balance = _rewardToken.balanceOf(address(this));\\n        if (amount_ > 0 && amount_ <= _balance) {\\n            tokensAccruedOf[account_] = 0;\\n            _rewardToken.safeTransfer(account_, amount_);\\n            emit RewardClaimed(account_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate tokens accrued by an account\\n     */\\n    function _updateTokensAccruedOf(IERC20 token_, address account_) private {\\n        (uint256 _tokenIndex, uint256 _tokensDelta) = _calculateTokenDelta(tokenStates[token_], token_, account_);\\n        accountIndexOf[token_][account_] = _tokenIndex;\\n        tokensAccruedOf[account_] = tokensAccruedOf[account_] + _tokensDelta;\\n        emit TokensAccruedUpdated(token_, account_, _tokensDelta, _tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Accrue reward token by updating the index\\n     */\\n    function _updateTokenIndex(IERC20 token_) private {\\n        TokenState storage _supplyState = tokenStates[token_];\\n        (uint224 _newIndex, uint32 _newTimestamp) = _calculateTokenIndex(_supplyState, token_);\\n        if (_newIndex > 0 && _newTimestamp > 0) {\\n            _supplyState.index = _newIndex;\\n            _supplyState.timestamp = _newTimestamp;\\n            emit TokenIndexUpdated(_newIndex, _newTimestamp);\\n        } else if (_newTimestamp > 0) {\\n            _supplyState.timestamp = _newTimestamp;\\n            emit TokenIndexUpdated(_supplyState.index, _newTimestamp);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update the speed for token\\n     */\\n    function _updateTokenSpeed(\\n        IERC20 token_,\\n        uint256 newSpeed_\\n    ) private onlyIfDistributorExists onlyIfTokenExists(address(token_)) {\\n        uint256 _currentSpeed = tokenSpeeds[token_];\\n        if (_currentSpeed > 0) {\\n            _updateTokenIndex(token_);\\n        } else if (newSpeed_ > 0) {\\n            // Add token to the list\\n            if (tokenStates[token_].index == 0) {\\n                if (tokens.length == MAX_REWARD_TOKENS) revert ReachedMaxRewardTokens();\\n                tokenStates[token_] = TokenState({index: INITIAL_INDEX, timestamp: block.timestamp.toUint32()});\\n                tokens.push(token_);\\n            } else {\\n                // Update timestamp to ensure extra interest is not accrued during the prior period\\n                tokenStates[token_].timestamp = block.timestamp.toUint32();\\n            }\\n        }\\n\\n        if (_currentSpeed != newSpeed_) {\\n            tokenSpeeds[token_] = newSpeed_;\\n            emit TokenSpeedUpdated(token_, _currentSpeed, newSpeed_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update speed for a single deposit token\\n     */\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external override onlyGovernor {\\n        _updateTokenSpeed(token_, newSpeed_);\\n    }\\n\\n    /**\\n     * @notice Update token speeds\\n     */\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external override onlyGovernor {\\n        uint256 _tokensLength = tokens_.length;\\n        if (_tokensLength != speeds_.length) revert ArraysLengthDoNotMatch();\\n\\n        for (uint256 i; i < _tokensLength; ++i) {\\n            _updateTokenSpeed(tokens_[i], speeds_[i]);\\n        }\\n    }\\n\\n    //********************************  TokenSpeed and RewardRate sync fix ***********************************/\\n    /// @notice This is temporary fix to keep tokenSpeed and rewardRate from Vesper in sync.\\n    function syncTokenSpeed(IDepositToken depositToken_) external {\\n        if (msg.sender != tokenSpeedKeeper) revert NotTokenSpeedKeeper();\\n\\n        IVPool _vPool = IVPool(address(depositToken_.underlying()));\\n        IPoolRewardsExt _rewards = IPoolRewardsExt(_vPool.poolRewards());\\n        uint256 _speed = (_rewards.rewardRates(address(rewardToken)) * _vPool.balanceOf(address(pool.treasury()))) /\\n            _vPool.totalSupply();\\n        _updateTokenSpeed(IERC20(address(depositToken_)), _speed);\\n    }\\n\\n    /// @notice This function is part of temporary fix to keep tokenSpeed and rewardRate in sync.\\n    function updateTokenSpeedKeeper(address keeper_) external onlyGovernor {\\n        if (keeper_ == address(0)) revert AddressIsNull();\\n        tokenSpeedKeeper = keeper_;\\n    }\\n}\\n\",\"keccak256\":\"0x9c3c7d949f770f17d5dc8a9ba9095b068a78b348bbe15782396370480604d00c\",\"license\":\"MIT\"},\"contracts/access/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\nimport \\\"../interfaces/IManageable.sol\\\";\\n\\nerror SenderIsNotPool();\\nerror SenderIsNotGovernor();\\nerror IsPaused();\\nerror IsShutdown();\\nerror PoolAddressIsNull();\\n\\n/**\\n * @title Reusable contract that handles accesses\\n */\\nabstract contract Manageable is IManageable, Initializable {\\n    /**\\n     * @notice Pool contract\\n     */\\n    IPool public pool;\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't the pool\\n     */\\n    modifier onlyPool() {\\n        if (msg.sender != address(pool)) revert SenderIsNotPool();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't the governor\\n     */\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor()) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is paused\\n     */\\n    modifier whenNotPaused() {\\n        if (pool.paused()) revert IsPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is shutdown\\n     */\\n    modifier whenNotShutdown() {\\n        if (pool.everythingStopped()) revert IsShutdown();\\n        _;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Manageable_init(IPool pool_) internal onlyInitializing {\\n        if (address(pool_) == address(0)) revert PoolAddressIsNull();\\n        pool = pool_;\\n    }\\n\\n    /**\\n     * @notice Get the governor\\n     * @return _governor The governor\\n     */\\n    function governor() public view returns (address _governor) {\\n        _governor = IGovernable(address(pool)).governor();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x95964544ea9b3a0799e14959d5cd1d33dbf8fd9463260d3bc33358c3945812b9\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/IOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../../../../openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCoreUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"keccak256\":\"0x22651924296f8308db8195d7a86a6781023241c53905418f2d3925e3f693f530\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../IOFTCoreUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the composable OFT core standard\\n */\\ninterface IComposableOFTCoreUpgradeable is IOFTCoreUpgradeable {\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function retryOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n\\n    event CallOFTReceivedFailure(\\n        uint16 indexed _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _from,\\n        address indexed _to,\\n        uint _amount,\\n        bytes _payload,\\n        bytes _reason\\n    );\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event RetryOFTReceivedSuccess(bytes32 _messageHash);\\n\\n    event NonContractAddress(address _address);\\n}\\n\",\"keccak256\":\"0x769b9356ad6019bdabdcfc11762f28d15eb9a4e262efc96835725f6862c5d9e9\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverUpgradeable {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x287036c704c57e34a6fc3f7e67c8dfaaade6eb3667b570576bc491c0f1f89a5b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStargateRouter.sol\\\";\\n\\ninterface IStargateComposer {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function factory() external view returns (address);\\n\\n    function stargateBridge() external view returns (address);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function peers(uint16 _chainId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdfdd1690bf176ac05803534a60227be90cc435b4bdd8fce2348f1a9417a9f63a\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe4d6bf9fa422e5e43dc1b6880f951d06611a4ed12c2dd7dd8c0b6a5d9e06ad0d\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function clearCachedSwap(uint16 _srcChainId, bytes calldata _srcAddress, uint256 _nonce) external;\\n\\n    function factory() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function cachedSwapLookup(\\n        uint16 _chainId_,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (address token, uint256 amountLD, address to, bytes memory payload);\\n}\\n\",\"keccak256\":\"0x92126df8e682b2c5647c7b22e7387da69f9e72480af86948ce5ed17dc2c9e0a7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICrossChainDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateRouter.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface ICrossChainDispatcher is IStargateReceiver, IOFTReceiverUpgradeable {\\n    function crossChainDispatcherOf(uint16 chainId_) external view returns (address);\\n\\n    function triggerFlashRepaySwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function triggerLeverageSwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function isBridgingActive() external view returns (bool);\\n\\n    function flashRepayCallbackTxGasLimit() external view returns (uint64);\\n\\n    function flashRepaySwapTxGasLimit() external view returns (uint64);\\n\\n    function leverageCallbackTxGasLimit() external view returns (uint64);\\n\\n    function leverageSwapTxGasLimit() external view returns (uint64);\\n\\n    function lzBaseGasLimit() external view returns (uint256);\\n\\n    function stargateComposer() external view returns (IStargateComposer);\\n\\n    function stargateSlippage() external view returns (uint256);\\n\\n    function stargatePoolIdOf(address token_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcaf05e625588dcfaa5706acc78a35fa46d50baeb2d28f689036963695a4e39cb\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address to_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xd2f04aa1bee06d6991b10aaf7c03c3ee09d85f8e48ba92feac595ad855881380\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralFactor() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function flashWithdraw(address account_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\\n\\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\\n\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function withdrawFrom(address from_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n}\\n\",\"keccak256\":\"0xb27092f9450d9c48c1a215925007ca9c7282cfe6cf257b34ab3dbe6e745b6bd1\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3b132b42090c167b2c0aef6d78d833c669c43b9e55593a7a21a96ed5d3082700\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\",\"keccak256\":\"0xac88e0997a26942cb9cbda1a7dd9756e28ba2025813e5b07e55939fbf8538ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IFeeProvider.sol\\\";\\nimport \\\"./ISmartFarmingManager.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function feeProvider() external view returns (IFeeProvider);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\\n\\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(\\n        address account_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeized_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _maxAmountToRepay);\\n\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view returns (uint256 _amountIn, uint256 _fee);\\n\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _fee);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _fee);\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function isSwapActive() external view returns (bool);\\n\\n    function smartFarmingManager() external view returns (ISmartFarmingManager);\\n}\\n\",\"keccak256\":\"0x0f0a869451cca858ba52b56970db167360fe161f2450557a053c4da938558816\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"./IQuoter.sol\\\";\\nimport \\\"./ICrossChainDispatcher.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function feeCollector() external view returns (address);\\n\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function quoter() external view returns (IQuoter);\\n\\n    function crossChainDispatcher() external view returns (ICrossChainDispatcher);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool _exists);\\n}\\n\",\"keccak256\":\"0x9ffa9e5fd39a48ac2bda561af7fb4fc9df5f8ffb7a602ef1d4da8c068019e723\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\\\";\\n\\ninterface IProxyOFT is IComposableOFTCoreUpgradeable {\\n    function getProxyOFTOf(uint16 chainId_) external view returns (address _proxyOFT);\\n}\\n\",\"keccak256\":\"0x4041a90eb60de460c9e1631aaedfbf2bff2275b3f91964800b1c774546931cd5\",\"license\":\"MIT\"},\"contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface IQuoter {\\n    function quoteCrossChainFlashRepayNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteCrossChainLeverageNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteLeverageCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function quoteFlashRepayCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function getFlashRepaySwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n\\n    function getLeverageSwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n}\\n\",\"keccak256\":\"0x1e4d2dd779a09dc8ea6b6c244b167deddca3a48e71b73bf940da04113b40c752\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external;\\n\\n    function claimable(address account_) external view returns (uint256 _claimable);\\n\\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\\n\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\\n\\n    function tokens(uint256) external view returns (IERC20);\\n\\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\\n\\n    function accountIndexOf(IERC20, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f527eeae61b6a5bff7d3b48037234ef718ae7f71dc452e8cab3b60581f0d810\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartFarmingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IManageable.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\n/**\\n * @notice SmartFarmingManager interface\\n */\\ninterface ISmartFarmingManager {\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    ) external returns (uint256 _withdrawn, uint256 _repaid);\\n\\n    function crossChainFlashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        IERC20 bridgeToken_,\\n        uint256 bridgeTokenAmountMin_,\\n        uint256 swapAmountOutMin_,\\n        uint256 repayAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 swapAmountOutMin_,\\n        uint256 depositAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverageCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _deposited);\\n\\n    function crossChainFlashRepayCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _repaid);\\n\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    ) external returns (uint256 _deposited, uint256 _issued);\\n}\\n\",\"keccak256\":\"0x7544a9d308a49e24d6984c3cfcfe2c1cfb7d9ce4655408438e1c12f37175a3b0\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/IProxyOFT.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateProxyOFT(IProxyOFT newProxyOFT_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function proxyOFT() external view returns (IProxyOFT);\\n}\\n\",\"keccak256\":\"0xfaeb24d1067e85493a5c8818d6de06fc6dbc72c37e85f82811990d0120f8a0cf\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x2f080adc5880151dc4446ef43b54abab8e3711c5f2e526917ef39a05e3c16a00\",\"license\":\"MIT\"},\"contracts/interfaces/external/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPoolRewards {\\n    function claimReward(address) external;\\n\\n    function updateReward(address) external;\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x061455d9506568e621d621292fed95eac134c0092dc0785963a1d7b27c0bcabf\",\"license\":\"MIT\"},\"contracts/interfaces/external/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x75f04b225d0c310be7e0a09ee4c1aa6eeeb8d94e02fc0e4160a9597ce2d8d446\",\"license\":\"MIT\"},\"contracts/interfaces/external/IVPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVPool is IERC20 {\\n    function token() external view returns (address _token);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function withdraw(uint256 _shares) external;\\n\\n    function poolRewards() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3701f4d13f5bc9f71899a607350d2825126463d5cec48f1f22975a1558ea3cc3\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/RewardsDistributorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IRewardsDistributor.sol\\\";\\n\\nabstract contract RewardsDistributorStorageV1 is IRewardsDistributor {\\n    struct TokenState {\\n        uint224 index; // The last updated index\\n        uint32 timestamp; // The timestamp of the latest index update\\n    }\\n\\n    /**\\n     * @notice The token to reward\\n     */\\n    IERC20 public override rewardToken;\\n\\n    /**\\n     * @notice Track tokens for reward\\n     */\\n    IERC20[] public override tokens;\\n\\n    /**\\n     * @notice The amount of token distributed for each token per second\\n     */\\n    mapping(IERC20 => uint256) public override tokenSpeeds;\\n\\n    /**\\n     * @notice The reward state for each token\\n     */\\n    mapping(IERC20 => TokenState) public override tokenStates;\\n\\n    /**\\n     * @notice The supply index for each token for each account as of the last time they accrued token\\n     */\\n    mapping(IERC20 => mapping(address => uint256)) public override accountIndexOf;\\n\\n    /**\\n     * @notice The token accrued but not yet transferred to each user\\n     */\\n    mapping(address => uint256) public override tokensAccruedOf;\\n}\\n\\nabstract contract RewardsDistributorStorageV2 is RewardsDistributorStorageV1 {\\n    address public tokenSpeedKeeper;\\n}\\n\",\"keccak256\":\"0xc445e9d10fc37d98ea1ac1804d1bde40b546a37cbc24b8f6a633325ef31d24ae\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x3bf3c3de5a638ca101f25dfcaec5268e9c8a1c29a9a278d70be4459768fb41fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b62000152565b6200002e60ff62000031565b50565b60008054610100900460ff1615620000ca578160ff1660011480156200006a575062000068306200014360201b62000d8c1760201c565b155b620000c25760405162461bcd60e51b815260206004820152602e60248201526000805160206200253983398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001295760405162461bcd60e51b815260206004820152602e60248201526000805160206200253983398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000b9565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b6123d780620001626000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80634f64b2be116100c3578063b17b23a01161007c578063b17b23a014610343578063b9afda2d14610356578063d4570c1c14610369578063ef5cfb8c1461037c578063f7c618c11461038f578063ffa1ad74146103a257600080fd5b80634f64b2be1461028f5780635d0cde97146102a257806389cb096a146102aa578063a0cfa0dd146102f0578063a428d9c814610310578063aa6299751461032357600080fd5b80631b30f0c0116101155780631b30f0c01461021d5780632026ffa3146102305780633ddc9ce314610243578063402914f514610256578063485cc955146102695780634b38585a1461027c57600080fd5b8063013bc51c1461015d57806301bc3acb1461019b57806306b997ea146101b05780630c340a24146101db578063160c3a03146101e357806316f0115b1461020a575b600080fd5b61018861016b366004611d4b565b603860209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6101ae6101a9366004611dd0565b6103d3565b005b603a546101c3906001600160a01b031681565b6040516001600160a01b039091168152602001610192565b6101c3610498565b6101f2670de0b6b3a764000081565b6040516001600160e01b039091168152602001610192565b6002546101c3906001600160a01b031681565b6101ae61022b366004611d4b565b61051a565b6101ae61023e366004611f1b565b610558565b6101ae610251366004611f6b565b6105bd565b610188610264366004611f6b565b6108f6565b6101ae610277366004611d4b565b61096e565b6101ae61028a366004611f6b565b610a2f565b6101c361029d366004611f88565b610ab1565b6101f2601481565b6102e26102b8366004611f6b565b6037602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604051610192929190611fa1565b6101886102fe366004611f6b565b60366020526000908152604090205481565b6101ae61031e366004611fc0565b610adb565b610188610331366004611f6b565b60396020526000908152604090205481565b6101ae610351366004612078565b610c65565b6101ae6103643660046120c3565b610ca9565b610188610377366004611d4b565b610cec565b6101ae61038a366004611f6b565b610d25565b6034546101c3906001600160a01b031681565b6103c6604051806040016040528060058152602001640312e332e360dc1b81525081565b604051610192919061211b565b6103db610498565b6001600160a01b0316336001600160a01b03161461040c57604051634b98449160e11b815260040160405180910390fd5b8281811461042d57604051631dc1520760e31b815260040160405180910390fd5b60005b818110156104905761048086868381811061044d5761044d61214e565b90506020020160208101906104629190611f6b565b8585848181106104745761047461214e565b90506020020135610d9b565b6104898161217a565b9050610430565b505050505050565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b1580156104dd57600080fd5b505afa1580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105159190612195565b905090565b6001600160a01b0382166000908152603760205260409020546001600160e01b0316156105545761054a826111a3565b61055482826112e6565b5050565b60408051600180825281830190925260009160208083019080368337019050509050828160008151811061058e5761058e61214e565b60200260200101906001600160a01b031690816001600160a01b0316815250506105b88183610adb565b505050565b603a546001600160a01b031633146105e8576040516355bbb60960e11b815260040160405180910390fd5b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561062357600080fd5b505afa158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b9190612195565b90506000816001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b15801561069857600080fd5b505afa1580156106ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d09190612195565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561070d57600080fd5b505afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074591906121b2565b836001600160a01b03166370a08231600260009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b1580156107a257600080fd5b505afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da9190612195565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561081957600080fd5b505afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085191906121b2565b603454604051633d3b260360e01b81526001600160a01b03918216600482015290851690633d3b260390602401602060405180830381600087803b15801561089857600080fd5b505af11580156108ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d091906121b2565b6108da91906121cb565b6108e491906121ea565b90506108f08482610d9b565b50505050565b6001600160a01b038116600090815260396020526040812054905b6035548110156109685761094c83603583815481106109325761093261214e565b6000918252602090912001546001600160a01b03166113da565b610956908361220c565b91506109618161217a565b9050610911565b50919050565b600061097a60016114ac565b90508015610992576000805461ff0019166101001790555b6001600160a01b0382166109b957604051636d4b163760e11b815260040160405180910390fd5b6109c1611534565b6109ca83611565565b603480546001600160a01b0319166001600160a01b03841617905580156105b8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b610a37610498565b6001600160a01b0316336001600160a01b031614610a6857604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610a8f5760405163fb7566d760e01b815260040160405180910390fd5b603a80546001600160a01b0319166001600160a01b0392909216919091179055565b60358181548110610ac157600080fd5b6000918252602090912001546001600160a01b0316905081565b60026001541415610b335760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001558151815160005b81811015610bee576000848281518110610b5b57610b5b61214e565b6020908102919091018101516001600160a01b038116600090815260379092526040909120549091506001600160e01b031615610bdd57610b9b816111a3565b60005b84811015610bdb57610bc982888381518110610bbc57610bbc61214e565b60200260200101516112e6565b80610bd38161217a565b915050610b9e565b505b50610be78161217a565b9050610b3f565b5060005b82811015610c5a576000858281518110610c0e57610c0e61214e565b60200260200101519050610c478160396000846001600160a01b03166001600160a01b03168152602001908152602001600020546115d5565b5080610c528161217a565b915050610bf2565b505060018055505050565b6001600160a01b0383166000908152603760205260409020546001600160e01b0316156105b857610c95836111a3565b610c9f83836112e6565b6105b883826112e6565b610cb1610498565b6001600160a01b0316336001600160a01b031614610ce257604051634b98449160e11b815260040160405180910390fd5b6105548282610d9b565b60405162461bcd60e51b815260206004820152600b60248201526a155b9cdd5c1c1bdc9d195960aa1b6044820152600090606401610b2a565b610d89816035805480602002602001604051908101604052809291908181526020018280548015610d7f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d61575b5050505050610558565b50565b6001600160a01b03163b151590565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610dec57600080fd5b505afa158015610e00573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e289190810190612224565b805190915060005b81811015610e8457306001600160a01b0316838281518110610e5457610e5461214e565b60200260200101516001600160a01b03161415610e745760019350610e84565b610e7d8161217a565b9050610e30565b5082610ea357604051634757a01f60e01b815260040160405180910390fd5b6002546040516308a00b1f60e31b81526001600160a01b03808816600483015287921690819063450058f89060240160206040518083038186803b158015610eea57600080fd5b505afa158015610efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2291906122b3565b158015610fa55750604051633e25dee160e21b81526001600160a01b03838116600483015282169063f8977b849060240160206040518083038186803b158015610f6b57600080fd5b505afa158015610f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa391906122b3565b155b15610fc35760405163c1ab6dc160e01b815260040160405180910390fd5b6001600160a01b0387166000908152603660205260409020548015610ff057610feb886111a3565b61113c565b861561113c576001600160a01b0388166000908152603760205260409020546001600160e01b03166110f8576035546014141561104057604051639e8b4a2160e01b815260040160405180910390fd5b6040518060400160405280670de0b6b3a76400006001600160e01b0316815260200161106b426116dc565b63ffffffff9081169091526001600160a01b038a166000818152603760209081526040822085519590910151909316600160e01b026001600160e01b03909416939093179091556035805460018101825592527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d90910180546001600160a01b031916909117905561113c565b611101426116dc565b6001600160a01b0389166000908152603760205260409020805463ffffffff92909216600160e01b026001600160e01b039092169190911790555b868114611199576001600160a01b0388166000818152603660209081526040918290208a905581518481529081018a90527f07295410ddc875d5ff9b778ece2c279c9b91abeefd296803662b28cf6ad33c08910160405180910390a25b5050505050505050565b6001600160a01b0381166000908152603760209081526040808320815180830190925280546001600160e01b0381168352600160e01b900463ffffffff169282019290925290919081906111f79085611745565b915091506000826001600160e01b031611801561121a575060008163ffffffff16115b156112785763ffffffff8116600160e01b026001600160e01b0383161783556040517f883d8b44a1f0e651bb0d11a8e962de03c77a351328bbeb12b702e5632288ee6f9061126b9084908490611fa1565b60405180910390a16108f0565b63ffffffff8116156108f057825463ffffffff8216600160e01b026001600160e01b0391821681811786556040517f883d8b44a1f0e651bb0d11a8e962de03c77a351328bbeb12b702e5632288ee6f936112d89316909117908490611fa1565b60405180910390a150505050565b6001600160a01b03821660009081526037602090815260408083208151808301909252546001600160e01b0381168252600160e01b900463ffffffff16918101919091528190611337908585611898565b6001600160a01b0380871660009081526038602090815260408083209389168352928152828220859055603990522054919350915061137790829061220c565b6001600160a01b038481166000818152603960209081526040918290209490945580518581529384018690529092918716917f49abdf3748a8d465b0d3d5d126dab076f5109ea80b761c4c1c45b2710165087b910160405180910390a350505050565b6001600160a01b03811660009081526037602090815260408083208151808301909252546001600160e01b0381168252600160e01b900463ffffffff1691810191909152818061142a8386611745565b915091506000826001600160e01b031611801561144d575060008163ffffffff16115b1561147d576040518060400160405280836001600160e01b031681526020018263ffffffff168152509250611496565b63ffffffff8116156114965763ffffffff811660208401525b6114a1838688611898565b979650505050505050565b60008054610100900460ff16156114f3578160ff1660011480156114cf5750303b155b6114eb5760405162461bcd60e51b8152600401610b2a906122d5565b506000919050565b60005460ff80841691161061151a5760405162461bcd60e51b8152600401610b2a906122d5565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff1661155b5760405162461bcd60e51b8152600401610b2a90612323565b611563611994565b565b600054610100900460ff1661158c5760405162461bcd60e51b8152600401610b2a90612323565b6001600160a01b0381166115b35760405163724f500960e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6034546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a082319060240160206040518083038186803b15801561161d57600080fd5b505afa158015611631573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165591906121b2565b90506000831180156116675750808311155b156108f0576001600160a01b0380851660009081526039602052604081205561169390831685856119c1565b836001600160a01b03167f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241846040516116ce91815260200190565b60405180910390a250505050565b600063ffffffff8211156117415760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610b2a565b5090565b6001600160a01b03811660009081526036602090815260408220549084015182919082906117799063ffffffff164261236e565b905060008111801561178b5750600082115b15611865576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117cb57600080fd5b505afa1580156117df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180391906121b2565b9050600061181184846121cb565b9050600080831161182357600061182d565b61182d8284611a13565b9050611850818a600001516001600160e01b031661184b919061220c565b611a50565b965061185b426116dc565b955050505061188f565b60008111801561187e575085516001600160e01b031615155b1561188f5761188c426116dc565b92505b50509250929050565b82516001600160a01b0380841660009081526038602090815260408083209386168352929052908120546001600160e01b0390921691801580156118e35750670de0b6b3a764000083115b156118f35750670de0b6b3a76400005b60006118ff828561236e565b6040516370a0823160e01b81526001600160a01b038781166004830152919250611988918391908916906370a082319060240160206040518083038186803b15801561194a57600080fd5b505afa15801561195e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198291906121b2565b90611ab9565b92505050935093915050565b600054610100900460ff166119bb5760405162461bcd60e51b8152600401610b2a90612323565b60018055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526105b8908490611af1565b600081611a216002826121ea565b611a33670de0b6b3a7640000866121cb565b611a3d919061220c565b611a4791906121ea565b90505b92915050565b60006001600160e01b038211156117415760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610b2a565b6000821580611ac6575081155b15611ad357506000611a4a565b670de0b6b3a7640000611ae76002826121ea565b611a3384866121cb565b6000611b46826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bc39092919063ffffffff16565b8051909150156105b85780806020019051810190611b6491906122b3565b6105b85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b2a565b6060611bd28484600085611bdc565b90505b9392505050565b606082471015611c3d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b2a565b6001600160a01b0385163b611c945760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b2a565b600080866001600160a01b03168587604051611cb09190612385565b60006040518083038185875af1925050503d8060008114611ced576040519150601f19603f3d011682016040523d82523d6000602084013e611cf2565b606091505b50915091506114a182828660608315611d0c575081611bd5565b825115611d1c5782518084602001fd5b8160405162461bcd60e51b8152600401610b2a919061211b565b6001600160a01b0381168114610d8957600080fd5b60008060408385031215611d5e57600080fd5b8235611d6981611d36565b91506020830135611d7981611d36565b809150509250929050565b60008083601f840112611d9657600080fd5b50813567ffffffffffffffff811115611dae57600080fd5b6020830191508360208260051b8501011115611dc957600080fd5b9250929050565b60008060008060408587031215611de657600080fd5b843567ffffffffffffffff80821115611dfe57600080fd5b611e0a88838901611d84565b90965094506020870135915080821115611e2357600080fd5b50611e3087828801611d84565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e7b57611e7b611e3c565b604052919050565b600067ffffffffffffffff821115611e9d57611e9d611e3c565b5060051b60200190565b600082601f830112611eb857600080fd5b81356020611ecd611ec883611e83565b611e52565b82815260059290921b84018101918181019086841115611eec57600080fd5b8286015b84811015611f10578035611f0381611d36565b8352918301918301611ef0565b509695505050505050565b60008060408385031215611f2e57600080fd5b8235611f3981611d36565b9150602083013567ffffffffffffffff811115611f5557600080fd5b611f6185828601611ea7565b9150509250929050565b600060208284031215611f7d57600080fd5b8135611bd581611d36565b600060208284031215611f9a57600080fd5b5035919050565b6001600160e01b0392909216825263ffffffff16602082015260400190565b60008060408385031215611fd357600080fd5b823567ffffffffffffffff80821115611feb57600080fd5b818501915085601f830112611fff57600080fd5b8135602061200f611ec883611e83565b82815260059290921b8401810191818101908984111561202e57600080fd5b948201945b8386101561205557853561204681611d36565b82529482019490820190612033565b9650508601359250508082111561206b57600080fd5b50611f6185828601611ea7565b60008060006060848603121561208d57600080fd5b833561209881611d36565b925060208401356120a881611d36565b915060408401356120b881611d36565b809150509250925092565b600080604083850312156120d657600080fd5b82356120e181611d36565b946020939093013593505050565b60005b8381101561210a5781810151838201526020016120f2565b838111156108f05750506000910152565b602081526000825180602084015261213a8160408501602087016120ef565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561218e5761218e612164565b5060010190565b6000602082840312156121a757600080fd5b8151611bd581611d36565b6000602082840312156121c457600080fd5b5051919050565b60008160001904831182151516156121e5576121e5612164565b500290565b60008261220757634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561221f5761221f612164565b500190565b6000602080838503121561223757600080fd5b825167ffffffffffffffff81111561224e57600080fd5b8301601f8101851361225f57600080fd5b805161226d611ec882611e83565b81815260059190911b8201830190838101908783111561228c57600080fd5b928401925b828410156114a15783516122a481611d36565b82529284019290840190612291565b6000602082840312156122c557600080fd5b81518015158114611bd557600080fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008282101561238057612380612164565b500390565b600082516123978184602087016120ef565b919091019291505056fea26469706673582212206fc0161455f2049672db6de648bd7eda876d1a805daf91f61208891c6d635f1e64736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80634f64b2be116100c3578063b17b23a01161007c578063b17b23a014610343578063b9afda2d14610356578063d4570c1c14610369578063ef5cfb8c1461037c578063f7c618c11461038f578063ffa1ad74146103a257600080fd5b80634f64b2be1461028f5780635d0cde97146102a257806389cb096a146102aa578063a0cfa0dd146102f0578063a428d9c814610310578063aa6299751461032357600080fd5b80631b30f0c0116101155780631b30f0c01461021d5780632026ffa3146102305780633ddc9ce314610243578063402914f514610256578063485cc955146102695780634b38585a1461027c57600080fd5b8063013bc51c1461015d57806301bc3acb1461019b57806306b997ea146101b05780630c340a24146101db578063160c3a03146101e357806316f0115b1461020a575b600080fd5b61018861016b366004611d4b565b603860209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6101ae6101a9366004611dd0565b6103d3565b005b603a546101c3906001600160a01b031681565b6040516001600160a01b039091168152602001610192565b6101c3610498565b6101f2670de0b6b3a764000081565b6040516001600160e01b039091168152602001610192565b6002546101c3906001600160a01b031681565b6101ae61022b366004611d4b565b61051a565b6101ae61023e366004611f1b565b610558565b6101ae610251366004611f6b565b6105bd565b610188610264366004611f6b565b6108f6565b6101ae610277366004611d4b565b61096e565b6101ae61028a366004611f6b565b610a2f565b6101c361029d366004611f88565b610ab1565b6101f2601481565b6102e26102b8366004611f6b565b6037602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604051610192929190611fa1565b6101886102fe366004611f6b565b60366020526000908152604090205481565b6101ae61031e366004611fc0565b610adb565b610188610331366004611f6b565b60396020526000908152604090205481565b6101ae610351366004612078565b610c65565b6101ae6103643660046120c3565b610ca9565b610188610377366004611d4b565b610cec565b6101ae61038a366004611f6b565b610d25565b6034546101c3906001600160a01b031681565b6103c6604051806040016040528060058152602001640312e332e360dc1b81525081565b604051610192919061211b565b6103db610498565b6001600160a01b0316336001600160a01b03161461040c57604051634b98449160e11b815260040160405180910390fd5b8281811461042d57604051631dc1520760e31b815260040160405180910390fd5b60005b818110156104905761048086868381811061044d5761044d61214e565b90506020020160208101906104629190611f6b565b8585848181106104745761047461214e565b90506020020135610d9b565b6104898161217a565b9050610430565b505050505050565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b1580156104dd57600080fd5b505afa1580156104f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105159190612195565b905090565b6001600160a01b0382166000908152603760205260409020546001600160e01b0316156105545761054a826111a3565b61055482826112e6565b5050565b60408051600180825281830190925260009160208083019080368337019050509050828160008151811061058e5761058e61214e565b60200260200101906001600160a01b031690816001600160a01b0316815250506105b88183610adb565b505050565b603a546001600160a01b031633146105e8576040516355bbb60960e11b815260040160405180910390fd5b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561062357600080fd5b505afa158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b9190612195565b90506000816001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b15801561069857600080fd5b505afa1580156106ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d09190612195565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561070d57600080fd5b505afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074591906121b2565b836001600160a01b03166370a08231600260009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b1580156107a257600080fd5b505afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da9190612195565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561081957600080fd5b505afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085191906121b2565b603454604051633d3b260360e01b81526001600160a01b03918216600482015290851690633d3b260390602401602060405180830381600087803b15801561089857600080fd5b505af11580156108ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d091906121b2565b6108da91906121cb565b6108e491906121ea565b90506108f08482610d9b565b50505050565b6001600160a01b038116600090815260396020526040812054905b6035548110156109685761094c83603583815481106109325761093261214e565b6000918252602090912001546001600160a01b03166113da565b610956908361220c565b91506109618161217a565b9050610911565b50919050565b600061097a60016114ac565b90508015610992576000805461ff0019166101001790555b6001600160a01b0382166109b957604051636d4b163760e11b815260040160405180910390fd5b6109c1611534565b6109ca83611565565b603480546001600160a01b0319166001600160a01b03841617905580156105b8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b610a37610498565b6001600160a01b0316336001600160a01b031614610a6857604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116610a8f5760405163fb7566d760e01b815260040160405180910390fd5b603a80546001600160a01b0319166001600160a01b0392909216919091179055565b60358181548110610ac157600080fd5b6000918252602090912001546001600160a01b0316905081565b60026001541415610b335760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001558151815160005b81811015610bee576000848281518110610b5b57610b5b61214e565b6020908102919091018101516001600160a01b038116600090815260379092526040909120549091506001600160e01b031615610bdd57610b9b816111a3565b60005b84811015610bdb57610bc982888381518110610bbc57610bbc61214e565b60200260200101516112e6565b80610bd38161217a565b915050610b9e565b505b50610be78161217a565b9050610b3f565b5060005b82811015610c5a576000858281518110610c0e57610c0e61214e565b60200260200101519050610c478160396000846001600160a01b03166001600160a01b03168152602001908152602001600020546115d5565b5080610c528161217a565b915050610bf2565b505060018055505050565b6001600160a01b0383166000908152603760205260409020546001600160e01b0316156105b857610c95836111a3565b610c9f83836112e6565b6105b883826112e6565b610cb1610498565b6001600160a01b0316336001600160a01b031614610ce257604051634b98449160e11b815260040160405180910390fd5b6105548282610d9b565b60405162461bcd60e51b815260206004820152600b60248201526a155b9cdd5c1c1bdc9d195960aa1b6044820152600090606401610b2a565b610d89816035805480602002602001604051908101604052809291908181526020018280548015610d7f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d61575b5050505050610558565b50565b6001600160a01b03163b151590565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610dec57600080fd5b505afa158015610e00573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e289190810190612224565b805190915060005b81811015610e8457306001600160a01b0316838281518110610e5457610e5461214e565b60200260200101516001600160a01b03161415610e745760019350610e84565b610e7d8161217a565b9050610e30565b5082610ea357604051634757a01f60e01b815260040160405180910390fd5b6002546040516308a00b1f60e31b81526001600160a01b03808816600483015287921690819063450058f89060240160206040518083038186803b158015610eea57600080fd5b505afa158015610efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2291906122b3565b158015610fa55750604051633e25dee160e21b81526001600160a01b03838116600483015282169063f8977b849060240160206040518083038186803b158015610f6b57600080fd5b505afa158015610f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa391906122b3565b155b15610fc35760405163c1ab6dc160e01b815260040160405180910390fd5b6001600160a01b0387166000908152603660205260409020548015610ff057610feb886111a3565b61113c565b861561113c576001600160a01b0388166000908152603760205260409020546001600160e01b03166110f8576035546014141561104057604051639e8b4a2160e01b815260040160405180910390fd5b6040518060400160405280670de0b6b3a76400006001600160e01b0316815260200161106b426116dc565b63ffffffff9081169091526001600160a01b038a166000818152603760209081526040822085519590910151909316600160e01b026001600160e01b03909416939093179091556035805460018101825592527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d90910180546001600160a01b031916909117905561113c565b611101426116dc565b6001600160a01b0389166000908152603760205260409020805463ffffffff92909216600160e01b026001600160e01b039092169190911790555b868114611199576001600160a01b0388166000818152603660209081526040918290208a905581518481529081018a90527f07295410ddc875d5ff9b778ece2c279c9b91abeefd296803662b28cf6ad33c08910160405180910390a25b5050505050505050565b6001600160a01b0381166000908152603760209081526040808320815180830190925280546001600160e01b0381168352600160e01b900463ffffffff169282019290925290919081906111f79085611745565b915091506000826001600160e01b031611801561121a575060008163ffffffff16115b156112785763ffffffff8116600160e01b026001600160e01b0383161783556040517f883d8b44a1f0e651bb0d11a8e962de03c77a351328bbeb12b702e5632288ee6f9061126b9084908490611fa1565b60405180910390a16108f0565b63ffffffff8116156108f057825463ffffffff8216600160e01b026001600160e01b0391821681811786556040517f883d8b44a1f0e651bb0d11a8e962de03c77a351328bbeb12b702e5632288ee6f936112d89316909117908490611fa1565b60405180910390a150505050565b6001600160a01b03821660009081526037602090815260408083208151808301909252546001600160e01b0381168252600160e01b900463ffffffff16918101919091528190611337908585611898565b6001600160a01b0380871660009081526038602090815260408083209389168352928152828220859055603990522054919350915061137790829061220c565b6001600160a01b038481166000818152603960209081526040918290209490945580518581529384018690529092918716917f49abdf3748a8d465b0d3d5d126dab076f5109ea80b761c4c1c45b2710165087b910160405180910390a350505050565b6001600160a01b03811660009081526037602090815260408083208151808301909252546001600160e01b0381168252600160e01b900463ffffffff1691810191909152818061142a8386611745565b915091506000826001600160e01b031611801561144d575060008163ffffffff16115b1561147d576040518060400160405280836001600160e01b031681526020018263ffffffff168152509250611496565b63ffffffff8116156114965763ffffffff811660208401525b6114a1838688611898565b979650505050505050565b60008054610100900460ff16156114f3578160ff1660011480156114cf5750303b155b6114eb5760405162461bcd60e51b8152600401610b2a906122d5565b506000919050565b60005460ff80841691161061151a5760405162461bcd60e51b8152600401610b2a906122d5565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff1661155b5760405162461bcd60e51b8152600401610b2a90612323565b611563611994565b565b600054610100900460ff1661158c5760405162461bcd60e51b8152600401610b2a90612323565b6001600160a01b0381166115b35760405163724f500960e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6034546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a082319060240160206040518083038186803b15801561161d57600080fd5b505afa158015611631573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165591906121b2565b90506000831180156116675750808311155b156108f0576001600160a01b0380851660009081526039602052604081205561169390831685856119c1565b836001600160a01b03167f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f7241846040516116ce91815260200190565b60405180910390a250505050565b600063ffffffff8211156117415760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610b2a565b5090565b6001600160a01b03811660009081526036602090815260408220549084015182919082906117799063ffffffff164261236e565b905060008111801561178b5750600082115b15611865576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117cb57600080fd5b505afa1580156117df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180391906121b2565b9050600061181184846121cb565b9050600080831161182357600061182d565b61182d8284611a13565b9050611850818a600001516001600160e01b031661184b919061220c565b611a50565b965061185b426116dc565b955050505061188f565b60008111801561187e575085516001600160e01b031615155b1561188f5761188c426116dc565b92505b50509250929050565b82516001600160a01b0380841660009081526038602090815260408083209386168352929052908120546001600160e01b0390921691801580156118e35750670de0b6b3a764000083115b156118f35750670de0b6b3a76400005b60006118ff828561236e565b6040516370a0823160e01b81526001600160a01b038781166004830152919250611988918391908916906370a082319060240160206040518083038186803b15801561194a57600080fd5b505afa15801561195e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198291906121b2565b90611ab9565b92505050935093915050565b600054610100900460ff166119bb5760405162461bcd60e51b8152600401610b2a90612323565b60018055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526105b8908490611af1565b600081611a216002826121ea565b611a33670de0b6b3a7640000866121cb565b611a3d919061220c565b611a4791906121ea565b90505b92915050565b60006001600160e01b038211156117415760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608401610b2a565b6000821580611ac6575081155b15611ad357506000611a4a565b670de0b6b3a7640000611ae76002826121ea565b611a3384866121cb565b6000611b46826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bc39092919063ffffffff16565b8051909150156105b85780806020019051810190611b6491906122b3565b6105b85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b2a565b6060611bd28484600085611bdc565b90505b9392505050565b606082471015611c3d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b2a565b6001600160a01b0385163b611c945760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b2a565b600080866001600160a01b03168587604051611cb09190612385565b60006040518083038185875af1925050503d8060008114611ced576040519150601f19603f3d011682016040523d82523d6000602084013e611cf2565b606091505b50915091506114a182828660608315611d0c575081611bd5565b825115611d1c5782518084602001fd5b8160405162461bcd60e51b8152600401610b2a919061211b565b6001600160a01b0381168114610d8957600080fd5b60008060408385031215611d5e57600080fd5b8235611d6981611d36565b91506020830135611d7981611d36565b809150509250929050565b60008083601f840112611d9657600080fd5b50813567ffffffffffffffff811115611dae57600080fd5b6020830191508360208260051b8501011115611dc957600080fd5b9250929050565b60008060008060408587031215611de657600080fd5b843567ffffffffffffffff80821115611dfe57600080fd5b611e0a88838901611d84565b90965094506020870135915080821115611e2357600080fd5b50611e3087828801611d84565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e7b57611e7b611e3c565b604052919050565b600067ffffffffffffffff821115611e9d57611e9d611e3c565b5060051b60200190565b600082601f830112611eb857600080fd5b81356020611ecd611ec883611e83565b611e52565b82815260059290921b84018101918181019086841115611eec57600080fd5b8286015b84811015611f10578035611f0381611d36565b8352918301918301611ef0565b509695505050505050565b60008060408385031215611f2e57600080fd5b8235611f3981611d36565b9150602083013567ffffffffffffffff811115611f5557600080fd5b611f6185828601611ea7565b9150509250929050565b600060208284031215611f7d57600080fd5b8135611bd581611d36565b600060208284031215611f9a57600080fd5b5035919050565b6001600160e01b0392909216825263ffffffff16602082015260400190565b60008060408385031215611fd357600080fd5b823567ffffffffffffffff80821115611feb57600080fd5b818501915085601f830112611fff57600080fd5b8135602061200f611ec883611e83565b82815260059290921b8401810191818101908984111561202e57600080fd5b948201945b8386101561205557853561204681611d36565b82529482019490820190612033565b9650508601359250508082111561206b57600080fd5b50611f6185828601611ea7565b60008060006060848603121561208d57600080fd5b833561209881611d36565b925060208401356120a881611d36565b915060408401356120b881611d36565b809150509250925092565b600080604083850312156120d657600080fd5b82356120e181611d36565b946020939093013593505050565b60005b8381101561210a5781810151838201526020016120f2565b838111156108f05750506000910152565b602081526000825180602084015261213a8160408501602087016120ef565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561218e5761218e612164565b5060010190565b6000602082840312156121a757600080fd5b8151611bd581611d36565b6000602082840312156121c457600080fd5b5051919050565b60008160001904831182151516156121e5576121e5612164565b500290565b60008261220757634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561221f5761221f612164565b500190565b6000602080838503121561223757600080fd5b825167ffffffffffffffff81111561224e57600080fd5b8301601f8101851361225f57600080fd5b805161226d611ec882611e83565b81815260059190911b8201830190838101908783111561228c57600080fd5b928401925b828410156114a15783516122a481611d36565b82529284019290840190612291565b6000602082840312156122c557600080fd5b81518015158114611bd557600080fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008282101561238057612380612164565b500390565b600082516123978184602087016120ef565b919091019291505056fea26469706673582212206fc0161455f2049672db6de648bd7eda876d1a805daf91f61208891c6d635f1e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimable(address,address)": {
        "details": "Removing this function will change interface and will result updating other contracts using interface."
      },
      "governor()": {
        "returns": {
          "_governor": "The governor"
        }
      },
      "updateBeforeMintOrBurn(address,address)": {
        "details": "Called by DepositToken and DebtToken contracts This function also may be called by anyone to update stored indexes"
      },
      "updateBeforeTransfer(address,address,address)": {
        "details": "Called by DepositToken and DebtToken contracts"
      }
    },
    "title": "RewardsDistributor contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RewardClaimed(address,uint256)": {
        "notice": "Emitted when reward is claimed"
      },
      "TokenIndexUpdated(uint224,uint32)": {
        "notice": "Emitted when updating token index"
      },
      "TokenSpeedUpdated(address,uint256,uint256)": {
        "notice": "Emitted when updating token speed"
      },
      "TokensAccruedUpdated(address,address,uint256,uint256)": {
        "notice": "Emitted when updating accrued token"
      }
    },
    "kind": "user",
    "methods": {
      "INITIAL_INDEX()": {
        "notice": "The initial index"
      },
      "MAX_REWARD_TOKENS()": {
        "notice": "Max reward tokens to avoid DoS scenario"
      },
      "accountIndexOf(address,address)": {
        "notice": "The supply index for each token for each account as of the last time they accrued token"
      },
      "claimRewards(address)": {
        "notice": "Claim tokens accrued by account in all tokens"
      },
      "claimRewards(address,address[])": {
        "notice": "Claim tokens accrued by account in the specified tokens"
      },
      "claimRewards(address[],address[])": {
        "notice": "Claim tokens accrued by the accounts in the specified tokens"
      },
      "claimable(address)": {
        "notice": "Returns claimable amount consider all tokens"
      },
      "claimable(address,address)": {
        "notice": "Returns updated claimable amount for given token"
      },
      "governor()": {
        "notice": "Get the governor"
      },
      "pool()": {
        "notice": "Pool contract"
      },
      "rewardToken()": {
        "notice": "The token to reward"
      },
      "syncTokenSpeed(address)": {
        "notice": "This is temporary fix to keep tokenSpeed and rewardRate from Vesper in sync."
      },
      "tokenSpeeds(address)": {
        "notice": "The amount of token distributed for each token per second"
      },
      "tokenStates(address)": {
        "notice": "The reward state for each token"
      },
      "tokens(uint256)": {
        "notice": "Track tokens for reward"
      },
      "tokensAccruedOf(address)": {
        "notice": "The token accrued but not yet transferred to each user"
      },
      "updateBeforeMintOrBurn(address,address)": {
        "notice": "Update indexes on pre-mint and pre-burn"
      },
      "updateBeforeTransfer(address,address,address)": {
        "notice": "Update indexes on pre-transfer"
      },
      "updateTokenSpeed(address,uint256)": {
        "notice": "Update speed for a single deposit token"
      },
      "updateTokenSpeedKeeper(address)": {
        "notice": "This function is part of temporary fix to keep tokenSpeed and rewardRate in sync."
      },
      "updateTokenSpeeds(address[],uint256[])": {
        "notice": "Update token speeds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19514,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 19517,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 33193,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 14015,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPool)27664"
      },
      {
        "astId": 14117,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 30961,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "rewardToken",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IERC20)21685"
      },
      {
        "astId": 30967,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokens",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_contract(IERC20)21685)dyn_storage"
      },
      {
        "astId": 30974,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokenSpeeds",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_contract(IERC20)21685,t_uint256)"
      },
      {
        "astId": 30982,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokenStates",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_contract(IERC20)21685,t_struct(TokenState)30956_storage)"
      },
      {
        "astId": 30991,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "accountIndexOf",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_contract(IERC20)21685,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 30997,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokensAccruedOf",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31002,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokenSpeedKeeper",
        "offset": 0,
        "slot": "58",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)21685)dyn_storage": {
        "base": "t_contract(IERC20)21685",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)21685": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)27664": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)21685,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)21685",
        "label": "mapping(contract IERC20 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)21685,t_struct(TokenState)30956_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)21685",
        "label": "mapping(contract IERC20 => struct RewardsDistributorStorageV1.TokenState)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenState)30956_storage"
      },
      "t_mapping(t_contract(IERC20)21685,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)21685",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TokenState)30956_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributorStorageV1.TokenState",
        "members": [
          {
            "astId": 30953,
            "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 30955,
            "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
            "label": "timestamp",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}