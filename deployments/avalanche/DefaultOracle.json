{
  "address": "0xAa7584C7d375694B4351e520Af1097D9a36fCee2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum DefaultOracle.Protocol",
          "name": "protocol",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isUsd",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stalePeriod",
          "type": "uint256"
        }
      ],
      "name": "AssetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum DefaultOracle.Protocol",
          "name": "protocol",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "contract IPriceProvider",
          "name": "oldPriceProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPriceProvider",
          "name": "newPriceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stalePeriod",
          "type": "uint256"
        }
      ],
      "name": "addOrUpdateAssetThatUsesChainlink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stalePeriod",
          "type": "uint256"
        }
      ],
      "name": "addOrUpdateAssetThatUsesUniswapV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "addOrUpdateAssetThatUsesUniswapV3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "addOrUpdateUsdAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "enum DefaultOracle.Protocol",
          "name": "protocol",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "isUsd",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stalePeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DefaultOracle.Protocol",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "providerByProtocol",
      "outputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DefaultOracle.Protocol",
          "name": "_protocol",
          "type": "uint8"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "_priceProvider",
          "type": "address"
        }
      ],
      "name": "setPriceProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e912a95394fefde3b486a4a05af32034022c310e762673e542376e13674e425",
  "receipt": {
    "to": null,
    "from": "0xF5F5195cF6998c57C651f9f0bBFA7cFC72a6FaC1",
    "contractAddress": "0xAa7584C7d375694B4351e520Af1097D9a36fCee2",
    "transactionIndex": 1,
    "gasUsed": "1040584",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000800000000000000000000000000400000000000000000000000000000000000000000000000000000000020000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000008000000000000000000000000000000000400000020000000000000000000000000000000000000000000000000000000020000000080000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x45b1cb7f4c2a1f7ef20c4eed2875067ebf80ca4f55ff92d99c23e2937d82ee78",
    "transactionHash": "0x1e912a95394fefde3b486a4a05af32034022c310e762673e542376e13674e425",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 13628811,
        "transactionHash": "0x1e912a95394fefde3b486a4a05af32034022c310e762673e542376e13674e425",
        "address": "0xAa7584C7d375694B4351e520Af1097D9a36fCee2",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5f5195cf6998c57c651f9f0bbfa7cfc72a6fac1"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x45b1cb7f4c2a1f7ef20c4eed2875067ebf80ca4f55ff92d99c23e2937d82ee78"
      }
    ],
    "blockNumber": 13628811,
    "cumulativeGasUsed": "1083052",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "9d493da7ad7feb9d41baa9f03a4d1394",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum DefaultOracle.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isUsd\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stalePeriod\",\"type\":\"uint256\"}],\"name\":\"AssetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum DefaultOracle.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IPriceProvider\",\"name\":\"oldPriceProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPriceProvider\",\"name\":\"newPriceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stalePeriod\",\"type\":\"uint256\"}],\"name\":\"addOrUpdateAssetThatUsesChainlink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stalePeriod\",\"type\":\"uint256\"}],\"name\":\"addOrUpdateAssetThatUsesUniswapV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"addOrUpdateAssetThatUsesUniswapV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"addOrUpdateUsdAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"enum DefaultOracle.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isUsd\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stalePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DefaultOracle.Protocol\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"providerByProtocol\",\"outputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DefaultOracle.Protocol\",\"name\":\"_protocol\",\"type\":\"uint8\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"setPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"addOrUpdateAssetThatUsesChainlink(address,address,uint256)\":{\"params\":{\"_aggregator\":\"The asset's chainlink aggregator contract\",\"_asset\":\"The asset to store\",\"_stalePeriod\":\"The stale period\"}},\"addOrUpdateAssetThatUsesUniswapV2(address,address,uint256)\":{\"params\":{\"_asset\":\"The asset to store\",\"_stalePeriod\":\"The stale period\",\"_underlying\":\"The actual asset to get prices from (e.g. vsETH uses WETH)\"}},\"addOrUpdateAssetThatUsesUniswapV3(address,address)\":{\"details\":\"This function is also used for update a asset setup\",\"params\":{\"_asset\":\"The asset to store\",\"_underlying\":\"The actual asset to get prices from (e.g. vsETH uses WETH)\"}},\"addOrUpdateUsdAsset(address)\":{\"params\":{\"_asset\":\"The asset to store\"}},\"getPriceInUsd(address)\":{\"params\":{\"_asset\":\"The asset's to get price from\"},\"returns\":{\"_priceInUsd\":\"The amount in USD (18 decimals)\"}},\"setPriceProvider(uint8,address)\":{\"details\":\"This function is also used for update a price provider\",\"params\":{\"_priceProvider\":\"The price provider protocol\",\"_protocol\":\"The protocol\"}},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner.\"},\"update(address)\":{\"params\":{\"_asset\":\"The asset to update\"}}},\"title\":\"Oracle contract that encapsulates 3rd-party protocols' oracles\",\"version\":1},\"userdoc\":{\"events\":{\"AssetUpdated(address,uint8,bytes,bool,uint256)\":{\"notice\":\"Emitted when asset setup is updated\"},\"PriceProviderUpdated(uint8,address,address)\":{\"notice\":\"Emitted when a price provider is updated\"}},\"kind\":\"user\",\"methods\":{\"addOrUpdateAssetThatUsesChainlink(address,address,uint256)\":{\"notice\":\"Store an asset that uses Chainlink source of price\"},\"addOrUpdateAssetThatUsesUniswapV2(address,address,uint256)\":{\"notice\":\"Store an asset that uses UniswapV2 source of price\"},\"addOrUpdateAssetThatUsesUniswapV3(address,address)\":{\"notice\":\"Store an asset that uses UniswapV3 source of price\"},\"addOrUpdateUsdAsset(address)\":{\"notice\":\"Store an USD asset (no protocol)\"},\"assets(address)\":{\"notice\":\"Avaliable assets\"},\"getPriceInUsd(address)\":{\"notice\":\"Get asset's USD price\"},\"providerByProtocol(uint8)\":{\"notice\":\"Get the price provider contract for each protocol\"},\"setPriceProvider(uint8,address)\":{\"notice\":\"Set the price provider of a protocol\"},\"update(address)\":{\"notice\":\"Update a asset's price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/DefaultOracle.sol\":\"DefaultOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interface/IGovernable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, Context, Initializable {\\n    address public governor;\\n    address public proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal initializer {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == _msgSender(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x1c0e97df0fda54e7f6c9fd4db4847a06cef50718fda0d74ee804c24eece79af8\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/interface/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interface/oracle/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IOracle {\\n    function getPriceInUsd(IERC20 _asset) external view returns (uint256 _priceInUsd);\\n}\\n\",\"keccak256\":\"0x8fca6035e60e9efe864c2195c9aec9fc7889c0aa4cc9f0639fbe4ec59f170a73\",\"license\":\"MIT\"},\"contracts/interface/oracle/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    function update(bytes calldata _assetData) external;\\n\\n    function getPriceInUsd(bytes calldata _assetData)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0xb9a85340ae4de861a6f0a8c591d28272176e44198c03e214b0f41db7dab4a4ff\",\"license\":\"MIT\"},\"contracts/oracle/DefaultOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../interface/oracle/IOracle.sol\\\";\\nimport \\\"../interface/oracle/IPriceProvider.sol\\\";\\n\\n/**\\n * @title Oracle contract that encapsulates 3rd-party protocols' oracles\\n */\\ncontract DefaultOracle is IOracle, Governable {\\n    uint256 public constant ONE_USD = 1e18;\\n\\n    /**\\n     * @notice The supported protocols\\n     */\\n    enum Protocol {\\n        NONE,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        CHAINLINK\\n    }\\n\\n    /**\\n     * @notice Asset's oracle setup\\n     * @dev I.e. maps the oracle used by each asset\\n     */\\n    struct Asset {\\n        Protocol protocol;\\n        bytes assetData; // encoded data used for queries on price providers\\n        bool isUsd; // i.e. when true no oracle query is needed (amountOut = amountIn)\\n        uint256 stalePeriod; // it's used to determine if a price is invalid (i.e. outdated)\\n    }\\n\\n    /**\\n     * @notice Avaliable assets\\n     */\\n    mapping(IERC20 => Asset) public assets;\\n\\n    /**\\n     * @notice Get the price provider contract for each protocol\\n     */\\n    mapping(Protocol => IPriceProvider) public providerByProtocol;\\n\\n    /// @notice Emitted when a price provider is updated\\n    event PriceProviderUpdated(Protocol protocol, IPriceProvider oldPriceProvider, IPriceProvider newPriceProvider);\\n\\n    /// @notice Emitted when asset setup is updated\\n    event AssetUpdated(IERC20 indexed asset, Protocol protocol, bytes assetData, bool isUsd, uint256 stalePeriod);\\n\\n    /**\\n     * @dev Throws if the asset isn't avaliable\\n     */\\n    modifier onlyIfAssetHasPriceProvider(IERC20 _asset) {\\n        require(assets[_asset].isUsd || assets[_asset].protocol != Protocol.NONE, \\\"asset-has-no-price-provider\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Get the price provider contract of an asset\\n     */\\n    function _priceProviderOfAsset(IERC20 _asset) private view returns (IPriceProvider) {\\n        return providerByProtocol[assets[_asset].protocol];\\n    }\\n\\n    /**\\n     * @dev Get encoded data of an asset\\n     */\\n    function _dataOfAsset(IERC20 _asset) private view returns (bytes memory) {\\n        return assets[_asset].assetData;\\n    }\\n\\n    /**\\n     * @notice Set the price provider of a protocol\\n     * @dev This function is also used for update a price provider\\n     * @param _protocol The protocol\\n     * @param _priceProvider The price provider protocol\\n     */\\n    function setPriceProvider(Protocol _protocol, IPriceProvider _priceProvider) external onlyGovernor {\\n        require(address(_priceProvider) != address(0), \\\"provider-address-null\\\");\\n        IPriceProvider _currentPriceProvider = providerByProtocol[_protocol];\\n        require(_priceProvider != _currentPriceProvider, \\\"new-same-as-current\\\");\\n        providerByProtocol[_protocol] = _priceProvider;\\n        emit PriceProviderUpdated(_protocol, _currentPriceProvider, _priceProvider);\\n    }\\n\\n    /**\\n     * @notice Check if a price timestamp is outdated\\n     * @param _timeOfLastUpdate The price timestamp\\n     * @return true if  price is stale (outdated)\\n     */\\n    function _priceIsStale(IERC20 _asset, uint256 _timeOfLastUpdate) private view returns (bool) {\\n        return block.timestamp - _timeOfLastUpdate > assets[_asset].stalePeriod;\\n    }\\n\\n    /**\\n     * @notice Store an asset\\n     * @param _asset The asset to store\\n     * @param _protocol The protocol to use as source of price\\n     * @param _assetData The asset's encoded data\\n     * @param _isUsd If the asset is a USD token coin\\n     */\\n    function _addOrUpdateAsset(\\n        IERC20 _asset,\\n        Protocol _protocol,\\n        bytes memory _assetData,\\n        bool _isUsd,\\n        uint256 _stalePeriod\\n    ) private {\\n        require(address(_asset) != address(0), \\\"asset-address-is-null\\\");\\n        assets[_asset] = Asset({protocol: _protocol, assetData: _assetData, isUsd: _isUsd, stalePeriod: _stalePeriod});\\n        emit AssetUpdated(_asset, _protocol, _assetData, _isUsd, _stalePeriod);\\n    }\\n\\n    /**\\n     * @notice Store an USD asset (no protocol)\\n     * @param _asset The asset to store\\n     */\\n    function addOrUpdateUsdAsset(IERC20 _asset) external onlyGovernor {\\n        _addOrUpdateAsset(_asset, Protocol.NONE, new bytes(0), true, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Store an asset that uses Chainlink source of price\\n     * @param _asset The asset to store\\n     * @param _aggregator The asset's chainlink aggregator contract\\n     * @param _stalePeriod The stale period\\n     */\\n    function addOrUpdateAssetThatUsesChainlink(\\n        IERC20Metadata _asset,\\n        address _aggregator,\\n        uint256 _stalePeriod\\n    ) external onlyGovernor {\\n        // Note: Keeping this check here because we call the `_asset.decimals()` function before calling `_addOrUpdateAsset`\\n        require(address(_asset) != address(0), \\\"asset-address-is-null\\\");\\n        require(address(_aggregator) != address(0), \\\"aggregator-address-is-null\\\");\\n        _addOrUpdateAsset(_asset, Protocol.CHAINLINK, abi.encode(_aggregator, _asset.decimals()), false, _stalePeriod);\\n    }\\n\\n    /**\\n     * @notice Store an asset that uses UniswapV2 source of price\\n     * @param _asset The asset to store\\n     * @param _underlying The actual asset to get prices from (e.g. vsETH uses WETH)\\n     * @param _stalePeriod The stale period\\n     */\\n    function addOrUpdateAssetThatUsesUniswapV2(\\n        IERC20 _asset,\\n        IERC20 _underlying,\\n        uint256 _stalePeriod\\n    ) external onlyGovernor {\\n        require(address(_underlying) != address(0), \\\"underlying-address-is-null\\\");\\n        _addOrUpdateAsset(_asset, Protocol.UNISWAP_V2, abi.encode(_underlying), false, _stalePeriod);\\n    }\\n\\n    /**\\n     * @notice Store an asset that uses UniswapV3 source of price\\n     * @dev This function is also used for update a asset setup\\n     * @param _asset The asset to store\\n     * @param _underlying The actual asset to get prices from (e.g. vsETH uses WETH)\\n     */\\n    function addOrUpdateAssetThatUsesUniswapV3(IERC20 _asset, IERC20 _underlying) external onlyGovernor {\\n        require(address(_underlying) != address(0), \\\"underlying-address-is-null\\\");\\n        _addOrUpdateAsset(_asset, Protocol.UNISWAP_V3, abi.encode(_underlying), false, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Update a asset's price\\n     * @param _asset The asset to update\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function update(IERC20 _asset) external {\\n        if (assets[_asset].protocol != Protocol.NONE) {\\n            _priceProviderOfAsset(_asset).update(_dataOfAsset(_asset));\\n        }\\n    }\\n\\n    /**\\n     * @notice Get asset's USD price\\n     * @param _asset The asset's to get price from\\n     * @return _priceInUsd The amount in USD (18 decimals)\\n     */\\n    function getPriceInUsd(IERC20 _asset)\\n        external\\n        view\\n        onlyIfAssetHasPriceProvider(_asset)\\n        returns (uint256 _priceInUsd)\\n    {\\n        if (assets[_asset].isUsd) return ONE_USD;\\n\\n        uint256 _lastUpdatedAt;\\n        (_priceInUsd, _lastUpdatedAt) = _priceProviderOfAsset(_asset).getPriceInUsd(_dataOfAsset(_asset));\\n        require(!_priceIsStale(_asset, _lastUpdatedAt), \\\"price-is-stale\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x55fa7df5fe62b2b5e0ba5f49b120cc8394f23f70e28226fe8357e2896a18e80f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ca5760003560e01c80637b60e2671161007c5780637b60e267146101785780638a11a3701461018b578063b6aa515b1461019e578063bbcb75c6146101b1578063d6d88396146101c4578063f11b8188146101ed578063f3b27bc31461021057600080fd5b806307ee40bf146100cf5780630c340a24146100f55780630fd012281461011b5780631c1b8772146101305780635b919f3d1461014357806367781c0e1461015657806370eb205e14610165575b600080fd5b6100e26100dd366004610e10565b610218565b6040519081526020015b60405180910390f35b60005461010e906201000090046001600160a01b031681565b6040516100ec9190610e34565b61012e610129366004610e5c565b6103d7565b005b61012e61013e366004610e10565b61057e565b61012e610151366004610e93565b610622565b6100e2670de0b6b3a764000081565b61012e610173366004610e10565b6106ac565b61012e610186366004610ed4565b6106fd565b60015461010e906001600160a01b031681565b61012e6101ac366004610e10565b610788565b61012e6101bf366004610e93565b61082d565b61010e6101d2366004610ef2565b6003602052600090815260409020546001600160a01b031681565b6102006101fb366004610e10565b610977565b6040516100ec9493929190610f92565b61012e610a30565b6001600160a01b038116600090815260026020819052604082200154829060ff168061026f57506001600160a01b03811660009081526002602052604081205460ff16600381111561026c5761026c610f0d565b14155b6102c05760405162461bcd60e51b815260206004820152601b60248201527f61737365742d6861732d6e6f2d70726963652d70726f7669646572000000000060448201526064015b60405180910390fd5b6001600160a01b0383166000908152600260208190526040909120015460ff16156102f557670de0b6b3a764000091506103d1565b600061030084610afe565b6001600160a01b031663b826844361031786610b60565b6040518263ffffffff1660e01b81526004016103339190610fc5565b604080518083038186803b15801561034a57600080fd5b505afa15801561035e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103829190610fd8565b90935090506103918482610c0f565b156103cf5760405162461bcd60e51b815260206004820152600e60248201526d70726963652d69732d7374616c6560901b60448201526064016102b7565b505b50919050565b6000546001600160a01b03620100009091041633146104085760405162461bcd60e51b81526004016102b790610ffc565b6001600160a01b0381166104565760405162461bcd60e51b81526020600482015260156024820152741c1c9bdd9a59195c8b5859191c995cdccb5b9d5b1b605a1b60448201526064016102b7565b60006003600084600381111561046e5761046e610f0d565b600381111561047f5761047f610f0d565b81526020810191909152604001600020546001600160a01b03908116915082168114156104e45760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b60448201526064016102b7565b81600360008560038111156104fb576104fb610f0d565b600381111561050c5761050c610f0d565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f6d8522a73cf263ee8c1097d5bd32695416c18e9df8cfc47b646f465297177f8e83828460405161057193929190611022565b60405180910390a1505050565b6001600160a01b03811660009081526002602052604081205460ff1660038111156105ab576105ab610f0d565b1461061f576105b981610afe565b6001600160a01b031663c43ed2c86105d083610b60565b6040518263ffffffff1660e01b81526004016105ec9190610fc5565b600060405180830381600087803b15801561060657600080fd5b505af115801561061a573d6000803e3d6000fd5b505050505b50565b6000546001600160a01b03620100009091041633146106535760405162461bcd60e51b81526004016102b790610ffc565b6001600160a01b0382166106795760405162461bcd60e51b81526004016102b790611052565b6106a7836002846040516020016106909190610e34565b604051602081830303815290604052600085610c3d565b505050565b6000546001600160a01b03620100009091041633146106dd5760405162461bcd60e51b81526004016102b790610ffc565b6040805160008082526020820190925261061f9183916001600019610c3d565b6000546001600160a01b036201000090910416331461072e5760405162461bcd60e51b81526004016102b790610ffc565b6001600160a01b0381166107545760405162461bcd60e51b81526004016102b790611052565b6107848260018360405160200161076b9190610e34565b6040516020818303038152906040526000600019610c3d565b5050565b6000546001600160a01b03620100009091041633146107b95760405162461bcd60e51b81526004016102b790610ffc565b6001600160a01b03811661080b5760405162461bcd60e51b815260206004820152601960248201527870726f706f7365642d676f7665726e6f722d69732d7a65726f60381b60448201526064016102b7565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b036201000090910416331461085e5760405162461bcd60e51b81526004016102b790610ffc565b6001600160a01b0383166108845760405162461bcd60e51b81526004016102b790611089565b6001600160a01b0382166108da5760405162461bcd60e51b815260206004820152601a60248201527f61676772656761746f722d616464726573732d69732d6e756c6c00000000000060448201526064016102b7565b6106a783600384866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561091a57600080fd5b505afa15801561092e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095291906110b8565b604080516001600160a01b03909316602084015260ff90911690820152606001610690565b6002602052600090815260409020805460018201805460ff909216929161099d906110db565b80601f01602080910402602001604051908101604052809291908181526020018280546109c9906110db565b8015610a165780601f106109eb57610100808354040283529160200191610a16565b820191906000526020600020905b8154815290600101906020018083116109f957829003601f168201915b505050506002830154600390930154919260ff1691905084565b6001546001600160a01b03163314610a865760405162461bcd60e51b81526020600482015260196024820152783737ba16ba343296b83937b837b9b2b216b3b7bb32b93737b960391b60448201526064016102b7565b600154600080546040516001600160a01b039384169362010000909204909116917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d091a3600180546000805462010000600160b01b0319166001600160a01b03831662010000021790556001600160a01b0319169055565b6001600160a01b038116600090815260026020526040812054600390829060ff1682811115610b2f57610b2f610f0d565b6003811115610b4057610b40610f0d565b81526020810191909152604001600020546001600160a01b031692915050565b6001600160a01b0381166000908152600260205260409020600101805460609190610b8a906110db565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb6906110db565b8015610c035780601f10610bd857610100808354040283529160200191610c03565b820191906000526020600020905b815481529060010190602001808311610be657829003601f168201915b50505050509050919050565b6001600160a01b038216600090815260026020526040812060030154610c358342611110565b119392505050565b6001600160a01b038516610c635760405162461bcd60e51b81526004016102b790611089565b6040518060800160405280856003811115610c8057610c80610f0d565b8152602080820186905284151560408084019190915260609092018490526001600160a01b038816600090815260029091522081518154829060ff19166001836003811115610cd157610cd1610f0d565b02179055506020828101518051610cee9260018501920190610d62565b5060408281015160028301805460ff1916911515919091179055606090920151600390910155516001600160a01b038616907f69ae030a9c1ed4bbd36dad4672404e234c548ed7e64bbe08ef17e30c05f860a090610d53908790879087908790610f92565b60405180910390a25050505050565b828054610d6e906110db565b90600052602060002090601f016020900481019282610d905760008555610dd6565b82601f10610da957805160ff1916838001178555610dd6565b82800160010185558215610dd6579182015b82811115610dd6578251825591602001919060010190610dbb565b50610de2929150610de6565b5090565b5b80821115610de25760008155600101610de7565b6001600160a01b038116811461061f57600080fd5b600060208284031215610e2257600080fd5b8135610e2d81610dfb565b9392505050565b6001600160a01b0391909116815260200190565b803560048110610e5757600080fd5b919050565b60008060408385031215610e6f57600080fd5b610e7883610e48565b91506020830135610e8881610dfb565b809150509250929050565b600080600060608486031215610ea857600080fd5b8335610eb381610dfb565b92506020840135610ec381610dfb565b929592945050506040919091013590565b60008060408385031215610ee757600080fd5b8235610e7881610dfb565b600060208284031215610f0457600080fd5b610e2d82610e48565b634e487b7160e01b600052602160045260246000fd5b60048110610f4157634e487b7160e01b600052602160045260246000fd5b9052565b6000815180845260005b81811015610f6b57602081850181015186830182015201610f4f565b81811115610f7d576000602083870101525b50601f01601f19169290920160200192915050565b610f9c8186610f23565b608060208201526000610fb26080830186610f45565b9315156040830152506060015292915050565b602081526000610e2d6020830184610f45565b60008060408385031215610feb57600080fd5b505080516020909101519092909150565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b606081016110308286610f23565b6001600160a01b03938416602083015291909216604090920191909152919050565b6020808252601a908201527f756e6465726c79696e672d616464726573732d69732d6e756c6c000000000000604082015260600190565b602080825260159082015274185cdcd95d0b5859191c995cdccb5a5ccb5b9d5b1b605a1b604082015260600190565b6000602082840312156110ca57600080fd5b815160ff81168114610e2d57600080fd5b600181811c908216806110ef57607f821691505b602082108114156103d157634e487b7160e01b600052602260045260246000fd5b60008282101561113057634e487b7160e01b600052601160045260246000fd5b50039056fea2646970667358221220f267845865e628c4b8c6706ff1c7cec73c1d2391157e823e7d8c1b4925b3466164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "addOrUpdateAssetThatUsesChainlink(address,address,uint256)": {
        "params": {
          "_aggregator": "The asset's chainlink aggregator contract",
          "_asset": "The asset to store",
          "_stalePeriod": "The stale period"
        }
      },
      "addOrUpdateAssetThatUsesUniswapV2(address,address,uint256)": {
        "params": {
          "_asset": "The asset to store",
          "_stalePeriod": "The stale period",
          "_underlying": "The actual asset to get prices from (e.g. vsETH uses WETH)"
        }
      },
      "addOrUpdateAssetThatUsesUniswapV3(address,address)": {
        "details": "This function is also used for update a asset setup",
        "params": {
          "_asset": "The asset to store",
          "_underlying": "The actual asset to get prices from (e.g. vsETH uses WETH)"
        }
      },
      "addOrUpdateUsdAsset(address)": {
        "params": {
          "_asset": "The asset to store"
        }
      },
      "getPriceInUsd(address)": {
        "params": {
          "_asset": "The asset's to get price from"
        },
        "returns": {
          "_priceInUsd": "The amount in USD (18 decimals)"
        }
      },
      "setPriceProvider(uint8,address)": {
        "details": "This function is also used for update a price provider",
        "params": {
          "_priceProvider": "The price provider protocol",
          "_protocol": "The protocol"
        }
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner."
      },
      "update(address)": {
        "params": {
          "_asset": "The asset to update"
        }
      }
    },
    "title": "Oracle contract that encapsulates 3rd-party protocols' oracles",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetUpdated(address,uint8,bytes,bool,uint256)": {
        "notice": "Emitted when asset setup is updated"
      },
      "PriceProviderUpdated(uint8,address,address)": {
        "notice": "Emitted when a price provider is updated"
      }
    },
    "kind": "user",
    "methods": {
      "addOrUpdateAssetThatUsesChainlink(address,address,uint256)": {
        "notice": "Store an asset that uses Chainlink source of price"
      },
      "addOrUpdateAssetThatUsesUniswapV2(address,address,uint256)": {
        "notice": "Store an asset that uses UniswapV2 source of price"
      },
      "addOrUpdateAssetThatUsesUniswapV3(address,address)": {
        "notice": "Store an asset that uses UniswapV3 source of price"
      },
      "addOrUpdateUsdAsset(address)": {
        "notice": "Store an USD asset (no protocol)"
      },
      "assets(address)": {
        "notice": "Avaliable assets"
      },
      "getPriceInUsd(address)": {
        "notice": "Get asset's USD price"
      },
      "providerByProtocol(uint8)": {
        "notice": "Get the price provider contract for each protocol"
      },
      "setPriceProvider(uint8,address)": {
        "notice": "Set the price provider of a protocol"
      },
      "update(address)": {
        "notice": "Update a asset's price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7184,
        "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7187,
        "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6020,
        "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6022,
        "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13048,
        "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
        "label": "assets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IERC20)7893,t_struct(Asset)13041_storage)"
      },
      {
        "astId": 13055,
        "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
        "label": "providerByProtocol",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(Protocol)13031,t_contract(IPriceProvider)11359)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)7893": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceProvider)11359": {
        "encoding": "inplace",
        "label": "contract IPriceProvider",
        "numberOfBytes": "20"
      },
      "t_enum(Protocol)13031": {
        "encoding": "inplace",
        "label": "enum DefaultOracle.Protocol",
        "numberOfBytes": "1"
      },
      "t_mapping(t_contract(IERC20)7893,t_struct(Asset)13041_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)7893",
        "label": "mapping(contract IERC20 => struct DefaultOracle.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)13041_storage"
      },
      "t_mapping(t_enum(Protocol)13031,t_contract(IPriceProvider)11359)": {
        "encoding": "mapping",
        "key": "t_enum(Protocol)13031",
        "label": "mapping(enum DefaultOracle.Protocol => contract IPriceProvider)",
        "numberOfBytes": "32",
        "value": "t_contract(IPriceProvider)11359"
      },
      "t_struct(Asset)13041_storage": {
        "encoding": "inplace",
        "label": "struct DefaultOracle.Asset",
        "members": [
          {
            "astId": 13034,
            "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
            "label": "protocol",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Protocol)13031"
          },
          {
            "astId": 13036,
            "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
            "label": "assetData",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 13038,
            "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
            "label": "isUsd",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 13040,
            "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
            "label": "stalePeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}