{
  "address": "0x21ce811b3EE51344BF9C2D3595dae56960F9b4A3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum DefaultOracle.Protocol",
          "name": "protocol",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetData",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isUsd",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stalePeriod",
          "type": "uint256"
        }
      ],
      "name": "AssetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum DefaultOracle.Protocol",
          "name": "protocol",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "contract IPriceProvider",
          "name": "oldPriceProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IPriceProvider",
          "name": "newPriceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ONE_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stalePeriod",
          "type": "uint256"
        }
      ],
      "name": "addOrUpdateAssetThatUsesChainlink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stalePeriod",
          "type": "uint256"
        }
      ],
      "name": "addOrUpdateAssetThatUsesUniswapV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "addOrUpdateAssetThatUsesUniswapV3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "addOrUpdateUsdAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "enum DefaultOracle.Protocol",
          "name": "protocol",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "assetData",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isUsd",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "stalePeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DefaultOracle.Protocol",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "providerByProtocol",
      "outputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DefaultOracle.Protocol",
          "name": "_protocol",
          "type": "uint8"
        },
        {
          "internalType": "contract IPriceProvider",
          "name": "_priceProvider",
          "type": "address"
        }
      ],
      "name": "setPriceProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x86183a81d66eacca2c3c83543e025676b31ce0d55d30477de1ef434233a526fa",
  "receipt": {
    "to": null,
    "from": "0xF5F5195cF6998c57C651f9f0bBFA7cFC72a6FaC1",
    "contractAddress": "0x21ce811b3EE51344BF9C2D3595dae56960F9b4A3",
    "transactionIndex": 1,
    "gasUsed": "1192817",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000800000000000000000000000000400000000000000000000000000000000000000000000000000000000020000000000000000000a00000000000000000020000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000200000000008000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x4e484d447829d728644d2633f7828d9cd2b3c71777bee9970db226a1582d4556",
    "transactionHash": "0x86183a81d66eacca2c3c83543e025676b31ce0d55d30477de1ef434233a526fa",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 15251677,
        "transactionHash": "0x86183a81d66eacca2c3c83543e025676b31ce0d55d30477de1ef434233a526fa",
        "address": "0x21ce811b3EE51344BF9C2D3595dae56960F9b4A3",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5f5195cf6998c57c651f9f0bbfa7cfc72a6fac1"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x4e484d447829d728644d2633f7828d9cd2b3c71777bee9970db226a1582d4556"
      }
    ],
    "blockNumber": 15251677,
    "cumulativeGasUsed": "1338654",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d8b118bc2b869f1cad3e67e355255d78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum DefaultOracle.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetData\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isUsd\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stalePeriod\",\"type\":\"uint256\"}],\"name\":\"AssetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum DefaultOracle.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IPriceProvider\",\"name\":\"oldPriceProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPriceProvider\",\"name\":\"newPriceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ONE_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stalePeriod\",\"type\":\"uint256\"}],\"name\":\"addOrUpdateAssetThatUsesChainlink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stalePeriod\",\"type\":\"uint256\"}],\"name\":\"addOrUpdateAssetThatUsesUniswapV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"addOrUpdateAssetThatUsesUniswapV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"addOrUpdateUsdAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"enum DefaultOracle.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetData\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUsd\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stalePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DefaultOracle.Protocol\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"providerByProtocol\",\"outputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DefaultOracle.Protocol\",\"name\":\"_protocol\",\"type\":\"uint8\"},{\"internalType\":\"contract IPriceProvider\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"setPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"addOrUpdateAssetThatUsesChainlink(address,address,uint256)\":{\"params\":{\"_aggregator\":\"The asset's chainlink aggregator contract\",\"_asset\":\"The asset to store\",\"_stalePeriod\":\"The stale period\"}},\"addOrUpdateAssetThatUsesUniswapV2(address,address,uint256)\":{\"params\":{\"_asset\":\"The asset to store\",\"_stalePeriod\":\"The stale period\",\"_underlying\":\"The actual asset to get prices from (e.g. vsETH uses WETH)\"}},\"addOrUpdateAssetThatUsesUniswapV3(address,address)\":{\"details\":\"This function is also used for update a asset setup\",\"params\":{\"_asset\":\"The asset to store\",\"_underlying\":\"The actual asset to get prices from (e.g. vsETH uses WETH)\"}},\"addOrUpdateUsdAsset(address)\":{\"params\":{\"_asset\":\"The asset to store\"}},\"getPriceInUsd(address)\":{\"params\":{\"_asset\":\"The asset's to get price from\"},\"returns\":{\"_priceInUsd\":\"The amount in USD (18 decimals)\"}},\"setPriceProvider(uint8,address)\":{\"details\":\"This function is also used for update a price provider\",\"params\":{\"_priceProvider\":\"The price provider protocol\",\"_protocol\":\"The protocol\"}},\"sweep(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to send\",\"_to\":\"The recipient of the transfer\",\"_token\":\"The token to transfer\"}},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner.\"},\"update(address)\":{\"params\":{\"_asset\":\"The asset to update\"}}},\"title\":\"Oracle contract that encapsulates 3rd-party protocols' oracles\",\"version\":1},\"userdoc\":{\"events\":{\"AssetUpdated(address,uint8,address,bool,uint256)\":{\"notice\":\"Emitted when asset setup is updated\"},\"PriceProviderUpdated(uint8,address,address)\":{\"notice\":\"Emitted when a price provider is updated\"}},\"kind\":\"user\",\"methods\":{\"addOrUpdateAssetThatUsesChainlink(address,address,uint256)\":{\"notice\":\"Store an asset that uses Chainlink source of price\"},\"addOrUpdateAssetThatUsesUniswapV2(address,address,uint256)\":{\"notice\":\"Store an asset that uses UniswapV2 source of price\"},\"addOrUpdateAssetThatUsesUniswapV3(address,address)\":{\"notice\":\"Store an asset that uses UniswapV3 source of price\"},\"addOrUpdateUsdAsset(address)\":{\"notice\":\"Store an USD asset (no protocol)\"},\"assets(address)\":{\"notice\":\"Available assets\"},\"getPriceInUsd(address)\":{\"notice\":\"Get asset's USD price\"},\"providerByProtocol(uint8)\":{\"notice\":\"Get the price provider contract for each protocol\"},\"setPriceProvider(uint8,address)\":{\"notice\":\"Set the price provider of a protocol\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"},\"update(address)\":{\"notice\":\"Update a asset's price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/DefaultOracle.sol\":\"DefaultOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/TokenHolder.sol\\\";\\nimport \\\"../interface/IGovernable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, Context, TokenHolder, Initializable {\\n    address public governor;\\n    address public proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal initializer {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == _msgSender(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x306f97343e55b8444d3ca72d0246c04cb10fd728507d163669966d564889eb14\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/interface/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interface/oracle/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOracle {\\n    function getPriceInUsd(IERC20 _asset) external view returns (uint256 _priceInUsd);\\n}\\n\",\"keccak256\":\"0x027e89658957b1b7c2ac4866e6082468f19b47a8c0fa59bb0d0a119cdfd3b0a7\",\"license\":\"MIT\"},\"contracts/interface/oracle/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    function update(address _assetData) external;\\n\\n    function getPriceInUsd(address _assetData) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0x95b6b25863633bca80670fe962666dc30b27d64cc07d4a4ca67329285339bb1f\",\"license\":\"MIT\"},\"contracts/oracle/DefaultOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\nimport \\\"../interface/oracle/IOracle.sol\\\";\\nimport \\\"../interface/oracle/IPriceProvider.sol\\\";\\n\\n/**\\n * @title Oracle contract that encapsulates 3rd-party protocols' oracles\\n */\\ncontract DefaultOracle is IOracle, Governable {\\n    uint256 public constant ONE_USD = 1e18;\\n\\n    /**\\n     * @notice The supported protocols\\n     */\\n    enum Protocol {\\n        NONE,\\n        UNISWAP_V3,\\n        UNISWAP_V2,\\n        CHAINLINK\\n    }\\n\\n    /**\\n     * @notice Asset's oracle setup\\n     * @dev I.e. maps the oracle used by each asset\\n     */\\n    struct Asset {\\n        Protocol protocol;\\n        address assetData; // Underling address for UniswapV2/V3 and aggregator address for Chainlink\\n        bool isUsd; // i.e. when true no oracle query is needed (amountOut = amountIn)\\n        uint256 stalePeriod; // it's used to determine if a price is invalid (i.e. outdated)\\n    }\\n\\n    /**\\n     * @notice Available assets\\n     */\\n    mapping(IERC20 => Asset) public assets;\\n\\n    /**\\n     * @notice Get the price provider contract for each protocol\\n     */\\n    mapping(Protocol => IPriceProvider) public providerByProtocol;\\n\\n    /// @notice Emitted when a price provider is updated\\n    event PriceProviderUpdated(Protocol protocol, IPriceProvider oldPriceProvider, IPriceProvider newPriceProvider);\\n\\n    /// @notice Emitted when asset setup is updated\\n    event AssetUpdated(IERC20 indexed asset, Protocol protocol, address assetData, bool isUsd, uint256 stalePeriod);\\n\\n    /**\\n     * @dev Throws if the asset isn't available\\n     */\\n    modifier onlyIfAssetHasPriceProvider(IERC20 _asset) {\\n        require(assets[_asset].isUsd || assets[_asset].protocol != Protocol.NONE, \\\"asset-has-no-price-provider\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Get the price provider contract of an asset\\n     */\\n    function _priceProviderOfAsset(IERC20 _asset) private view returns (IPriceProvider) {\\n        return providerByProtocol[assets[_asset].protocol];\\n    }\\n\\n    /**\\n     * @dev Get encoded data of an asset\\n     */\\n    function _dataOfAsset(IERC20 _asset) private view returns (address) {\\n        return assets[_asset].assetData;\\n    }\\n\\n    /**\\n     * @notice Set the price provider of a protocol\\n     * @dev This function is also used for update a price provider\\n     * @param _protocol The protocol\\n     * @param _priceProvider The price provider protocol\\n     */\\n    function setPriceProvider(Protocol _protocol, IPriceProvider _priceProvider) external onlyGovernor {\\n        require(address(_priceProvider) != address(0), \\\"provider-address-null\\\");\\n        IPriceProvider _currentPriceProvider = providerByProtocol[_protocol];\\n        require(_priceProvider != _currentPriceProvider, \\\"new-same-as-current\\\");\\n        providerByProtocol[_protocol] = _priceProvider;\\n        emit PriceProviderUpdated(_protocol, _currentPriceProvider, _priceProvider);\\n    }\\n\\n    /**\\n     * @notice Store an asset\\n     * @param _asset The asset to store\\n     * @param _protocol The protocol to use as source of price\\n     * @param _assetData The asset's encoded data\\n     * @param _isUsd If the asset is a USD token coin\\n     */\\n    function _addOrUpdateAsset(\\n        IERC20 _asset,\\n        Protocol _protocol,\\n        address _assetData,\\n        bool _isUsd,\\n        uint256 _stalePeriod\\n    ) private {\\n        require(address(_asset) != address(0), \\\"asset-address-is-null\\\");\\n        assets[_asset] = Asset({protocol: _protocol, assetData: _assetData, isUsd: _isUsd, stalePeriod: _stalePeriod});\\n        emit AssetUpdated(_asset, _protocol, _assetData, _isUsd, _stalePeriod);\\n    }\\n\\n    /**\\n     * @notice Store an USD asset (no protocol)\\n     * @param _asset The asset to store\\n     */\\n    function addOrUpdateUsdAsset(IERC20 _asset) external onlyGovernor {\\n        _addOrUpdateAsset(_asset, Protocol.NONE, address(0), true, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Store an asset that uses Chainlink source of price\\n     * @param _asset The asset to store\\n     * @param _aggregator The asset's chainlink aggregator contract\\n     * @param _stalePeriod The stale period\\n     */\\n    function addOrUpdateAssetThatUsesChainlink(\\n        IERC20Metadata _asset,\\n        address _aggregator,\\n        uint256 _stalePeriod\\n    ) external onlyGovernor {\\n        // Note: Keeping this check here because we call the `_asset.decimals()` function before calling `_addOrUpdateAsset`\\n        require(address(_asset) != address(0), \\\"asset-address-is-null\\\");\\n        require(address(_aggregator) != address(0), \\\"aggregator-address-is-null\\\");\\n        _addOrUpdateAsset(_asset, Protocol.CHAINLINK, _aggregator, false, _stalePeriod);\\n    }\\n\\n    /**\\n     * @notice Store an asset that uses UniswapV2 source of price\\n     * @param _asset The asset to store\\n     * @param _underlying The actual asset to get prices from (e.g. vsETH uses WETH)\\n     * @param _stalePeriod The stale period\\n     */\\n    function addOrUpdateAssetThatUsesUniswapV2(\\n        IERC20 _asset,\\n        address _underlying,\\n        uint256 _stalePeriod\\n    ) external onlyGovernor {\\n        require(_underlying != address(0), \\\"underlying-address-is-null\\\");\\n        _addOrUpdateAsset(_asset, Protocol.UNISWAP_V2, _underlying, false, _stalePeriod);\\n    }\\n\\n    /**\\n     * @notice Store an asset that uses UniswapV3 source of price\\n     * @dev This function is also used for update a asset setup\\n     * @param _asset The asset to store\\n     * @param _underlying The actual asset to get prices from (e.g. vsETH uses WETH)\\n     */\\n    function addOrUpdateAssetThatUsesUniswapV3(IERC20 _asset, address _underlying) external onlyGovernor {\\n        require(_underlying != address(0), \\\"underlying-address-is-null\\\");\\n        _addOrUpdateAsset(_asset, Protocol.UNISWAP_V3, _underlying, false, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Update a asset's price\\n     * @param _asset The asset to update\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function update(IERC20 _asset) external {\\n        if (assets[_asset].protocol != Protocol.NONE) {\\n            _priceProviderOfAsset(_asset).update(_dataOfAsset(_asset));\\n        }\\n    }\\n\\n    /**\\n     * @notice Get asset's USD price\\n     * @param _asset The asset's to get price from\\n     * @return _priceInUsd The amount in USD (18 decimals)\\n     */\\n    function getPriceInUsd(IERC20 _asset)\\n        external\\n        view\\n        onlyIfAssetHasPriceProvider(_asset)\\n        returns (uint256 _priceInUsd)\\n    {\\n        if (assets[_asset].isUsd) return ONE_USD;\\n\\n        uint256 _lastUpdatedAt;\\n        (_priceInUsd, _lastUpdatedAt) = _priceProviderOfAsset(_asset).getPriceInUsd(_dataOfAsset(_asset));\\n        require(block.timestamp - _lastUpdatedAt <= assets[_asset].stalePeriod, \\\"price-is-stale\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6ade6a1b8ce847da2ff5b2e1978d94d9d8269bdb356f51337b6a0196a66230a3\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     */\\n    function _requireCanSweep() internal view virtual;\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param _token The token to transfer\\n     * @param _to The recipient of the transfer\\n     * @param _amount The amount to send\\n     */\\n    function sweep(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external {\\n        _requireCanSweep();\\n\\n        if (address(_token) == address(0)) {\\n            Address.sendValue(payable(_to), _amount);\\n        } else {\\n            _token.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert(\\\"receive-not-allowed\\\");\\n    }\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert(\\\"fallback-not-allowed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x45fed62204599ac0c9bed76de4ce8b6b070d96d548e029ce1f9f2d0c7c87a99d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000805462010000600160b01b03191633620100008102919091178255604051909182917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a35061142c8061006a6000396000f3fe6080604052600436106100cc5760003560e01c806370eb205e1161007a57806370eb205e146102575780637b60e267146102775780638a11a37014610297578063b6aa515b146102b7578063bbcb75c6146102d7578063d6d88396146102f7578063f11b81881461032d578063f3b27bc31461039257610114565b806307ee40bf146101535780630c340a24146101865780630fd01228146101b95780631c1b8772146101db5780635b919f3d146101fb57806362c067671461021b57806367781c0e1461023b57610114565b366101145760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b604482015260640161010b565b34801561015f57600080fd5b5061017361016e3660046110f0565b6103a7565b6040519081526020015b60405180910390f35b34801561019257600080fd5b506000546101ac906201000090046001600160a01b031681565b60405161017d919061110d565b3480156101c557600080fd5b506101d96101d4366004611135565b610585565b005b3480156101e757600080fd5b506101d96101f63660046110f0565b61072c565b34801561020757600080fd5b506101d961021636600461116c565b6107d0565b34801561022757600080fd5b506101d961023636600461116c565b61083b565b34801561024757600080fd5b50610173670de0b6b3a764000081565b34801561026357600080fd5b506101d96102723660046110f0565b61086f565b34801561028357600080fd5b506101d96102923660046111ad565b6108b1565b3480156102a357600080fd5b506001546101ac906001600160a01b031681565b3480156102c357600080fd5b506101d96102d23660046110f0565b61091d565b3480156102e357600080fd5b506101d96102f236600461116c565b6109c2565b34801561030357600080fd5b506101ac6103123660046111cb565b6003602052600090815260409020546001600160a01b031681565b34801561033957600080fd5b506103826103483660046110f0565b6002602052600090815260409020805460019091015460ff808316926001600160a01b0361010082041692600160a81b9091049091169084565b60405161017d949392919061121e565b34801561039e57600080fd5b506101d9610a7e565b6001600160a01b0381166000908152600260205260408120548290600160a81b900460ff168061040257506001600160a01b03811660009081526002602052604081205460ff1660038111156103ff576103ff6111e6565b14155b61044e5760405162461bcd60e51b815260206004820152601b60248201527f61737365742d6861732d6e6f2d70726963652d70726f76696465720000000000604482015260640161010b565b6001600160a01b038316600090815260026020526040902054600160a81b900460ff161561048657670de0b6b3a7640000915061057f565b600061049184610b4c565b6001600160a01b03166307ee40bf6104a886610bae565b6040518263ffffffff1660e01b81526004016104c4919061110d565b604080518083038186803b1580156104db57600080fd5b505afa1580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105139190611250565b6001600160a01b038616600090815260026020526040902060010154919450915061053e8242611274565b111561057d5760405162461bcd60e51b815260206004820152600e60248201526d70726963652d69732d7374616c6560901b604482015260640161010b565b505b50919050565b6000546001600160a01b03620100009091041633146105b65760405162461bcd60e51b815260040161010b90611299565b6001600160a01b0381166106045760405162461bcd60e51b81526020600482015260156024820152741c1c9bdd9a59195c8b5859191c995cdccb5b9d5b1b605a1b604482015260640161010b565b60006003600084600381111561061c5761061c6111e6565b600381111561062d5761062d6111e6565b81526020810191909152604001600020546001600160a01b03908116915082168114156106925760405162461bcd60e51b81526020600482015260136024820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b604482015260640161010b565b81600360008560038111156106a9576106a96111e6565b60038111156106ba576106ba6111e6565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507f6d8522a73cf263ee8c1097d5bd32695416c18e9df8cfc47b646f465297177f8e83828460405161071f939291906112bf565b60405180910390a1505050565b6001600160a01b03811660009081526002602052604081205460ff166003811115610759576107596111e6565b146107cd5761076781610b4c565b6001600160a01b0316631c1b877261077e83610bae565b6040518263ffffffff1660e01b815260040161079a919061110d565b600060405180830381600087803b1580156107b457600080fd5b505af11580156107c8573d6000803e3d6000fd5b505050505b50565b6000546001600160a01b03620100009091041633146108015760405162461bcd60e51b815260040161010b90611299565b6001600160a01b0382166108275760405162461bcd60e51b815260040161010b906112ef565b61083683600284600085610bd1565b505050565b610843610d08565b6001600160a01b03831661085b576108368282610d3b565b6108366001600160a01b0384168383610e54565b6000546001600160a01b03620100009091041633146108a05760405162461bcd60e51b815260040161010b90611299565b6107cd816000806001600019610bd1565b6000546001600160a01b03620100009091041633146108e25760405162461bcd60e51b815260040161010b90611299565b6001600160a01b0381166109085760405162461bcd60e51b815260040161010b906112ef565b610919826001836000600019610bd1565b5050565b6000546001600160a01b036201000090910416331461094e5760405162461bcd60e51b815260040161010b90611299565b6001600160a01b0381166109a05760405162461bcd60e51b815260206004820152601960248201527870726f706f7365642d676f7665726e6f722d69732d7a65726f60381b604482015260640161010b565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03620100009091041633146109f35760405162461bcd60e51b815260040161010b90611299565b6001600160a01b038316610a195760405162461bcd60e51b815260040161010b90611326565b6001600160a01b038216610a6f5760405162461bcd60e51b815260206004820152601a60248201527f61676772656761746f722d616464726573732d69732d6e756c6c000000000000604482015260640161010b565b61083683600384600085610bd1565b6001546001600160a01b03163314610ad45760405162461bcd60e51b81526020600482015260196024820152783737ba16ba343296b83937b837b9b2b216b3b7bb32b93737b960391b604482015260640161010b565b600154600080546040516001600160a01b039384169362010000909204909116917fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d091a3600180546000805462010000600160b01b0319166001600160a01b03831662010000021790556001600160a01b0319169055565b6001600160a01b038116600090815260026020526040812054600390829060ff1682811115610b7d57610b7d6111e6565b6003811115610b8e57610b8e6111e6565b81526020810191909152604001600020546001600160a01b031692915050565b6001600160a01b0390811660009081526002602052604090205461010090041690565b6001600160a01b038516610bf75760405162461bcd60e51b815260040161010b90611326565b6040518060800160405280856003811115610c1457610c146111e6565b81526001600160a01b038086166020808401919091528515156040808501919091526060909301859052908816600090815260029091522081518154829060ff19166001836003811115610c6a57610c6a6111e6565b0217905550602082015181546040808501511515600160a81b0260ff60a81b196001600160a01b039485166101000216610100600160b01b0319909316929092179190911783556060909301516001909201919091559051908616907ff9aa333742c0c91af5d98e1790bba4916cda81688540271f108f6743e64040f890610cf990879087908790879061121e565b60405180910390a25050505050565b6000546001600160a01b0362010000909104163314610d395760405162461bcd60e51b815260040161010b90611299565b565b80471015610d8b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161010b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610dd8576040519150601f19603f3d011682016040523d82523d6000602084013e610ddd565b606091505b50509050806108365760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161010b565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649084015261083692869291600091610ee4918516908490610f61565b8051909150156108365780806020019051810190610f029190611355565b6108365760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161010b565b6060610f708484600085610f7a565b90505b9392505050565b606082471015610fdb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161010b565b843b6110295760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161010b565b600080866001600160a01b0316858760405161104591906113a7565b60006040518083038185875af1925050503d8060008114611082576040519150601f19603f3d011682016040523d82523d6000602084013e611087565b606091505b50915091506110978282866110a2565b979650505050505050565b606083156110b1575081610f73565b8251156110c15782518084602001fd5b8160405162461bcd60e51b815260040161010b91906113c3565b6001600160a01b03811681146107cd57600080fd5b60006020828403121561110257600080fd5b8135610f73816110db565b6001600160a01b0391909116815260200190565b80356004811061113057600080fd5b919050565b6000806040838503121561114857600080fd5b61115183611121565b91506020830135611161816110db565b809150509250929050565b60008060006060848603121561118157600080fd5b833561118c816110db565b9250602084013561119c816110db565b929592945050506040919091013590565b600080604083850312156111c057600080fd5b8235611151816110db565b6000602082840312156111dd57600080fd5b610f7382611121565b634e487b7160e01b600052602160045260246000fd5b6004811061121a57634e487b7160e01b600052602160045260246000fd5b9052565b6080810161122c82876111fc565b6001600160a01b039490941660208201529115156040830152606090910152919050565b6000806040838503121561126357600080fd5b505080516020909101519092909150565b60008282101561129457634e487b7160e01b600052601160045260246000fd5b500390565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b606081016112cd82866111fc565b6001600160a01b03938416602083015291909216604090920191909152919050565b6020808252601a908201527f756e6465726c79696e672d616464726573732d69732d6e756c6c000000000000604082015260600190565b602080825260159082015274185cdcd95d0b5859191c995cdccb5a5ccb5b9d5b1b605a1b604082015260600190565b60006020828403121561136757600080fd5b81518015158114610f7357600080fd5b60005b8381101561139257818101518382015260200161137a565b838111156113a1576000848401525b50505050565b600082516113b9818460208701611377565b9190910192915050565b60208152600082518060208401526113e2816040850160208701611377565b601f01601f1916919091016040019291505056fea26469706673582212201da00bbe39ab84415d842e5fc2612c473ae8af689932220518b7e6ed9805e9b864736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "addOrUpdateAssetThatUsesChainlink(address,address,uint256)": {
        "params": {
          "_aggregator": "The asset's chainlink aggregator contract",
          "_asset": "The asset to store",
          "_stalePeriod": "The stale period"
        }
      },
      "addOrUpdateAssetThatUsesUniswapV2(address,address,uint256)": {
        "params": {
          "_asset": "The asset to store",
          "_stalePeriod": "The stale period",
          "_underlying": "The actual asset to get prices from (e.g. vsETH uses WETH)"
        }
      },
      "addOrUpdateAssetThatUsesUniswapV3(address,address)": {
        "details": "This function is also used for update a asset setup",
        "params": {
          "_asset": "The asset to store",
          "_underlying": "The actual asset to get prices from (e.g. vsETH uses WETH)"
        }
      },
      "addOrUpdateUsdAsset(address)": {
        "params": {
          "_asset": "The asset to store"
        }
      },
      "getPriceInUsd(address)": {
        "params": {
          "_asset": "The asset's to get price from"
        },
        "returns": {
          "_priceInUsd": "The amount in USD (18 decimals)"
        }
      },
      "setPriceProvider(uint8,address)": {
        "details": "This function is also used for update a price provider",
        "params": {
          "_priceProvider": "The price provider protocol",
          "_protocol": "The protocol"
        }
      },
      "sweep(address,address,uint256)": {
        "params": {
          "_amount": "The amount to send",
          "_to": "The recipient of the transfer",
          "_token": "The token to transfer"
        }
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner."
      },
      "update(address)": {
        "params": {
          "_asset": "The asset to update"
        }
      }
    },
    "title": "Oracle contract that encapsulates 3rd-party protocols' oracles",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetUpdated(address,uint8,address,bool,uint256)": {
        "notice": "Emitted when asset setup is updated"
      },
      "PriceProviderUpdated(uint8,address,address)": {
        "notice": "Emitted when a price provider is updated"
      }
    },
    "kind": "user",
    "methods": {
      "addOrUpdateAssetThatUsesChainlink(address,address,uint256)": {
        "notice": "Store an asset that uses Chainlink source of price"
      },
      "addOrUpdateAssetThatUsesUniswapV2(address,address,uint256)": {
        "notice": "Store an asset that uses UniswapV2 source of price"
      },
      "addOrUpdateAssetThatUsesUniswapV3(address,address)": {
        "notice": "Store an asset that uses UniswapV3 source of price"
      },
      "addOrUpdateUsdAsset(address)": {
        "notice": "Store an USD asset (no protocol)"
      },
      "assets(address)": {
        "notice": "Available assets"
      },
      "getPriceInUsd(address)": {
        "notice": "Get asset's USD price"
      },
      "providerByProtocol(uint8)": {
        "notice": "Get the price provider contract for each protocol"
      },
      "setPriceProvider(uint8,address)": {
        "notice": "Set the price provider of a protocol"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      },
      "update(address)": {
        "notice": "Update a asset's price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7131,
        "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7134,
        "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5950,
        "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5952,
        "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12897,
        "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
        "label": "assets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IERC20)7840,t_struct(Asset)12890_storage)"
      },
      {
        "astId": 12904,
        "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
        "label": "providerByProtocol",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(Protocol)12880,t_contract(IPriceProvider)11273)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)7840": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceProvider)11273": {
        "encoding": "inplace",
        "label": "contract IPriceProvider",
        "numberOfBytes": "20"
      },
      "t_enum(Protocol)12880": {
        "encoding": "inplace",
        "label": "enum DefaultOracle.Protocol",
        "numberOfBytes": "1"
      },
      "t_mapping(t_contract(IERC20)7840,t_struct(Asset)12890_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)7840",
        "label": "mapping(contract IERC20 => struct DefaultOracle.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)12890_storage"
      },
      "t_mapping(t_enum(Protocol)12880,t_contract(IPriceProvider)11273)": {
        "encoding": "mapping",
        "key": "t_enum(Protocol)12880",
        "label": "mapping(enum DefaultOracle.Protocol => contract IPriceProvider)",
        "numberOfBytes": "32",
        "value": "t_contract(IPriceProvider)11273"
      },
      "t_struct(Asset)12890_storage": {
        "encoding": "inplace",
        "label": "struct DefaultOracle.Asset",
        "members": [
          {
            "astId": 12883,
            "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
            "label": "protocol",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Protocol)12880"
          },
          {
            "astId": 12885,
            "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
            "label": "assetData",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12887,
            "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
            "label": "isUsd",
            "offset": 21,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12889,
            "contract": "contracts/oracle/DefaultOracle.sol:DefaultOracle",
            "label": "stalePeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}