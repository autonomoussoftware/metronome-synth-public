{
  "address": "0x96a11F928ca1cD5341fFAA773A97bec85C4acf31",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "DebtRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldInterestRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInterestRate",
          "type": "uint256"
        }
      ],
      "name": "InterestRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldActive",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newActive",
          "type": "bool"
        }
      ],
      "name": "SyntheticTokenActiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SyntheticTokenIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "contract IDebtToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "contract IController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "contract IDebtToken",
          "name": "_debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_interestRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTotalSupplyInUsd",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRatePerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "issue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalSupplyInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newInterestRate",
          "type": "uint256"
        }
      ],
      "name": "updateInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxTotalSupplyInUsd",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTotalSupplyInUsd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0b32188d1e0350f132bca27e4f33da0e3be2d1b3cc8361bd39bd03efa69615ec",
  "receipt": {
    "to": null,
    "from": "0xF5F5195cF6998c57C651f9f0bBFA7cFC72a6FaC1",
    "contractAddress": "0x96a11F928ca1cD5341fFAA773A97bec85C4acf31",
    "transactionIndex": 0,
    "gasUsed": "2531040",
    "logsBloom": "0x
    "blockHash": "0x7579e55726575c44ad6671ac54aa55893a4f29577c9f5e16a11e1b100165fc1f",
    "transactionHash": "0x0b32188d1e0350f132bca27e4f33da0e3be2d1b3cc8361bd39bd03efa69615ec",
    "logs": [],
    "blockNumber": 15251775,
    "cumulativeGasUsed": "2531040",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d8b118bc2b869f1cad3e67e355255d78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DebtRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldInterestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInterestRate\",\"type\":\"uint256\"}],\"name\":\"InterestRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newActive\",\"type\":\"bool\"}],\"name\":\"SyntheticTokenActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SyntheticTokenIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"SECONDS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IDebtToken\",\"name\":\"_debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalSupplyInUsd\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRatePerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupplyInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInterestRate\",\"type\":\"uint256\"}],\"name\":\"updateInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxTotalSupplyInUsd\",\"type\":\"uint256\"}],\"name\":\"updateMaxTotalSupplyInUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"burn(address,uint256)\":{\"params\":{\"_amount\":\"The amount to burn\",\"_from\":\"The account to burn from\"}},\"issue(uint256,address)\":{\"params\":{\"_amount\":\"The amount to mint\"}},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"The amount to mint\",\"_to\":\"The account to mint to\"}},\"repay(address,uint256)\":{\"details\":\"The msg.sender is the payer and the account beneficed\",\"params\":{\"_amount\":\"The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)\",\"_onBehalfOf\":\"The account that will have debt decreased\"}},\"setController(address)\":{\"params\":{\"_controller\":\"The new Controller contract\"}},\"sweep(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to send\",\"_to\":\"The recipient of the transfer\",\"_token\":\"The token to transfer\"}},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"updateMaxTotalSupplyInUsd(uint256)\":{\"params\":{\"_newMaxTotalSupplyInUsd\":\"The new max total supply (in USD)\"}}},\"title\":\"Synthetic Token contract\",\"version\":1},\"userdoc\":{\"events\":{\"DebtRepaid(address,address,uint256,uint256)\":{\"notice\":\"Emitted when synthetic's debt is repaid\"},\"InterestRateUpdated(uint256,uint256)\":{\"notice\":\"Emitted when interest rate is updated\"},\"MaxTotalSupplyUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max total supply is updated\"},\"SyntheticTokenActiveUpdated(bool,bool)\":{\"notice\":\"Emitted when active flag is updated\"},\"SyntheticTokenIssued(address,address,uint256,uint256)\":{\"notice\":\"Emitted when synthetic token is issued\"}},\"kind\":\"user\",\"methods\":{\"accrueInterest()\":{\"notice\":\"Accrue interest\"},\"burn(address,uint256)\":{\"notice\":\"Burn synthetic token\"},\"controller()\":{\"notice\":\"Controller contract\"},\"debtToken()\":{\"notice\":\"Non-transferable token that represents users' debts\"},\"interestRate()\":{\"notice\":\"Interest rate\"},\"isActive()\":{\"notice\":\"If a vsAsset isn't active, it disables minting new tokens\"},\"issue(uint256,address)\":{\"notice\":\"Lock collateral and mint synthetic token\"},\"mint(address,uint256)\":{\"notice\":\"Mint synthetic token\"},\"repay(address,uint256)\":{\"notice\":\"Send synthetic token to decrease debt\"},\"setController(address)\":{\"notice\":\"Update Controller contract\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"},\"toggleIsActive()\":{\"notice\":\"Enable/Disable the Synthetic Token\"},\"updateInterestRate(uint256)\":{\"notice\":\"Update interest rate (APR)\"},\"updateMaxTotalSupplyInUsd(uint256)\":{\"notice\":\"Update max total supply (in USD)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SyntheticToken.sol\":\"SyntheticToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/SyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"./access/Manageable.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./storage/SyntheticTokenStorage.sol\\\";\\n\\n/**\\n * @title Synthetic Token contract\\n */\\ncontract SyntheticToken is ReentrancyGuard, Manageable, SyntheticTokenStorageV1 {\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    uint256 public constant SECONDS_PER_YEAR = 365 days;\\n\\n    /// @notice Emitted when synthetic token is issued\\n    event SyntheticTokenIssued(address indexed account, address indexed to, uint256 amount, uint256 fee);\\n\\n    /// @notice Emitted when synthetic's debt is repaid\\n    event DebtRepaid(address indexed payer, address indexed account, uint256 amount, uint256 fee);\\n\\n    /**\\n     * @dev Throws if synthetic token doesn't exist\\n     */\\n    modifier onlyIfSyntheticTokenExists() {\\n        require(controller.isSyntheticTokenExists(this), \\\"synthetic-inexistent\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token isn't enabled\\n     */\\n    modifier onlyIfSyntheticTokenIsActive() {\\n        require(isActive, \\\"synthetic-inactive\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 _decimals,\\n        IController _controller,\\n        IDebtToken _debtToken,\\n        uint256 _interestRate,\\n        uint256 _maxTotalSupplyInUsd\\n    ) public initializer {\\n        require(address(_debtToken) != address(0), \\\"debt-token-is-null\\\");\\n        require(address(_controller) != address(0), \\\"controller-address-is-zero\\\");\\n\\n        __Manageable_init();\\n\\n        controller = _controller;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        debtToken = _debtToken;\\n        isActive = true;\\n        interestRate = _interestRate;\\n        maxTotalSupplyInUsd = _maxTotalSupplyInUsd;\\n    }\\n\\n    /// @notice Emitted when max total supply is updated\\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupply, uint256 newMaxTotalSupply);\\n\\n    /// @notice Emitted when active flag is updated\\n    event SyntheticTokenActiveUpdated(bool oldActive, bool newActive);\\n\\n    /// @notice Emitted when interest rate is updated\\n    event InterestRateUpdated(uint256 oldInterestRate, uint256 newInterestRate);\\n\\n    function interestRatePerSecond() external view virtual override returns (uint256) {\\n        return interestRate / SECONDS_PER_YEAR;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = allowance[sender][_msgSender()];\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"amount-exceeds-allowance\\\");\\n            unchecked {\\n                _approve(sender, _msgSender(), currentAllowance - amount);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        uint256 currentAllowance = allowance[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"decreased-allowance-below-zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        require(sender != address(0), \\\"transfer-from-the-zero-address\\\");\\n        require(recipient != address(0), \\\"transfer-to-the-zero-address\\\");\\n\\n        uint256 senderBalance = balanceOf[sender];\\n        require(senderBalance >= amount, \\\"transfer-amount-exceeds-balance\\\");\\n        unchecked {\\n            balanceOf[sender] = senderBalance - amount;\\n        }\\n        balanceOf[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) private onlyIfSyntheticTokenIsActive {\\n        require(account != address(0), \\\"mint-to-the-zero-address\\\");\\n        uint256 _newTotalSupplyInUsd = controller.masterOracle().quoteTokenToUsd(this, totalSupply + amount);\\n        require(_newTotalSupplyInUsd <= maxTotalSupplyInUsd, \\\"surpass-max-total-supply\\\");\\n\\n        totalSupply += amount;\\n        balanceOf[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) private {\\n        require(account != address(0), \\\"burn-from-the-zero-address\\\");\\n\\n        uint256 accountBalance = balanceOf[account];\\n        require(accountBalance >= amount, \\\"burn-amount-exceeds-balance\\\");\\n        unchecked {\\n            balanceOf[account] = accountBalance - amount;\\n        }\\n        totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner != address(0), \\\"approve-from-the-zero-address\\\");\\n        require(spender != address(0), \\\"approve-to-the-zero-address\\\");\\n\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Lock collateral and mint synthetic token\\n     * @param _amount The amount to mint\\n     */\\n    function issue(uint256 _amount, address _to)\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfSyntheticTokenExists\\n        onlyIfSyntheticTokenIsActive\\n    {\\n        require(_amount > 0, \\\"amount-is-zero\\\");\\n\\n        address _account = _msgSender();\\n\\n        accrueInterest();\\n\\n        (, , , , uint256 _issuableInUsd) = controller.debtPositionOf(_account);\\n\\n        IMasterOracle _masterOracle = controller.masterOracle();\\n\\n        require(_amount <= _masterOracle.quoteUsdToToken(this, _issuableInUsd), \\\"not-enough-collateral\\\");\\n\\n        uint256 _debtFloorInUsd = controller.debtFloorInUsd();\\n\\n        if (_debtFloorInUsd > 0) {\\n            require(\\n                _masterOracle.quoteTokenToUsd(this, debtToken.balanceOf(_account) + _amount) >= _debtFloorInUsd,\\n                \\\"debt-lt-floor\\\"\\n            );\\n        }\\n\\n        uint256 _issueFee = controller.issueFee();\\n        uint256 _amountToIssue = _amount;\\n        uint256 _feeAmount;\\n        if (_issueFee > 0) {\\n            _feeAmount = _amount.wadMul(_issueFee);\\n            _mint(address(controller.treasury()), _feeAmount);\\n            _amountToIssue -= _feeAmount;\\n        }\\n\\n        _mint(_to, _amountToIssue);\\n        debtToken.mint(_account, _amount);\\n\\n        emit SyntheticTokenIssued(_account, _to, _amount, _feeAmount);\\n    }\\n\\n    /**\\n     * @notice Send synthetic token to decrease debt\\n     * @dev The msg.sender is the payer and the account beneficed\\n     * @param _onBehalfOf The account that will have debt decreased\\n     * @param _amount The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)\\n     */\\n    function repay(address _onBehalfOf, uint256 _amount) external override whenNotShutdown nonReentrant {\\n        require(_amount > 0, \\\"amount-is-zero\\\");\\n\\n        accrueInterest();\\n\\n        address _payer = _msgSender();\\n\\n        uint256 _repayFee = controller.repayFee();\\n        uint256 _amountToRepay = _amount;\\n        uint256 _feeAmount;\\n        if (_repayFee > 0) {\\n            // Note: `_amountToRepay = _amount - repayFeeAmount`\\n            _amountToRepay = _amount.wadDiv(1e18 + _repayFee);\\n            _feeAmount = _amount - _amountToRepay;\\n            _transfer(_payer, address(controller.treasury()), _feeAmount);\\n        }\\n\\n        uint256 _debtFloorInUsd = controller.debtFloorInUsd();\\n\\n        if (_debtFloorInUsd > 0) {\\n            uint256 _newDebtInUsd = controller.masterOracle().quoteTokenToUsd(\\n                this,\\n                debtToken.balanceOf(_onBehalfOf) - _amountToRepay\\n            );\\n            require(_newDebtInUsd == 0 || _newDebtInUsd >= _debtFloorInUsd, \\\"debt-lt-floor\\\");\\n        }\\n\\n        _burn(_payer, _amountToRepay);\\n        debtToken.burn(_onBehalfOf, _amountToRepay);\\n\\n        emit DebtRepaid(_payer, _onBehalfOf, _amount, _feeAmount);\\n    }\\n\\n    /**\\n     * @notice Mint synthetic token\\n     * @param _to The account to mint to\\n     * @param _amount The amount to mint\\n     */\\n    function mint(address _to, uint256 _amount) external override onlyController {\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn synthetic token\\n     * @param _from The account to burn from\\n     * @param _amount The amount to burn\\n     */\\n    function burn(address _from, uint256 _amount) external override onlyController {\\n        _burn(_from, _amount);\\n    }\\n\\n    /**\\n     * @notice Update max total supply (in USD)\\n     * @param _newMaxTotalSupplyInUsd The new max total supply (in USD)\\n     */\\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupplyInUsd) external override onlyGovernor {\\n        uint256 _currentMaxTotalSupplyInUsd = maxTotalSupplyInUsd;\\n        require(_newMaxTotalSupplyInUsd != _currentMaxTotalSupplyInUsd, \\\"new-same-as-current\\\");\\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupplyInUsd, _newMaxTotalSupplyInUsd);\\n        maxTotalSupplyInUsd = _newMaxTotalSupplyInUsd;\\n    }\\n\\n    /**\\n     * @notice Enable/Disable the Synthetic Token\\n     */\\n    function toggleIsActive() external override onlyGovernor {\\n        bool _isActive = isActive;\\n        emit SyntheticTokenActiveUpdated(_isActive, !_isActive);\\n        isActive = !_isActive;\\n    }\\n\\n    /**\\n     * @notice Update interest rate (APR)\\n     */\\n    function updateInterestRate(uint256 _newInterestRate) external onlyGovernor {\\n        accrueInterest();\\n        uint256 _currentInterestRate = interestRate;\\n        require(_newInterestRate != _currentInterestRate, \\\"new-same-as-current\\\");\\n        emit InterestRateUpdated(_currentInterestRate, _newInterestRate);\\n        interestRate = _newInterestRate;\\n    }\\n\\n    /**\\n     * @notice Accrue interest\\n     */\\n    function accrueInterest() public {\\n        uint256 _interestAmountAccrued = debtToken.accrueInterest();\\n\\n        if (_interestAmountAccrued > 0) {\\n            // Note: We can save some gas by incrementing only and mint all accrued amount later\\n            _mint(address(controller.treasury()), _interestAmountAccrued);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x857fb256247ccfc04d5b2972a9211cc2c2e9718613df29d18a55b90c4985a14d\",\"license\":\"MIT\"},\"contracts/access/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/TokenHolder.sol\\\";\\nimport \\\"../interface/IGovernable.sol\\\";\\nimport \\\"../interface/IController.sol\\\";\\n\\n/**\\n * @title Reusable contract that handles accesses\\n */\\nabstract contract Manageable is Context, TokenHolder, Initializable {\\n    /**\\n     * @notice Controller contract\\n     */\\n    IController public controller;\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Manageable_init() internal initializer {}\\n\\n    /**\\n     * @notice Requires that the caller is the Controller contract\\n     */\\n    modifier onlyController() {\\n        require(_msgSender() == address(controller), \\\"not-controller\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Requires that the caller is the Controller contract\\n     */\\n    modifier onlyGovernor() {\\n        require(_msgSender() == governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!controller.paused(), \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotShutdown() {\\n        require(!controller.everythingStopped(), \\\"not-shutdown\\\");\\n        _;\\n    }\\n\\n    function governor() public view returns (address _governor) {\\n        _governor = IGovernable(address(controller)).governor();\\n    }\\n\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    /**\\n     * @notice Update Controller contract\\n     * @param _controller The new Controller contract\\n     */\\n    function setController(IController _controller) external onlyGovernor {\\n        require(address(_controller) != address(0), \\\"new-controller-address-is-zero\\\");\\n        controller = _controller;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4c5748261dc442194c4de6d8039648df01ecc0689f233a319e4f0a4c48532038\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xc790f8419ee2c68721d6203ed1b5f81e89eb7e1dca19be3a9f54cb5de44491f1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/interface/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./oracle/IMasterOracle.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\n\\n/**\\n * @notice Controller interface\\n */\\ninterface IController is IPausable {\\n    function debtFloorInUsd() external returns (uint256);\\n\\n    function depositFee() external returns (uint256);\\n\\n    function issueFee() external returns (uint256);\\n\\n    function withdrawFee() external returns (uint256);\\n\\n    function repayFee() external returns (uint256);\\n\\n    function isSyntheticTokenExists(ISyntheticToken _syntheticToken) external view returns (bool);\\n\\n    function isDepositTokenExists(IDepositToken _depositToken) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 _underlying) external view returns (IDepositToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getSyntheticTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n\\n    function debtOf(address _account) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address _account) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(address _account)\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function addSyntheticToken(address _synthetic) external;\\n\\n    function removeSyntheticToken(ISyntheticToken _synthetic) external;\\n\\n    function addDepositToken(address _depositToken) external;\\n\\n    function removeDepositToken(IDepositToken _depositToken) external;\\n\\n    function liquidate(\\n        ISyntheticToken _syntheticToken,\\n        address _account,\\n        uint256 _amountToRepay,\\n        IDepositToken _depositToken\\n    ) external;\\n\\n    function swap(\\n        ISyntheticToken _syntheticTokenIn,\\n        ISyntheticToken _syntheticTokenOut,\\n        uint256 _amountIn\\n    ) external returns (uint256 _amountOut);\\n\\n    function updateMasterOracle(IMasterOracle _newOracle) external;\\n\\n    function updateDebtFloor(uint256 _newDebtFloorInUsd) external;\\n\\n    function updateDepositFee(uint256 _newDepositFee) external;\\n\\n    function updateIssueFee(uint256 _newIssueFee) external;\\n\\n    function updateWithdrawFee(uint256 _newWithdrawFee) external;\\n\\n    function updateRepayFee(uint256 _newRepayFee) external;\\n\\n    function updateSwapFee(uint256 _newSwapFee) external;\\n\\n    function updateLiquidatorLiquidationFee(uint256 _newLiquidatorLiquidationFee) external;\\n\\n    function updateProtocolLiquidationFee(uint256 _newProtocolLiquidationFee) external;\\n\\n    function updateMaxLiquidable(uint256 _newMaxLiquidable) external;\\n\\n    function updateTreasury(ITreasury _newTreasury, bool _withMigration) external;\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function addToDepositTokensOfAccount(address _account) external;\\n\\n    function removeFromDepositTokensOfAccount(address _account) external;\\n\\n    function addToDebtTokensOfAccount(address _account) external;\\n\\n    function removeFromDebtTokensOfAccount(address _account) external;\\n\\n    function getDepositTokensOfAccount(address _account) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address _account) external view returns (address[] memory);\\n\\n    function addRewardsDistributor(IRewardsDistributor _distributor) external;\\n}\\n\",\"keccak256\":\"0x312e1166c4aea80d5c402933d1828167bff1abd4836b70375a79956c4ef771dd\",\"license\":\"MIT\"},\"contracts/interface/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external returns (uint256 _interestAmountAccrued);\\n\\n    function debtIndex() external returns (uint256 _debtIndex);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x52995b704e1b38d0df3b312386c8ab25bbb63a3fd404dd53882cc8c6640fcd40\",\"license\":\"MIT\"},\"contracts/interface/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralizationRatio() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address _account) external view returns (uint256);\\n\\n    function lockedBalanceOf(address _account) external view returns (uint256);\\n\\n    function minDepositTime() external view returns (uint256);\\n\\n    function lastDepositOf(address _account) external view returns (uint256);\\n\\n    function deposit(uint256 _amount, address _onBehalfOf) external;\\n\\n    function withdraw(uint256 _amount, address _to) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function seize(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function updateCollateralizationRatio(uint128 _newCollateralizationRatio) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupplyInUsd() external view returns (uint256);\\n\\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupplyInUsd) external;\\n}\\n\",\"keccak256\":\"0x407a65fba2b513ae968e2a9df7338d619bf536cae66d2a0d8cc5cd013028390f\",\"license\":\"MIT\"},\"contracts/interface/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interface/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPausable {\\n    function paused() external returns (bool);\\n\\n    function everythingStopped() external returns (bool);\\n}\\n\",\"keccak256\":\"0x08d873c08ae95c72f876f933478433bc30eb733925944e04969083ce12fce855\",\"license\":\"MIT\"},\"contracts/interface/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 _token) external view returns (uint256);\\n\\n    function tokensAccruedOf(address _account) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 _token, address _account) external;\\n\\n    function updateBeforeTransfer(\\n        IERC20 _token,\\n        address _from,\\n        address _to\\n    ) external;\\n\\n    function claimRewards(address _account) external;\\n\\n    function claimRewards(address _account, IERC20[] memory _tokens) external;\\n\\n    function claimRewards(address[] memory _accounts, IERC20[] memory _tokens) external;\\n}\\n\",\"keccak256\":\"0x95f3e703f532261a857d6b3734d240cc625ce6a18a9e5bd4f40e41f72996c530\",\"license\":\"MIT\"},\"contracts/interface/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function maxTotalSupplyInUsd() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function mint(address _to, uint256 amount) external;\\n\\n    function burn(address _from, uint256 amount) external;\\n\\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupply) external;\\n\\n    function toggleIsActive() external;\\n\\n    function updateInterestRate(uint256 _newInterestRate) external;\\n\\n    function issue(uint256 _amount, address _to) external;\\n\\n    function repay(address _onBehalfOf, uint256 _amount) external;\\n\\n    function accrueInterest() external;\\n}\\n\",\"keccak256\":\"0xe8cad6047ced36a24abe7246849b2a787e8586d4312569d1f15997c898ea320a\",\"license\":\"MIT\"},\"contracts/interface/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address _to, uint256 _amount) external;\\n\\n    function migrateTo(address _newTreasury) external;\\n}\\n\",\"keccak256\":\"0x06e75dc8161f246f43a22c1167cdc22b9eee6bc59ad378d813278a5fe95b5c42\",\"license\":\"MIT\"},\"contracts/interface/oracle/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(IERC20 _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(IERC20 _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(\\n        IERC20 _assetIn,\\n        IERC20 _assetOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xf250e3b49704c620bbe6e5fd8cf2f82f52adc6c25cd4baac6be669165b86b8ff\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     */\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_RAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     */\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * RAY + b / 2) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     */\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        return ((WAD_RAY_RATIO / 2) + a) / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     */\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a * WAD_RAY_RATIO;\\n    }\\n}\\n\",\"keccak256\":\"0xe338023e9d06145105bf9676436029c27551454b11b67cbc4188df9a270b51af\",\"license\":\"MIT\"},\"contracts/storage/SyntheticTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interface/ISyntheticToken.sol\\\";\\nimport \\\"../interface/IDebtToken.sol\\\";\\n\\nabstract contract SyntheticTokenStorageV1 is ISyntheticToken {\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    string public name;\\n    string public symbol;\\n\\n    uint256 public totalSupply;\\n    uint256 public maxTotalSupplyInUsd;\\n\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Non-transferable token that represents users' debts\\n     */\\n    IDebtToken public debtToken;\\n\\n    /**\\n     * @notice If a vsAsset isn't active, it disables minting new tokens\\n     */\\n    bool public isActive;\\n\\n    /**\\n     * @notice Interest rate\\n     * @dev Use 0.1e18 for 10% APR\\n     */\\n    uint256 public interestRate;\\n}\\n\",\"keccak256\":\"0x38e6f537d4b44594f2dcd025afe7c856a192f9300c106344c91f5fbc280c26f5\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     */\\n    function _requireCanSweep() internal view virtual;\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param _token The token to transfer\\n     * @param _to The recipient of the transfer\\n     * @param _amount The amount to send\\n     */\\n    function sweep(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external {\\n        _requireCanSweep();\\n\\n        if (address(_token) == address(0)) {\\n            Address.sendValue(payable(_to), _amount);\\n        } else {\\n            _token.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert(\\\"receive-not-allowed\\\");\\n    }\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert(\\\"fallback-not-allowed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x45fed62204599ac0c9bed76de4ce8b6b070d96d548e029ce1f9f2d0c7c87a99d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612cd5806100206000396000f3fe60806040526004361061019c5760003560e01c80637c48da96116100e2578063b696a6ad11610085578063b696a6ad1461050b578063d25933291461052b578063dd62ed3e14610540578063e6a69ab814610578578063f77c479114610590578063f8d89898146105b0578063f9bd04e4146105d5578063ffa1ad74146105f5576101e4565b80637c48da961461042c57806392eefe9b1461044c57806395d89b411461046c5780639cc820da146104815780639dc29fac14610496578063a457c2d7146104b6578063a6afed95146104d6578063a9059cbb146104eb576101e4565b8063313ce5671161014a578063313ce56714610327578063395093511461035357806340c10f19146103735780634dac56501461039357806362c06767146103a957806370a08231146103c9578063752a50a6146103f65780637c3a00fd14610416576101e4565b806306fdde0314610223578063095ea7b31461024e5780630c340a241461027e57806318160ddd146102a057806322867d78146102c457806322f3e2d4146102e657806323b872dd14610307576101e4565b366101e45760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b60448201526064016101db565b34801561022f57600080fd5b50610238610626565b60405161024591906126cd565b60405180910390f35b34801561025a57600080fd5b5061026e610269366004612715565b6106b4565b6040519015158152602001610245565b34801561028a57600080fd5b506102936106cb565b6040516102459190612741565b3480156102ac57600080fd5b506102b660385481565b604051908152602001610245565b3480156102d057600080fd5b506102e46102df366004612715565b61074d565b005b3480156102f257600080fd5b50603a5461026e90600160a81b900460ff1681565b34801561031357600080fd5b5061026e610322366004612755565b610c96565b34801561033357600080fd5b50603a546103419060ff1681565b60405160ff9091168152602001610245565b34801561035f57600080fd5b5061026e61036e366004612715565b610d35565b34801561037f57600080fd5b506102e461038e366004612715565b610d71565b34801561039f57600080fd5b506102b660395481565b3480156103b557600080fd5b506102e46103c4366004612755565b610db2565b3480156103d557600080fd5b506102b66103e4366004612796565b60346020526000908152604090205481565b34801561040257600080fd5b506102e46104113660046127b3565b610deb565b34801561042257600080fd5b506102b6603b5481565b34801561043857600080fd5b506102e4610447366004612825565b610e8d565b34801561045857600080fd5b506102e4610467366004612796565b611020565b34801561047857600080fd5b506102386110d0565b34801561048d57600080fd5b506102b66110dd565b3480156104a257600080fd5b506102e46104b1366004612715565b6110f1565b3480156104c257600080fd5b5061026e6104d1366004612715565b61112e565b3480156104e257600080fd5b506102e46111b9565b3480156104f757600080fd5b5061026e610506366004612715565b6112d2565b34801561051757600080fd5b506102e46105263660046128e2565b6112df565b34801561053757600080fd5b506102e4611a03565b34801561054c57600080fd5b506102b661055b366004612912565b603560209081526000928352604080842090915290825290205481565b34801561058457600080fd5b506102b66301e1338081565b34801561059c57600080fd5b50600254610293906001600160a01b031681565b3480156105bc57600080fd5b50603a546102939061010090046001600160a01b031681565b3480156105e157600080fd5b506102e46105f03660046127b3565b611a9f565b34801561060157600080fd5b50610238604051806040016040528060058152602001640312e302e360dc1b81525081565b6036805461063390612940565b80601f016020809104026020016040519081016040528092919081815260200182805461065f90612940565b80156106ac5780601f10610681576101008083540402835291602001916106ac565b820191906000526020600020905b81548152906001019060200180831161068f57829003601f168201915b505050505081565b60006106c1338484611b39565b5060015b92915050565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b15801561071057600080fd5b505afa158015610724573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610748919061297b565b905090565b600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d591906129a8565b156107f25760405162461bcd60e51b81526004016101db906129c3565b600260015414156108155760405162461bcd60e51b81526004016101db906129e9565b6002600155806108375760405162461bcd60e51b81526004016101db90612a20565b61083f6111b9565b60025460408051631f03d67d60e21b8152905133926000926001600160a01b0390911691637c0f59f49160048082019260209290919082900301818787803b15801561088a57600080fd5b505af115801561089e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c29190612a48565b90508260008215610987576108e96108e284670de0b6b3a7640000612a77565b8690611c47565b91506108f58286612a8f565b905061098784600260009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561094957600080fd5b505afa15801561095d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610981919061297b565b83611c7b565b6002546040805163f609280960e01b815290516000926001600160a01b03169163f609280991600480830192602092919082900301818787803b1580156109cd57600080fd5b505af11580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a059190612a48565b90508015610bcf5760025460408051637556d1c160e11b815290516000926001600160a01b03169163eaada382916004808301926020929190829003018186803b158015610a5257600080fd5b505afa158015610a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8a919061297b565b6001600160a01b0316638d0dba003086603a60019054906101000a90046001600160a01b03166001600160a01b03166370a082318d6040518263ffffffff1660e01b8152600401610adb9190612741565b60206040518083038186803b158015610af357600080fd5b505afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b9190612a48565b610b359190612a8f565b6040518363ffffffff1660e01b8152600401610b52929190612aa6565b60206040518083038186803b158015610b6a57600080fd5b505afa158015610b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba29190612a48565b9050801580610bb15750818110155b610bcd5760405162461bcd60e51b81526004016101db90612abf565b505b610bd98584611e0f565b603a54604051632770a7eb60e21b81526101009091046001600160a01b031690639dc29fac90610c0f908a908790600401612aa6565b600060405180830381600087803b158015610c2957600080fd5b505af1158015610c3d573d6000803e3d6000fd5b505060408051898152602081018690526001600160a01b03808c169450891692507fb2828294ad940d9ae096e368b4f878a8dabf30da36ce9dca5f5ad8eaf6ed052a910160405180910390a35050600180555050505050565b6000610ca3848484611c7b565b6001600160a01b03841660009081526035602090815260408083203384529091529020546000198114610d285782811015610d1b5760405162461bcd60e51b8152602060048201526018602482015277616d6f756e742d657863656564732d616c6c6f77616e636560401b60448201526064016101db565b610d288533858403611b39565b60019150505b9392505050565b3360008181526035602090815260408083206001600160a01b038716845290915281205490916106c1918590610d6c908690612a77565b611b39565b6002546001600160a01b0316336001600160a01b031614610da45760405162461bcd60e51b81526004016101db90612ae6565b610dae8282611f2e565b5050565b610dba61216e565b6001600160a01b038316610dd757610dd282826121a8565b505050565b610dd26001600160a01b03841683836122c1565b610df36106cb565b6001600160a01b0316336001600160a01b031614610e235760405162461bcd60e51b81526004016101db90612b0e565b610e2b6111b9565b603b5481811415610e4e5760405162461bcd60e51b81526004016101db90612b34565b60408051828152602081018490527f41e376fd99913dea7fda140f5c0bd997515b1a181acc58737320322548ec6e72910160405180910390a150603b55565b600054610100900460ff1680610ea6575060005460ff16155b610ec25760405162461bcd60e51b81526004016101db90612b61565b600054610100900460ff16158015610ee4576000805461ffff19166101011790555b6001600160a01b038416610f2f5760405162461bcd60e51b81526020600482015260126024820152711919589d0b5d1bdad95b8b5a5ccb5b9d5b1b60721b60448201526064016101db565b6001600160a01b038516610f855760405162461bcd60e51b815260206004820152601a60248201527f636f6e74726f6c6c65722d616464726573732d69732d7a65726f00000000000060448201526064016101db565b610f8d612317565b600280546001600160a01b0319166001600160a01b038716179055610fb460368b8b612604565b50610fc160378989612604565b50603a805460ff60a81b196001600160a01b038716610100026001600160a81b031990921660ff8a16179190911716600160a81b179055603b83905560398290558015611014576000805461ff00191690555b50505050505050505050565b6110286106cb565b6001600160a01b0316336001600160a01b0316146110585760405162461bcd60e51b81526004016101db90612b0e565b6001600160a01b0381166110ae5760405162461bcd60e51b815260206004820152601e60248201527f6e65772d636f6e74726f6c6c65722d616464726573732d69732d7a65726f000060448201526064016101db565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6037805461063390612940565b60006301e13380603b546107489190612baf565b6002546001600160a01b0316336001600160a01b0316146111245760405162461bcd60e51b81526004016101db90612ae6565b610dae8282611e0f565b3360009081526035602090815260408083206001600160a01b0386168452909152812054828110156111a25760405162461bcd60e51b815260206004820152601e60248201527f6465637265617365642d616c6c6f77616e63652d62656c6f772d7a65726f000060448201526064016101db565b6111af3385858403611b39565b5060019392505050565b6000603a60019054906101000a90046001600160a01b03166001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561120b57600080fd5b505af115801561121f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112439190612a48565b905080156112cf57600254604080516361d027b360e01b815290516112cf926001600160a01b0316916361d027b3916004808301926020929190829003018186803b15801561129157600080fd5b505afa1580156112a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c9919061297b565b82611f2e565b50565b60006106c1338484611c7b565b600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561132f57600080fd5b505af1158015611343573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136791906129a8565b156113845760405162461bcd60e51b81526004016101db906129c3565b600260015414156113a75760405162461bcd60e51b81526004016101db906129e9565b60026001819055546040516309bf6ca360e31b81526001600160a01b0390911690634dfb6518906113dc903090600401612741565b60206040518083038186803b1580156113f457600080fd5b505afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c91906129a8565b61146f5760405162461bcd60e51b81526020600482015260146024820152731cde5b9d1a195d1a58cb5a5b995e1a5cdd195b9d60621b60448201526064016101db565b603a54600160a81b900460ff166114985760405162461bcd60e51b81526004016101db90612bd1565b600082116114b85760405162461bcd60e51b81526004016101db90612a20565b336114c16111b9565b60025460405163dde3ab9560e01b81526000916001600160a01b03169063dde3ab95906114f2908590600401612741565b60a06040518083038186803b15801561150a57600080fd5b505afa15801561151e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115429190612bfd565b9450505050506000600260009054906101000a90046001600160a01b03166001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b15801561159857600080fd5b505afa1580156115ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d0919061297b565b60405163b5e9bef560e01b81529091506001600160a01b0382169063b5e9bef5906116019030908690600401612aa6565b60206040518083038186803b15801561161957600080fd5b505afa15801561162d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116519190612a48565b8511156116985760405162461bcd60e51b81526020600482015260156024820152741b9bdd0b595b9bdd59da0b58dbdb1b185d195c985b605a1b60448201526064016101db565b6002546040805163f609280960e01b815290516000926001600160a01b03169163f609280991600480830192602092919082900301818787803b1580156116de57600080fd5b505af11580156116f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117169190612a48565b9050801561184757603a546040516370a0823160e01b815282916001600160a01b0380861692638d0dba009230928c9261010090920416906370a0823190611762908c90600401612741565b60206040518083038186803b15801561177a57600080fd5b505afa15801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b29190612a48565b6117bc9190612a77565b6040518363ffffffff1660e01b81526004016117d9929190612aa6565b60206040518083038186803b1580156117f157600080fd5b505afa158015611805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118299190612a48565b10156118475760405162461bcd60e51b81526004016101db90612abf565b60025460408051632a9133c160e01b815290516000926001600160a01b031691632a9133c191600480830192602092919082900301818787803b15801561188d57600080fd5b505af11580156118a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c59190612a48565b9050866000821561193a576118da8984612382565b905061192d600260009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561129157600080fd5b6119378183612a8f565b91505b6119448883611f2e565b603a546040516340c10f1960e01b81526101009091046001600160a01b0316906340c10f199061197a908a908d90600401612aa6565b600060405180830381600087803b15801561199457600080fd5b505af11580156119a8573d6000803e3d6000fd5b5050604080518c8152602081018590526001600160a01b03808d1694508b1692507f8ed56bdcd59d676b8a4feb74d858ffa2bc47f80b291f9df3ced2fad3d953f798910160405180910390a350506001805550505050505050565b611a0b6106cb565b6001600160a01b0316336001600160a01b031614611a3b5760405162461bcd60e51b81526004016101db90612b0e565b603a5460408051600160a81b90920460ff168015801584526020840152917fcaaaa88cc2414229e1aa662e7856f1b8601c703e3c21beb1b894b5fe2a3a6f2e910160405180910390a1603a805460ff60a81b19169115600160a81b02919091179055565b611aa76106cb565b6001600160a01b0316336001600160a01b031614611ad75760405162461bcd60e51b81526004016101db90612b0e565b60395481811415611afa5760405162461bcd60e51b81526004016101db90612b34565b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603955565b6001600160a01b038316611b8f5760405162461bcd60e51b815260206004820152601d60248201527f617070726f76652d66726f6d2d7468652d7a65726f2d6164647265737300000060448201526064016101db565b6001600160a01b038216611be55760405162461bcd60e51b815260206004820152601b60248201527f617070726f76652d746f2d7468652d7a65726f2d61646472657373000000000060448201526064016101db565b6001600160a01b0383811660008181526035602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600081611c55600282612baf565b611c67670de0b6b3a764000086612c44565b611c719190612a77565b610d2e9190612baf565b6001600160a01b038316611cd15760405162461bcd60e51b815260206004820152601e60248201527f7472616e736665722d66726f6d2d7468652d7a65726f2d61646472657373000060448201526064016101db565b6001600160a01b038216611d275760405162461bcd60e51b815260206004820152601c60248201527f7472616e736665722d746f2d7468652d7a65726f2d616464726573730000000060448201526064016101db565b6001600160a01b03831660009081526034602052604090205481811015611d905760405162461bcd60e51b815260206004820152601f60248201527f7472616e736665722d616d6f756e742d657863656564732d62616c616e63650060448201526064016101db565b6001600160a01b03808516600090815260346020526040808220858503905591851681529081208054849290611dc7908490612a77565b92505081905550826001600160a01b0316846001600160a01b0316600080516020612c8083398151915284604051611e0191815260200190565b60405180910390a350505050565b6001600160a01b038216611e655760405162461bcd60e51b815260206004820152601a60248201527f6275726e2d66726f6d2d7468652d7a65726f2d6164647265737300000000000060448201526064016101db565b6001600160a01b03821660009081526034602052604090205481811015611ece5760405162461bcd60e51b815260206004820152601b60248201527f6275726e2d616d6f756e742d657863656564732d62616c616e6365000000000060448201526064016101db565b6001600160a01b0383166000908152603460205260408120838303905560388054849290611efd908490612a8f565b90915550506040518281526000906001600160a01b03851690600080516020612c8083398151915290602001611c3a565b603a54600160a81b900460ff16611f575760405162461bcd60e51b81526004016101db90612bd1565b6001600160a01b038216611fa85760405162461bcd60e51b81526020600482015260186024820152776d696e742d746f2d7468652d7a65726f2d6164647265737360401b60448201526064016101db565b60025460408051637556d1c160e11b815290516000926001600160a01b03169163eaada382916004808301926020929190829003018186803b158015611fed57600080fd5b505afa158015612001573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612025919061297b565b6001600160a01b0316638d0dba0030846038546120429190612a77565b6040518363ffffffff1660e01b815260040161205f929190612aa6565b60206040518083038186803b15801561207757600080fd5b505afa15801561208b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120af9190612a48565b90506039548111156120fe5760405162461bcd60e51b8152602060048201526018602482015277737572706173732d6d61782d746f74616c2d737570706c7960401b60448201526064016101db565b81603860008282546121109190612a77565b90915550506001600160a01b0383166000908152603460205260408120805484929061213d908490612a77565b90915550506040518281526001600160a01b03841690600090600080516020612c8083398151915290602001611c3a565b6121766106cb565b6001600160a01b0316336001600160a01b0316146121a65760405162461bcd60e51b81526004016101db90612b0e565b565b804710156121f85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016101db565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612245576040519150601f19603f3d011682016040523d82523d6000602084013e61224a565b606091505b5050905080610dd25760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016101db565b610dd28363a9059cbb60e01b84846040516024016122e0929190612aa6565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526123ba565b600054610100900460ff1680612330575060005460ff16155b61234c5760405162461bcd60e51b81526004016101db90612b61565b600054610100900460ff1615801561236e576000805461ffff19166101011790555b80156112cf576000805461ff001916905550565b600082158061238f575081155b1561239c575060006106c5565b670de0b6b3a76400006123b0600282612baf565b611c678486612c44565b600061240f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661248c9092919063ffffffff16565b805190915015610dd2578080602001905181019061242d91906129a8565b610dd25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101db565b606061249b84846000856124a3565b949350505050565b6060824710156125045760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101db565b843b6125525760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101db565b600080866001600160a01b0316858760405161256e9190612c63565b60006040518083038185875af1925050503d80600081146125ab576040519150601f19603f3d011682016040523d82523d6000602084013e6125b0565b606091505b50915091506125c08282866125cb565b979650505050505050565b606083156125da575081610d2e565b8251156125ea5782518084602001fd5b8160405162461bcd60e51b81526004016101db91906126cd565b82805461261090612940565b90600052602060002090601f0160209004810192826126325760008555612678565b82601f1061264b5782800160ff19823516178555612678565b82800160010185558215612678579182015b8281111561267857823582559160200191906001019061265d565b50612684929150612688565b5090565b5b808211156126845760008155600101612689565b60005b838110156126b85781810151838201526020016126a0565b838111156126c7576000848401525b50505050565b60208152600082518060208401526126ec81604085016020870161269d565b601f01601f19169190910160400192915050565b6001600160a01b03811681146112cf57600080fd5b6000806040838503121561272857600080fd5b823561273381612700565b946020939093013593505050565b6001600160a01b0391909116815260200190565b60008060006060848603121561276a57600080fd5b833561277581612700565b9250602084013561278581612700565b929592945050506040919091013590565b6000602082840312156127a857600080fd5b8135610d2e81612700565b6000602082840312156127c557600080fd5b5035919050565b60008083601f8401126127de57600080fd5b50813567ffffffffffffffff8111156127f657600080fd5b60208301915083602082850101111561280e57600080fd5b9250929050565b803561282081612700565b919050565b600080600080600080600080600060e08a8c03121561284357600080fd5b893567ffffffffffffffff8082111561285b57600080fd5b6128678d838e016127cc565b909b50995060208c013591508082111561288057600080fd5b5061288d8c828d016127cc565b90985096505060408a013560ff811681146128a757600080fd5b945060608a01356128b781612700565b93506128c560808b01612815565b925060a08a0135915060c08a013590509295985092959850929598565b600080604083850312156128f557600080fd5b82359150602083013561290781612700565b809150509250929050565b6000806040838503121561292557600080fd5b823561293081612700565b9150602083013561290781612700565b600181811c9082168061295457607f821691505b6020821081141561297557634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561298d57600080fd5b8151610d2e81612700565b8051801515811461282057600080fd5b6000602082840312156129ba57600080fd5b610d2e82612998565b6020808252600c908201526b3737ba16b9b43aba3237bbb760a11b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600e908201526d616d6f756e742d69732d7a65726f60901b604082015260600190565b600060208284031215612a5a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612a8a57612a8a612a61565b500190565b600082821015612aa157612aa1612a61565b500390565b6001600160a01b03929092168252602082015260400190565b6020808252600d908201526c3232b13a16b63a16b33637b7b960991b604082015260600190565b6020808252600e908201526d3737ba16b1b7b73a3937b63632b960911b604082015260600190565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b6020808252601390820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082612bcc57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526012908201527173796e7468657469632d696e61637469766560701b604082015260600190565b600080600080600060a08688031215612c1557600080fd5b612c1e86612998565b602087015160408801516060890151608090990151929a91995097965090945092505050565b6000816000190483118215151615612c5e57612c5e612a61565b500290565b60008251612c7581846020870161269d565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212209c6a08fa59b318dd795e1b476a63b8f46c987af68e8300dec6e1fc8fda493b1264736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80637c48da96116100e2578063b696a6ad11610085578063b696a6ad1461050b578063d25933291461052b578063dd62ed3e14610540578063e6a69ab814610578578063f77c479114610590578063f8d89898146105b0578063f9bd04e4146105d5578063ffa1ad74146105f5576101e4565b80637c48da961461042c57806392eefe9b1461044c57806395d89b411461046c5780639cc820da146104815780639dc29fac14610496578063a457c2d7146104b6578063a6afed95146104d6578063a9059cbb146104eb576101e4565b8063313ce5671161014a578063313ce56714610327578063395093511461035357806340c10f19146103735780634dac56501461039357806362c06767146103a957806370a08231146103c9578063752a50a6146103f65780637c3a00fd14610416576101e4565b806306fdde0314610223578063095ea7b31461024e5780630c340a241461027e57806318160ddd146102a057806322867d78146102c457806322f3e2d4146102e657806323b872dd14610307576101e4565b366101e45760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b60448201526064016101db565b34801561022f57600080fd5b50610238610626565b60405161024591906126cd565b60405180910390f35b34801561025a57600080fd5b5061026e610269366004612715565b6106b4565b6040519015158152602001610245565b34801561028a57600080fd5b506102936106cb565b6040516102459190612741565b3480156102ac57600080fd5b506102b660385481565b604051908152602001610245565b3480156102d057600080fd5b506102e46102df366004612715565b61074d565b005b3480156102f257600080fd5b50603a5461026e90600160a81b900460ff1681565b34801561031357600080fd5b5061026e610322366004612755565b610c96565b34801561033357600080fd5b50603a546103419060ff1681565b60405160ff9091168152602001610245565b34801561035f57600080fd5b5061026e61036e366004612715565b610d35565b34801561037f57600080fd5b506102e461038e366004612715565b610d71565b34801561039f57600080fd5b506102b660395481565b3480156103b557600080fd5b506102e46103c4366004612755565b610db2565b3480156103d557600080fd5b506102b66103e4366004612796565b60346020526000908152604090205481565b34801561040257600080fd5b506102e46104113660046127b3565b610deb565b34801561042257600080fd5b506102b6603b5481565b34801561043857600080fd5b506102e4610447366004612825565b610e8d565b34801561045857600080fd5b506102e4610467366004612796565b611020565b34801561047857600080fd5b506102386110d0565b34801561048d57600080fd5b506102b66110dd565b3480156104a257600080fd5b506102e46104b1366004612715565b6110f1565b3480156104c257600080fd5b5061026e6104d1366004612715565b61112e565b3480156104e257600080fd5b506102e46111b9565b3480156104f757600080fd5b5061026e610506366004612715565b6112d2565b34801561051757600080fd5b506102e46105263660046128e2565b6112df565b34801561053757600080fd5b506102e4611a03565b34801561054c57600080fd5b506102b661055b366004612912565b603560209081526000928352604080842090915290825290205481565b34801561058457600080fd5b506102b66301e1338081565b34801561059c57600080fd5b50600254610293906001600160a01b031681565b3480156105bc57600080fd5b50603a546102939061010090046001600160a01b031681565b3480156105e157600080fd5b506102e46105f03660046127b3565b611a9f565b34801561060157600080fd5b50610238604051806040016040528060058152602001640312e302e360dc1b81525081565b6036805461063390612940565b80601f016020809104026020016040519081016040528092919081815260200182805461065f90612940565b80156106ac5780601f10610681576101008083540402835291602001916106ac565b820191906000526020600020905b81548152906001019060200180831161068f57829003601f168201915b505050505081565b60006106c1338484611b39565b5060015b92915050565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b15801561071057600080fd5b505afa158015610724573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610748919061297b565b905090565b600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d591906129a8565b156107f25760405162461bcd60e51b81526004016101db906129c3565b600260015414156108155760405162461bcd60e51b81526004016101db906129e9565b6002600155806108375760405162461bcd60e51b81526004016101db90612a20565b61083f6111b9565b60025460408051631f03d67d60e21b8152905133926000926001600160a01b0390911691637c0f59f49160048082019260209290919082900301818787803b15801561088a57600080fd5b505af115801561089e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c29190612a48565b90508260008215610987576108e96108e284670de0b6b3a7640000612a77565b8690611c47565b91506108f58286612a8f565b905061098784600260009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561094957600080fd5b505afa15801561095d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610981919061297b565b83611c7b565b6002546040805163f609280960e01b815290516000926001600160a01b03169163f609280991600480830192602092919082900301818787803b1580156109cd57600080fd5b505af11580156109e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a059190612a48565b90508015610bcf5760025460408051637556d1c160e11b815290516000926001600160a01b03169163eaada382916004808301926020929190829003018186803b158015610a5257600080fd5b505afa158015610a66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8a919061297b565b6001600160a01b0316638d0dba003086603a60019054906101000a90046001600160a01b03166001600160a01b03166370a082318d6040518263ffffffff1660e01b8152600401610adb9190612741565b60206040518083038186803b158015610af357600080fd5b505afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b9190612a48565b610b359190612a8f565b6040518363ffffffff1660e01b8152600401610b52929190612aa6565b60206040518083038186803b158015610b6a57600080fd5b505afa158015610b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba29190612a48565b9050801580610bb15750818110155b610bcd5760405162461bcd60e51b81526004016101db90612abf565b505b610bd98584611e0f565b603a54604051632770a7eb60e21b81526101009091046001600160a01b031690639dc29fac90610c0f908a908790600401612aa6565b600060405180830381600087803b158015610c2957600080fd5b505af1158015610c3d573d6000803e3d6000fd5b505060408051898152602081018690526001600160a01b03808c169450891692507fb2828294ad940d9ae096e368b4f878a8dabf30da36ce9dca5f5ad8eaf6ed052a910160405180910390a35050600180555050505050565b6000610ca3848484611c7b565b6001600160a01b03841660009081526035602090815260408083203384529091529020546000198114610d285782811015610d1b5760405162461bcd60e51b8152602060048201526018602482015277616d6f756e742d657863656564732d616c6c6f77616e636560401b60448201526064016101db565b610d288533858403611b39565b60019150505b9392505050565b3360008181526035602090815260408083206001600160a01b038716845290915281205490916106c1918590610d6c908690612a77565b611b39565b6002546001600160a01b0316336001600160a01b031614610da45760405162461bcd60e51b81526004016101db90612ae6565b610dae8282611f2e565b5050565b610dba61216e565b6001600160a01b038316610dd757610dd282826121a8565b505050565b610dd26001600160a01b03841683836122c1565b610df36106cb565b6001600160a01b0316336001600160a01b031614610e235760405162461bcd60e51b81526004016101db90612b0e565b610e2b6111b9565b603b5481811415610e4e5760405162461bcd60e51b81526004016101db90612b34565b60408051828152602081018490527f41e376fd99913dea7fda140f5c0bd997515b1a181acc58737320322548ec6e72910160405180910390a150603b55565b600054610100900460ff1680610ea6575060005460ff16155b610ec25760405162461bcd60e51b81526004016101db90612b61565b600054610100900460ff16158015610ee4576000805461ffff19166101011790555b6001600160a01b038416610f2f5760405162461bcd60e51b81526020600482015260126024820152711919589d0b5d1bdad95b8b5a5ccb5b9d5b1b60721b60448201526064016101db565b6001600160a01b038516610f855760405162461bcd60e51b815260206004820152601a60248201527f636f6e74726f6c6c65722d616464726573732d69732d7a65726f00000000000060448201526064016101db565b610f8d612317565b600280546001600160a01b0319166001600160a01b038716179055610fb460368b8b612604565b50610fc160378989612604565b50603a805460ff60a81b196001600160a01b038716610100026001600160a81b031990921660ff8a16179190911716600160a81b179055603b83905560398290558015611014576000805461ff00191690555b50505050505050505050565b6110286106cb565b6001600160a01b0316336001600160a01b0316146110585760405162461bcd60e51b81526004016101db90612b0e565b6001600160a01b0381166110ae5760405162461bcd60e51b815260206004820152601e60248201527f6e65772d636f6e74726f6c6c65722d616464726573732d69732d7a65726f000060448201526064016101db565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6037805461063390612940565b60006301e13380603b546107489190612baf565b6002546001600160a01b0316336001600160a01b0316146111245760405162461bcd60e51b81526004016101db90612ae6565b610dae8282611e0f565b3360009081526035602090815260408083206001600160a01b0386168452909152812054828110156111a25760405162461bcd60e51b815260206004820152601e60248201527f6465637265617365642d616c6c6f77616e63652d62656c6f772d7a65726f000060448201526064016101db565b6111af3385858403611b39565b5060019392505050565b6000603a60019054906101000a90046001600160a01b03166001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561120b57600080fd5b505af115801561121f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112439190612a48565b905080156112cf57600254604080516361d027b360e01b815290516112cf926001600160a01b0316916361d027b3916004808301926020929190829003018186803b15801561129157600080fd5b505afa1580156112a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c9919061297b565b82611f2e565b50565b60006106c1338484611c7b565b600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561132f57600080fd5b505af1158015611343573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136791906129a8565b156113845760405162461bcd60e51b81526004016101db906129c3565b600260015414156113a75760405162461bcd60e51b81526004016101db906129e9565b60026001819055546040516309bf6ca360e31b81526001600160a01b0390911690634dfb6518906113dc903090600401612741565b60206040518083038186803b1580156113f457600080fd5b505afa158015611408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142c91906129a8565b61146f5760405162461bcd60e51b81526020600482015260146024820152731cde5b9d1a195d1a58cb5a5b995e1a5cdd195b9d60621b60448201526064016101db565b603a54600160a81b900460ff166114985760405162461bcd60e51b81526004016101db90612bd1565b600082116114b85760405162461bcd60e51b81526004016101db90612a20565b336114c16111b9565b60025460405163dde3ab9560e01b81526000916001600160a01b03169063dde3ab95906114f2908590600401612741565b60a06040518083038186803b15801561150a57600080fd5b505afa15801561151e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115429190612bfd565b9450505050506000600260009054906101000a90046001600160a01b03166001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b15801561159857600080fd5b505afa1580156115ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d0919061297b565b60405163b5e9bef560e01b81529091506001600160a01b0382169063b5e9bef5906116019030908690600401612aa6565b60206040518083038186803b15801561161957600080fd5b505afa15801561162d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116519190612a48565b8511156116985760405162461bcd60e51b81526020600482015260156024820152741b9bdd0b595b9bdd59da0b58dbdb1b185d195c985b605a1b60448201526064016101db565b6002546040805163f609280960e01b815290516000926001600160a01b03169163f609280991600480830192602092919082900301818787803b1580156116de57600080fd5b505af11580156116f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117169190612a48565b9050801561184757603a546040516370a0823160e01b815282916001600160a01b0380861692638d0dba009230928c9261010090920416906370a0823190611762908c90600401612741565b60206040518083038186803b15801561177a57600080fd5b505afa15801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b29190612a48565b6117bc9190612a77565b6040518363ffffffff1660e01b81526004016117d9929190612aa6565b60206040518083038186803b1580156117f157600080fd5b505afa158015611805573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118299190612a48565b10156118475760405162461bcd60e51b81526004016101db90612abf565b60025460408051632a9133c160e01b815290516000926001600160a01b031691632a9133c191600480830192602092919082900301818787803b15801561188d57600080fd5b505af11580156118a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c59190612a48565b9050866000821561193a576118da8984612382565b905061192d600260009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561129157600080fd5b6119378183612a8f565b91505b6119448883611f2e565b603a546040516340c10f1960e01b81526101009091046001600160a01b0316906340c10f199061197a908a908d90600401612aa6565b600060405180830381600087803b15801561199457600080fd5b505af11580156119a8573d6000803e3d6000fd5b5050604080518c8152602081018590526001600160a01b03808d1694508b1692507f8ed56bdcd59d676b8a4feb74d858ffa2bc47f80b291f9df3ced2fad3d953f798910160405180910390a350506001805550505050505050565b611a0b6106cb565b6001600160a01b0316336001600160a01b031614611a3b5760405162461bcd60e51b81526004016101db90612b0e565b603a5460408051600160a81b90920460ff168015801584526020840152917fcaaaa88cc2414229e1aa662e7856f1b8601c703e3c21beb1b894b5fe2a3a6f2e910160405180910390a1603a805460ff60a81b19169115600160a81b02919091179055565b611aa76106cb565b6001600160a01b0316336001600160a01b031614611ad75760405162461bcd60e51b81526004016101db90612b0e565b60395481811415611afa5760405162461bcd60e51b81526004016101db90612b34565b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603955565b6001600160a01b038316611b8f5760405162461bcd60e51b815260206004820152601d60248201527f617070726f76652d66726f6d2d7468652d7a65726f2d6164647265737300000060448201526064016101db565b6001600160a01b038216611be55760405162461bcd60e51b815260206004820152601b60248201527f617070726f76652d746f2d7468652d7a65726f2d61646472657373000000000060448201526064016101db565b6001600160a01b0383811660008181526035602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600081611c55600282612baf565b611c67670de0b6b3a764000086612c44565b611c719190612a77565b610d2e9190612baf565b6001600160a01b038316611cd15760405162461bcd60e51b815260206004820152601e60248201527f7472616e736665722d66726f6d2d7468652d7a65726f2d61646472657373000060448201526064016101db565b6001600160a01b038216611d275760405162461bcd60e51b815260206004820152601c60248201527f7472616e736665722d746f2d7468652d7a65726f2d616464726573730000000060448201526064016101db565b6001600160a01b03831660009081526034602052604090205481811015611d905760405162461bcd60e51b815260206004820152601f60248201527f7472616e736665722d616d6f756e742d657863656564732d62616c616e63650060448201526064016101db565b6001600160a01b03808516600090815260346020526040808220858503905591851681529081208054849290611dc7908490612a77565b92505081905550826001600160a01b0316846001600160a01b0316600080516020612c8083398151915284604051611e0191815260200190565b60405180910390a350505050565b6001600160a01b038216611e655760405162461bcd60e51b815260206004820152601a60248201527f6275726e2d66726f6d2d7468652d7a65726f2d6164647265737300000000000060448201526064016101db565b6001600160a01b03821660009081526034602052604090205481811015611ece5760405162461bcd60e51b815260206004820152601b60248201527f6275726e2d616d6f756e742d657863656564732d62616c616e6365000000000060448201526064016101db565b6001600160a01b0383166000908152603460205260408120838303905560388054849290611efd908490612a8f565b90915550506040518281526000906001600160a01b03851690600080516020612c8083398151915290602001611c3a565b603a54600160a81b900460ff16611f575760405162461bcd60e51b81526004016101db90612bd1565b6001600160a01b038216611fa85760405162461bcd60e51b81526020600482015260186024820152776d696e742d746f2d7468652d7a65726f2d6164647265737360401b60448201526064016101db565b60025460408051637556d1c160e11b815290516000926001600160a01b03169163eaada382916004808301926020929190829003018186803b158015611fed57600080fd5b505afa158015612001573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612025919061297b565b6001600160a01b0316638d0dba0030846038546120429190612a77565b6040518363ffffffff1660e01b815260040161205f929190612aa6565b60206040518083038186803b15801561207757600080fd5b505afa15801561208b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120af9190612a48565b90506039548111156120fe5760405162461bcd60e51b8152602060048201526018602482015277737572706173732d6d61782d746f74616c2d737570706c7960401b60448201526064016101db565b81603860008282546121109190612a77565b90915550506001600160a01b0383166000908152603460205260408120805484929061213d908490612a77565b90915550506040518281526001600160a01b03841690600090600080516020612c8083398151915290602001611c3a565b6121766106cb565b6001600160a01b0316336001600160a01b0316146121a65760405162461bcd60e51b81526004016101db90612b0e565b565b804710156121f85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016101db565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612245576040519150601f19603f3d011682016040523d82523d6000602084013e61224a565b606091505b5050905080610dd25760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016101db565b610dd28363a9059cbb60e01b84846040516024016122e0929190612aa6565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526123ba565b600054610100900460ff1680612330575060005460ff16155b61234c5760405162461bcd60e51b81526004016101db90612b61565b600054610100900460ff1615801561236e576000805461ffff19166101011790555b80156112cf576000805461ff001916905550565b600082158061238f575081155b1561239c575060006106c5565b670de0b6b3a76400006123b0600282612baf565b611c678486612c44565b600061240f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661248c9092919063ffffffff16565b805190915015610dd2578080602001905181019061242d91906129a8565b610dd25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101db565b606061249b84846000856124a3565b949350505050565b6060824710156125045760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101db565b843b6125525760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101db565b600080866001600160a01b0316858760405161256e9190612c63565b60006040518083038185875af1925050503d80600081146125ab576040519150601f19603f3d011682016040523d82523d6000602084013e6125b0565b606091505b50915091506125c08282866125cb565b979650505050505050565b606083156125da575081610d2e565b8251156125ea5782518084602001fd5b8160405162461bcd60e51b81526004016101db91906126cd565b82805461261090612940565b90600052602060002090601f0160209004810192826126325760008555612678565b82601f1061264b5782800160ff19823516178555612678565b82800160010185558215612678579182015b8281111561267857823582559160200191906001019061265d565b50612684929150612688565b5090565b5b808211156126845760008155600101612689565b60005b838110156126b85781810151838201526020016126a0565b838111156126c7576000848401525b50505050565b60208152600082518060208401526126ec81604085016020870161269d565b601f01601f19169190910160400192915050565b6001600160a01b03811681146112cf57600080fd5b6000806040838503121561272857600080fd5b823561273381612700565b946020939093013593505050565b6001600160a01b0391909116815260200190565b60008060006060848603121561276a57600080fd5b833561277581612700565b9250602084013561278581612700565b929592945050506040919091013590565b6000602082840312156127a857600080fd5b8135610d2e81612700565b6000602082840312156127c557600080fd5b5035919050565b60008083601f8401126127de57600080fd5b50813567ffffffffffffffff8111156127f657600080fd5b60208301915083602082850101111561280e57600080fd5b9250929050565b803561282081612700565b919050565b600080600080600080600080600060e08a8c03121561284357600080fd5b893567ffffffffffffffff8082111561285b57600080fd5b6128678d838e016127cc565b909b50995060208c013591508082111561288057600080fd5b5061288d8c828d016127cc565b90985096505060408a013560ff811681146128a757600080fd5b945060608a01356128b781612700565b93506128c560808b01612815565b925060a08a0135915060c08a013590509295985092959850929598565b600080604083850312156128f557600080fd5b82359150602083013561290781612700565b809150509250929050565b6000806040838503121561292557600080fd5b823561293081612700565b9150602083013561290781612700565b600181811c9082168061295457607f821691505b6020821081141561297557634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561298d57600080fd5b8151610d2e81612700565b8051801515811461282057600080fd5b6000602082840312156129ba57600080fd5b610d2e82612998565b6020808252600c908201526b3737ba16b9b43aba3237bbb760a11b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600e908201526d616d6f756e742d69732d7a65726f60901b604082015260600190565b600060208284031215612a5a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612a8a57612a8a612a61565b500190565b600082821015612aa157612aa1612a61565b500390565b6001600160a01b03929092168252602082015260400190565b6020808252600d908201526c3232b13a16b63a16b33637b7b960991b604082015260600190565b6020808252600e908201526d3737ba16b1b7b73a3937b63632b960911b604082015260600190565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b6020808252601390820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082612bcc57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526012908201527173796e7468657469632d696e61637469766560701b604082015260600190565b600080600080600060a08688031215612c1557600080fd5b612c1e86612998565b602087015160408801516060890151608090990151929a91995097965090945092505050565b6000816000190483118215151615612c5e57612c5e612a61565b500290565b60008251612c7581846020870161269d565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212209c6a08fa59b318dd795e1b476a63b8f46c987af68e8300dec6e1fc8fda493b1264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "burn(address,uint256)": {
        "params": {
          "_amount": "The amount to burn",
          "_from": "The account to burn from"
        }
      },
      "issue(uint256,address)": {
        "params": {
          "_amount": "The amount to mint"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "The amount to mint",
          "_to": "The account to mint to"
        }
      },
      "repay(address,uint256)": {
        "details": "The msg.sender is the payer and the account beneficed",
        "params": {
          "_amount": "The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)",
          "_onBehalfOf": "The account that will have debt decreased"
        }
      },
      "setController(address)": {
        "params": {
          "_controller": "The new Controller contract"
        }
      },
      "sweep(address,address,uint256)": {
        "params": {
          "_amount": "The amount to send",
          "_to": "The recipient of the transfer",
          "_token": "The token to transfer"
        }
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "updateMaxTotalSupplyInUsd(uint256)": {
        "params": {
          "_newMaxTotalSupplyInUsd": "The new max total supply (in USD)"
        }
      }
    },
    "title": "Synthetic Token contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DebtRepaid(address,address,uint256,uint256)": {
        "notice": "Emitted when synthetic's debt is repaid"
      },
      "InterestRateUpdated(uint256,uint256)": {
        "notice": "Emitted when interest rate is updated"
      },
      "MaxTotalSupplyUpdated(uint256,uint256)": {
        "notice": "Emitted when max total supply is updated"
      },
      "SyntheticTokenActiveUpdated(bool,bool)": {
        "notice": "Emitted when active flag is updated"
      },
      "SyntheticTokenIssued(address,address,uint256,uint256)": {
        "notice": "Emitted when synthetic token is issued"
      }
    },
    "kind": "user",
    "methods": {
      "accrueInterest()": {
        "notice": "Accrue interest"
      },
      "burn(address,uint256)": {
        "notice": "Burn synthetic token"
      },
      "controller()": {
        "notice": "Controller contract"
      },
      "debtToken()": {
        "notice": "Non-transferable token that represents users' debts"
      },
      "interestRate()": {
        "notice": "Interest rate"
      },
      "isActive()": {
        "notice": "If a vsAsset isn't active, it disables minting new tokens"
      },
      "issue(uint256,address)": {
        "notice": "Lock collateral and mint synthetic token"
      },
      "mint(address,uint256)": {
        "notice": "Mint synthetic token"
      },
      "repay(address,uint256)": {
        "notice": "Send synthetic token to decrease debt"
      },
      "setController(address)": {
        "notice": "Update Controller contract"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      },
      "toggleIsActive()": {
        "notice": "Enable/Disable the Synthetic Token"
      },
      "updateInterestRate(uint256)": {
        "notice": "Update interest rate (APR)"
      },
      "updateMaxTotalSupplyInUsd(uint256)": {
        "notice": "Update max total supply (in USD)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7131,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7134,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7185,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6095,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "controller",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IController)10815"
      },
      {
        "astId": 6210,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14657,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "balanceOf",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14663,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "allowance",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14665,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 14667,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 14669,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 14671,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "maxTotalSupplyInUsd",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 14673,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "decimals",
        "offset": 0,
        "slot": "58",
        "type": "t_uint8"
      },
      {
        "astId": 14677,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "debtToken",
        "offset": 1,
        "slot": "58",
        "type": "t_contract(IDebtToken)10852"
      },
      {
        "astId": 14680,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "isActive",
        "offset": 21,
        "slot": "58",
        "type": "t_bool"
      },
      {
        "astId": 14683,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "interestRate",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IController)10815": {
        "encoding": "inplace",
        "label": "contract IController",
        "numberOfBytes": "20"
      },
      "t_contract(IDebtToken)10852": {
        "encoding": "inplace",
        "label": "contract IDebtToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}