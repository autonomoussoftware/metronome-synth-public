{
  "address": "0xFF1057506c031557DC9f2a54bc29D0493913F272",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDebtFloorInUsd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebtFloorInUsd",
          "type": "uint256"
        }
      ],
      "name": "DebtFloorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDepositFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDepositFee",
          "type": "uint256"
        }
      ],
      "name": "DepositFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositToken",
          "type": "address"
        }
      ],
      "name": "DepositTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IDepositToken",
          "name": "depositToken",
          "type": "address"
        }
      ],
      "name": "DepositTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldIssueFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newIssueFee",
          "type": "uint256"
        }
      ],
      "name": "IssueFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidatorLiquidationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidatorLiquidationFee",
          "type": "uint256"
        }
      ],
      "name": "LiquidatorLiquidationFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IMasterOracle",
          "name": "oldOracle",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IMasterOracle",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "MasterOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxLiquidable",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxLiquidable",
          "type": "uint256"
        }
      ],
      "name": "MaxLiquidableUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountRepaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositSeized",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "PositionLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProtocolLiquidationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolLiquidationFee",
          "type": "uint256"
        }
      ],
      "name": "ProtocolLiquidationFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRefinanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRefinanceFee",
          "type": "uint256"
        }
      ],
      "name": "RefinanceFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRepayFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRepayFee",
          "type": "uint256"
        }
      ],
      "name": "RepayFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IRewardsDistributor",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "RewardsDistributorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Shutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "SwapFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "syntheticToken",
          "type": "address"
        }
      ],
      "name": "SyntheticTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken",
          "type": "address"
        }
      ],
      "name": "SyntheticTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract ISyntheticToken",
          "name": "syntheticTokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract ISyntheticToken",
          "name": "syntheticTokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SyntheticTokenSwapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ITreasury",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract ITreasury",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldWithdrawFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFeeUpdated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        }
      ],
      "name": "addDepositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewardsDistributor",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "addRewardsDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_syntheticToken",
          "type": "address"
        }
      ],
      "name": "addSyntheticToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addToDebtTokensOfAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addToDepositTokensOfAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtFloorInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "debtOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_debtInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "debtPositionOf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isHealthy",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_depositInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_issuableLimitInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_issuableInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "depositOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_depositInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_issuableLimitInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositTokenOf",
      "outputs": [
        {
          "internalType": "contract IDepositToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "everythingStopped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getDebtTokensOfAccount",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getDepositTokensOfAccount",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsDistributors",
      "outputs": [
        {
          "internalType": "contract IRewardsDistributor[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSyntheticTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "_masterOracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDepositToken",
          "name": "_depositToken",
          "type": "address"
        }
      ],
      "name": "isDepositTokenExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "_syntheticToken",
          "type": "address"
        }
      ],
      "name": "isSyntheticTokenExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issueFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "_syntheticToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountToRepay",
          "type": "uint256"
        },
        {
          "internalType": "contract IDepositToken",
          "name": "_depositToken",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidatorLiquidationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterOracle",
      "outputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLiquidable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolLiquidationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDepositToken",
          "name": "_depositToken",
          "type": "address"
        }
      ],
      "name": "removeDepositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeFromDebtTokensOfAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeFromDepositTokensOfAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "_syntheticToken",
          "type": "address"
        }
      ],
      "name": "removeSyntheticToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "_syntheticTokenIn",
          "type": "address"
        },
        {
          "internalType": "contract ISyntheticToken",
          "name": "_syntheticTokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newDebtFloorInUsd",
          "type": "uint256"
        }
      ],
      "name": "updateDebtFloor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newDepositFee",
          "type": "uint256"
        }
      ],
      "name": "updateDepositFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newIssueFee",
          "type": "uint256"
        }
      ],
      "name": "updateIssueFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newLiquidatorLiquidationFee",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidatorLiquidationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "_newMasterOracle",
          "type": "address"
        }
      ],
      "name": "updateMasterOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxLiquidable",
          "type": "uint256"
        }
      ],
      "name": "updateMaxLiquidable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newProtocolLiquidationFee",
          "type": "uint256"
        }
      ],
      "name": "updateProtocolLiquidationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newRepayFee",
          "type": "uint256"
        }
      ],
      "name": "updateRepayFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "updateSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITreasury",
          "name": "_newTreasury",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withMigration",
          "type": "bool"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "updateWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xab9acb934447f10abd22ab692ab87eba87648a55d85ea7a6f9558d921651dc2a",
  "receipt": {
    "to": null,
    "from": "0xF5F5195cF6998c57C651f9f0bBFA7cFC72a6FaC1",
    "contractAddress": "0xFF1057506c031557DC9f2a54bc29D0493913F272",
    "transactionIndex": 2,
    "gasUsed": "3940779",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000400000000000000000000000000000000000000000000000000000000020000000000000000000a00000000000000000000000000000000000000000000200000000000000000000000000002000000000000000000000000000000000000000200000000008000000000001000000000000000000000000000020000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb8dbb5266624db3736cfc1d7ce142e95f8261082b5ffba7165659f0f05aa04cb",
    "transactionHash": "0xab9acb934447f10abd22ab692ab87eba87648a55d85ea7a6f9558d921651dc2a",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 15251695,
        "transactionHash": "0xab9acb934447f10abd22ab692ab87eba87648a55d85ea7a6f9558d921651dc2a",
        "address": "0xFF1057506c031557DC9f2a54bc29D0493913F272",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5f5195cf6998c57c651f9f0bbfa7cfc72a6fac1"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xb8dbb5266624db3736cfc1d7ce142e95f8261082b5ffba7165659f0f05aa04cb"
      }
    ],
    "blockNumber": 15251695,
    "cumulativeGasUsed": "4131139",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d8b118bc2b869f1cad3e67e355255d78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebtFloorInUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtFloorInUsd\",\"type\":\"uint256\"}],\"name\":\"DebtFloorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDepositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositFee\",\"type\":\"uint256\"}],\"name\":\"DepositFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"}],\"name\":\"DepositTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken\",\"type\":\"address\"}],\"name\":\"DepositTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldIssueFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIssueFee\",\"type\":\"uint256\"}],\"name\":\"IssueFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidatorLiquidationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidatorLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"LiquidatorLiquidationFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IMasterOracle\",\"name\":\"oldOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IMasterOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"MasterOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxLiquidable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxLiquidable\",\"type\":\"uint256\"}],\"name\":\"MaxLiquidableUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositSeized\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolLiquidationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"ProtocolLiquidationFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRefinanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRefinanceFee\",\"type\":\"uint256\"}],\"name\":\"RefinanceFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRepayFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRepayFee\",\"type\":\"uint256\"}],\"name\":\"RepayFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IRewardsDistributor\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"RewardsDistributorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"SwapFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticToken\",\"type\":\"address\"}],\"name\":\"SyntheticTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken\",\"type\":\"address\"}],\"name\":\"SyntheticTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SyntheticTokenSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITreasury\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ITreasury\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWithdrawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"WithdrawFeeUpdated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"name\":\"addDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsDistributor\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"addRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_syntheticToken\",\"type\":\"address\"}],\"name\":\"addSyntheticToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addToDebtTokensOfAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addToDepositTokensOfAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtFloorInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"debtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"debtPositionOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isHealthy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_depositInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issuableLimitInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issuableInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"depositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issuableLimitInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositTokenOf\",\"outputs\":[{\"internalType\":\"contract IDepositToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everythingStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getDebtTokensOfAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getDepositTokensOfAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsDistributors\",\"outputs\":[{\"internalType\":\"contract IRewardsDistributor[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSyntheticTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"_masterOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDepositToken\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"name\":\"isDepositTokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"_syntheticToken\",\"type\":\"address\"}],\"name\":\"isSyntheticTokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"_syntheticToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToRepay\",\"type\":\"uint256\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidatorLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterOracle\",\"outputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDepositToken\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"name\":\"removeDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeFromDebtTokensOfAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeFromDepositTokensOfAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"_syntheticToken\",\"type\":\"address\"}],\"name\":\"removeSyntheticToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"_syntheticTokenIn\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"_syntheticTokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDebtFloorInUsd\",\"type\":\"uint256\"}],\"name\":\"updateDebtFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDepositFee\",\"type\":\"uint256\"}],\"name\":\"updateDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newIssueFee\",\"type\":\"uint256\"}],\"name\":\"updateIssueFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLiquidatorLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"updateLiquidatorLiquidationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"_newMasterOracle\",\"type\":\"address\"}],\"name\":\"updateMasterOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxLiquidable\",\"type\":\"uint256\"}],\"name\":\"updateMaxLiquidable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newProtocolLiquidationFee\",\"type\":\"uint256\"}],\"name\":\"updateProtocolLiquidationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRepayFee\",\"type\":\"uint256\"}],\"name\":\"updateRepayFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapFee\",\"type\":\"uint256\"}],\"name\":\"updateSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"_newTreasury\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withMigration\",\"type\":\"bool\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"addToDebtTokensOfAccount(address)\":{\"details\":\"This function is called from `DebtToken` when user's balance changes from `0`The caller should ensure to not pass `address(0)` as `_account`\",\"params\":{\"_account\":\"The account address\"}},\"addToDepositTokensOfAccount(address)\":{\"details\":\"This function is called from `DepositToken` when user's balance changes from `0`The caller should ensure to not pass `address(0)` as `_account`\",\"params\":{\"_account\":\"The account address\"}},\"debtOf(address)\":{\"params\":{\"_account\":\"The account to check\"},\"returns\":{\"_debtInUsd\":\"The debt value in USD\"}},\"debtPositionOf(address)\":{\"params\":{\"_account\":\"The account to check\"},\"returns\":{\"_debtInUsd\":\"The total debt in USD\",\"_depositInUsd\":\"The total collateral deposited in USD\",\"_isHealthy\":\"Whether the account's position is healthy\",\"_issuableInUsd\":\"The amount of debt (is USD) that is free (i.e. can be used to issue synthetic tokens)\",\"_issuableLimitInUsd\":\"The max amount of debt (is USD) that can be created (considering collateralization ratios)\"}},\"depositOf(address)\":{\"params\":{\"_account\":\"The account to check\"},\"returns\":{\"_depositInUsd\":\"The total deposit value in USD among all collaterals\",\"_issuableLimitInUsd\":\"The max value in USD that can be used to issue synthetic tokens\"}},\"getDebtTokensOfAccount(address)\":{\"details\":\"WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees.\"},\"getDepositTokens()\":{\"details\":\"WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees.\"},\"getDepositTokensOfAccount(address)\":{\"details\":\"WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees.\"},\"getSyntheticTokens()\":{\"details\":\"WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees.\"},\"isDepositTokenExists(address)\":{\"params\":{\"_depositToken\":\"Asset to check\"},\"returns\":{\"_0\":\"true if exist\"}},\"isSyntheticTokenExists(address)\":{\"params\":{\"_syntheticToken\":\"Asset to check\"},\"returns\":{\"_0\":\"true if exist\"}},\"liquidate(address,address,uint256,address)\":{\"params\":{\"_account\":\"The account with an unhealthy position\",\"_amountToRepay\":\"The amount to repay in synthetic token\",\"_depositToken\":\"The collateral to seize from\",\"_syntheticToken\":\"The vsAsset to use for repayment\"}},\"open()\":{\"details\":\"Open contract operations, if contract is in shutdown state\"},\"pause()\":{\"details\":\"Pause contract operations, if contract is not paused.\"},\"removeFromDebtTokensOfAccount(address)\":{\"details\":\"This function is called from `DebtToken` when user's balance changes to `0`The caller should ensure to not pass `address(0)` as `_account`\",\"params\":{\"_account\":\"The account address\"}},\"removeFromDepositTokensOfAccount(address)\":{\"details\":\"This function is called from `DepositToken` when user's balance changes to `0`The caller should ensure to not pass `address(0)` as `_account`\",\"params\":{\"_account\":\"The account address\"}},\"shutdown()\":{\"details\":\"Shutdown contract operations, if not already shutdown.\"},\"swap(address,address,uint256)\":{\"params\":{\"_amountIn\":\"Amount to swap\",\"_syntheticTokenIn\":\"Synthetic token to sell\",\"_syntheticTokenOut\":\"Synthetic token to buy\"}},\"sweep(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to send\",\"_to\":\"The recipient of the transfer\",\"_token\":\"The token to transfer\"}},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause contract operations, allow only if contract is paused and not shutdown.\"}},\"title\":\"Controller contract\",\"version\":1},\"userdoc\":{\"events\":{\"DebtFloorUpdated(uint256,uint256)\":{\"notice\":\"Emitted when protocol liquidation fee is updated\"},\"DepositFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when deposit fee is updated\"},\"DepositTokenAdded(address)\":{\"notice\":\"Emitted when deposit token is enabled\"},\"DepositTokenRemoved(address)\":{\"notice\":\"Emitted when deposit token is disabled\"},\"IssueFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when issue fee is updated\"},\"LiquidatorLiquidationFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when liquidator liquidation fee is updated\"},\"MasterOracleUpdated(address,address)\":{\"notice\":\"Emitted when master oracle contract is updated\"},\"MaxLiquidableUpdated(uint256,uint256)\":{\"notice\":\"Emitted when maxLiquidable (liquidation cap) is updated\"},\"PositionLiquidated(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a position is liquidated\"},\"ProtocolLiquidationFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when protocol liquidation fee is updated\"},\"RefinanceFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when refinance fee is updated\"},\"RepayFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when repay fee is updated\"},\"RewardsDistributorAdded(address)\":{\"notice\":\"Emitted when rewards distributor contract is added\"},\"SwapFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when swap fee is updated\"},\"SyntheticTokenAdded(address)\":{\"notice\":\"Emitted when synthetic token is enabled\"},\"SyntheticTokenRemoved(address)\":{\"notice\":\"Emitted when synthetic token is disabled\"},\"SyntheticTokenSwapped(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when synthetic token is swapped\"},\"TreasuryUpdated(address,address)\":{\"notice\":\"Emitted when treasury contract is updated\"},\"WithdrawFeeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when withdraw fee is updated\"}},\"kind\":\"user\",\"methods\":{\"addDepositToken(address)\":{\"notice\":\"Add deposit token (i.e. collateral) to vSynth\"},\"addRewardsDistributor(address)\":{\"notice\":\"Add a RewardsDistributor contract\"},\"addSyntheticToken(address)\":{\"notice\":\"Add synthetic token to vSynth offerings\"},\"addToDebtTokensOfAccount(address)\":{\"notice\":\"Add a debt token to the per-account list\"},\"addToDepositTokensOfAccount(address)\":{\"notice\":\"Add a deposit token to the per-account list\"},\"debtFloorInUsd()\":{\"notice\":\"The debt floor (in USD) for each synthetic token This parameters is used to keep incentive for liquidators (i.e. cover gas and provide enough profit)\"},\"debtOf(address)\":{\"notice\":\"Get account's debt by querying latest prices from oracles\"},\"debtPositionOf(address)\":{\"notice\":\"Get if the debt position from an account is healthy\"},\"depositFee()\":{\"notice\":\"The fee charged when depositing collateral\"},\"depositOf(address)\":{\"notice\":\"Get account's total collateral deposited by querying latest prices from oracles\"},\"depositTokenOf(address)\":{\"notice\":\"Get the deposit token's address from given underlying asset\"},\"getDebtTokensOfAccount(address)\":{\"notice\":\"Get all debt tokens\"},\"getDepositTokens()\":{\"notice\":\"Get all deposit tokens\"},\"getDepositTokensOfAccount(address)\":{\"notice\":\"Get deposit tokens of an account\"},\"getRewardsDistributors()\":{\"notice\":\"Get all rewards distributors\"},\"getSyntheticTokens()\":{\"notice\":\"Get all synthetic tokens\"},\"isDepositTokenExists(address)\":{\"notice\":\"Check if collateral is supported\"},\"isSyntheticTokenExists(address)\":{\"notice\":\"Check if token is part of the synthetic offerings\"},\"issueFee()\":{\"notice\":\"The fee charged when minting a synthetic token\"},\"liquidate(address,address,uint256,address)\":{\"notice\":\"Burn synthetic token, unlock deposit token and send liquidator liquidation fee\"},\"liquidatorLiquidationFee()\":{\"notice\":\"The fee charged from liquidated deposit that goes to the liquidator\"},\"masterOracle()\":{\"notice\":\"Prices oracle\"},\"maxLiquidable()\":{\"notice\":\"The max percent of the debt allowed to liquidate\"},\"protocolLiquidationFee()\":{\"notice\":\"The fee charged when liquidating a position\"},\"removeDepositToken(address)\":{\"notice\":\"Remove deposit token (i.e. collateral) from vSynth\"},\"removeFromDebtTokensOfAccount(address)\":{\"notice\":\"Remove a debt token from the per-account list\"},\"removeFromDepositTokensOfAccount(address)\":{\"notice\":\"Remove a deposit token from the per-account list\"},\"removeSyntheticToken(address)\":{\"notice\":\"Remove synthetic token from vSynth offerings\"},\"repayFee()\":{\"notice\":\"The fee charged when repaying debt\"},\"swap(address,address,uint256)\":{\"notice\":\"Swap synthetic tokens\"},\"swapFee()\":{\"notice\":\"The fee charged when swapping synthetic tokens\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"},\"treasury()\":{\"notice\":\"Treasury contract\"},\"updateDebtFloor(uint256)\":{\"notice\":\"Update debt floor\"},\"updateDepositFee(uint256)\":{\"notice\":\"Update deposit fee\"},\"updateIssueFee(uint256)\":{\"notice\":\"Update issue fee\"},\"updateLiquidatorLiquidationFee(uint256)\":{\"notice\":\"Update liquidator liquidation fee\"},\"updateMasterOracle(address)\":{\"notice\":\"Update master oracle contract\"},\"updateMaxLiquidable(uint256)\":{\"notice\":\"Update maxLiquidable (liquidation cap)\"},\"updateProtocolLiquidationFee(uint256)\":{\"notice\":\"Update protocol liquidation fee\"},\"updateRepayFee(uint256)\":{\"notice\":\"Update repay fee\"},\"updateSwapFee(uint256)\":{\"notice\":\"Update swap fee\"},\"updateTreasury(address,bool)\":{\"notice\":\"Update treasury contract - will migrate funds to the new contract\"},\"updateWithdrawFee(uint256)\":{\"notice\":\"Update withdraw fee\"},\"withdrawFee()\":{\"notice\":\"The fee charged when withdrawing collateral\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"./dependencies/openzeppelin/utils/math/Math.sol\\\";\\nimport \\\"./storage/ControllerStorage.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\n/**\\n * @title Controller contract\\n */\\ncontract Controller is ReentrancyGuard, Pausable, ControllerStorageV1 {\\n    using SafeERC20 for IERC20;\\n    using WadRayMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using MappedEnumerableSet for MappedEnumerableSet.AddressSet;\\n\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    /// @notice Emitted when synthetic token is enabled\\n    event SyntheticTokenAdded(address indexed syntheticToken);\\n\\n    /// @notice Emitted when synthetic token is disabled\\n    event SyntheticTokenRemoved(ISyntheticToken indexed syntheticToken);\\n\\n    /// @notice Emitted when deposit token is enabled\\n    event DepositTokenAdded(address indexed depositToken);\\n\\n    /// @notice Emitted when deposit token is disabled\\n    event DepositTokenRemoved(IDepositToken indexed depositToken);\\n\\n    /// @notice Emitted when a position is liquidated\\n    event PositionLiquidated(\\n        address indexed liquidator,\\n        address indexed account,\\n        ISyntheticToken indexed syntheticToken,\\n        uint256 amountRepaid,\\n        uint256 depositSeized,\\n        uint256 fee\\n    );\\n\\n    /// @notice Emitted when synthetic token is swapped\\n    event SyntheticTokenSwapped(\\n        address indexed account,\\n        ISyntheticToken indexed syntheticTokenIn,\\n        ISyntheticToken indexed syntheticTokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 fee\\n    );\\n\\n    /// @notice Emitted when protocol liquidation fee is updated\\n    event DebtFloorUpdated(uint256 oldDebtFloorInUsd, uint256 newDebtFloorInUsd);\\n\\n    /// @notice Emitted when deposit fee is updated\\n    event DepositFeeUpdated(uint256 oldDepositFee, uint256 newDepositFee);\\n\\n    /// @notice Emitted when issue fee is updated\\n    event IssueFeeUpdated(uint256 oldIssueFee, uint256 newIssueFee);\\n\\n    /// @notice Emitted when withdraw fee is updated\\n    event WithdrawFeeUpdated(uint256 oldWithdrawFee, uint256 newWithdrawFee);\\n\\n    /// @notice Emitted when repay fee is updated\\n    event RepayFeeUpdated(uint256 oldRepayFee, uint256 newRepayFee);\\n\\n    /// @notice Emitted when swap fee is updated\\n    event SwapFeeUpdated(uint256 oldSwapFee, uint256 newSwapFee);\\n\\n    /// @notice Emitted when refinance fee is updated\\n    event RefinanceFeeUpdated(uint256 oldRefinanceFee, uint256 newRefinanceFee);\\n\\n    /// @notice Emitted when liquidator liquidation fee is updated\\n    event LiquidatorLiquidationFeeUpdated(uint256 oldLiquidatorLiquidationFee, uint256 newLiquidatorLiquidationFee);\\n\\n    /// @notice Emitted when maxLiquidable (liquidation cap) is updated\\n    event MaxLiquidableUpdated(uint256 oldMaxLiquidable, uint256 newMaxLiquidable);\\n\\n    /// @notice Emitted when protocol liquidation fee is updated\\n    event ProtocolLiquidationFeeUpdated(uint256 oldProtocolLiquidationFee, uint256 newProtocolLiquidationFee);\\n\\n    /// @notice Emitted when master oracle contract is updated\\n    event MasterOracleUpdated(IMasterOracle indexed oldOracle, IMasterOracle indexed newOracle);\\n\\n    /// @notice Emitted when treasury contract is updated\\n    event TreasuryUpdated(ITreasury indexed oldTreasury, ITreasury indexed newTreasury);\\n\\n    /// @notice Emitted when rewards distributor contract is added\\n    event RewardsDistributorAdded(IRewardsDistributor _distributor);\\n\\n    /**\\n     * @dev Throws if synthetic token doesn't exist\\n     */\\n    modifier onlyIfSyntheticTokenExists(ISyntheticToken _syntheticToken) {\\n        require(isSyntheticTokenExists(_syntheticToken), \\\"synthetic-inexistent\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token isn't enabled\\n     */\\n    modifier onlyIfSyntheticTokenIsActive(ISyntheticToken _syntheticToken) {\\n        require(_syntheticToken.isActive(), \\\"synthetic-inactive\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if deposit token doesn't exist\\n     */\\n    modifier onlyIfDepositTokenExists(IDepositToken _depositToken) {\\n        require(isDepositTokenExists(_depositToken), \\\"collateral-inexistent\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't a debt token\\n     */\\n    modifier onlyIfMsgSenderIsDebtToken() {\\n        ISyntheticToken _syntheticToken = IDebtToken(_msgSender()).syntheticToken();\\n        require(\\n            syntheticTokens.contains(address(_syntheticToken)) && _msgSender() == address(_syntheticToken.debtToken()),\\n            \\\"caller-is-not-debt-token\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(IMasterOracle _masterOracle) public initializer {\\n        require(address(_masterOracle) != address(0), \\\"oracle-is-null\\\");\\n\\n        __ReentrancyGuard_init();\\n        __Governable_init();\\n\\n        masterOracle = _masterOracle;\\n\\n        repayFee = 3e15; // 0.3%\\n        swapFee = 6e15; // 0.6%\\n        liquidatorLiquidationFee = 1e17; // 10%\\n        protocolLiquidationFee = 8e16; // 8%\\n        maxLiquidable = 0.5e18; // 50%\\n    }\\n\\n    /**\\n     * @notice Get all synthetic tokens\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getSyntheticTokens() external view override returns (address[] memory) {\\n        return syntheticTokens.values();\\n    }\\n\\n    /**\\n     * @notice Get all deposit tokens\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getDepositTokens() external view override returns (address[] memory) {\\n        return depositTokens.values();\\n    }\\n\\n    /**\\n     * @notice Get deposit tokens of an account\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getDepositTokensOfAccount(address _account) external view override returns (address[] memory) {\\n        return depositTokensOfAccount.values(_account);\\n    }\\n\\n    /**\\n     * @notice Get all debt tokens\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getDebtTokensOfAccount(address _account) external view override returns (address[] memory) {\\n        return debtTokensOfAccount.values(_account);\\n    }\\n\\n    /**\\n     * @notice Get all rewards distributors\\n     */\\n    function getRewardsDistributors() external view override returns (IRewardsDistributor[] memory) {\\n        return rewardsDistributors;\\n    }\\n\\n    /**\\n     * @notice Check if token is part of the synthetic offerings\\n     * @param _syntheticToken Asset to check\\n     * @return true if exist\\n     */\\n    function isSyntheticTokenExists(ISyntheticToken _syntheticToken) public view override returns (bool) {\\n        return syntheticTokens.contains(address(_syntheticToken));\\n    }\\n\\n    /**\\n     * @notice Check if collateral is supported\\n     * @param _depositToken Asset to check\\n     * @return true if exist\\n     */\\n    function isDepositTokenExists(IDepositToken _depositToken) public view override returns (bool) {\\n        return depositTokens.contains(address(_depositToken));\\n    }\\n\\n    /**\\n     * @notice Get account's debt by querying latest prices from oracles\\n     * @param _account The account to check\\n     * @return _debtInUsd The debt value in USD\\n     */\\n    function debtOf(address _account) public view override returns (uint256 _debtInUsd) {\\n        uint256 _length = debtTokensOfAccount.length(_account);\\n        for (uint256 i; i < _length; ++i) {\\n            IDebtToken _debtToken = IDebtToken(debtTokensOfAccount.at(_account, i));\\n            ISyntheticToken _syntheticToken = _debtToken.syntheticToken();\\n            _debtInUsd += masterOracle.quoteTokenToUsd(_syntheticToken, _debtToken.balanceOf(_account));\\n        }\\n    }\\n\\n    /**\\n     * @notice Get account's total collateral deposited by querying latest prices from oracles\\n     * @param _account The account to check\\n     * @return _depositInUsd The total deposit value in USD among all collaterals\\n     * @return _issuableLimitInUsd The max value in USD that can be used to issue synthetic tokens\\n     */\\n    function depositOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd)\\n    {\\n        uint256 _length = depositTokensOfAccount.length(_account);\\n        for (uint256 i; i < _length; ++i) {\\n            IDepositToken _depositToken = IDepositToken(depositTokensOfAccount.at(_account, i));\\n            uint256 _amountInUsd = masterOracle.quoteTokenToUsd(_depositToken, _depositToken.balanceOf(_account));\\n            _depositInUsd += _amountInUsd;\\n            _issuableLimitInUsd += _amountInUsd.wadMul(_depositToken.collateralizationRatio());\\n        }\\n    }\\n\\n    /**\\n     * @notice Get if the debt position from an account is healthy\\n     * @param _account The account to check\\n     * @return _isHealthy Whether the account's position is healthy\\n     * @return _depositInUsd The total collateral deposited in USD\\n     * @return _debtInUsd The total debt in USD\\n     * @return _issuableLimitInUsd The max amount of debt (is USD) that can be created (considering collateralization ratios)\\n     * @return _issuableInUsd The amount of debt (is USD) that is free (i.e. can be used to issue synthetic tokens)\\n     */\\n    function debtPositionOf(address _account)\\n        public\\n        view\\n        override\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        )\\n    {\\n        _debtInUsd = debtOf(_account);\\n        (_depositInUsd, _issuableLimitInUsd) = depositOf(_account);\\n        _isHealthy = _debtInUsd <= _issuableLimitInUsd;\\n        _issuableInUsd = _debtInUsd < _issuableLimitInUsd ? _issuableLimitInUsd - _debtInUsd : 0;\\n    }\\n\\n    /**\\n     * @notice Burn synthetic token, unlock deposit token and send liquidator liquidation fee\\n     * @param _syntheticToken The vsAsset to use for repayment\\n     * @param _account The account with an unhealthy position\\n     * @param _amountToRepay The amount to repay in synthetic token\\n     * @param _depositToken The collateral to seize from\\n     */\\n    function liquidate(\\n        ISyntheticToken _syntheticToken,\\n        address _account,\\n        uint256 _amountToRepay,\\n        IDepositToken _depositToken\\n    ) external override whenNotShutdown nonReentrant onlyIfDepositTokenExists(_depositToken) {\\n        require(_amountToRepay > 0, \\\"amount-is-zero\\\");\\n\\n        address _liquidator = _msgSender();\\n        require(_liquidator != _account, \\\"can-not-liquidate-own-position\\\");\\n\\n        _syntheticToken.accrueInterest();\\n\\n        (bool _isHealthy, , , , ) = debtPositionOf(_account);\\n\\n        require(!_isHealthy, \\\"position-is-healthy\\\");\\n\\n        IDebtToken _debtToken = _syntheticToken.debtToken();\\n        uint256 _debtTokenBalance = _debtToken.balanceOf(_account);\\n\\n        require(_amountToRepay.wadDiv(_debtTokenBalance) <= maxLiquidable, \\\"amount-gt-max-liquidable\\\");\\n\\n        if (debtFloorInUsd > 0) {\\n            uint256 _newDebtInUsd = masterOracle.quoteTokenToUsd(_syntheticToken, _debtTokenBalance - _amountToRepay);\\n            require(_newDebtInUsd == 0 || _newDebtInUsd >= debtFloorInUsd, \\\"remaining-debt-lt-floor\\\");\\n        }\\n\\n        uint256 _amountToRepayInCollateral = masterOracle.quote(_syntheticToken, _depositToken, _amountToRepay);\\n\\n        uint256 _toProtocol = protocolLiquidationFee > 0\\n            ? _amountToRepayInCollateral.wadMul(protocolLiquidationFee)\\n            : 0;\\n        uint256 _toLiquidator = _amountToRepayInCollateral.wadMul(1e18 + liquidatorLiquidationFee);\\n        uint256 _depositToSeize = _toProtocol + _toLiquidator;\\n\\n        require(_depositToSeize <= _depositToken.balanceOf(_account), \\\"amount-too-high\\\");\\n\\n        _syntheticToken.burn(_liquidator, _amountToRepay);\\n        _debtToken.burn(_account, _amountToRepay);\\n        _depositToken.seize(_account, _liquidator, _toLiquidator);\\n\\n        if (_toProtocol > 0) {\\n            _depositToken.seize(_account, address(treasury), _toProtocol);\\n        }\\n\\n        emit PositionLiquidated(_liquidator, _account, _syntheticToken, _amountToRepay, _depositToSeize, _toProtocol);\\n    }\\n\\n    /**\\n     * @notice Swap synthetic tokens\\n     * @param _syntheticTokenIn Synthetic token to sell\\n     * @param _syntheticTokenOut Synthetic token to buy\\n     * @param _amountIn Amount to swap\\n     */\\n    function swap(\\n        ISyntheticToken _syntheticTokenIn,\\n        ISyntheticToken _syntheticTokenOut,\\n        uint256 _amountIn\\n    )\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfSyntheticTokenExists(_syntheticTokenIn)\\n        onlyIfSyntheticTokenExists(_syntheticTokenOut)\\n        onlyIfSyntheticTokenIsActive(_syntheticTokenOut)\\n        returns (uint256 _amountOut)\\n    {\\n        _syntheticTokenIn.accrueInterest();\\n        _syntheticTokenOut.accrueInterest();\\n\\n        address _account = _msgSender();\\n\\n        require(_amountIn > 0, \\\"amount-in-is-0\\\");\\n        require(_amountIn <= _syntheticTokenIn.balanceOf(_account), \\\"amount-in-gt-balance\\\");\\n\\n        _syntheticTokenIn.burn(_account, _amountIn);\\n\\n        _amountOut = masterOracle.quote(_syntheticTokenIn, _syntheticTokenOut, _amountIn);\\n\\n        uint256 _feeAmount;\\n        if (swapFee > 0) {\\n            _feeAmount = _amountOut.wadMul(swapFee);\\n            _syntheticTokenOut.mint(address(treasury), _feeAmount);\\n            _amountOut -= _feeAmount;\\n        }\\n\\n        _syntheticTokenOut.mint(_account, _amountOut);\\n\\n        emit SyntheticTokenSwapped(_account, _syntheticTokenIn, _syntheticTokenOut, _amountIn, _amountOut, _feeAmount);\\n    }\\n\\n    /**\\n     * @notice Add synthetic token to vSynth offerings\\n     */\\n    function addSyntheticToken(address _syntheticToken) external override onlyGovernor {\\n        require(_syntheticToken != address(0), \\\"address-is-null\\\");\\n\\n        require(syntheticTokens.add(_syntheticToken), \\\"synthetic-exists\\\");\\n\\n        emit SyntheticTokenAdded(_syntheticToken);\\n    }\\n\\n    /**\\n     * @notice Remove synthetic token from vSynth offerings\\n     */\\n    function removeSyntheticToken(ISyntheticToken _syntheticToken)\\n        external\\n        override\\n        onlyGovernor\\n        onlyIfSyntheticTokenExists(_syntheticToken)\\n    {\\n        require(_syntheticToken.totalSupply() == 0, \\\"supply-gt-0\\\");\\n        require(_syntheticToken.debtToken().totalSupply() == 0, \\\"synthetic-with-debt-supply\\\");\\n\\n        require(syntheticTokens.remove(address(_syntheticToken)), \\\"synthetic-doesnt-exist\\\");\\n\\n        emit SyntheticTokenRemoved(_syntheticToken);\\n    }\\n\\n    /**\\n     * @notice Add deposit token (i.e. collateral) to vSynth\\n     */\\n    function addDepositToken(address _depositToken) external override onlyGovernor {\\n        require(_depositToken != address(0), \\\"address-is-null\\\");\\n\\n        require(depositTokens.add(_depositToken), \\\"deposit-token-exists\\\");\\n        depositTokenOf[IDepositToken(_depositToken).underlying()] = IDepositToken(_depositToken);\\n\\n        emit DepositTokenAdded(_depositToken);\\n    }\\n\\n    /**\\n     * @notice Remove deposit token (i.e. collateral) from vSynth\\n     */\\n    function removeDepositToken(IDepositToken _depositToken)\\n        external\\n        override\\n        onlyGovernor\\n        onlyIfDepositTokenExists(_depositToken)\\n    {\\n        require(_depositToken.totalSupply() == 0, \\\"supply-gt-0\\\");\\n\\n        require(depositTokens.remove(address(_depositToken)), \\\"deposit-token-doesnt-exist\\\");\\n        delete depositTokenOf[_depositToken.underlying()];\\n\\n        emit DepositTokenRemoved(_depositToken);\\n    }\\n\\n    /**\\n     * @notice Add a deposit token to the per-account list\\n     * @dev This function is called from `DepositToken` when user's balance changes from `0`\\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\\n     * @param _account The account address\\n     */\\n    function addToDepositTokensOfAccount(address _account) external {\\n        require(depositTokens.contains(_msgSender()), \\\"caller-is-not-deposit-token\\\");\\n        require(depositTokensOfAccount.add(_account, _msgSender()), \\\"deposit-token-exists\\\");\\n    }\\n\\n    /**\\n     * @notice Remove a deposit token from the per-account list\\n     * @dev This function is called from `DepositToken` when user's balance changes to `0`\\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\\n     * @param _account The account address\\n     */\\n    function removeFromDepositTokensOfAccount(address _account) external {\\n        require(depositTokens.contains(_msgSender()), \\\"caller-is-not-deposit-token\\\");\\n        require(depositTokensOfAccount.remove(_account, _msgSender()), \\\"deposit-token-doesnt-exist\\\");\\n    }\\n\\n    /**\\n     * @notice Add a debt token to the per-account list\\n     * @dev This function is called from `DebtToken` when user's balance changes from `0`\\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\\n     * @param _account The account address\\n     */\\n    function addToDebtTokensOfAccount(address _account) external onlyIfMsgSenderIsDebtToken {\\n        require(debtTokensOfAccount.add(_account, _msgSender()), \\\"debt-token-exists\\\");\\n    }\\n\\n    /**\\n     * @notice Remove a debt token from the per-account list\\n     * @dev This function is called from `DebtToken` when user's balance changes to `0`\\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\\n     * @param _account The account address\\n     */\\n    function removeFromDebtTokensOfAccount(address _account) external onlyIfMsgSenderIsDebtToken {\\n        require(debtTokensOfAccount.remove(_account, _msgSender()), \\\"debt-token-doesnt-exist\\\");\\n    }\\n\\n    /**\\n     * @notice Update master oracle contract\\n     */\\n    function updateMasterOracle(IMasterOracle _newMasterOracle) external override onlyGovernor {\\n        require(address(_newMasterOracle) != address(0), \\\"address-is-null\\\");\\n        IMasterOracle _currentMasterOracle = masterOracle;\\n        require(_newMasterOracle != _currentMasterOracle, \\\"new-same-as-current\\\");\\n\\n        emit MasterOracleUpdated(_currentMasterOracle, _newMasterOracle);\\n        masterOracle = _newMasterOracle;\\n    }\\n\\n    /**\\n     * @notice Update deposit fee\\n     */\\n    function updateDepositFee(uint256 _newDepositFee) external override onlyGovernor {\\n        require(_newDepositFee <= 1e18, \\\"max-is-100%\\\");\\n        uint256 _currentDepositFee = depositFee;\\n        require(_newDepositFee != _currentDepositFee, \\\"new-same-as-current\\\");\\n        emit DepositFeeUpdated(_currentDepositFee, _newDepositFee);\\n        depositFee = _newDepositFee;\\n    }\\n\\n    /**\\n     * @notice Update issue fee\\n     */\\n    function updateIssueFee(uint256 _newIssueFee) external override onlyGovernor {\\n        require(_newIssueFee <= 1e18, \\\"max-is-100%\\\");\\n        uint256 _currentIssueFee = issueFee;\\n        require(_newIssueFee != _currentIssueFee, \\\"new-same-as-current\\\");\\n        emit IssueFeeUpdated(_currentIssueFee, _newIssueFee);\\n        issueFee = _newIssueFee;\\n    }\\n\\n    /**\\n     * @notice Update withdraw fee\\n     */\\n    function updateWithdrawFee(uint256 _newWithdrawFee) external override onlyGovernor {\\n        require(_newWithdrawFee <= 1e18, \\\"max-is-100%\\\");\\n        uint256 _currentWithdrawFee = withdrawFee;\\n        require(_newWithdrawFee != _currentWithdrawFee, \\\"new-same-as-current\\\");\\n        emit WithdrawFeeUpdated(_currentWithdrawFee, _newWithdrawFee);\\n        withdrawFee = _newWithdrawFee;\\n    }\\n\\n    /**\\n     * @notice Update repay fee\\n     */\\n    function updateRepayFee(uint256 _newRepayFee) external override onlyGovernor {\\n        require(_newRepayFee <= 1e18, \\\"max-is-100%\\\");\\n        uint256 _currentRepayFee = repayFee;\\n        require(_newRepayFee != _currentRepayFee, \\\"new-same-as-current\\\");\\n        emit RepayFeeUpdated(_currentRepayFee, _newRepayFee);\\n        repayFee = _newRepayFee;\\n    }\\n\\n    /**\\n     * @notice Update swap fee\\n     */\\n    function updateSwapFee(uint256 _newSwapFee) external override onlyGovernor {\\n        require(_newSwapFee <= 1e18, \\\"max-is-100%\\\");\\n        uint256 _currentSwapFee = swapFee;\\n        require(_newSwapFee != _currentSwapFee, \\\"new-same-as-current\\\");\\n        emit SwapFeeUpdated(_currentSwapFee, _newSwapFee);\\n        swapFee = _newSwapFee;\\n    }\\n\\n    /**\\n     * @notice Update liquidator liquidation fee\\n     */\\n    function updateLiquidatorLiquidationFee(uint256 _newLiquidatorLiquidationFee) external override onlyGovernor {\\n        require(_newLiquidatorLiquidationFee <= 1e18, \\\"max-is-100%\\\");\\n        uint256 _currentLiquidatorLiquidationFee = liquidatorLiquidationFee;\\n        require(_newLiquidatorLiquidationFee != _currentLiquidatorLiquidationFee, \\\"new-same-as-current\\\");\\n        emit LiquidatorLiquidationFeeUpdated(_currentLiquidatorLiquidationFee, _newLiquidatorLiquidationFee);\\n        liquidatorLiquidationFee = _newLiquidatorLiquidationFee;\\n    }\\n\\n    /**\\n     * @notice Update protocol liquidation fee\\n     */\\n    function updateProtocolLiquidationFee(uint256 _newProtocolLiquidationFee) external override onlyGovernor {\\n        require(_newProtocolLiquidationFee <= 1e18, \\\"max-is-100%\\\");\\n        uint256 _currentProtocolLiquidationFee = protocolLiquidationFee;\\n        require(_newProtocolLiquidationFee != _currentProtocolLiquidationFee, \\\"new-same-as-current\\\");\\n        emit ProtocolLiquidationFeeUpdated(_currentProtocolLiquidationFee, _newProtocolLiquidationFee);\\n        protocolLiquidationFee = _newProtocolLiquidationFee;\\n    }\\n\\n    /**\\n     * @notice Update maxLiquidable (liquidation cap)\\n     */\\n    function updateMaxLiquidable(uint256 _newMaxLiquidable) external override onlyGovernor {\\n        require(_newMaxLiquidable <= 1e18, \\\"max-is-100%\\\");\\n        uint256 _currentMaxLiquidable = maxLiquidable;\\n        require(_newMaxLiquidable != _currentMaxLiquidable, \\\"new-same-as-current\\\");\\n        emit MaxLiquidableUpdated(_currentMaxLiquidable, _newMaxLiquidable);\\n        maxLiquidable = _newMaxLiquidable;\\n    }\\n\\n    /**\\n     * @notice Update debt floor\\n     */\\n    function updateDebtFloor(uint256 _newDebtFloorInUsd) external override onlyGovernor {\\n        uint256 _currentDebtFloorInUsd = debtFloorInUsd;\\n        require(_newDebtFloorInUsd != _currentDebtFloorInUsd, \\\"new-same-as-current\\\");\\n        emit DebtFloorUpdated(_currentDebtFloorInUsd, _newDebtFloorInUsd);\\n        debtFloorInUsd = _newDebtFloorInUsd;\\n    }\\n\\n    /**\\n     * @notice Update treasury contract - will migrate funds to the new contract\\n     */\\n    function updateTreasury(ITreasury _newTreasury, bool _withMigration) external override onlyGovernor {\\n        require(address(_newTreasury) != address(0), \\\"address-is-null\\\");\\n        ITreasury _currentTreasury = treasury;\\n        require(_newTreasury != _currentTreasury, \\\"new-same-as-current\\\");\\n\\n        if (_withMigration) _currentTreasury.migrateTo(address(_newTreasury));\\n\\n        emit TreasuryUpdated(_currentTreasury, _newTreasury);\\n        treasury = _newTreasury;\\n    }\\n\\n    /**\\n     * @notice Add a RewardsDistributor contract\\n     */\\n    function addRewardsDistributor(IRewardsDistributor _distributor) external override onlyGovernor {\\n        require(address(_distributor) != address(0), \\\"address-is-null\\\");\\n\\n        for (uint256 i; i < rewardsDistributors.length; i++)\\n            require(_distributor != rewardsDistributors[i], \\\"contract-already-added\\\");\\n\\n        rewardsDistributors.push(_distributor);\\n        emit RewardsDistributorAdded(_distributor);\\n    }\\n}\\n\",\"keccak256\":\"0x5e71872da407d2a94cce627fc97f332f1e9d81dc186b49f7f28c9446eb67c02d\",\"license\":\"MIT\"},\"contracts/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"./interface/IPausable.sol\\\";\\nimport \\\"./access/Governable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n */\\nabstract contract Pausable is IPausable, Governable {\\n    event Paused(address account);\\n    event Shutdown(address account);\\n    event Unpaused(address account);\\n    event Open(address account);\\n\\n    bool public override paused;\\n    bool public override everythingStopped;\\n\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"paused\\\");\\n        _;\\n    }\\n    modifier whenPaused() {\\n        require(paused, \\\"not-paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotShutdown() {\\n        require(!everythingStopped, \\\"shutdown\\\");\\n        _;\\n    }\\n\\n    modifier whenShutdown() {\\n        require(everythingStopped, \\\"not-shutdown\\\");\\n        _;\\n    }\\n\\n    /// @dev Pause contract operations, if contract is not paused.\\n    function pause() external virtual whenNotPaused onlyGovernor {\\n        paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\\n    function unpause() external virtual whenPaused whenNotShutdown onlyGovernor {\\n        paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /// @dev Shutdown contract operations, if not already shutdown.\\n    function shutdown() external virtual whenNotShutdown onlyGovernor {\\n        everythingStopped = true;\\n        paused = true;\\n        emit Shutdown(_msgSender());\\n    }\\n\\n    /// @dev Open contract operations, if contract is in shutdown state\\n    function open() external virtual whenShutdown onlyGovernor {\\n        everythingStopped = false;\\n        emit Open(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x2a9eb3f67d44693778482245b2b2302786754221f0a53b8c563e4debe19ae18b\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/TokenHolder.sol\\\";\\nimport \\\"../interface/IGovernable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, Context, TokenHolder, Initializable {\\n    address public governor;\\n    address public proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal initializer {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == _msgSender(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"proposed-governor-is-zero\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not-the-proposed-governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x306f97343e55b8444d3ca72d0246c04cb10fd728507d163669966d564889eb14\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xc790f8419ee2c68721d6203ed1b5f81e89eb7e1dca19be3a9f54cb5de44491f1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/interface/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./oracle/IMasterOracle.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\n\\n/**\\n * @notice Controller interface\\n */\\ninterface IController is IPausable {\\n    function debtFloorInUsd() external returns (uint256);\\n\\n    function depositFee() external returns (uint256);\\n\\n    function issueFee() external returns (uint256);\\n\\n    function withdrawFee() external returns (uint256);\\n\\n    function repayFee() external returns (uint256);\\n\\n    function isSyntheticTokenExists(ISyntheticToken _syntheticToken) external view returns (bool);\\n\\n    function isDepositTokenExists(IDepositToken _depositToken) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 _underlying) external view returns (IDepositToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getSyntheticTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n\\n    function debtOf(address _account) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address _account) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(address _account)\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function addSyntheticToken(address _synthetic) external;\\n\\n    function removeSyntheticToken(ISyntheticToken _synthetic) external;\\n\\n    function addDepositToken(address _depositToken) external;\\n\\n    function removeDepositToken(IDepositToken _depositToken) external;\\n\\n    function liquidate(\\n        ISyntheticToken _syntheticToken,\\n        address _account,\\n        uint256 _amountToRepay,\\n        IDepositToken _depositToken\\n    ) external;\\n\\n    function swap(\\n        ISyntheticToken _syntheticTokenIn,\\n        ISyntheticToken _syntheticTokenOut,\\n        uint256 _amountIn\\n    ) external returns (uint256 _amountOut);\\n\\n    function updateMasterOracle(IMasterOracle _newOracle) external;\\n\\n    function updateDebtFloor(uint256 _newDebtFloorInUsd) external;\\n\\n    function updateDepositFee(uint256 _newDepositFee) external;\\n\\n    function updateIssueFee(uint256 _newIssueFee) external;\\n\\n    function updateWithdrawFee(uint256 _newWithdrawFee) external;\\n\\n    function updateRepayFee(uint256 _newRepayFee) external;\\n\\n    function updateSwapFee(uint256 _newSwapFee) external;\\n\\n    function updateLiquidatorLiquidationFee(uint256 _newLiquidatorLiquidationFee) external;\\n\\n    function updateProtocolLiquidationFee(uint256 _newProtocolLiquidationFee) external;\\n\\n    function updateMaxLiquidable(uint256 _newMaxLiquidable) external;\\n\\n    function updateTreasury(ITreasury _newTreasury, bool _withMigration) external;\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function addToDepositTokensOfAccount(address _account) external;\\n\\n    function removeFromDepositTokensOfAccount(address _account) external;\\n\\n    function addToDebtTokensOfAccount(address _account) external;\\n\\n    function removeFromDebtTokensOfAccount(address _account) external;\\n\\n    function getDepositTokensOfAccount(address _account) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address _account) external view returns (address[] memory);\\n\\n    function addRewardsDistributor(IRewardsDistributor _distributor) external;\\n}\\n\",\"keccak256\":\"0x312e1166c4aea80d5c402933d1828167bff1abd4836b70375a79956c4ef771dd\",\"license\":\"MIT\"},\"contracts/interface/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external returns (uint256 _interestAmountAccrued);\\n\\n    function debtIndex() external returns (uint256 _debtIndex);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x52995b704e1b38d0df3b312386c8ab25bbb63a3fd404dd53882cc8c6640fcd40\",\"license\":\"MIT\"},\"contracts/interface/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralizationRatio() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address _account) external view returns (uint256);\\n\\n    function lockedBalanceOf(address _account) external view returns (uint256);\\n\\n    function minDepositTime() external view returns (uint256);\\n\\n    function lastDepositOf(address _account) external view returns (uint256);\\n\\n    function deposit(uint256 _amount, address _onBehalfOf) external;\\n\\n    function withdraw(uint256 _amount, address _to) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function seize(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function updateCollateralizationRatio(uint128 _newCollateralizationRatio) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupplyInUsd() external view returns (uint256);\\n\\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupplyInUsd) external;\\n}\\n\",\"keccak256\":\"0x407a65fba2b513ae968e2a9df7338d619bf536cae66d2a0d8cc5cd013028390f\",\"license\":\"MIT\"},\"contracts/interface/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interface/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPausable {\\n    function paused() external returns (bool);\\n\\n    function everythingStopped() external returns (bool);\\n}\\n\",\"keccak256\":\"0x08d873c08ae95c72f876f933478433bc30eb733925944e04969083ce12fce855\",\"license\":\"MIT\"},\"contracts/interface/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 _token) external view returns (uint256);\\n\\n    function tokensAccruedOf(address _account) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 _token, address _account) external;\\n\\n    function updateBeforeTransfer(\\n        IERC20 _token,\\n        address _from,\\n        address _to\\n    ) external;\\n\\n    function claimRewards(address _account) external;\\n\\n    function claimRewards(address _account, IERC20[] memory _tokens) external;\\n\\n    function claimRewards(address[] memory _accounts, IERC20[] memory _tokens) external;\\n}\\n\",\"keccak256\":\"0x95f3e703f532261a857d6b3734d240cc625ce6a18a9e5bd4f40e41f72996c530\",\"license\":\"MIT\"},\"contracts/interface/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function maxTotalSupplyInUsd() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function mint(address _to, uint256 amount) external;\\n\\n    function burn(address _from, uint256 amount) external;\\n\\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupply) external;\\n\\n    function toggleIsActive() external;\\n\\n    function updateInterestRate(uint256 _newInterestRate) external;\\n\\n    function issue(uint256 _amount, address _to) external;\\n\\n    function repay(address _onBehalfOf, uint256 _amount) external;\\n\\n    function accrueInterest() external;\\n}\\n\",\"keccak256\":\"0xe8cad6047ced36a24abe7246849b2a787e8586d4312569d1f15997c898ea320a\",\"license\":\"MIT\"},\"contracts/interface/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address _to, uint256 _amount) external;\\n\\n    function migrateTo(address _newTreasury) external;\\n}\\n\",\"keccak256\":\"0x06e75dc8161f246f43a22c1167cdc22b9eee6bc59ad378d813278a5fe95b5c42\",\"license\":\"MIT\"},\"contracts/interface/oracle/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(IERC20 _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(IERC20 _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(\\n        IERC20 _assetIn,\\n        IERC20 _assetOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xf250e3b49704c620bbe6e5fd8cf2f82f52adc6c25cd4baac6be669165b86b8ff\",\"license\":\"MIT\"},\"contracts/lib/MappedEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev EnumerableSet fork to support `address => address[]` mapping\\n * @dev Forked from OZ 4.3.2\\n */\\nlibrary MappedEnumerableSet {\\n    struct Set {\\n        // Storage of set values\\n        address[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(address => uint256) _indexes;\\n    }\\n\\n    struct AddressSet {\\n        mapping(address => Set) _ofAddress;\\n    }\\n\\n    function _add(\\n        AddressSet storage set,\\n        address _key,\\n        address value\\n    ) private returns (bool) {\\n        if (!_contains(set, _key, value)) {\\n            set._ofAddress[_key]._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._ofAddress[_key]._indexes[value] = set._ofAddress[_key]._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(\\n        AddressSet storage set,\\n        address _key,\\n        address value\\n    ) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._ofAddress[_key]._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._ofAddress[_key]._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                address lastvalue = set._ofAddress[_key]._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._ofAddress[_key]._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._ofAddress[_key]._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._ofAddress[_key]._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._ofAddress[_key]._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _contains(\\n        AddressSet storage set,\\n        address _key,\\n        address value\\n    ) private view returns (bool) {\\n        return set._ofAddress[_key]._indexes[value] != 0;\\n    }\\n\\n    function _length(AddressSet storage set, address _key) private view returns (uint256) {\\n        return set._ofAddress[_key]._values.length;\\n    }\\n\\n    function _at(\\n        AddressSet storage set,\\n        address _key,\\n        uint256 index\\n    ) private view returns (address) {\\n        return set._ofAddress[_key]._values[index];\\n    }\\n\\n    function _values(AddressSet storage set, address _key) private view returns (address[] memory) {\\n        return set._ofAddress[_key]._values;\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address key,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set, key, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address key,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set, key, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address key,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set, key, value);\\n    }\\n\\n    function length(AddressSet storage set, address key) internal view returns (uint256) {\\n        return _length(set, key);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        address key,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return _at(set, key, index);\\n    }\\n\\n    function values(AddressSet storage set, address key) internal view returns (address[] memory) {\\n        address[] memory store = _values(set, key);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc5f7eefa63d48e3c03f5adfea326f90957f0e0f251962b34722b4280737553c4\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     */\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_RAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     */\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * RAY + b / 2) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     */\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        return ((WAD_RAY_RATIO / 2) + a) / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     */\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a * WAD_RAY_RATIO;\\n    }\\n}\\n\",\"keccak256\":\"0xe338023e9d06145105bf9676436029c27551454b11b67cbc4188df9a270b51af\",\"license\":\"MIT\"},\"contracts/storage/ControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../lib/MappedEnumerableSet.sol\\\";\\nimport \\\"../interface/IController.sol\\\";\\nimport \\\"../interface/ITreasury.sol\\\";\\nimport \\\"../interface/IRewardsDistributor.sol\\\";\\n\\nabstract contract ControllerStorageV1 is IController {\\n    /**\\n     * @notice The debt floor (in USD) for each synthetic token\\n     * This parameters is used to keep incentive for liquidators (i.e. cover gas and provide enough profit)\\n     */\\n    uint256 public debtFloorInUsd;\\n\\n    /**\\n     * @notice The fee charged when depositing collateral\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public depositFee;\\n\\n    /**\\n     * @notice The fee charged when minting a synthetic token\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public issueFee;\\n\\n    /**\\n     * @notice The fee charged when withdrawing collateral\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public withdrawFee;\\n\\n    /**\\n     * @notice The fee charged when repaying debt\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public repayFee;\\n\\n    /**\\n     * @notice The fee charged when swapping synthetic tokens\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public swapFee;\\n\\n    /**\\n     * @notice The fee charged from liquidated deposit that goes to the liquidator\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public liquidatorLiquidationFee;\\n\\n    /**\\n     * @notice The fee charged when liquidating a position\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public protocolLiquidationFee;\\n\\n    /**\\n     * @notice The max percent of the debt allowed to liquidate\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public maxLiquidable;\\n\\n    /**\\n     * @notice Prices oracle\\n     */\\n    IMasterOracle public masterOracle;\\n\\n    /**\\n     * @notice Treasury contract\\n     */\\n    ITreasury public treasury;\\n\\n    /**\\n     * @notice Represents collateral's deposits\\n     */\\n    EnumerableSet.AddressSet internal depositTokens;\\n\\n    /**\\n     * @notice Get the deposit token's address from given underlying asset\\n     */\\n    mapping(IERC20 => IDepositToken) public depositTokenOf;\\n\\n    /**\\n     * @notice Available synthetic tokens\\n     */\\n    EnumerableSet.AddressSet internal syntheticTokens;\\n\\n    /**\\n     * @notice Per-account deposit tokens (i.e. tokens that user has balance > 0)\\n     */\\n    MappedEnumerableSet.AddressSet internal depositTokensOfAccount;\\n\\n    /**\\n     * @notice Per-account debt tokens (i.e. tokens that user has balance > 0)\\n     */\\n    MappedEnumerableSet.AddressSet internal debtTokensOfAccount;\\n\\n    /**\\n     * @notice RewardsDistributor contracts\\n     */\\n    IRewardsDistributor[] internal rewardsDistributors;\\n}\\n\",\"keccak256\":\"0x891daab384696e5e8aa665693a25ba594a9300a3f26d51b319ce1c46f074612f\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     */\\n    function _requireCanSweep() internal view virtual;\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param _token The token to transfer\\n     * @param _to The recipient of the transfer\\n     * @param _amount The amount to send\\n     */\\n    function sweep(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external {\\n        _requireCanSweep();\\n\\n        if (address(_token) == address(0)) {\\n            Address.sendValue(payable(_to), _amount);\\n        } else {\\n            _token.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert(\\\"receive-not-allowed\\\");\\n    }\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert(\\\"fallback-not-allowed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x45fed62204599ac0c9bed76de4ce8b6b070d96d548e029ce1f9f2d0c7c87a99d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600280546001600160a01b0319163390811790915560405181906000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3506145e0806100636000396000f3fe6080604052600436106102fa5760003560e01c80638456cb5911610191578063dbe466b1116100e2578063f0c80d3b11610090578063f0c80d3b146109bf578063f36c7d98146109df578063f3b27bc3146109ff578063f609280914610a14578063fb01600d14610a2a578063fc0e74d114610a3f578063fcfff16f14610a54578063ffa1ad7414610a6957610342565b8063dbe466b1146108c8578063dde3ab95146108e8578063df791e5014610932578063e941fa7814610952578063eaada38214610968578063eafecffa14610988578063ecf3a3f91461099e57610342565b8063b2d90ebb1161013f578063b2d90ebb146107f2578063b6aa515b14610808578063bf16f65a14610828578063c4d66de814610848578063d176e05f14610868578063d283e75f14610888578063daf635de146108a857610342565b80638456cb591461070757806384d6f1ce1461071c57806387cddc861461073c57806388156a35146107725780638a11a37014610792578063a20f37e7146107b2578063abc9b45e146107d257610342565b806356aaee2d1161024b578063681390e6116101f9578063681390e61461063c57806375c6f8ec14610651578063770b69b41461067157806379e40cba146106915780637c0f59f4146106b15780637c7d7484146106c75780637d355163146106e757610342565b806356aaee2d1461056557806357f2e581146105855780635c975abb146105a557806361d027b3146105c657806362c06767146105e657806364831b311461060657806367a527931461062657610342565b80633605b51b116102a85780633605b51b146104885780633af5be47146104aa5780633de2f6b2146104da5780633f4ba83a146104fa5780633f5fc1311461050f5780634dfb65181461052f57806354cf2aeb1461054f57610342565b8063017def57146103815780630c340a24146103a35780631a4660ce146103d957806323e3fbd5146103f9578063275038d01461042e5780632a9133c11461044e5780632dd6adb51461047257610342565b366103425760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b6044820152606401610339565b34801561038d57600080fd5b506103a161039c366004613faf565b610aa7565b005b3480156103af57600080fd5b506002546103c3906001600160a01b031681565b6040516103d09190613fc8565b60405180910390f35b3480156103e557600080fd5b506103a16103f4366004613faf565b610b5b565b34801561040557600080fd5b50610419610414366004613ff1565b610be7565b604080519283526020830191909152016103d0565b34801561043a57600080fd5b506103a1610449366004613ff1565b610dbe565b34801561045a57600080fd5b5061046460065481565b6040519081526020016103d0565b34801561047e57600080fd5b50610464600c5481565b34801561049457600080fd5b5061049d610e12565b6040516103d0919061400e565b3480156104b657600080fd5b506104ca6104c5366004613ff1565b610e74565b60405190151581526020016103d0565b3480156104e657600080fd5b506103a16104f536600461405b565b610e87565b34801561050657600080fd5b506103a161161e565b34801561051b57600080fd5b506103a161052a366004613ff1565b6116ff565b34801561053b57600080fd5b506104ca61054a366004613ff1565b61174c565b34801561055b57600080fd5b5061046460095481565b34801561057157600080fd5b506103a1610580366004613ff1565b611759565b34801561059157600080fd5b506103a16105a0366004613faf565b6118c2565b3480156105b157600080fd5b506003546104ca90600160a01b900460ff1681565b3480156105d257600080fd5b50600e546103c3906001600160a01b031681565b3480156105f257600080fd5b506103a16106013660046140ae565b611976565b34801561061257600080fd5b506103a1610621366004613faf565b6119af565b34801561063257600080fd5b5061046460055481565b34801561064857600080fd5b5061049d611a63565b34801561065d57600080fd5b506103a161066c366004613ff1565b611a74565b34801561067d57600080fd5b506103a161068c366004613ff1565b611bf3565b34801561069d57600080fd5b506103a16106ac366004613ff1565b611d68565b3480156106bd57600080fd5b5061046460085481565b3480156106d357600080fd5b506103a16106e23660046140fd565b611eb5565b3480156106f357600080fd5b5061049d610702366004613ff1565b611ffe565b34801561071357600080fd5b506103a161200b565b34801561072857600080fd5b506103a1610737366004613faf565b6120b3565b34801561074857600080fd5b506103c3610757366004613ff1565b6011602052600090815260409020546001600160a01b031681565b34801561077e57600080fd5b506103a161078d366004613faf565b612167565b34801561079e57600080fd5b506003546103c3906001600160a01b031681565b3480156107be57600080fd5b506103a16107cd366004613ff1565b61221b565b3480156107de57600080fd5b506103a16107ed366004613ff1565b6122ec565b3480156107fe57600080fd5b50610464600a5481565b34801561081457600080fd5b506103a1610823366004613ff1565b6123cf565b34801561083457600080fd5b506103a1610843366004613faf565b61246d565b34801561085457600080fd5b506103a1610863366004613ff1565b612521565b34801561087457600080fd5b5061049d610883366004613ff1565b612639565b34801561089457600080fd5b506104646108a3366004613ff1565b612646565b3480156108b457600080fd5b506103a16108c3366004613faf565b612806565b3480156108d457600080fd5b506103a16108e3366004613ff1565b6128ba565b3480156108f457600080fd5b50610908610903366004613ff1565b612a8f565b6040805195151586526020860194909452928401919091526060830152608082015260a0016103d0565b34801561093e57600080fd5b5061046461094d3660046140ae565b612ad9565b34801561095e57600080fd5b5061046460075481565b34801561097457600080fd5b50600d546103c3906001600160a01b031681565b34801561099457600080fd5b50610464600b5481565b3480156109aa57600080fd5b506003546104ca90600160a81b900460ff1681565b3480156109cb57600080fd5b506103a16109da366004613faf565b61301c565b3480156109eb57600080fd5b506103a16109fa366004613ff1565b6130d0565b348015610a0b57600080fd5b506103a1613364565b348015610a2057600080fd5b5061046460045481565b348015610a3657600080fd5b5061049d613420565b348015610a4b57600080fd5b506103a161342c565b348015610a6057600080fd5b506103a16134bc565b348015610a7557600080fd5b50610a9a604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516103d09190614166565b6002546001600160a01b03163314610ad15760405162461bcd60e51b815260040161033990614199565b670de0b6b3a7640000811115610af95760405162461bcd60e51b8152600401610339906141bf565b60055481811415610b1c5760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527f828cf983933545af35b9ba46eec951db1cb4c5433c3ec403aeced2963c264790910160405180910390a150600555565b6002546001600160a01b03163314610b855760405162461bcd60e51b815260040161033990614199565b60045481811415610ba85760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527f0662703672e57800b9439de3a419c9155283ad25ea7776c139c876bd8b93bb98910160405180910390a150600455565b60008080610bf6601485613562565b905060005b81811015610db7576000610c1160148784613583565b600d546040516370a0823160e01b81529192506000916001600160a01b0391821691638d0dba009185918216906370a0823190610c52908d90600401613fc8565b60206040518083038186803b158015610c6a57600080fd5b505afa158015610c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca29190614211565b6040518363ffffffff1660e01b8152600401610cbf92919061422a565b60206040518083038186803b158015610cd757600080fd5b505afa158015610ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0f9190614211565b9050610d1b8187614259565b9550610d98826001600160a01b031663dcaf9c446040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5957600080fd5b505afa158015610d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d919190614211565b8290613598565b610da29086614259565b9450505080610db090614271565b9050610bfb565b5050915091565b610dcb335b600f906135e4565b610de75760405162461bcd60e51b81526004016103399061428c565b610df360148233613606565b610e0f5760405162461bcd60e51b8152600401610339906142c3565b50565b60606016805480602002602001604051908101604052809291908181526020018280548015610e6a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e4c575b5050505050905090565b6000610e81600f836135e4565b92915050565b600354600160a81b900460ff1615610eb15760405162461bcd60e51b8152600401610339906142fa565b60026001541415610ed45760405162461bcd60e51b81526004016103399061431c565b600260015580610ee381610e74565b610eff5760405162461bcd60e51b815260040161033990614353565b60008311610f405760405162461bcd60e51b815260206004820152600e60248201526d616d6f756e742d69732d7a65726f60901b6044820152606401610339565b336001600160a01b038516811415610f9a5760405162461bcd60e51b815260206004820152601e60248201527f63616e2d6e6f742d6c69717569646174652d6f776e2d706f736974696f6e00006044820152606401610339565b856001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fd557600080fd5b505af1158015610fe9573d6000803e3d6000fd5b505050506000610ff886612a8f565b50505050905080156110425760405162461bcd60e51b8152602060048201526013602482015272706f736974696f6e2d69732d6865616c74687960681b6044820152606401610339565b6000876001600160a01b031663f8d898986040518163ffffffff1660e01b815260040160206040518083038186803b15801561107d57600080fd5b505afa158015611091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b59190614382565b90506000816001600160a01b03166370a08231896040518263ffffffff1660e01b81526004016110e59190613fc8565b60206040518083038186803b1580156110fd57600080fd5b505afa158015611111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111359190614211565b600c549091506111458883613613565b111561118e5760405162461bcd60e51b8152602060048201526018602482015277616d6f756e742d67742d6d61782d6c697175696461626c6560401b6044820152606401610339565b6004541561127b57600d546000906001600160a01b0316638d0dba008b6111b58b8661439f565b6040518363ffffffff1660e01b81526004016111d292919061422a565b60206040518083038186803b1580156111ea57600080fd5b505afa1580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112229190614211565b905080158061123357506004548110155b6112795760405162461bcd60e51b81526020600482015260176024820152763932b6b0b4b734b73396b232b13a16b63a16b33637b7b960491b6044820152606401610339565b505b600d54604051632d9198e160e21b81526000916001600160a01b03169063b6466384906112b0908d908b908d906004016143b6565b60206040518083038186803b1580156112c857600080fd5b505afa1580156112dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113009190614211565b9050600080600b5411611314576000611322565b600b54611322908390613598565b90506000611346600a54670de0b6b3a764000061133f9190614259565b8490613598565b905060006113548284614259565b6040516370a0823160e01b81529091506001600160a01b038b16906370a0823190611383908f90600401613fc8565b60206040518083038186803b15801561139b57600080fd5b505afa1580156113af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d39190614211565b8111156114145760405162461bcd60e51b815260206004820152600f60248201526e0c2dadeeadce85ae8dede5ad0d2ced608b1b6044820152606401610339565b604051632770a7eb60e21b81526001600160a01b038e1690639dc29fac90611442908b908f9060040161422a565b600060405180830381600087803b15801561145c57600080fd5b505af1158015611470573d6000803e3d6000fd5b5050604051632770a7eb60e21b81526001600160a01b0389169250639dc29fac91506114a2908f908f9060040161422a565b600060405180830381600087803b1580156114bc57600080fd5b505af11580156114d0573d6000803e3d6000fd5b505060405163b2a02ff160e01b81526001600160a01b038d16925063b2a02ff19150611504908f908c9087906004016143b6565b600060405180830381600087803b15801561151e57600080fd5b505af1158015611532573d6000803e3d6000fd5b5050505060008311156115b757896001600160a01b031663b2a02ff18d600e60009054906101000a90046001600160a01b0316866040518463ffffffff1660e01b8152600401611584939291906143b6565b600060405180830381600087803b15801561159e57600080fd5b505af11580156115b2573d6000803e3d6000fd5b505050505b604080518c8152602081018390529081018490526001600160a01b03808f16918e8216918b16907fe1c3870e3d7d5199a16d200133088e6e3f7012d28571e442a110b4c83b5e3b949060600160405180910390a45050600180555050505050505050505050565b600354600160a01b900460ff166116645760405162461bcd60e51b815260206004820152600a6024820152691b9bdd0b5c185d5cd95960b21b6044820152606401610339565b600354600160a81b900460ff161561168e5760405162461bcd60e51b8152600401610339906142fa565b6002546001600160a01b031633146116b85760405162461bcd60e51b815260040161033990614199565b6003805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516116f59190613fc8565b60405180910390a1565b61170833610dc3565b6117245760405162461bcd60e51b81526004016103399061428c565b61173060148233613633565b610e0f5760405162461bcd60e51b8152600401610339906143da565b6000610e816012836135e4565b6002546001600160a01b031633146117835760405162461bcd60e51b815260040161033990614199565b6001600160a01b0381166117a95760405162461bcd60e51b815260040161033990614408565b60005b60165481101561183b57601681815481106117c9576117c9614431565b6000918252602090912001546001600160a01b03838116911614156118295760405162461bcd60e51b815260206004820152601660248201527518dbdb9d1c9858dd0b585b1c9958591e4b585919195960521b6044820152606401610339565b8061183381614271565b9150506117ac565b50601680546001810182556000919091527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b51242890180546001600160a01b0319166001600160a01b0383161790556040517f5579b1eead2d904c2b05255a92f5a4a4f3e234ae0a4efe538adef3c1794e1cea906118b7908390613fc8565b60405180910390a150565b6002546001600160a01b031633146118ec5760405162461bcd60e51b815260040161033990614199565b670de0b6b3a76400008111156119145760405162461bcd60e51b8152600401610339906141bf565b600654818114156119375760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527f7aef17a0caeda11810cdf2a40c79ac1340553588671fb35d5cc8d0a3fe2883be910160405180910390a150600655565b61197e613640565b6001600160a01b03831661199b57611996828261366c565b505050565b6119966001600160a01b0384168383613785565b6002546001600160a01b031633146119d95760405162461bcd60e51b815260040161033990614199565b670de0b6b3a7640000811115611a015760405162461bcd60e51b8152600401610339906141bf565b600a5481811415611a245760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527f457d9e7f8f7a13610e084de82e6b40a65eddd57ff51a358ef64e1199c37c676a910160405180910390a150600a55565b6060611a6f60126137db565b905090565b6000336001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b158015611aaf57600080fd5b505afa158015611ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae79190614382565b9050611af46012826135e4565b8015611b815750806001600160a01b031663f8d898986040518163ffffffff1660e01b815260040160206040518083038186803b158015611b3457600080fd5b505afa158015611b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6c9190614382565b6001600160a01b0316336001600160a01b0316145b611b9d5760405162461bcd60e51b815260040161033990614447565b611ba960158333613606565b611bef5760405162461bcd60e51b81526020600482015260176024820152761919589d0b5d1bdad95b8b591bd95cdb9d0b595e1a5cdd604a1b6044820152606401610339565b5050565b6000336001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2e57600080fd5b505afa158015611c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c669190614382565b9050611c736012826135e4565b8015611d005750806001600160a01b031663f8d898986040518163ffffffff1660e01b815260040160206040518083038186803b158015611cb357600080fd5b505afa158015611cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ceb9190614382565b6001600160a01b0316336001600160a01b0316145b611d1c5760405162461bcd60e51b815260040161033990614447565b611d2860158333613633565b611bef5760405162461bcd60e51b8152602060048201526011602482015270646562742d746f6b656e2d65786973747360781b6044820152606401610339565b6002546001600160a01b03163314611d925760405162461bcd60e51b815260040161033990614199565b6001600160a01b038116611db85760405162461bcd60e51b815260040161033990614408565b611dc3600f826137e8565b611ddf5760405162461bcd60e51b8152600401610339906143da565b8060116000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1d57600080fd5b505afa158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e559190614382565b6001600160a01b03908116825260208201929092526040908101600090812080546001600160a01b0319169484169490941790935551908316917fdc705e658c7b6c6c01f5802457bf4ffb99f204bf1603e7b1ae3d4c7536611bc291a250565b6002546001600160a01b03163314611edf5760405162461bcd60e51b815260040161033990614199565b6001600160a01b038216611f055760405162461bcd60e51b815260040161033990614408565b600e546001600160a01b03908116908316811415611f355760405162461bcd60e51b8152600401610339906141e4565b8115611f9a576040516326ed7c7960e11b81526001600160a01b03821690634ddaf8f290611f67908690600401613fc8565b600060405180830381600087803b158015611f8157600080fd5b505af1158015611f95573d6000803e3d6000fd5b505050505b826001600160a01b0316816001600160a01b03167f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a60405160405180910390a35050600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6060610e816014836137fd565b600354600160a01b900460ff161561204e5760405162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b6044820152606401610339565b6002546001600160a01b031633146120785760405162461bcd60e51b815260040161033990614199565b6003805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116e83390565b6002546001600160a01b031633146120dd5760405162461bcd60e51b815260040161033990614199565b670de0b6b3a76400008111156121055760405162461bcd60e51b8152600401610339906141bf565b600b54818114156121285760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527fe0dac1dcc46eceed1fdb7416944e7161273637fb346a67d6f0fce8de3e952f2f910160405180910390a150600b55565b6002546001600160a01b031633146121915760405162461bcd60e51b815260040161033990614199565b670de0b6b3a76400008111156121b95760405162461bcd60e51b8152600401610339906141bf565b600854818114156121dc5760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527fdd45ca427fa57d0870314eb55586e91bcdd31d7cd393e3278caaae9dfb749688910160405180910390a150600855565b6002546001600160a01b031633146122455760405162461bcd60e51b815260040161033990614199565b6001600160a01b03811661226b5760405162461bcd60e51b815260040161033990614408565b6122766012826137e8565b6122b55760405162461bcd60e51b815260206004820152601060248201526f73796e7468657469632d65786973747360801b6044820152606401610339565b6040516001600160a01b038216907f6b5a83f4cf73e3df48c170415d0be65d33e1cedc4eecd090d47189119061eb4890600090a250565b6002546001600160a01b031633146123165760405162461bcd60e51b815260040161033990614199565b6001600160a01b03811661233c5760405162461bcd60e51b815260040161033990614408565b600d546001600160a01b0390811690821681141561236c5760405162461bcd60e51b8152600401610339906141e4565b816001600160a01b0316816001600160a01b03167fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c60405160405180910390a350600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146123f95760405162461bcd60e51b815260040161033990614199565b6001600160a01b03811661244b5760405162461bcd60e51b815260206004820152601960248201527870726f706f7365642d676f7665726e6f722d69732d7a65726f60381b6044820152606401610339565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146124975760405162461bcd60e51b815260040161033990614199565b670de0b6b3a76400008111156124bf5760405162461bcd60e51b8152600401610339906141bf565b600954818114156124e25760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527fc8273cce54f5cf71712dee009c7e6438ae7e1db578da0ec076cf360af45501b9910160405180910390a150600955565b600054610100900460ff168061253a575060005460ff16155b6125565760405162461bcd60e51b815260040161033990614479565b600054610100900460ff16158015612578576000805461ffff19166101011790555b6001600160a01b0382166125bf5760405162461bcd60e51b815260206004820152600e60248201526d1bdc9858db194b5a5ccb5b9d5b1b60921b6044820152606401610339565b6125c761380b565b6125cf61387a565b600d80546001600160a01b0319166001600160a01b038416179055660aa87bee538000600855661550f7dca7000060095567016345785d8a0000600a5567011c37937e080000600b556706f05b59d3b20000600c558015611bef576000805461ff00191690555050565b6060610e816015836137fd565b600080612654601584613562565b905060005b818110156127ff57600061266f60158684613583565b90506000816001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b1580156126ac57600080fd5b505afa1580156126c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e49190614382565b600d546040516370a0823160e01b81529192506001600160a01b0390811691638d0dba00918491908616906370a0823190612723908c90600401613fc8565b60206040518083038186803b15801561273b57600080fd5b505afa15801561274f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127739190614211565b6040518363ffffffff1660e01b815260040161279092919061422a565b60206040518083038186803b1580156127a857600080fd5b505afa1580156127bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e09190614211565b6127ea9086614259565b94505050806127f890614271565b9050612659565b5050919050565b6002546001600160a01b031633146128305760405162461bcd60e51b815260040161033990614199565b670de0b6b3a76400008111156128585760405162461bcd60e51b8152600401610339906141bf565b6007548181141561287b5760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527f733071ab8253b372ed26a6d1b04aec71c4bfcd209c93397df32bb77478cdd2c8910160405180910390a150600755565b6002546001600160a01b031633146128e45760405162461bcd60e51b815260040161033990614199565b806128ee81610e74565b61290a5760405162461bcd60e51b815260040161033990614353565b816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561294357600080fd5b505afa158015612957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297b9190614211565b156129985760405162461bcd60e51b8152600401610339906144c7565b6129a3600f83613928565b6129bf5760405162461bcd60e51b8152600401610339906142c3565b60116000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156129fc57600080fd5b505afa158015612a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a349190614382565b6001600160a01b03908116825260208201929092526040908101600090812080546001600160a01b03191690559051918416917fe5a19a76470297a1f85f9a38f3ff148b4c8cdc1209e074dbe59db5e22eb31a3a9190a25050565b6000806000806000612aa086612646565b9250612aab86610be7565b8085111596509094509150818310612ac4576000612ace565b612ace838361439f565b905091939590929450565b600354600090600160a81b900460ff1615612b065760405162461bcd60e51b8152600401610339906142fa565b60026001541415612b295760405162461bcd60e51b81526004016103399061431c565b600260015583612b388161174c565b612b545760405162461bcd60e51b8152600401610339906144ec565b83612b5e8161174c565b612b7a5760405162461bcd60e51b8152600401610339906144ec565b84806001600160a01b03166322f3e2d46040518163ffffffff1660e01b815260040160206040518083038186803b158015612bb457600080fd5b505afa158015612bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bec919061451a565b612c2d5760405162461bcd60e51b815260206004820152601260248201527173796e7468657469632d696e61637469766560701b6044820152606401610339565b866001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612c6857600080fd5b505af1158015612c7c573d6000803e3d6000fd5b50505050856001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612cbb57600080fd5b505af1158015612ccf573d6000803e3d6000fd5b505050506000612cdc3390565b905060008611612d1f5760405162461bcd60e51b815260206004820152600e60248201526d0616d6f756e742d696e2d69732d360941b6044820152606401610339565b6040516370a0823160e01b81526001600160a01b038916906370a0823190612d4b908490600401613fc8565b60206040518083038186803b158015612d6357600080fd5b505afa158015612d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9b9190614211565b861115612de15760405162461bcd60e51b8152602060048201526014602482015273616d6f756e742d696e2d67742d62616c616e636560601b6044820152606401610339565b604051632770a7eb60e21b81526001600160a01b03891690639dc29fac90612e0f9084908a9060040161422a565b600060405180830381600087803b158015612e2957600080fd5b505af1158015612e3d573d6000803e3d6000fd5b5050600d54604051632d9198e160e21b81526001600160a01b03909116925063b64663849150612e75908b908b908b906004016143b6565b60206040518083038186803b158015612e8d57600080fd5b505afa158015612ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec59190614211565b94506000806009541115612f5757600954612ee1908790613598565b600e546040516340c10f1960e01b81529192506001600160a01b03808b16926340c10f1992612f16921690859060040161422a565b600060405180830381600087803b158015612f3057600080fd5b505af1158015612f44573d6000803e3d6000fd5b505050508086612f54919061439f565b95505b6040516340c10f1960e01b81526001600160a01b038916906340c10f1990612f859085908a9060040161422a565b600060405180830381600087803b158015612f9f57600080fd5b505af1158015612fb3573d6000803e3d6000fd5b5050604080518a8152602081018a90529081018490526001600160a01b03808c1693508c811692508516907fafd74f009c0ff7627726f24b568ee5529cd297f6a7a1e43ec363443a13a584209060600160405180910390a4505060018055509195945050505050565b6002546001600160a01b031633146130465760405162461bcd60e51b815260040161033990614199565b670de0b6b3a764000081111561306e5760405162461bcd60e51b8152600401610339906141bf565b600c54818114156130915760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527f6d8ed4ad9ba67058e16e32fc3c8da2e3358da6cd1599e0e0fb2630d0a19fd49c910160405180910390a150600c55565b6002546001600160a01b031633146130fa5760405162461bcd60e51b815260040161033990614199565b806131048161174c565b6131205760405162461bcd60e51b8152600401610339906144ec565b816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561315957600080fd5b505afa15801561316d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131919190614211565b156131ae5760405162461bcd60e51b8152600401610339906144c7565b816001600160a01b031663f8d898986040518163ffffffff1660e01b815260040160206040518083038186803b1580156131e757600080fd5b505afa1580156131fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321f9190614382565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561325757600080fd5b505afa15801561326b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328f9190614211565b156132dc5760405162461bcd60e51b815260206004820152601a60248201527f73796e7468657469632d776974682d646562742d737570706c790000000000006044820152606401610339565b6132e7601283613928565b61332c5760405162461bcd60e51b81526020600482015260166024820152751cde5b9d1a195d1a58cb591bd95cdb9d0b595e1a5cdd60521b6044820152606401610339565b6040516001600160a01b038316907fc6410e68b378721373b73ca2a05e332f27c833f6aca80f67ce583292e01f3bc490600090a25050565b6003546001600160a01b031633146133ba5760405162461bcd60e51b81526020600482015260196024820152783737ba16ba343296b83937b837b9b2b216b3b7bb32b93737b960391b6044820152606401610339565b6003546002546040516001600160a01b0392831692909116907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a360038054600280546001600160a01b03199081166001600160a01b03841617909155169055565b6060611a6f600f6137db565b600354600160a81b900460ff16156134565760405162461bcd60e51b8152600401610339906142fa565b6002546001600160a01b031633146134805760405162461bcd60e51b815260040161033990614199565b6003805461ffff60a01b191661010160a01b1790557f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a336116e8565b600354600160a81b900460ff166135045760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b9b43aba3237bbb760a11b6044820152606401610339565b6002546001600160a01b0316331461352e5760405162461bcd60e51b815260040161033990614199565b6003805460ff60a81b191690557fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc336116e8565b6001600160a01b0381166000908152602083905260408120545b9392505050565b600061359084848461393d565b949350505050565b60008215806135a5575081155b156135b257506000610e81565b670de0b6b3a76400006135c6600282614537565b6135d08486614559565b6135da9190614259565b61357c9190614537565b6001600160a01b0381166000908152600183016020526040812054151561357c565b6000613590848484613984565b600081613621600282614537565b6135d0670de0b6b3a764000086614559565b6000613590848484613b31565b6002546001600160a01b0316331461366a5760405162461bcd60e51b815260040161033990614199565b565b804710156136bc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610339565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613709576040519150601f19603f3d011682016040523d82523d6000602084013e61370e565b606091505b50509050806119965760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610339565b6119968363a9059cbb60e01b84846040516024016137a492919061422a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613bbf565b6060600061357c83613c91565b600061357c836001600160a01b038416613ced565b606060006135908484613d3c565b600054610100900460ff1680613824575060005460ff16155b6138405760405162461bcd60e51b815260040161033990614479565b600054610100900460ff16158015613862576000805461ffff19166101011790555b600180558015610e0f576000805461ff001916905550565b600054610100900460ff1680613893575060005460ff16155b6138af5760405162461bcd60e51b815260040161033990614479565b600054610100900460ff161580156138d1576000805461ffff19166101011790555b600280546001600160a01b0319163390811790915560405181906000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3508015610e0f576000805461ff001916905550565b600061357c836001600160a01b038416613db1565b6001600160a01b038216600090815260208490526040812080548390811061396757613967614431565b6000918252602090912001546001600160a01b0316949350505050565b6001600160a01b03808316600090815260208581526040808320938516835260019093019052908120548015613b275760006139c160018361439f565b6001600160a01b038616600090815260208890526040812054919250906139ea9060019061439f565b9050818114613aa6576001600160a01b0386166000908152602088905260408120805483908110613a1d57613a1d614431565b60009182526020808320909101546001600160a01b038a81168452918b90526040909220805491909216925082919085908110613a5c57613a5c614431565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905589831682528a8152604080832094909316825260019390930190925290208390555b6001600160a01b0386166000908152602088905260409020805480613acd57613acd614578565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03888116835289825260408084209189168452600191820190925290822091909155935061357c92505050565b600091505061357c565b6001600160a01b0380831660009081526020858152604080832093851683526001909301905290812054613bb757506001600160a01b0382811660009081526020858152604080832080546001808201835582865284862090910180546001600160a01b031916968816968717905581549585529081019092529091209190915561357c565b50600061357c565b6000613c14826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ea49092919063ffffffff16565b8051909150156119965780806020019051810190613c32919061451a565b6119965760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610339565b606081600001805480602002602001604051908101604052809291908181526020018280548015613ce157602002820191906000526020600020905b815481526020019060010190808311613ccd575b50505050509050919050565b6000818152600183016020526040812054613d3457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e81565b506000610e81565b6001600160a01b03811660009081526020838152604091829020805483518184028101840190945280845260609392830182828015613da457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d86575b5050505050905092915050565b60008181526001830160205260408120548015613e9a576000613dd560018361439f565b8554909150600090613de99060019061439f565b9050818114613e4e576000866000018281548110613e0957613e09614431565b9060005260206000200154905080876000018481548110613e2c57613e2c614431565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613e5f57613e5f614578565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e81565b6000915050610e81565b6060613590848460008585843b613efd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610339565b600080866001600160a01b03168587604051613f19919061458e565b60006040518083038185875af1925050503d8060008114613f56576040519150601f19603f3d011682016040523d82523d6000602084013e613f5b565b606091505b5091509150613f6b828286613f76565b979650505050505050565b60608315613f8557508161357c565b825115613f955782518084602001fd5b8160405162461bcd60e51b81526004016103399190614166565b600060208284031215613fc157600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610e0f57600080fd5b60006020828403121561400357600080fd5b813561357c81613fdc565b6020808252825182820181905260009190848201906040850190845b8181101561404f5783516001600160a01b03168352928401929184019160010161402a565b50909695505050505050565b6000806000806080858703121561407157600080fd5b843561407c81613fdc565b9350602085013561408c81613fdc565b92506040850135915060608501356140a381613fdc565b939692955090935050565b6000806000606084860312156140c357600080fd5b83356140ce81613fdc565b925060208401356140de81613fdc565b929592945050506040919091013590565b8015158114610e0f57600080fd5b6000806040838503121561411057600080fd5b823561411b81613fdc565b9150602083013561412b816140ef565b809150509250929050565b60005b83811015614151578181015183820152602001614139565b83811115614160576000848401525b50505050565b6020815260008251806020840152614185816040850160208701614136565b601f01601f19169190910160400192915050565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b6020808252600b908201526a6d61782d69732d3130302560a81b604082015260600190565b6020808252601390820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b604082015260600190565b60006020828403121561422357600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561426c5761426c614243565b500190565b600060001982141561428557614285614243565b5060010190565b6020808252601b908201527f63616c6c65722d69732d6e6f742d6465706f7369742d746f6b656e0000000000604082015260600190565b6020808252601a908201527f6465706f7369742d746f6b656e2d646f65736e742d6578697374000000000000604082015260600190565b60208082526008908201526739b43aba3237bbb760c11b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526015908201527418dbdb1b185d195c985b0b5a5b995e1a5cdd195b9d605a1b604082015260600190565b60006020828403121561439457600080fd5b815161357c81613fdc565b6000828210156143b1576143b1614243565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252601490820152736465706f7369742d746f6b656e2d65786973747360601b604082015260600190565b6020808252600f908201526e1859191c995cdccb5a5ccb5b9d5b1b608a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60208082526018908201527731b0b63632b916b4b996b737ba16b232b13a16ba37b5b2b760411b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600b908201526a0737570706c792d67742d360ac1b604082015260600190565b6020808252601490820152731cde5b9d1a195d1a58cb5a5b995e1a5cdd195b9d60621b604082015260600190565b60006020828403121561452c57600080fd5b815161357c816140ef565b60008261455457634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561457357614573614243565b500290565b634e487b7160e01b600052603160045260246000fd5b600082516145a0818460208701614136565b919091019291505056fea26469706673582212205e9be46c50c92fa7407082f8925f00882c322f21286628de23e3a057e3b80b1164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102fa5760003560e01c80638456cb5911610191578063dbe466b1116100e2578063f0c80d3b11610090578063f0c80d3b146109bf578063f36c7d98146109df578063f3b27bc3146109ff578063f609280914610a14578063fb01600d14610a2a578063fc0e74d114610a3f578063fcfff16f14610a54578063ffa1ad7414610a6957610342565b8063dbe466b1146108c8578063dde3ab95146108e8578063df791e5014610932578063e941fa7814610952578063eaada38214610968578063eafecffa14610988578063ecf3a3f91461099e57610342565b8063b2d90ebb1161013f578063b2d90ebb146107f2578063b6aa515b14610808578063bf16f65a14610828578063c4d66de814610848578063d176e05f14610868578063d283e75f14610888578063daf635de146108a857610342565b80638456cb591461070757806384d6f1ce1461071c57806387cddc861461073c57806388156a35146107725780638a11a37014610792578063a20f37e7146107b2578063abc9b45e146107d257610342565b806356aaee2d1161024b578063681390e6116101f9578063681390e61461063c57806375c6f8ec14610651578063770b69b41461067157806379e40cba146106915780637c0f59f4146106b15780637c7d7484146106c75780637d355163146106e757610342565b806356aaee2d1461056557806357f2e581146105855780635c975abb146105a557806361d027b3146105c657806362c06767146105e657806364831b311461060657806367a527931461062657610342565b80633605b51b116102a85780633605b51b146104885780633af5be47146104aa5780633de2f6b2146104da5780633f4ba83a146104fa5780633f5fc1311461050f5780634dfb65181461052f57806354cf2aeb1461054f57610342565b8063017def57146103815780630c340a24146103a35780631a4660ce146103d957806323e3fbd5146103f9578063275038d01461042e5780632a9133c11461044e5780632dd6adb51461047257610342565b366103425760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b6044820152606401610339565b34801561038d57600080fd5b506103a161039c366004613faf565b610aa7565b005b3480156103af57600080fd5b506002546103c3906001600160a01b031681565b6040516103d09190613fc8565b60405180910390f35b3480156103e557600080fd5b506103a16103f4366004613faf565b610b5b565b34801561040557600080fd5b50610419610414366004613ff1565b610be7565b604080519283526020830191909152016103d0565b34801561043a57600080fd5b506103a1610449366004613ff1565b610dbe565b34801561045a57600080fd5b5061046460065481565b6040519081526020016103d0565b34801561047e57600080fd5b50610464600c5481565b34801561049457600080fd5b5061049d610e12565b6040516103d0919061400e565b3480156104b657600080fd5b506104ca6104c5366004613ff1565b610e74565b60405190151581526020016103d0565b3480156104e657600080fd5b506103a16104f536600461405b565b610e87565b34801561050657600080fd5b506103a161161e565b34801561051b57600080fd5b506103a161052a366004613ff1565b6116ff565b34801561053b57600080fd5b506104ca61054a366004613ff1565b61174c565b34801561055b57600080fd5b5061046460095481565b34801561057157600080fd5b506103a1610580366004613ff1565b611759565b34801561059157600080fd5b506103a16105a0366004613faf565b6118c2565b3480156105b157600080fd5b506003546104ca90600160a01b900460ff1681565b3480156105d257600080fd5b50600e546103c3906001600160a01b031681565b3480156105f257600080fd5b506103a16106013660046140ae565b611976565b34801561061257600080fd5b506103a1610621366004613faf565b6119af565b34801561063257600080fd5b5061046460055481565b34801561064857600080fd5b5061049d611a63565b34801561065d57600080fd5b506103a161066c366004613ff1565b611a74565b34801561067d57600080fd5b506103a161068c366004613ff1565b611bf3565b34801561069d57600080fd5b506103a16106ac366004613ff1565b611d68565b3480156106bd57600080fd5b5061046460085481565b3480156106d357600080fd5b506103a16106e23660046140fd565b611eb5565b3480156106f357600080fd5b5061049d610702366004613ff1565b611ffe565b34801561071357600080fd5b506103a161200b565b34801561072857600080fd5b506103a1610737366004613faf565b6120b3565b34801561074857600080fd5b506103c3610757366004613ff1565b6011602052600090815260409020546001600160a01b031681565b34801561077e57600080fd5b506103a161078d366004613faf565b612167565b34801561079e57600080fd5b506003546103c3906001600160a01b031681565b3480156107be57600080fd5b506103a16107cd366004613ff1565b61221b565b3480156107de57600080fd5b506103a16107ed366004613ff1565b6122ec565b3480156107fe57600080fd5b50610464600a5481565b34801561081457600080fd5b506103a1610823366004613ff1565b6123cf565b34801561083457600080fd5b506103a1610843366004613faf565b61246d565b34801561085457600080fd5b506103a1610863366004613ff1565b612521565b34801561087457600080fd5b5061049d610883366004613ff1565b612639565b34801561089457600080fd5b506104646108a3366004613ff1565b612646565b3480156108b457600080fd5b506103a16108c3366004613faf565b612806565b3480156108d457600080fd5b506103a16108e3366004613ff1565b6128ba565b3480156108f457600080fd5b50610908610903366004613ff1565b612a8f565b6040805195151586526020860194909452928401919091526060830152608082015260a0016103d0565b34801561093e57600080fd5b5061046461094d3660046140ae565b612ad9565b34801561095e57600080fd5b5061046460075481565b34801561097457600080fd5b50600d546103c3906001600160a01b031681565b34801561099457600080fd5b50610464600b5481565b3480156109aa57600080fd5b506003546104ca90600160a81b900460ff1681565b3480156109cb57600080fd5b506103a16109da366004613faf565b61301c565b3480156109eb57600080fd5b506103a16109fa366004613ff1565b6130d0565b348015610a0b57600080fd5b506103a1613364565b348015610a2057600080fd5b5061046460045481565b348015610a3657600080fd5b5061049d613420565b348015610a4b57600080fd5b506103a161342c565b348015610a6057600080fd5b506103a16134bc565b348015610a7557600080fd5b50610a9a604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516103d09190614166565b6002546001600160a01b03163314610ad15760405162461bcd60e51b815260040161033990614199565b670de0b6b3a7640000811115610af95760405162461bcd60e51b8152600401610339906141bf565b60055481811415610b1c5760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527f828cf983933545af35b9ba46eec951db1cb4c5433c3ec403aeced2963c264790910160405180910390a150600555565b6002546001600160a01b03163314610b855760405162461bcd60e51b815260040161033990614199565b60045481811415610ba85760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527f0662703672e57800b9439de3a419c9155283ad25ea7776c139c876bd8b93bb98910160405180910390a150600455565b60008080610bf6601485613562565b905060005b81811015610db7576000610c1160148784613583565b600d546040516370a0823160e01b81529192506000916001600160a01b0391821691638d0dba009185918216906370a0823190610c52908d90600401613fc8565b60206040518083038186803b158015610c6a57600080fd5b505afa158015610c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca29190614211565b6040518363ffffffff1660e01b8152600401610cbf92919061422a565b60206040518083038186803b158015610cd757600080fd5b505afa158015610ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0f9190614211565b9050610d1b8187614259565b9550610d98826001600160a01b031663dcaf9c446040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5957600080fd5b505afa158015610d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d919190614211565b8290613598565b610da29086614259565b9450505080610db090614271565b9050610bfb565b5050915091565b610dcb335b600f906135e4565b610de75760405162461bcd60e51b81526004016103399061428c565b610df360148233613606565b610e0f5760405162461bcd60e51b8152600401610339906142c3565b50565b60606016805480602002602001604051908101604052809291908181526020018280548015610e6a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e4c575b5050505050905090565b6000610e81600f836135e4565b92915050565b600354600160a81b900460ff1615610eb15760405162461bcd60e51b8152600401610339906142fa565b60026001541415610ed45760405162461bcd60e51b81526004016103399061431c565b600260015580610ee381610e74565b610eff5760405162461bcd60e51b815260040161033990614353565b60008311610f405760405162461bcd60e51b815260206004820152600e60248201526d616d6f756e742d69732d7a65726f60901b6044820152606401610339565b336001600160a01b038516811415610f9a5760405162461bcd60e51b815260206004820152601e60248201527f63616e2d6e6f742d6c69717569646174652d6f776e2d706f736974696f6e00006044820152606401610339565b856001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fd557600080fd5b505af1158015610fe9573d6000803e3d6000fd5b505050506000610ff886612a8f565b50505050905080156110425760405162461bcd60e51b8152602060048201526013602482015272706f736974696f6e2d69732d6865616c74687960681b6044820152606401610339565b6000876001600160a01b031663f8d898986040518163ffffffff1660e01b815260040160206040518083038186803b15801561107d57600080fd5b505afa158015611091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b59190614382565b90506000816001600160a01b03166370a08231896040518263ffffffff1660e01b81526004016110e59190613fc8565b60206040518083038186803b1580156110fd57600080fd5b505afa158015611111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111359190614211565b600c549091506111458883613613565b111561118e5760405162461bcd60e51b8152602060048201526018602482015277616d6f756e742d67742d6d61782d6c697175696461626c6560401b6044820152606401610339565b6004541561127b57600d546000906001600160a01b0316638d0dba008b6111b58b8661439f565b6040518363ffffffff1660e01b81526004016111d292919061422a565b60206040518083038186803b1580156111ea57600080fd5b505afa1580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112229190614211565b905080158061123357506004548110155b6112795760405162461bcd60e51b81526020600482015260176024820152763932b6b0b4b734b73396b232b13a16b63a16b33637b7b960491b6044820152606401610339565b505b600d54604051632d9198e160e21b81526000916001600160a01b03169063b6466384906112b0908d908b908d906004016143b6565b60206040518083038186803b1580156112c857600080fd5b505afa1580156112dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113009190614211565b9050600080600b5411611314576000611322565b600b54611322908390613598565b90506000611346600a54670de0b6b3a764000061133f9190614259565b8490613598565b905060006113548284614259565b6040516370a0823160e01b81529091506001600160a01b038b16906370a0823190611383908f90600401613fc8565b60206040518083038186803b15801561139b57600080fd5b505afa1580156113af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d39190614211565b8111156114145760405162461bcd60e51b815260206004820152600f60248201526e0c2dadeeadce85ae8dede5ad0d2ced608b1b6044820152606401610339565b604051632770a7eb60e21b81526001600160a01b038e1690639dc29fac90611442908b908f9060040161422a565b600060405180830381600087803b15801561145c57600080fd5b505af1158015611470573d6000803e3d6000fd5b5050604051632770a7eb60e21b81526001600160a01b0389169250639dc29fac91506114a2908f908f9060040161422a565b600060405180830381600087803b1580156114bc57600080fd5b505af11580156114d0573d6000803e3d6000fd5b505060405163b2a02ff160e01b81526001600160a01b038d16925063b2a02ff19150611504908f908c9087906004016143b6565b600060405180830381600087803b15801561151e57600080fd5b505af1158015611532573d6000803e3d6000fd5b5050505060008311156115b757896001600160a01b031663b2a02ff18d600e60009054906101000a90046001600160a01b0316866040518463ffffffff1660e01b8152600401611584939291906143b6565b600060405180830381600087803b15801561159e57600080fd5b505af11580156115b2573d6000803e3d6000fd5b505050505b604080518c8152602081018390529081018490526001600160a01b03808f16918e8216918b16907fe1c3870e3d7d5199a16d200133088e6e3f7012d28571e442a110b4c83b5e3b949060600160405180910390a45050600180555050505050505050505050565b600354600160a01b900460ff166116645760405162461bcd60e51b815260206004820152600a6024820152691b9bdd0b5c185d5cd95960b21b6044820152606401610339565b600354600160a81b900460ff161561168e5760405162461bcd60e51b8152600401610339906142fa565b6002546001600160a01b031633146116b85760405162461bcd60e51b815260040161033990614199565b6003805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516116f59190613fc8565b60405180910390a1565b61170833610dc3565b6117245760405162461bcd60e51b81526004016103399061428c565b61173060148233613633565b610e0f5760405162461bcd60e51b8152600401610339906143da565b6000610e816012836135e4565b6002546001600160a01b031633146117835760405162461bcd60e51b815260040161033990614199565b6001600160a01b0381166117a95760405162461bcd60e51b815260040161033990614408565b60005b60165481101561183b57601681815481106117c9576117c9614431565b6000918252602090912001546001600160a01b03838116911614156118295760405162461bcd60e51b815260206004820152601660248201527518dbdb9d1c9858dd0b585b1c9958591e4b585919195960521b6044820152606401610339565b8061183381614271565b9150506117ac565b50601680546001810182556000919091527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b51242890180546001600160a01b0319166001600160a01b0383161790556040517f5579b1eead2d904c2b05255a92f5a4a4f3e234ae0a4efe538adef3c1794e1cea906118b7908390613fc8565b60405180910390a150565b6002546001600160a01b031633146118ec5760405162461bcd60e51b815260040161033990614199565b670de0b6b3a76400008111156119145760405162461bcd60e51b8152600401610339906141bf565b600654818114156119375760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527f7aef17a0caeda11810cdf2a40c79ac1340553588671fb35d5cc8d0a3fe2883be910160405180910390a150600655565b61197e613640565b6001600160a01b03831661199b57611996828261366c565b505050565b6119966001600160a01b0384168383613785565b6002546001600160a01b031633146119d95760405162461bcd60e51b815260040161033990614199565b670de0b6b3a7640000811115611a015760405162461bcd60e51b8152600401610339906141bf565b600a5481811415611a245760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527f457d9e7f8f7a13610e084de82e6b40a65eddd57ff51a358ef64e1199c37c676a910160405180910390a150600a55565b6060611a6f60126137db565b905090565b6000336001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b158015611aaf57600080fd5b505afa158015611ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae79190614382565b9050611af46012826135e4565b8015611b815750806001600160a01b031663f8d898986040518163ffffffff1660e01b815260040160206040518083038186803b158015611b3457600080fd5b505afa158015611b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6c9190614382565b6001600160a01b0316336001600160a01b0316145b611b9d5760405162461bcd60e51b815260040161033990614447565b611ba960158333613606565b611bef5760405162461bcd60e51b81526020600482015260176024820152761919589d0b5d1bdad95b8b591bd95cdb9d0b595e1a5cdd604a1b6044820152606401610339565b5050565b6000336001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2e57600080fd5b505afa158015611c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c669190614382565b9050611c736012826135e4565b8015611d005750806001600160a01b031663f8d898986040518163ffffffff1660e01b815260040160206040518083038186803b158015611cb357600080fd5b505afa158015611cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ceb9190614382565b6001600160a01b0316336001600160a01b0316145b611d1c5760405162461bcd60e51b815260040161033990614447565b611d2860158333613633565b611bef5760405162461bcd60e51b8152602060048201526011602482015270646562742d746f6b656e2d65786973747360781b6044820152606401610339565b6002546001600160a01b03163314611d925760405162461bcd60e51b815260040161033990614199565b6001600160a01b038116611db85760405162461bcd60e51b815260040161033990614408565b611dc3600f826137e8565b611ddf5760405162461bcd60e51b8152600401610339906143da565b8060116000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1d57600080fd5b505afa158015611e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e559190614382565b6001600160a01b03908116825260208201929092526040908101600090812080546001600160a01b0319169484169490941790935551908316917fdc705e658c7b6c6c01f5802457bf4ffb99f204bf1603e7b1ae3d4c7536611bc291a250565b6002546001600160a01b03163314611edf5760405162461bcd60e51b815260040161033990614199565b6001600160a01b038216611f055760405162461bcd60e51b815260040161033990614408565b600e546001600160a01b03908116908316811415611f355760405162461bcd60e51b8152600401610339906141e4565b8115611f9a576040516326ed7c7960e11b81526001600160a01b03821690634ddaf8f290611f67908690600401613fc8565b600060405180830381600087803b158015611f8157600080fd5b505af1158015611f95573d6000803e3d6000fd5b505050505b826001600160a01b0316816001600160a01b03167f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a60405160405180910390a35050600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6060610e816014836137fd565b600354600160a01b900460ff161561204e5760405162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b6044820152606401610339565b6002546001600160a01b031633146120785760405162461bcd60e51b815260040161033990614199565b6003805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116e83390565b6002546001600160a01b031633146120dd5760405162461bcd60e51b815260040161033990614199565b670de0b6b3a76400008111156121055760405162461bcd60e51b8152600401610339906141bf565b600b54818114156121285760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527fe0dac1dcc46eceed1fdb7416944e7161273637fb346a67d6f0fce8de3e952f2f910160405180910390a150600b55565b6002546001600160a01b031633146121915760405162461bcd60e51b815260040161033990614199565b670de0b6b3a76400008111156121b95760405162461bcd60e51b8152600401610339906141bf565b600854818114156121dc5760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527fdd45ca427fa57d0870314eb55586e91bcdd31d7cd393e3278caaae9dfb749688910160405180910390a150600855565b6002546001600160a01b031633146122455760405162461bcd60e51b815260040161033990614199565b6001600160a01b03811661226b5760405162461bcd60e51b815260040161033990614408565b6122766012826137e8565b6122b55760405162461bcd60e51b815260206004820152601060248201526f73796e7468657469632d65786973747360801b6044820152606401610339565b6040516001600160a01b038216907f6b5a83f4cf73e3df48c170415d0be65d33e1cedc4eecd090d47189119061eb4890600090a250565b6002546001600160a01b031633146123165760405162461bcd60e51b815260040161033990614199565b6001600160a01b03811661233c5760405162461bcd60e51b815260040161033990614408565b600d546001600160a01b0390811690821681141561236c5760405162461bcd60e51b8152600401610339906141e4565b816001600160a01b0316816001600160a01b03167fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c60405160405180910390a350600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146123f95760405162461bcd60e51b815260040161033990614199565b6001600160a01b03811661244b5760405162461bcd60e51b815260206004820152601960248201527870726f706f7365642d676f7665726e6f722d69732d7a65726f60381b6044820152606401610339565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146124975760405162461bcd60e51b815260040161033990614199565b670de0b6b3a76400008111156124bf5760405162461bcd60e51b8152600401610339906141bf565b600954818114156124e25760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527fc8273cce54f5cf71712dee009c7e6438ae7e1db578da0ec076cf360af45501b9910160405180910390a150600955565b600054610100900460ff168061253a575060005460ff16155b6125565760405162461bcd60e51b815260040161033990614479565b600054610100900460ff16158015612578576000805461ffff19166101011790555b6001600160a01b0382166125bf5760405162461bcd60e51b815260206004820152600e60248201526d1bdc9858db194b5a5ccb5b9d5b1b60921b6044820152606401610339565b6125c761380b565b6125cf61387a565b600d80546001600160a01b0319166001600160a01b038416179055660aa87bee538000600855661550f7dca7000060095567016345785d8a0000600a5567011c37937e080000600b556706f05b59d3b20000600c558015611bef576000805461ff00191690555050565b6060610e816015836137fd565b600080612654601584613562565b905060005b818110156127ff57600061266f60158684613583565b90506000816001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b1580156126ac57600080fd5b505afa1580156126c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e49190614382565b600d546040516370a0823160e01b81529192506001600160a01b0390811691638d0dba00918491908616906370a0823190612723908c90600401613fc8565b60206040518083038186803b15801561273b57600080fd5b505afa15801561274f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127739190614211565b6040518363ffffffff1660e01b815260040161279092919061422a565b60206040518083038186803b1580156127a857600080fd5b505afa1580156127bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e09190614211565b6127ea9086614259565b94505050806127f890614271565b9050612659565b5050919050565b6002546001600160a01b031633146128305760405162461bcd60e51b815260040161033990614199565b670de0b6b3a76400008111156128585760405162461bcd60e51b8152600401610339906141bf565b6007548181141561287b5760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527f733071ab8253b372ed26a6d1b04aec71c4bfcd209c93397df32bb77478cdd2c8910160405180910390a150600755565b6002546001600160a01b031633146128e45760405162461bcd60e51b815260040161033990614199565b806128ee81610e74565b61290a5760405162461bcd60e51b815260040161033990614353565b816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561294357600080fd5b505afa158015612957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297b9190614211565b156129985760405162461bcd60e51b8152600401610339906144c7565b6129a3600f83613928565b6129bf5760405162461bcd60e51b8152600401610339906142c3565b60116000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156129fc57600080fd5b505afa158015612a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a349190614382565b6001600160a01b03908116825260208201929092526040908101600090812080546001600160a01b03191690559051918416917fe5a19a76470297a1f85f9a38f3ff148b4c8cdc1209e074dbe59db5e22eb31a3a9190a25050565b6000806000806000612aa086612646565b9250612aab86610be7565b8085111596509094509150818310612ac4576000612ace565b612ace838361439f565b905091939590929450565b600354600090600160a81b900460ff1615612b065760405162461bcd60e51b8152600401610339906142fa565b60026001541415612b295760405162461bcd60e51b81526004016103399061431c565b600260015583612b388161174c565b612b545760405162461bcd60e51b8152600401610339906144ec565b83612b5e8161174c565b612b7a5760405162461bcd60e51b8152600401610339906144ec565b84806001600160a01b03166322f3e2d46040518163ffffffff1660e01b815260040160206040518083038186803b158015612bb457600080fd5b505afa158015612bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bec919061451a565b612c2d5760405162461bcd60e51b815260206004820152601260248201527173796e7468657469632d696e61637469766560701b6044820152606401610339565b866001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612c6857600080fd5b505af1158015612c7c573d6000803e3d6000fd5b50505050856001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612cbb57600080fd5b505af1158015612ccf573d6000803e3d6000fd5b505050506000612cdc3390565b905060008611612d1f5760405162461bcd60e51b815260206004820152600e60248201526d0616d6f756e742d696e2d69732d360941b6044820152606401610339565b6040516370a0823160e01b81526001600160a01b038916906370a0823190612d4b908490600401613fc8565b60206040518083038186803b158015612d6357600080fd5b505afa158015612d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9b9190614211565b861115612de15760405162461bcd60e51b8152602060048201526014602482015273616d6f756e742d696e2d67742d62616c616e636560601b6044820152606401610339565b604051632770a7eb60e21b81526001600160a01b03891690639dc29fac90612e0f9084908a9060040161422a565b600060405180830381600087803b158015612e2957600080fd5b505af1158015612e3d573d6000803e3d6000fd5b5050600d54604051632d9198e160e21b81526001600160a01b03909116925063b64663849150612e75908b908b908b906004016143b6565b60206040518083038186803b158015612e8d57600080fd5b505afa158015612ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec59190614211565b94506000806009541115612f5757600954612ee1908790613598565b600e546040516340c10f1960e01b81529192506001600160a01b03808b16926340c10f1992612f16921690859060040161422a565b600060405180830381600087803b158015612f3057600080fd5b505af1158015612f44573d6000803e3d6000fd5b505050508086612f54919061439f565b95505b6040516340c10f1960e01b81526001600160a01b038916906340c10f1990612f859085908a9060040161422a565b600060405180830381600087803b158015612f9f57600080fd5b505af1158015612fb3573d6000803e3d6000fd5b5050604080518a8152602081018a90529081018490526001600160a01b03808c1693508c811692508516907fafd74f009c0ff7627726f24b568ee5529cd297f6a7a1e43ec363443a13a584209060600160405180910390a4505060018055509195945050505050565b6002546001600160a01b031633146130465760405162461bcd60e51b815260040161033990614199565b670de0b6b3a764000081111561306e5760405162461bcd60e51b8152600401610339906141bf565b600c54818114156130915760405162461bcd60e51b8152600401610339906141e4565b60408051828152602081018490527f6d8ed4ad9ba67058e16e32fc3c8da2e3358da6cd1599e0e0fb2630d0a19fd49c910160405180910390a150600c55565b6002546001600160a01b031633146130fa5760405162461bcd60e51b815260040161033990614199565b806131048161174c565b6131205760405162461bcd60e51b8152600401610339906144ec565b816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561315957600080fd5b505afa15801561316d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131919190614211565b156131ae5760405162461bcd60e51b8152600401610339906144c7565b816001600160a01b031663f8d898986040518163ffffffff1660e01b815260040160206040518083038186803b1580156131e757600080fd5b505afa1580156131fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321f9190614382565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561325757600080fd5b505afa15801561326b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328f9190614211565b156132dc5760405162461bcd60e51b815260206004820152601a60248201527f73796e7468657469632d776974682d646562742d737570706c790000000000006044820152606401610339565b6132e7601283613928565b61332c5760405162461bcd60e51b81526020600482015260166024820152751cde5b9d1a195d1a58cb591bd95cdb9d0b595e1a5cdd60521b6044820152606401610339565b6040516001600160a01b038316907fc6410e68b378721373b73ca2a05e332f27c833f6aca80f67ce583292e01f3bc490600090a25050565b6003546001600160a01b031633146133ba5760405162461bcd60e51b81526020600482015260196024820152783737ba16ba343296b83937b837b9b2b216b3b7bb32b93737b960391b6044820152606401610339565b6003546002546040516001600160a01b0392831692909116907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a360038054600280546001600160a01b03199081166001600160a01b03841617909155169055565b6060611a6f600f6137db565b600354600160a81b900460ff16156134565760405162461bcd60e51b8152600401610339906142fa565b6002546001600160a01b031633146134805760405162461bcd60e51b815260040161033990614199565b6003805461ffff60a01b191661010160a01b1790557f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a336116e8565b600354600160a81b900460ff166135045760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b9b43aba3237bbb760a11b6044820152606401610339565b6002546001600160a01b0316331461352e5760405162461bcd60e51b815260040161033990614199565b6003805460ff60a81b191690557fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc336116e8565b6001600160a01b0381166000908152602083905260408120545b9392505050565b600061359084848461393d565b949350505050565b60008215806135a5575081155b156135b257506000610e81565b670de0b6b3a76400006135c6600282614537565b6135d08486614559565b6135da9190614259565b61357c9190614537565b6001600160a01b0381166000908152600183016020526040812054151561357c565b6000613590848484613984565b600081613621600282614537565b6135d0670de0b6b3a764000086614559565b6000613590848484613b31565b6002546001600160a01b0316331461366a5760405162461bcd60e51b815260040161033990614199565b565b804710156136bc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610339565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613709576040519150601f19603f3d011682016040523d82523d6000602084013e61370e565b606091505b50509050806119965760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610339565b6119968363a9059cbb60e01b84846040516024016137a492919061422a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613bbf565b6060600061357c83613c91565b600061357c836001600160a01b038416613ced565b606060006135908484613d3c565b600054610100900460ff1680613824575060005460ff16155b6138405760405162461bcd60e51b815260040161033990614479565b600054610100900460ff16158015613862576000805461ffff19166101011790555b600180558015610e0f576000805461ff001916905550565b600054610100900460ff1680613893575060005460ff16155b6138af5760405162461bcd60e51b815260040161033990614479565b600054610100900460ff161580156138d1576000805461ffff19166101011790555b600280546001600160a01b0319163390811790915560405181906000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3508015610e0f576000805461ff001916905550565b600061357c836001600160a01b038416613db1565b6001600160a01b038216600090815260208490526040812080548390811061396757613967614431565b6000918252602090912001546001600160a01b0316949350505050565b6001600160a01b03808316600090815260208581526040808320938516835260019093019052908120548015613b275760006139c160018361439f565b6001600160a01b038616600090815260208890526040812054919250906139ea9060019061439f565b9050818114613aa6576001600160a01b0386166000908152602088905260408120805483908110613a1d57613a1d614431565b60009182526020808320909101546001600160a01b038a81168452918b90526040909220805491909216925082919085908110613a5c57613a5c614431565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905589831682528a8152604080832094909316825260019390930190925290208390555b6001600160a01b0386166000908152602088905260409020805480613acd57613acd614578565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03888116835289825260408084209189168452600191820190925290822091909155935061357c92505050565b600091505061357c565b6001600160a01b0380831660009081526020858152604080832093851683526001909301905290812054613bb757506001600160a01b0382811660009081526020858152604080832080546001808201835582865284862090910180546001600160a01b031916968816968717905581549585529081019092529091209190915561357c565b50600061357c565b6000613c14826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ea49092919063ffffffff16565b8051909150156119965780806020019051810190613c32919061451a565b6119965760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610339565b606081600001805480602002602001604051908101604052809291908181526020018280548015613ce157602002820191906000526020600020905b815481526020019060010190808311613ccd575b50505050509050919050565b6000818152600183016020526040812054613d3457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e81565b506000610e81565b6001600160a01b03811660009081526020838152604091829020805483518184028101840190945280845260609392830182828015613da457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613d86575b5050505050905092915050565b60008181526001830160205260408120548015613e9a576000613dd560018361439f565b8554909150600090613de99060019061439f565b9050818114613e4e576000866000018281548110613e0957613e09614431565b9060005260206000200154905080876000018481548110613e2c57613e2c614431565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613e5f57613e5f614578565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e81565b6000915050610e81565b6060613590848460008585843b613efd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610339565b600080866001600160a01b03168587604051613f19919061458e565b60006040518083038185875af1925050503d8060008114613f56576040519150601f19603f3d011682016040523d82523d6000602084013e613f5b565b606091505b5091509150613f6b828286613f76565b979650505050505050565b60608315613f8557508161357c565b825115613f955782518084602001fd5b8160405162461bcd60e51b81526004016103399190614166565b600060208284031215613fc157600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610e0f57600080fd5b60006020828403121561400357600080fd5b813561357c81613fdc565b6020808252825182820181905260009190848201906040850190845b8181101561404f5783516001600160a01b03168352928401929184019160010161402a565b50909695505050505050565b6000806000806080858703121561407157600080fd5b843561407c81613fdc565b9350602085013561408c81613fdc565b92506040850135915060608501356140a381613fdc565b939692955090935050565b6000806000606084860312156140c357600080fd5b83356140ce81613fdc565b925060208401356140de81613fdc565b929592945050506040919091013590565b8015158114610e0f57600080fd5b6000806040838503121561411057600080fd5b823561411b81613fdc565b9150602083013561412b816140ef565b809150509250929050565b60005b83811015614151578181015183820152602001614139565b83811115614160576000848401525b50505050565b6020815260008251806020840152614185816040850160208701614136565b601f01601f19169190910160400192915050565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b6020808252600b908201526a6d61782d69732d3130302560a81b604082015260600190565b6020808252601390820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b604082015260600190565b60006020828403121561422357600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561426c5761426c614243565b500190565b600060001982141561428557614285614243565b5060010190565b6020808252601b908201527f63616c6c65722d69732d6e6f742d6465706f7369742d746f6b656e0000000000604082015260600190565b6020808252601a908201527f6465706f7369742d746f6b656e2d646f65736e742d6578697374000000000000604082015260600190565b60208082526008908201526739b43aba3237bbb760c11b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526015908201527418dbdb1b185d195c985b0b5a5b995e1a5cdd195b9d605a1b604082015260600190565b60006020828403121561439457600080fd5b815161357c81613fdc565b6000828210156143b1576143b1614243565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252601490820152736465706f7369742d746f6b656e2d65786973747360601b604082015260600190565b6020808252600f908201526e1859191c995cdccb5a5ccb5b9d5b1b608a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60208082526018908201527731b0b63632b916b4b996b737ba16b232b13a16ba37b5b2b760411b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600b908201526a0737570706c792d67742d360ac1b604082015260600190565b6020808252601490820152731cde5b9d1a195d1a58cb5a5b995e1a5cdd195b9d60621b604082015260600190565b60006020828403121561452c57600080fd5b815161357c816140ef565b60008261455457634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561457357614573614243565b500290565b634e487b7160e01b600052603160045260246000fd5b600082516145a0818460208701614136565b919091019291505056fea26469706673582212205e9be46c50c92fa7407082f8925f00882c322f21286628de23e3a057e3b80b1164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "addToDebtTokensOfAccount(address)": {
        "details": "This function is called from `DebtToken` when user's balance changes from `0`The caller should ensure to not pass `address(0)` as `_account`",
        "params": {
          "_account": "The account address"
        }
      },
      "addToDepositTokensOfAccount(address)": {
        "details": "This function is called from `DepositToken` when user's balance changes from `0`The caller should ensure to not pass `address(0)` as `_account`",
        "params": {
          "_account": "The account address"
        }
      },
      "debtOf(address)": {
        "params": {
          "_account": "The account to check"
        },
        "returns": {
          "_debtInUsd": "The debt value in USD"
        }
      },
      "debtPositionOf(address)": {
        "params": {
          "_account": "The account to check"
        },
        "returns": {
          "_debtInUsd": "The total debt in USD",
          "_depositInUsd": "The total collateral deposited in USD",
          "_isHealthy": "Whether the account's position is healthy",
          "_issuableInUsd": "The amount of debt (is USD) that is free (i.e. can be used to issue synthetic tokens)",
          "_issuableLimitInUsd": "The max amount of debt (is USD) that can be created (considering collateralization ratios)"
        }
      },
      "depositOf(address)": {
        "params": {
          "_account": "The account to check"
        },
        "returns": {
          "_depositInUsd": "The total deposit value in USD among all collaterals",
          "_issuableLimitInUsd": "The max value in USD that can be used to issue synthetic tokens"
        }
      },
      "getDebtTokensOfAccount(address)": {
        "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees."
      },
      "getDepositTokens()": {
        "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees."
      },
      "getDepositTokensOfAccount(address)": {
        "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees."
      },
      "getSyntheticTokens()": {
        "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees."
      },
      "isDepositTokenExists(address)": {
        "params": {
          "_depositToken": "Asset to check"
        },
        "returns": {
          "_0": "true if exist"
        }
      },
      "isSyntheticTokenExists(address)": {
        "params": {
          "_syntheticToken": "Asset to check"
        },
        "returns": {
          "_0": "true if exist"
        }
      },
      "liquidate(address,address,uint256,address)": {
        "params": {
          "_account": "The account with an unhealthy position",
          "_amountToRepay": "The amount to repay in synthetic token",
          "_depositToken": "The collateral to seize from",
          "_syntheticToken": "The vsAsset to use for repayment"
        }
      },
      "open()": {
        "details": "Open contract operations, if contract is in shutdown state"
      },
      "pause()": {
        "details": "Pause contract operations, if contract is not paused."
      },
      "removeFromDebtTokensOfAccount(address)": {
        "details": "This function is called from `DebtToken` when user's balance changes to `0`The caller should ensure to not pass `address(0)` as `_account`",
        "params": {
          "_account": "The account address"
        }
      },
      "removeFromDepositTokensOfAccount(address)": {
        "details": "This function is called from `DepositToken` when user's balance changes to `0`The caller should ensure to not pass `address(0)` as `_account`",
        "params": {
          "_account": "The account address"
        }
      },
      "shutdown()": {
        "details": "Shutdown contract operations, if not already shutdown."
      },
      "swap(address,address,uint256)": {
        "params": {
          "_amountIn": "Amount to swap",
          "_syntheticTokenIn": "Synthetic token to sell",
          "_syntheticTokenOut": "Synthetic token to buy"
        }
      },
      "sweep(address,address,uint256)": {
        "params": {
          "_amount": "The amount to send",
          "_to": "The recipient of the transfer",
          "_token": "The token to transfer"
        }
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause contract operations, allow only if contract is paused and not shutdown."
      }
    },
    "title": "Controller contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DebtFloorUpdated(uint256,uint256)": {
        "notice": "Emitted when protocol liquidation fee is updated"
      },
      "DepositFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when deposit fee is updated"
      },
      "DepositTokenAdded(address)": {
        "notice": "Emitted when deposit token is enabled"
      },
      "DepositTokenRemoved(address)": {
        "notice": "Emitted when deposit token is disabled"
      },
      "IssueFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when issue fee is updated"
      },
      "LiquidatorLiquidationFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when liquidator liquidation fee is updated"
      },
      "MasterOracleUpdated(address,address)": {
        "notice": "Emitted when master oracle contract is updated"
      },
      "MaxLiquidableUpdated(uint256,uint256)": {
        "notice": "Emitted when maxLiquidable (liquidation cap) is updated"
      },
      "PositionLiquidated(address,address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when a position is liquidated"
      },
      "ProtocolLiquidationFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when protocol liquidation fee is updated"
      },
      "RefinanceFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when refinance fee is updated"
      },
      "RepayFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when repay fee is updated"
      },
      "RewardsDistributorAdded(address)": {
        "notice": "Emitted when rewards distributor contract is added"
      },
      "SwapFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when swap fee is updated"
      },
      "SyntheticTokenAdded(address)": {
        "notice": "Emitted when synthetic token is enabled"
      },
      "SyntheticTokenRemoved(address)": {
        "notice": "Emitted when synthetic token is disabled"
      },
      "SyntheticTokenSwapped(address,address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when synthetic token is swapped"
      },
      "TreasuryUpdated(address,address)": {
        "notice": "Emitted when treasury contract is updated"
      },
      "WithdrawFeeUpdated(uint256,uint256)": {
        "notice": "Emitted when withdraw fee is updated"
      }
    },
    "kind": "user",
    "methods": {
      "addDepositToken(address)": {
        "notice": "Add deposit token (i.e. collateral) to vSynth"
      },
      "addRewardsDistributor(address)": {
        "notice": "Add a RewardsDistributor contract"
      },
      "addSyntheticToken(address)": {
        "notice": "Add synthetic token to vSynth offerings"
      },
      "addToDebtTokensOfAccount(address)": {
        "notice": "Add a debt token to the per-account list"
      },
      "addToDepositTokensOfAccount(address)": {
        "notice": "Add a deposit token to the per-account list"
      },
      "debtFloorInUsd()": {
        "notice": "The debt floor (in USD) for each synthetic token This parameters is used to keep incentive for liquidators (i.e. cover gas and provide enough profit)"
      },
      "debtOf(address)": {
        "notice": "Get account's debt by querying latest prices from oracles"
      },
      "debtPositionOf(address)": {
        "notice": "Get if the debt position from an account is healthy"
      },
      "depositFee()": {
        "notice": "The fee charged when depositing collateral"
      },
      "depositOf(address)": {
        "notice": "Get account's total collateral deposited by querying latest prices from oracles"
      },
      "depositTokenOf(address)": {
        "notice": "Get the deposit token's address from given underlying asset"
      },
      "getDebtTokensOfAccount(address)": {
        "notice": "Get all debt tokens"
      },
      "getDepositTokens()": {
        "notice": "Get all deposit tokens"
      },
      "getDepositTokensOfAccount(address)": {
        "notice": "Get deposit tokens of an account"
      },
      "getRewardsDistributors()": {
        "notice": "Get all rewards distributors"
      },
      "getSyntheticTokens()": {
        "notice": "Get all synthetic tokens"
      },
      "isDepositTokenExists(address)": {
        "notice": "Check if collateral is supported"
      },
      "isSyntheticTokenExists(address)": {
        "notice": "Check if token is part of the synthetic offerings"
      },
      "issueFee()": {
        "notice": "The fee charged when minting a synthetic token"
      },
      "liquidate(address,address,uint256,address)": {
        "notice": "Burn synthetic token, unlock deposit token and send liquidator liquidation fee"
      },
      "liquidatorLiquidationFee()": {
        "notice": "The fee charged from liquidated deposit that goes to the liquidator"
      },
      "masterOracle()": {
        "notice": "Prices oracle"
      },
      "maxLiquidable()": {
        "notice": "The max percent of the debt allowed to liquidate"
      },
      "protocolLiquidationFee()": {
        "notice": "The fee charged when liquidating a position"
      },
      "removeDepositToken(address)": {
        "notice": "Remove deposit token (i.e. collateral) from vSynth"
      },
      "removeFromDebtTokensOfAccount(address)": {
        "notice": "Remove a debt token from the per-account list"
      },
      "removeFromDepositTokensOfAccount(address)": {
        "notice": "Remove a deposit token from the per-account list"
      },
      "removeSyntheticToken(address)": {
        "notice": "Remove synthetic token from vSynth offerings"
      },
      "repayFee()": {
        "notice": "The fee charged when repaying debt"
      },
      "swap(address,address,uint256)": {
        "notice": "Swap synthetic tokens"
      },
      "swapFee()": {
        "notice": "The fee charged when swapping synthetic tokens"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      },
      "treasury()": {
        "notice": "Treasury contract"
      },
      "updateDebtFloor(uint256)": {
        "notice": "Update debt floor"
      },
      "updateDepositFee(uint256)": {
        "notice": "Update deposit fee"
      },
      "updateIssueFee(uint256)": {
        "notice": "Update issue fee"
      },
      "updateLiquidatorLiquidationFee(uint256)": {
        "notice": "Update liquidator liquidation fee"
      },
      "updateMasterOracle(address)": {
        "notice": "Update master oracle contract"
      },
      "updateMaxLiquidable(uint256)": {
        "notice": "Update maxLiquidable (liquidation cap)"
      },
      "updateProtocolLiquidationFee(uint256)": {
        "notice": "Update protocol liquidation fee"
      },
      "updateRepayFee(uint256)": {
        "notice": "Update repay fee"
      },
      "updateSwapFee(uint256)": {
        "notice": "Update swap fee"
      },
      "updateTreasury(address,bool)": {
        "notice": "Update treasury contract - will migrate funds to the new contract"
      },
      "updateWithdrawFee(uint256)": {
        "notice": "Update withdraw fee"
      },
      "withdrawFee()": {
        "notice": "The fee charged when withdrawing collateral"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7131,
        "contract": "contracts/Controller.sol:Controller",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7134,
        "contract": "contracts/Controller.sol:Controller",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7185,
        "contract": "contracts/Controller.sol:Controller",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5950,
        "contract": "contracts/Controller.sol:Controller",
        "label": "governor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5952,
        "contract": "contracts/Controller.sol:Controller",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3775,
        "contract": "contracts/Controller.sol:Controller",
        "label": "paused",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 3778,
        "contract": "contracts/Controller.sol:Controller",
        "label": "everythingStopped",
        "offset": 21,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 14462,
        "contract": "contracts/Controller.sol:Controller",
        "label": "debtFloorInUsd",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 14465,
        "contract": "contracts/Controller.sol:Controller",
        "label": "depositFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 14468,
        "contract": "contracts/Controller.sol:Controller",
        "label": "issueFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 14471,
        "contract": "contracts/Controller.sol:Controller",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 14474,
        "contract": "contracts/Controller.sol:Controller",
        "label": "repayFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 14477,
        "contract": "contracts/Controller.sol:Controller",
        "label": "swapFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 14480,
        "contract": "contracts/Controller.sol:Controller",
        "label": "liquidatorLiquidationFee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 14483,
        "contract": "contracts/Controller.sol:Controller",
        "label": "protocolLiquidationFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 14486,
        "contract": "contracts/Controller.sol:Controller",
        "label": "maxLiquidable",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 14490,
        "contract": "contracts/Controller.sol:Controller",
        "label": "masterOracle",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IMasterOracle)11244"
      },
      {
        "astId": 14494,
        "contract": "contracts/Controller.sol:Controller",
        "label": "treasury",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(ITreasury)11160"
      },
      {
        "astId": 14498,
        "contract": "contracts/Controller.sol:Controller",
        "label": "depositTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(AddressSet)9261_storage"
      },
      {
        "astId": 14505,
        "contract": "contracts/Controller.sol:Controller",
        "label": "depositTokenOf",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_contract(IERC20)7840,t_contract(IDepositToken)10955)"
      },
      {
        "astId": 14509,
        "contract": "contracts/Controller.sol:Controller",
        "label": "syntheticTokens",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(AddressSet)9261_storage"
      },
      {
        "astId": 14513,
        "contract": "contracts/Controller.sol:Controller",
        "label": "depositTokensOfAccount",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(AddressSet)11348_storage"
      },
      {
        "astId": 14517,
        "contract": "contracts/Controller.sol:Controller",
        "label": "debtTokensOfAccount",
        "offset": 0,
        "slot": "21",
        "type": "t_struct(AddressSet)11348_storage"
      },
      {
        "astId": 14522,
        "contract": "contracts/Controller.sol:Controller",
        "label": "rewardsDistributors",
        "offset": 0,
        "slot": "22",
        "type": "t_array(t_contract(IRewardsDistributor)11068)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IRewardsDistributor)11068)dyn_storage": {
        "base": "t_contract(IRewardsDistributor)11068",
        "encoding": "dynamic_array",
        "label": "contract IRewardsDistributor[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDepositToken)10955": {
        "encoding": "inplace",
        "label": "contract IDepositToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)7840": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterOracle)11244": {
        "encoding": "inplace",
        "label": "contract IMasterOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsDistributor)11068": {
        "encoding": "inplace",
        "label": "contract IRewardsDistributor",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)11160": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Set)11342_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MappedEnumerableSet.Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Set)11342_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)7840,t_contract(IDepositToken)10955)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)7840",
        "label": "mapping(contract IERC20 => contract IDepositToken)",
        "numberOfBytes": "32",
        "value": "t_contract(IDepositToken)10955"
      },
      "t_struct(AddressSet)11348_storage": {
        "encoding": "inplace",
        "label": "struct MappedEnumerableSet.AddressSet",
        "members": [
          {
            "astId": 11347,
            "contract": "contracts/Controller.sol:Controller",
            "label": "_ofAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(Set)11342_storage)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)9261_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9260,
            "contract": "contracts/Controller.sol:Controller",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8960_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)11342_storage": {
        "encoding": "inplace",
        "label": "struct MappedEnumerableSet.Set",
        "members": [
          {
            "astId": 11337,
            "contract": "contracts/Controller.sol:Controller",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 11341,
            "contract": "contracts/Controller.sol:Controller",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)8960_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8955,
            "contract": "contracts/Controller.sol:Controller",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8959,
            "contract": "contracts/Controller.sol:Controller",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}