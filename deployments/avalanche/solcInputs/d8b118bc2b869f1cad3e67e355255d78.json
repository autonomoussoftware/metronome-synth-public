{
  "language": "Solidity",
  "sources": {
    "contracts/access/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/utils/Context.sol\";\nimport \"../dependencies/openzeppelin/proxy/utils/Initializable.sol\";\nimport \"../utils/TokenHolder.sol\";\nimport \"../interface/IGovernable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (governor) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the governor account will be the one that deploys the contract. This\n * can later be changed with {transferGovernorship}.\n *\n */\nabstract contract Governable is IGovernable, Context, TokenHolder, Initializable {\n    address public governor;\n    address public proposedGovernor;\n\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial governor.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev If inheriting child is using proxy then child contract can use\n     * __Governable_init() function to initialization this contract\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __Governable_init() internal initializer {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the governor.\n     */\n    modifier onlyGovernor() {\n        require(governor == _msgSender(), \"not-governor\");\n        _;\n    }\n\n    function _requireCanSweep() internal view override onlyGovernor {}\n\n    /**\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\n     * Can only be called by the current owner.\n     */\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\n        require(_proposedGovernor != address(0), \"proposed-governor-is-zero\");\n        proposedGovernor = _proposedGovernor;\n    }\n\n    /**\n     * @dev Allows new governor to accept governorship of the contract.\n     */\n    function acceptGovernorship() external {\n        require(proposedGovernor == _msgSender(), \"not-the-proposed-governor\");\n        emit UpdatedGovernor(governor, proposedGovernor);\n        governor = proposedGovernor;\n        proposedGovernor = address(0);\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/utils/TokenHolder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\";\nimport \"../dependencies/openzeppelin/token/ERC20/IERC20.sol\";\n\n/**\n * @title Utils contract that handles tokens sent to it\n */\nabstract contract TokenHolder {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\n     */\n    function _requireCanSweep() internal view virtual;\n\n    /**\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\n     * @param _token The token to transfer\n     * @param _to The recipient of the transfer\n     * @param _amount The amount to send\n     */\n    function sweep(\n        IERC20 _token,\n        address _to,\n        uint256 _amount\n    ) external {\n        _requireCanSweep();\n\n        if (address(_token) == address(0)) {\n            Address.sendValue(payable(_to), _amount);\n        } else {\n            _token.safeTransfer(_to, _amount);\n        }\n    }\n\n    /**\n     * @dev Revert when receiving by default\n     */\n    receive() external payable virtual {\n        revert(\"receive-not-allowed\");\n    }\n\n    /**\n     * @dev Revert fallback calls\n     */\n    fallback() external payable {\n        revert(\"fallback-not-allowed\");\n    }\n}\n"
    },
    "contracts/interface/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @notice Governable interface\n */\ninterface IGovernable {\n    function governor() external view returns (address _governor);\n\n    function transferGovernorship(address _proposedGovernor) external;\n}\n"
    },
    "contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/dependencies/openzeppelin/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/oracle/UniswapV3PriceProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../access/Governable.sol\";\nimport \"../interface/oracle/IUniswapV3CrossPoolOracle.sol\";\nimport \"../interface/oracle/IPriceProvider.sol\";\nimport \"../lib/OracleHelpers.sol\";\n\n/**\n * @title UniswapV3 Oracle contract\n * @dev The UniswapV3CrossPoolOracle uses 0.3% fee pool as default\n * @dev The `assetToAsset` function uses token->weth->usdToken under the hoods\n */\ncontract UniswapV3PriceProvider is IPriceProvider, Governable {\n    /**\n     * @notice The UniswapV3CrossPoolOracle contract address\n     * @dev This is 3rd-party non-upgradable contract\n     * @dev The address isn't hardcoded because we may want to deploy to other chains\n     * See more: https://etherscan.io/address/0x0f1f5a87f99f0918e6c81f16e59f3518698221ff#code\n     */\n    IUniswapV3CrossPoolOracle public crossPoolOracle;\n\n    /**\n     * @notice The USD token (stable coin) to use to convert amounts to/from USD\n     * @dev This contract supports tokens with any decimals (e.g. USDC, DAI)\n     */\n    address public usdToken;\n\n    /**\n     * @notice The time-weighted average price (TWAP) period\n     * @dev See more: https://docs.uniswap.org/protocol/concepts/V3-overview/oracle\n     */\n    uint32 public twapPeriod;\n\n    /// @notice Emitted when TWAP period is updated\n    event TwapPeriodUpdated(uint32 oldTwapPeriod, uint32 newTwapPeriod);\n\n    constructor(\n        IUniswapV3CrossPoolOracle _crossPoolOracle,\n        address _usdToken,\n        uint32 _twapPeriod\n    ) {\n        require(address(_crossPoolOracle) != address(0), \"null-cross0pool-oracle-address\");\n        require(_usdToken != address(0), \"null-usd-token-address\");\n        crossPoolOracle = _crossPoolOracle;\n        usdToken = _usdToken;\n        twapPeriod = _twapPeriod;\n    }\n\n    /**\n     * @notice Update TWAP period\n     * @param _newTwapPeriod The new period\n     */\n    function updateTwapPeriod(uint32 _newTwapPeriod) external onlyGovernor {\n        emit TwapPeriodUpdated(twapPeriod, _newTwapPeriod);\n        twapPeriod = _newTwapPeriod;\n    }\n\n    /**\n     * @notice Get asset's USD price\n     * @param _token The asset's encoded address\n     * @return _priceInUsd The amount in USD (18 decimals)\n     * @return _lastUpdatedAt The timestamp of the price used to convert\n     */\n    function getPriceInUsd(address _token)\n        external\n        view\n        override\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt)\n    {\n        _priceInUsd = OracleHelpers.normalizeUsdOutput(\n            usdToken,\n            crossPoolOracle.assetToAsset(_token, 10**IERC20Metadata(_token).decimals(), usdToken, twapPeriod)\n        );\n        _lastUpdatedAt = block.timestamp;\n    }\n\n    /**\n     * @dev This function is here just to follow IPriceProvider\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function update(address) external {}\n}\n"
    },
    "contracts/interface/oracle/IUniswapV3CrossPoolOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n *  @title UniswapV3 oracle with ability to query across an intermediate liquidity pool\n * @dev Interface to use 3rd party Uniswap V3 oracle utility contract deployed at https://etherscan.io/address/0x0f1f5a87f99f0918e6c81f16e59f3518698221ff#code\n */\ninterface IUniswapV3CrossPoolOracle {\n    function assetToEth(\n        address _tokenIn,\n        uint256 _amountIn,\n        uint32 _twapPeriod\n    ) external view returns (uint256 ethAmountOut);\n\n    function ethToAsset(\n        uint256 _ethAmountIn,\n        address _tokenOut,\n        uint32 _twapPeriod\n    ) external view returns (uint256 amountOut);\n\n    function assetToAsset(\n        address _tokenIn,\n        uint256 _amountIn,\n        address _tokenOut,\n        uint32 _twapPeriod\n    ) external view returns (uint256 amountOut);\n\n    function assetToAssetThruRoute(\n        address _tokenIn,\n        uint256 _amountIn,\n        address _tokenOut,\n        uint32 _twapPeriod,\n        address _routeThruToken,\n        uint24[2] memory _poolFees\n    ) external view returns (uint256 amountOut);\n}\n"
    },
    "contracts/interface/oracle/IPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IPriceProvider {\n    function update(address _assetData) external;\n\n    function getPriceInUsd(address _assetData) external view returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\n}\n"
    },
    "contracts/lib/OracleHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\nimport \"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\";\n\nlibrary OracleHelpers {\n    uint8 public constant USD_DECIMALS = 18;\n\n    function normalizeUsdOutput(address _usdToken, uint256 _amountInUsd) internal view returns (uint256) {\n        uint256 _usdTokenDecimals = IERC20Metadata(_usdToken).decimals();\n        return normalizeUsdOutput(_usdTokenDecimals, _amountInUsd);\n    }\n\n    function normalizeUsdInput(address _usdToken, uint256 _amountInUsd) internal view returns (uint256) {\n        uint256 _usdTokenDecimals = IERC20Metadata(_usdToken).decimals();\n        return normalizeUsdInput(_usdTokenDecimals, _amountInUsd);\n    }\n\n    function normalizeUsdOutput(uint256 _usdTokenDecimals, uint256 _amountInUsd) internal pure returns (uint256) {\n        if (_usdTokenDecimals >= USD_DECIMALS) {\n            return _amountInUsd / 10**(_usdTokenDecimals - USD_DECIMALS);\n        } else {\n            return _amountInUsd * 10**(USD_DECIMALS - _usdTokenDecimals);\n        }\n    }\n\n    function normalizeUsdInput(uint256 _usdTokenDecimals, uint256 _amountInUsd) internal pure returns (uint256) {\n        if (_usdTokenDecimals >= USD_DECIMALS) {\n            return _amountInUsd * 10**(_usdTokenDecimals - USD_DECIMALS);\n        } else {\n            return _amountInUsd / 10**(USD_DECIMALS - _usdTokenDecimals);\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/oracle/UniswapV2LikePriceProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/utils/math/Math.sol\";\nimport \"../dependencies/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\";\nimport \"../dependencies/uniswap/v2-core/interfaces/IUniswapV2Pair.sol\";\nimport \"../dependencies/uniswap/lib/libraries/FixedPoint.sol\";\nimport \"../dependencies/uniswap/v2-periphery/libraries/UniswapV2OracleLibrary.sol\";\nimport \"../dependencies/uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\";\nimport \"../access/Governable.sol\";\nimport \"../interface/oracle/IPriceProvider.sol\";\nimport \"../lib/OracleHelpers.sol\";\n\n/**\n * @title UniswapV2 (and forks) TWAP Oracle implementation\n * Based on https://github.com/Uniswap/v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol\n */\n// fixed window oracle that recomputes the average price for the entire period once every period\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\ncontract UniswapV2LikePriceProvider is IPriceProvider, Governable {\n    using FixedPoint for *;\n\n    /**\n     * @notice The UniswapV2-like factory contract\n     * @dev The address isn't hardcoded because we may want to deploy to other chains\n     */\n    IUniswapV2Factory public immutable factory;\n\n    /**\n     * @notice The WETH-like token\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    address public immutable NATIVE_TOKEN;\n\n    /**\n     * @notice The USD token (stable coin) to use to convert amounts to/from USD\n     * @dev This contract supports tokens with any decimals (e.g. USDC, DAI)\n     */\n    address public usdToken;\n\n    /**\n     * @notice The time-weighted average price (TWAP) period\n     * @dev See more: https://docs.uniswap.org/protocol/concepts/V3-overview/oracle\n     */\n    uint256 public twapPeriod;\n\n    /**\n     * @notice Data of pair's oracle\n     * @dev We have a default USD_TOKEN:NATIVE_TOKEN pair and TOKEN:NATIVE_TOKEN for each tracked token\n     */\n    struct PairOracleData {\n        address token0;\n        address token1;\n        uint256 price0CumulativeLast;\n        uint256 price1CumulativeLast;\n        uint32 blockTimestampLast;\n        FixedPoint.uq112x112 price0Average;\n        FixedPoint.uq112x112 price1Average;\n    }\n\n    /**\n     * @notice Available oracles\n     * @dev Use TOKEN (don't WETH) as key for pairs\n     */\n    mapping(address => PairOracleData) public oracleDataOf;\n\n    /// @notice Emitted when TWAP period is updated\n    event TwapPeriodUpdated(uint256 oldTwapPeriod, uint256 newTwapPeriod);\n\n    constructor(\n        IUniswapV2Router02 _router,\n        address _nativeToken,\n        address _usdToken,\n        uint256 _twapPeriod\n    ) {\n        require(address(_router) != address(0), \"null-router-address\");\n        require(_usdToken != address(0), \"null-usd-token-address\");\n\n        usdToken = _usdToken;\n        twapPeriod = _twapPeriod;\n        NATIVE_TOKEN = _nativeToken;\n        factory = IUniswapV2Factory(_router.factory());\n\n        _addOracleForEthAnd(_usdToken);\n    }\n\n    /**\n     * @notice Update TWAP period\n     * @param _newTwapPeriod The new period\n     */\n    function updateTwapPeriod(uint256 _newTwapPeriod) external onlyGovernor {\n        emit TwapPeriodUpdated(twapPeriod, _newTwapPeriod);\n        twapPeriod = _newTwapPeriod;\n    }\n\n    /**\n     * @notice Check if a oracle pair exists\n     * @param _token The key token of a pair\n     */\n    function _hasOracleData(address _token) private view returns (bool) {\n        if (_token == NATIVE_TOKEN) return true;\n        return oracleDataOf[_token].blockTimestampLast > 0;\n    }\n\n    /**\n     * @notice Add a oracle pair\n     * @dev Will add a TOKEN:NATIVE_TOKEN pair\n     * @param _token The token to add\n     */\n    function _addOracleForEthAnd(address _token) private {\n        IUniswapV2Pair _pair = IUniswapV2Pair(factory.getPair(NATIVE_TOKEN, _token));\n\n        (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = _pair.getReserves();\n\n        require(_reserve0 > 0 && _reserve1 > 0, \"no-reserves\");\n\n        oracleDataOf[_token] = PairOracleData({\n            token0: _pair.token0(),\n            token1: _pair.token1(),\n            price0CumulativeLast: _pair.price0CumulativeLast(),\n            price1CumulativeLast: _pair.price1CumulativeLast(),\n            blockTimestampLast: _blockTimestampLast,\n            price0Average: uint112(0).encode(),\n            price1Average: uint112(0).encode()\n        });\n    }\n\n    /**\n     * @notice Update a oracle pair's price if needed (i.e. when TWAP period elapsed)\n     * @param _token The key token of a pair\n     * @return true if price was updated or false if TWAP period hasn't elapsed yet\n     */\n    function _updateIfNeeded(address _token) private returns (bool) {\n        if (_token == NATIVE_TOKEN) return false;\n\n        PairOracleData storage _pairOracle = oracleDataOf[_token];\n\n        address _pair = factory.getPair(_pairOracle.token0, _pairOracle.token1);\n\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary\n            .currentCumulativePrices(_pair);\n        uint32 timeElapsed = blockTimestamp - _pairOracle.blockTimestampLast; // overflow is desired\n\n        // ensure that at least one full period has passed since the last update\n        if (timeElapsed < twapPeriod) return false;\n\n        // overflow is desired, casting never truncates\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n        _pairOracle.price0Average = FixedPoint.uq112x112(\n            uint224((price0Cumulative - _pairOracle.price0CumulativeLast) / timeElapsed)\n        );\n        _pairOracle.price1Average = FixedPoint.uq112x112(\n            uint224((price1Cumulative - _pairOracle.price1CumulativeLast) / timeElapsed)\n        );\n\n        _pairOracle.price0CumulativeLast = price0Cumulative;\n        _pairOracle.price1CumulativeLast = price1Cumulative;\n        _pairOracle.blockTimestampLast = blockTimestamp;\n\n        return true;\n    }\n\n    /**\n     * @notice Update a oracle pair's price\n     * @dev Will create the pair if it doesn't exist\n     * @dev This function also update the default USD_TOKEN:NATIVE_TOKEN pair\n     * @param _token The asset's address\n     */\n    function update(address _token) external override {\n        if (!_hasOracleData(_token)) {\n            _addOracleForEthAnd(_token);\n        }\n\n        _updateIfNeeded(_token);\n        _updateIfNeeded(usdToken);\n    }\n\n    /**\n     * @notice Convert amounts using am oracle's pair\n     * @dev  this will always return 0 before update has been called successfully for the first time.\n     * @param _token The key token of a pair\n     * @param _tokenIn The token to convert from\n     * @param _amountIn The input amount\n     * @return _amountOut The output amount\n     */\n    function _getAmountOut(\n        address _token,\n        address _tokenIn,\n        uint256 _amountIn\n    ) private view returns (uint256 _amountOut) {\n        PairOracleData memory _pairOracle = oracleDataOf[_token];\n\n        if (_tokenIn == _pairOracle.token0) {\n            _amountOut = _pairOracle.price0Average.mul(_amountIn).decode144();\n        } else {\n            require(_tokenIn == _pairOracle.token1, \"invalid-token\");\n            _amountOut = _pairOracle.price1Average.mul(_amountIn).decode144();\n        }\n    }\n\n    /**\n     * @notice Get asset's USD price\n     * @param _token The asset's address\n     * @return _priceInUsd The amount in USD (18 decimals)\n     * @return _lastUpdatedAt The timestamp of the price used to convert\n     */\n    function getPriceInUsd(address _token)\n        external\n        view\n        override\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt)\n    {\n        uint256 _decimals = IERC20Metadata(_token).decimals();\n        uint256 _amount = 10**_decimals;\n        uint256 _ethAmount = _token == NATIVE_TOKEN ? _amount : _getAmountOut(_token, _token, _amount);\n        _priceInUsd = OracleHelpers.normalizeUsdOutput(usdToken, _getAmountOut(usdToken, NATIVE_TOKEN, _ethAmount));\n        _lastUpdatedAt = Math.min(oracleDataOf[usdToken].blockTimestampLast, oracleDataOf[_token].blockTimestampLast);\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/dependencies/uniswap/v2-core/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Note: lint-staged isn't reading .solhintignore (Refs: https://github.com/protofire/solhint/issues/263)\n// solhint-disable\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/dependencies/uniswap/v2-core/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Note: lint-staged isn't reading .solhintignore (Refs: https://github.com/protofire/solhint/issues/263)\n// solhint-disable\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/dependencies/uniswap/lib/libraries/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Note: lint-staged isn't reading .solhintignore (Refs: https://github.com/protofire/solhint/issues/263)\n// solhint-disable\n\npragma solidity >=0.4.0;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\nlibrary FixedPoint {\n    // range: [0, 2**112 - 1]\n    // resolution: 1 / 2**112\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    // range: [0, 2**144 - 1]\n    // resolution: 1 / 2**112\n    struct uq144x112 {\n        uint _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(x) << RESOLUTION);\n    }\n\n    // encodes a uint144 as a UQ144x112\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n        return uq144x112(uint256(x) << RESOLUTION);\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n        return uq112x112(self._x / uint224(x));\n    }\n\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\n    // reverts on overflow\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n        uint z;\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\n        return uq144x112(z);\n    }\n\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n    // equivalent to encode(numerator).div(denominator)\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n    }\n\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n        return uint144(self._x >> RESOLUTION);\n    }\n}\n"
    },
    "contracts/dependencies/uniswap/v2-periphery/libraries/UniswapV2OracleLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Note: lint-staged isn't reading .solhintignore (Refs: https://github.com/protofire/solhint/issues/263)\n// solhint-disable\n\npragma solidity >=0.5.0;\n\nimport \"../../v2-core/interfaces/IUniswapV2Pair.sol\";\nimport \"../../lib/libraries/FixedPoint.sol\";\n\n// library with helper methods for oracles that are concerned with computing average prices\nlibrary UniswapV2OracleLibrary {\n    using FixedPoint for *;\n\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n    function currentBlockTimestamp() internal view returns (uint32) {\n        return uint32(block.timestamp % 2 ** 32);\n    }\n\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    function currentCumulativePrices(\n        address pair\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n        blockTimestamp = currentBlockTimestamp();\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n        if (blockTimestampLast != blockTimestamp) {\n            // subtraction overflow is desired\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n            // addition overflow is desired\n            // counterfactual\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n            // counterfactual\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n        }\n    }\n}\n"
    },
    "contracts/dependencies/uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\nimport \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/dependencies/uniswap/v2-periphery/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Note: lint-staged isn't reading .solhintignore (Refs: https://github.com/protofire/solhint/issues/263)\n// solhint-disable\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/oracle/DefaultOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../access/Governable.sol\";\nimport \"../interface/oracle/IOracle.sol\";\nimport \"../interface/oracle/IPriceProvider.sol\";\n\n/**\n * @title Oracle contract that encapsulates 3rd-party protocols' oracles\n */\ncontract DefaultOracle is IOracle, Governable {\n    uint256 public constant ONE_USD = 1e18;\n\n    /**\n     * @notice The supported protocols\n     */\n    enum Protocol {\n        NONE,\n        UNISWAP_V3,\n        UNISWAP_V2,\n        CHAINLINK\n    }\n\n    /**\n     * @notice Asset's oracle setup\n     * @dev I.e. maps the oracle used by each asset\n     */\n    struct Asset {\n        Protocol protocol;\n        address assetData; // Underling address for UniswapV2/V3 and aggregator address for Chainlink\n        bool isUsd; // i.e. when true no oracle query is needed (amountOut = amountIn)\n        uint256 stalePeriod; // it's used to determine if a price is invalid (i.e. outdated)\n    }\n\n    /**\n     * @notice Available assets\n     */\n    mapping(IERC20 => Asset) public assets;\n\n    /**\n     * @notice Get the price provider contract for each protocol\n     */\n    mapping(Protocol => IPriceProvider) public providerByProtocol;\n\n    /// @notice Emitted when a price provider is updated\n    event PriceProviderUpdated(Protocol protocol, IPriceProvider oldPriceProvider, IPriceProvider newPriceProvider);\n\n    /// @notice Emitted when asset setup is updated\n    event AssetUpdated(IERC20 indexed asset, Protocol protocol, address assetData, bool isUsd, uint256 stalePeriod);\n\n    /**\n     * @dev Throws if the asset isn't available\n     */\n    modifier onlyIfAssetHasPriceProvider(IERC20 _asset) {\n        require(assets[_asset].isUsd || assets[_asset].protocol != Protocol.NONE, \"asset-has-no-price-provider\");\n        _;\n    }\n\n    /**\n     * @dev Get the price provider contract of an asset\n     */\n    function _priceProviderOfAsset(IERC20 _asset) private view returns (IPriceProvider) {\n        return providerByProtocol[assets[_asset].protocol];\n    }\n\n    /**\n     * @dev Get encoded data of an asset\n     */\n    function _dataOfAsset(IERC20 _asset) private view returns (address) {\n        return assets[_asset].assetData;\n    }\n\n    /**\n     * @notice Set the price provider of a protocol\n     * @dev This function is also used for update a price provider\n     * @param _protocol The protocol\n     * @param _priceProvider The price provider protocol\n     */\n    function setPriceProvider(Protocol _protocol, IPriceProvider _priceProvider) external onlyGovernor {\n        require(address(_priceProvider) != address(0), \"provider-address-null\");\n        IPriceProvider _currentPriceProvider = providerByProtocol[_protocol];\n        require(_priceProvider != _currentPriceProvider, \"new-same-as-current\");\n        providerByProtocol[_protocol] = _priceProvider;\n        emit PriceProviderUpdated(_protocol, _currentPriceProvider, _priceProvider);\n    }\n\n    /**\n     * @notice Store an asset\n     * @param _asset The asset to store\n     * @param _protocol The protocol to use as source of price\n     * @param _assetData The asset's encoded data\n     * @param _isUsd If the asset is a USD token coin\n     */\n    function _addOrUpdateAsset(\n        IERC20 _asset,\n        Protocol _protocol,\n        address _assetData,\n        bool _isUsd,\n        uint256 _stalePeriod\n    ) private {\n        require(address(_asset) != address(0), \"asset-address-is-null\");\n        assets[_asset] = Asset({protocol: _protocol, assetData: _assetData, isUsd: _isUsd, stalePeriod: _stalePeriod});\n        emit AssetUpdated(_asset, _protocol, _assetData, _isUsd, _stalePeriod);\n    }\n\n    /**\n     * @notice Store an USD asset (no protocol)\n     * @param _asset The asset to store\n     */\n    function addOrUpdateUsdAsset(IERC20 _asset) external onlyGovernor {\n        _addOrUpdateAsset(_asset, Protocol.NONE, address(0), true, type(uint256).max);\n    }\n\n    /**\n     * @notice Store an asset that uses Chainlink source of price\n     * @param _asset The asset to store\n     * @param _aggregator The asset's chainlink aggregator contract\n     * @param _stalePeriod The stale period\n     */\n    function addOrUpdateAssetThatUsesChainlink(\n        IERC20Metadata _asset,\n        address _aggregator,\n        uint256 _stalePeriod\n    ) external onlyGovernor {\n        // Note: Keeping this check here because we call the `_asset.decimals()` function before calling `_addOrUpdateAsset`\n        require(address(_asset) != address(0), \"asset-address-is-null\");\n        require(address(_aggregator) != address(0), \"aggregator-address-is-null\");\n        _addOrUpdateAsset(_asset, Protocol.CHAINLINK, _aggregator, false, _stalePeriod);\n    }\n\n    /**\n     * @notice Store an asset that uses UniswapV2 source of price\n     * @param _asset The asset to store\n     * @param _underlying The actual asset to get prices from (e.g. vsETH uses WETH)\n     * @param _stalePeriod The stale period\n     */\n    function addOrUpdateAssetThatUsesUniswapV2(\n        IERC20 _asset,\n        address _underlying,\n        uint256 _stalePeriod\n    ) external onlyGovernor {\n        require(_underlying != address(0), \"underlying-address-is-null\");\n        _addOrUpdateAsset(_asset, Protocol.UNISWAP_V2, _underlying, false, _stalePeriod);\n    }\n\n    /**\n     * @notice Store an asset that uses UniswapV3 source of price\n     * @dev This function is also used for update a asset setup\n     * @param _asset The asset to store\n     * @param _underlying The actual asset to get prices from (e.g. vsETH uses WETH)\n     */\n    function addOrUpdateAssetThatUsesUniswapV3(IERC20 _asset, address _underlying) external onlyGovernor {\n        require(_underlying != address(0), \"underlying-address-is-null\");\n        _addOrUpdateAsset(_asset, Protocol.UNISWAP_V3, _underlying, false, type(uint256).max);\n    }\n\n    /**\n     * @notice Update a asset's price\n     * @param _asset The asset to update\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function update(IERC20 _asset) external {\n        if (assets[_asset].protocol != Protocol.NONE) {\n            _priceProviderOfAsset(_asset).update(_dataOfAsset(_asset));\n        }\n    }\n\n    /**\n     * @notice Get asset's USD price\n     * @param _asset The asset's to get price from\n     * @return _priceInUsd The amount in USD (18 decimals)\n     */\n    function getPriceInUsd(IERC20 _asset)\n        external\n        view\n        onlyIfAssetHasPriceProvider(_asset)\n        returns (uint256 _priceInUsd)\n    {\n        if (assets[_asset].isUsd) return ONE_USD;\n\n        uint256 _lastUpdatedAt;\n        (_priceInUsd, _lastUpdatedAt) = _priceProviderOfAsset(_asset).getPriceInUsd(_dataOfAsset(_asset));\n        require(block.timestamp - _lastUpdatedAt <= assets[_asset].stalePeriod, \"price-is-stale\");\n    }\n}\n"
    },
    "contracts/interface/oracle/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\";\n\ninterface IOracle {\n    function getPriceInUsd(IERC20 _asset) external view returns (uint256 _priceInUsd);\n}\n"
    },
    "contracts/oracle/MasterOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../access/Governable.sol\";\nimport \"../interface/oracle/IMasterOracle.sol\";\nimport \"../interface/oracle/IOracle.sol\";\n\n/**\n * @title The Master oracle that is called by `Controller`\n */\ncontract MasterOracle is Initializable, IMasterOracle, Governable {\n    /**\n     * @notice Maps asset addresses to oracle contracts\n     */\n    mapping(address => IOracle) public oracles;\n\n    /**\n     * @notice The Default/fallback oracle\n     */\n    IOracle public defaultOracle;\n\n    /**\n     * @notice Event emitted when the default oracle is updated\n     */\n    event DefaultOracleUpdated(IOracle oldOracle, IOracle newOracle);\n\n    /**\n     * @notice Event emitted when a asset's oracle is updated\n     */\n    event OracleUpdated(address asset, IOracle oldOracle, IOracle newOracle);\n\n    function initialize(\n        address[] calldata _assets,\n        IOracle[] calldata _oracles,\n        IOracle _defaultOracle\n    ) external initializer {\n        __Governable_init();\n\n        _updateOracles(_assets, _oracles);\n        defaultOracle = _defaultOracle;\n    }\n\n    /**\n     * @notice Sets `_oracles` for `_assets`.\n     * @param _assets The ERC20 asset addresses to link to `_oracles`.\n     * @param _oracles The `IOracle` contracts to be assigned to `_assets`.\n     * @dev We allow null address inside of the `_oracles` array in order to turn off oracle for a given asset\n     */\n    function _updateOracles(address[] calldata _assets, IOracle[] calldata _oracles) private {\n        uint256 _assetsLength = _assets.length;\n        require(_assetsLength == _oracles.length, \"invalid-arrays-length\");\n\n        for (uint256 i; i < _assetsLength; i++) {\n            address _asset = _assets[i];\n            require(_asset != address(0), \"an-asset-has-null-address\");\n            IOracle _currentOracle = oracles[_asset];\n            IOracle _newOracle = _oracles[i];\n            require(_newOracle != _currentOracle, \"a-new-oracle-same-as-current\");\n            emit OracleUpdated(_asset, _currentOracle, _newOracle);\n            oracles[_asset] = _newOracle;\n        }\n    }\n\n    /**\n     * @notice Add or update token oracles\n     * @param _assets The ERC20 asset addresses to link to `_oracles`\n     * @param _oracles The `IOracle` contracts to be assigned to `_assets`\n     */\n    function addOrUpdate(address[] calldata _assets, IOracle[] calldata _oracles) external onlyGovernor {\n        require(_assets.length > 0 && _oracles.length > 0, \"invalid-arrays-length\");\n        _updateOracles(_assets, _oracles);\n    }\n\n    /**\n     * @notice Update the default oracle contract\n     * @param _newDefaultOracle The new default oracle contract\n     * @dev We allow null address in order to turn off the default oracle\n     */\n    function setDefaultOracle(IOracle _newDefaultOracle) external onlyGovernor {\n        IOracle _currentDefaultOracle = defaultOracle;\n        require(_newDefaultOracle != _currentDefaultOracle, \"new-oracle-is-same-as-current\");\n        emit DefaultOracleUpdated(_currentDefaultOracle, _newDefaultOracle);\n        defaultOracle = _newDefaultOracle;\n    }\n\n    /**\n     * @notice Get asset's USD price\n     * @param _asset The asset's address\n     * @return _priceInUsd The USD price (18 decimals)\n     */\n    function _getPriceInUsd(IERC20 _asset) private view returns (uint256 _priceInUsd) {\n        IOracle _oracle = oracles[address(_asset)];\n\n        if (address(_oracle) != address(0)) {\n            _priceInUsd = _oracle.getPriceInUsd(_asset);\n        } else if (address(defaultOracle) != address(0)) {\n            _priceInUsd = defaultOracle.getPriceInUsd(_asset);\n        } else {\n            revert(\"asset-without-oracle\");\n        }\n\n        require(_priceInUsd > 0, \"invalid-price\");\n    }\n\n    /**\n     * @notice Convert asset's amount to USD\n     * @param _asset The asset's address\n     * @param _amount The amount to convert\n     * @return _amountInUsd The amount in USD (18 decimals)\n     */\n    function quoteTokenToUsd(IERC20 _asset, uint256 _amount) public view returns (uint256 _amountInUsd) {\n        uint256 _priceInUsd = _getPriceInUsd(_asset);\n        _amountInUsd = (_amount * _priceInUsd) / 10**IERC20Metadata(address(_asset)).decimals();\n    }\n\n    /**\n     * @notice Convert USD to asset's amount\n     * @param _asset The asset's address\n     * @param _amountInUsd The amount in USD (18 decimals)\n     * @return _amount The converted amount\n     */\n    function quoteUsdToToken(IERC20 _asset, uint256 _amountInUsd) public view returns (uint256 _amount) {\n        uint256 _priceInUsd = _getPriceInUsd(_asset);\n        _amount = (_amountInUsd * 10**IERC20Metadata(address(_asset)).decimals()) / _priceInUsd;\n    }\n\n    /**\n     * @notice Convert assets' amounts\n     * @param _assetIn The asset to convert from\n     * @param _assetOut The asset to convert to\n     * @param _amountIn The amount to convert from\n     * @return _amountOut The converted amount\n     */\n    function quote(\n        IERC20 _assetIn,\n        IERC20 _assetOut,\n        uint256 _amountIn\n    ) external view returns (uint256 _amountOut) {\n        uint256 _amountInUsd = quoteTokenToUsd(_assetIn, _amountIn);\n        _amountOut = quoteUsdToToken(_assetOut, _amountInUsd);\n    }\n}\n"
    },
    "contracts/interface/oracle/IMasterOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\";\n\ninterface IMasterOracle {\n    function quoteTokenToUsd(IERC20 _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\n\n    function quoteUsdToToken(IERC20 _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\n\n    function quote(\n        IERC20 _assetIn,\n        IERC20 _assetOut,\n        uint256 _amountIn\n    ) external view returns (uint256 _amountOut);\n}\n"
    },
    "contracts/mock/MasterOracleMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../interface/oracle/IMasterOracle.sol\";\n\ncontract MasterOracleMock is IMasterOracle {\n    mapping(IERC20 => uint256) public prices;\n\n    function updatePrice(IERC20 _asset, uint256 _price) external {\n        prices[_asset] = _price;\n    }\n\n    function quoteTokenToUsd(IERC20 _asset, uint256 _amount) public view override returns (uint256 _amountInUsd) {\n        _amountInUsd = (_amount * prices[_asset]) / 10**IERC20Metadata(address(_asset)).decimals();\n    }\n\n    function quoteUsdToToken(IERC20 _asset, uint256 _amountInUsd) public view override returns (uint256 _amount) {\n        _amount = (_amountInUsd * 10**IERC20Metadata(address(_asset)).decimals()) / prices[_asset];\n    }\n\n    function quote(\n        IERC20 _assetIn,\n        IERC20 _assetOut,\n        uint256 _amountIn\n    ) public view override returns (uint256 _amountOut) {\n        uint256 _amountInUsd = quoteTokenToUsd(_assetIn, _amountIn);\n        _amountOut = quoteUsdToToken(_assetOut, _amountInUsd);\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/dependencies/openzeppelin/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "contracts/dependencies/openzeppelin/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/upgraders/UpgraderBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/proxy/transparent/ProxyAdmin.sol\";\nimport \"../dependencies/openzeppelin//proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"../interface/external/IMulticall.sol\";\n\nabstract contract UpgraderBase is ProxyAdmin {\n    // Note: `Multicall3` contract has same address for all chains\n    address public constant multicall = 0xcA11bde05977b3631167028862bE2a173976CA11;\n\n    function upgrade(TransparentUpgradeableProxy _proxy, address _implementation) public override onlyOwner {\n        bytes[] memory calls = _calls();\n        bytes[] memory beforeResults = _aggregate(_proxy, calls);\n\n        _proxy.upgradeTo(_implementation);\n\n        bytes[] memory afterResults = _aggregate(_proxy, calls);\n        _checkResults(beforeResults, afterResults);\n    }\n\n    function upgradeAndCall(\n        TransparentUpgradeableProxy _proxy,\n        address _implementation,\n        bytes calldata _data\n    ) public payable override onlyOwner {\n        bytes[] memory calls = _calls();\n        bytes[] memory beforeResults = _aggregate(_proxy, calls);\n\n        TransparentUpgradeableProxy(payable(_proxy)).upgradeToAndCall{value: msg.value}(_implementation, _data);\n\n        bytes[] memory afterResults = _aggregate(_proxy, calls);\n        _checkResults(beforeResults, afterResults);\n    }\n\n    function _aggregate(TransparentUpgradeableProxy _proxy, bytes[] memory _callDatas)\n        internal\n        returns (bytes[] memory results)\n    {\n        uint256 _length = _callDatas.length;\n        IMulticall.Call[] memory calls = new IMulticall.Call[](_length);\n        for (uint256 i; i < _length; i++) {\n            calls[i].target = address(_proxy);\n            calls[i].callData = _callDatas[i];\n        }\n        (, results) = IMulticall(multicall).aggregate(calls);\n    }\n\n    function _calls() internal virtual returns (bytes[] memory calls);\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal virtual;\n\n    function _checkStringResults(\n        bytes[] memory _beforeResults,\n        bytes[] memory _afterResults,\n        uint256 _from,\n        uint256 _to\n    ) internal pure {\n        for (uint256 i = _from; i <= _to; ++i) {\n            string memory _before = abi.decode(_beforeResults[i], (string));\n            string memory _after = abi.decode(_afterResults[i], (string));\n            require(keccak256(bytes(_before)) == keccak256(bytes(_after)), \"an-string-simple-field-failed\");\n        }\n    }\n\n    function _checkUint8Results(\n        bytes[] memory _beforeResults,\n        bytes[] memory _afterResults,\n        uint8 _from,\n        uint8 _to\n    ) internal pure {\n        for (uint256 i = _from; i <= _to; ++i) {\n            uint256 _before = abi.decode(_beforeResults[i], (uint8));\n            uint256 _after = abi.decode(_afterResults[i], (uint8));\n            require(_before == _after, \"an-uint8-simple-field-failed\");\n        }\n    }\n\n    function _checkUint256Results(\n        bytes[] memory _beforeResults,\n        bytes[] memory _afterResults,\n        uint256 _from,\n        uint256 _to\n    ) internal pure {\n        for (uint256 i = _from; i <= _to; ++i) {\n            uint256 _before = abi.decode(_beforeResults[i], (uint256));\n            uint256 _after = abi.decode(_afterResults[i], (uint256));\n            require(_before == _after, \"an-uint256-simple-field-failed\");\n        }\n    }\n\n    function _checkAddressResults(\n        bytes[] memory _beforeResults,\n        bytes[] memory _afterResults,\n        uint256 _from,\n        uint256 _to\n    ) internal pure {\n        for (uint256 i = _from; i <= _to; ++i) {\n            address _before = abi.decode(_beforeResults[i], (address));\n            address _after = abi.decode(_afterResults[i], (address));\n            require(_before == _after, \"an-address-simple-field-failed\");\n        }\n    }\n\n    function _checkBooleanResults(\n        bytes[] memory _beforeResults,\n        bytes[] memory _afterResults,\n        uint256 _from,\n        uint256 _to\n    ) internal pure {\n        for (uint256 i = _from; i <= _to; ++i) {\n            bool _before = abi.decode(_beforeResults[i], (bool));\n            bool _after = abi.decode(_afterResults[i], (bool));\n            require(_before == _after, \"an-address-simple-field-failed\");\n        }\n    }\n}\n"
    },
    "contracts/interface/external/IMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IMulticall {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    function aggregate(Call[] calldata calls) external returns (uint256 blockNumber, bytes[] memory returnData);\n}\n"
    },
    "contracts/upgraders/TreasuryUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract TreasuryUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    function _calls() internal pure override returns (bytes[] memory calls) {}\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {}\n}\n"
    },
    "contracts/upgraders/SyntheticTokenUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract SyntheticTokenUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](8);\n        calls[0] = abi.encodeWithSignature(\"name()\");\n        calls[1] = abi.encodeWithSignature(\"symbol()\");\n        calls[2] = abi.encodeWithSignature(\"decimals()\");\n        calls[3] = abi.encodeWithSignature(\"totalSupply()\");\n        calls[4] = abi.encodeWithSignature(\"maxTotalSupplyInUsd()\");\n        calls[5] = abi.encodeWithSignature(\"interestRate()\");\n        calls[6] = abi.encodeWithSignature(\"debtToken()\");\n        calls[7] = abi.encodeWithSignature(\"isActive()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        _checkStringResults(_beforeResults, _afterResults, 0, 1);\n        _checkUint8Results(_beforeResults, _afterResults, 2, 2);\n        _checkUint256Results(_beforeResults, _afterResults, 3, 5);\n        _checkAddressResults(_beforeResults, _afterResults, 6, 6);\n        _checkBooleanResults(_beforeResults, _afterResults, 7, 7);\n    }\n}\n"
    },
    "contracts/upgraders/RewardsDistributorUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract RewardsDistributorUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](1);\n        calls[0] = abi.encodeWithSignature(\"rewardToken()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        _checkAddressResults(_beforeResults, _afterResults, 0, 0);\n    }\n}\n"
    },
    "contracts/upgraders/MasterOracleUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract MasterOracleUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](1);\n        calls[0] = abi.encodeWithSignature(\"defaultOracle()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        _checkAddressResults(_beforeResults, _afterResults, 0, 0);\n    }\n}\n"
    },
    "contracts/upgraders/DepositTokenUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract DepositTokenUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](9);\n        calls[0] = abi.encodeWithSignature(\"name()\");\n        calls[1] = abi.encodeWithSignature(\"symbol()\");\n        calls[2] = abi.encodeWithSignature(\"decimals()\");\n        calls[3] = abi.encodeWithSignature(\"totalSupply()\");\n        calls[4] = abi.encodeWithSignature(\"minDepositTime()\");\n        calls[5] = abi.encodeWithSignature(\"maxTotalSupplyInUsd()\");\n        calls[6] = abi.encodeWithSignature(\"collateralizationRatio()\");\n        calls[7] = abi.encodeWithSignature(\"underlying()\");\n        calls[8] = abi.encodeWithSignature(\"isActive()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        _checkStringResults(_beforeResults, _afterResults, 0, 1);\n        _checkUint8Results(_beforeResults, _afterResults, 2, 2);\n        _checkUint256Results(_beforeResults, _afterResults, 3, 6);\n        _checkAddressResults(_beforeResults, _afterResults, 7, 7);\n        _checkBooleanResults(_beforeResults, _afterResults, 8, 8);\n    }\n}\n"
    },
    "contracts/upgraders/DebtTokenUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract DebtTokenUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](7);\n        calls[0] = abi.encodeWithSignature(\"totalSupply()\");\n        calls[1] = abi.encodeWithSignature(\"lastTimestampAccrued()\");\n        calls[2] = abi.encodeWithSignature(\"debtIndex()\");\n        calls[3] = abi.encodeWithSignature(\"decimals()\");\n        calls[4] = abi.encodeWithSignature(\"name()\");\n        calls[5] = abi.encodeWithSignature(\"symbol()\");\n        calls[6] = abi.encodeWithSignature(\"syntheticToken()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        _checkUint256Results(_beforeResults, _afterResults, 0, 2);\n        _checkUint8Results(_beforeResults, _afterResults, 3, 3);\n        _checkStringResults(_beforeResults, _afterResults, 4, 5);\n        _checkAddressResults(_beforeResults, _afterResults, 6, 6);\n    }\n}\n"
    },
    "contracts/interface/external/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/NativeTokenGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./access/Governable.sol\";\nimport \"./interface/external/IWETH.sol\";\nimport \"./interface/INativeTokenGateway.sol\";\nimport \"./interface/IDepositToken.sol\";\n\n/**\n * @title Helper contract to easily support native tokens (e.g. ETH/AVAX) as collateral\n */\ncontract NativeTokenGateway is ReentrancyGuard, Governable, INativeTokenGateway {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IWETH;\n    using SafeERC20 for IDepositToken;\n\n    IWETH public immutable nativeToken;\n\n    constructor(IWETH _nativeToken) {\n        nativeToken = _nativeToken;\n    }\n\n    /**\n     * @notice deposits NATIVE_TOKEN as collateral using native. A corresponding amount of the deposit token is minted.\n     * @param _controller The Controller contract\n     */\n    function deposit(IController _controller) external payable override {\n        nativeToken.deposit{value: msg.value}();\n        IDepositToken _vsdToken = _controller.depositTokenOf(nativeToken);\n        nativeToken.safeApprove(address(_vsdToken), msg.value);\n        _vsdToken.deposit(msg.value, _msgSender());\n    }\n\n    /**\n     * @notice withdraws the NATIVE_TOKEN deposit of msg.sender.\n     * @param _controller The Controller contract\n     * @param _amount The amount of deposit tokens to withdraw and receive native ETH\n     */\n    function withdraw(IController _controller, uint256 _amount) external override nonReentrant {\n        IDepositToken _vsdToken = _controller.depositTokenOf(nativeToken);\n        _vsdToken.safeTransferFrom(_msgSender(), address(this), _amount);\n        _vsdToken.withdraw(_amount, address(this));\n        nativeToken.withdraw(_amount);\n        Address.sendValue(payable(_msgSender()), _amount);\n    }\n\n    /**\n     * @dev Only NATIVE_TOKEN contract is allowed to transfer to here. Prevent other addresses to send coins to this contract.\n     */\n    receive() external payable override {\n        require(_msgSender() == address(nativeToken), \"receive-not-allowed\");\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interface/INativeTokenGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./IController.sol\";\n\ninterface INativeTokenGateway {\n    function deposit(IController _controller) external payable;\n\n    function withdraw(IController _controller, uint256 _amount) external;\n}\n"
    },
    "contracts/interface/IDepositToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IDepositToken is IERC20Metadata {\n    function underlying() external view returns (IERC20);\n\n    function collateralizationRatio() external view returns (uint256);\n\n    function unlockedBalanceOf(address _account) external view returns (uint256);\n\n    function lockedBalanceOf(address _account) external view returns (uint256);\n\n    function minDepositTime() external view returns (uint256);\n\n    function lastDepositOf(address _account) external view returns (uint256);\n\n    function deposit(uint256 _amount, address _onBehalfOf) external;\n\n    function withdraw(uint256 _amount, address _to) external;\n\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n\n    function seize(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external;\n\n    function updateCollateralizationRatio(uint128 _newCollateralizationRatio) external;\n\n    function isActive() external view returns (bool);\n\n    function toggleIsActive() external;\n\n    function maxTotalSupplyInUsd() external view returns (uint256);\n\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupplyInUsd) external;\n}\n"
    },
    "contracts/interface/IController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./oracle/IMasterOracle.sol\";\nimport \"./IPausable.sol\";\nimport \"./ISyntheticToken.sol\";\nimport \"./IDepositToken.sol\";\nimport \"./ITreasury.sol\";\nimport \"./IRewardsDistributor.sol\";\n\n/**\n * @notice Controller interface\n */\ninterface IController is IPausable {\n    function debtFloorInUsd() external returns (uint256);\n\n    function depositFee() external returns (uint256);\n\n    function issueFee() external returns (uint256);\n\n    function withdrawFee() external returns (uint256);\n\n    function repayFee() external returns (uint256);\n\n    function isSyntheticTokenExists(ISyntheticToken _syntheticToken) external view returns (bool);\n\n    function isDepositTokenExists(IDepositToken _depositToken) external view returns (bool);\n\n    function depositTokenOf(IERC20 _underlying) external view returns (IDepositToken);\n\n    function getDepositTokens() external view returns (address[] memory);\n\n    function getSyntheticTokens() external view returns (address[] memory);\n\n    function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\n\n    function debtOf(address _account) external view returns (uint256 _debtInUsd);\n\n    function depositOf(address _account) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\n\n    function debtPositionOf(address _account)\n        external\n        view\n        returns (\n            bool _isHealthy,\n            uint256 _depositInUsd,\n            uint256 _debtInUsd,\n            uint256 _issuableLimitInUsd,\n            uint256 _issuableInUsd\n        );\n\n    function addSyntheticToken(address _synthetic) external;\n\n    function removeSyntheticToken(ISyntheticToken _synthetic) external;\n\n    function addDepositToken(address _depositToken) external;\n\n    function removeDepositToken(IDepositToken _depositToken) external;\n\n    function liquidate(\n        ISyntheticToken _syntheticToken,\n        address _account,\n        uint256 _amountToRepay,\n        IDepositToken _depositToken\n    ) external;\n\n    function swap(\n        ISyntheticToken _syntheticTokenIn,\n        ISyntheticToken _syntheticTokenOut,\n        uint256 _amountIn\n    ) external returns (uint256 _amountOut);\n\n    function updateMasterOracle(IMasterOracle _newOracle) external;\n\n    function updateDebtFloor(uint256 _newDebtFloorInUsd) external;\n\n    function updateDepositFee(uint256 _newDepositFee) external;\n\n    function updateIssueFee(uint256 _newIssueFee) external;\n\n    function updateWithdrawFee(uint256 _newWithdrawFee) external;\n\n    function updateRepayFee(uint256 _newRepayFee) external;\n\n    function updateSwapFee(uint256 _newSwapFee) external;\n\n    function updateLiquidatorLiquidationFee(uint256 _newLiquidatorLiquidationFee) external;\n\n    function updateProtocolLiquidationFee(uint256 _newProtocolLiquidationFee) external;\n\n    function updateMaxLiquidable(uint256 _newMaxLiquidable) external;\n\n    function updateTreasury(ITreasury _newTreasury, bool _withMigration) external;\n\n    function treasury() external view returns (ITreasury);\n\n    function masterOracle() external view returns (IMasterOracle);\n\n    function addToDepositTokensOfAccount(address _account) external;\n\n    function removeFromDepositTokensOfAccount(address _account) external;\n\n    function addToDebtTokensOfAccount(address _account) external;\n\n    function removeFromDebtTokensOfAccount(address _account) external;\n\n    function getDepositTokensOfAccount(address _account) external view returns (address[] memory);\n\n    function getDebtTokensOfAccount(address _account) external view returns (address[] memory);\n\n    function addRewardsDistributor(IRewardsDistributor _distributor) external;\n}\n"
    },
    "contracts/interface/IPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IPausable {\n    function paused() external returns (bool);\n\n    function everythingStopped() external returns (bool);\n}\n"
    },
    "contracts/interface/ISyntheticToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./IDebtToken.sol\";\n\ninterface ISyntheticToken is IERC20Metadata {\n    function isActive() external view returns (bool);\n\n    function maxTotalSupplyInUsd() external view returns (uint256);\n\n    function interestRate() external view returns (uint256);\n\n    function interestRatePerSecond() external view returns (uint256);\n\n    function debtToken() external view returns (IDebtToken);\n\n    function mint(address _to, uint256 amount) external;\n\n    function burn(address _from, uint256 amount) external;\n\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupply) external;\n\n    function toggleIsActive() external;\n\n    function updateInterestRate(uint256 _newInterestRate) external;\n\n    function issue(uint256 _amount, address _to) external;\n\n    function repay(address _onBehalfOf, uint256 _amount) external;\n\n    function accrueInterest() external;\n}\n"
    },
    "contracts/interface/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface ITreasury {\n    function pull(address _to, uint256 _amount) external;\n\n    function migrateTo(address _newTreasury) external;\n}\n"
    },
    "contracts/interface/IRewardsDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/IERC20.sol\";\n\n/**\n * @notice Reward Distributor interface\n */\ninterface IRewardsDistributor {\n    function rewardToken() external view returns (IERC20);\n\n    function tokenSpeeds(IERC20 _token) external view returns (uint256);\n\n    function tokensAccruedOf(address _account) external view returns (uint256);\n\n    function updateBeforeMintOrBurn(IERC20 _token, address _account) external;\n\n    function updateBeforeTransfer(\n        IERC20 _token,\n        address _from,\n        address _to\n    ) external;\n\n    function claimRewards(address _account) external;\n\n    function claimRewards(address _account, IERC20[] memory _tokens) external;\n\n    function claimRewards(address[] memory _accounts, IERC20[] memory _tokens) external;\n}\n"
    },
    "contracts/interface/IDebtToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./ISyntheticToken.sol\";\n\ninterface IDebtToken is IERC20Metadata {\n    function syntheticToken() external view returns (ISyntheticToken);\n\n    function accrueInterest() external returns (uint256 _interestAmountAccrued);\n\n    function debtIndex() external returns (uint256 _debtIndex);\n\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n}\n"
    },
    "contracts/storage/DepositTokenStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interface/IDepositToken.sol\";\n\nabstract contract DepositTokenStorageV1 is IDepositToken {\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    uint256 public totalSupply;\n    uint256 public maxTotalSupplyInUsd;\n\n    /**\n     * @notice Deposit underlying asset (e.g. MET)\n     */\n    IERC20 public underlying;\n\n    /**\n     * @notice Collateralization ration for the deposit token\n     * @dev Use 18 decimals (e.g. 0.66e18 = 66%)\n     */\n    uint256 public collateralizationRatio;\n\n    /**\n     * @notice The min amount of time that an account should wait after deposit collateral before be able to withdraw\n     */\n    uint256 public minDepositTime;\n\n    /**\n     * @notice Stores de timestamp of last deposit event of each account. It's used combined with `minDepositTime`.\n     */\n    mapping(address => uint256) public lastDepositOf;\n\n    /**\n     * @notice If a collateral isn't active, it disables minting new tokens\n     */\n    bool public isActive;\n}\n"
    },
    "contracts/DepositToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/utils/math/Math.sol\";\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./lib/WadRayMath.sol\";\nimport \"./access/Manageable.sol\";\nimport \"./storage/DepositTokenStorage.sol\";\n\n/**\n * @title Represents the users' deposits\n */\ncontract DepositToken is ReentrancyGuard, Manageable, DepositTokenStorageV1 {\n    using SafeERC20 for IERC20;\n    using WadRayMath for uint256;\n\n    string public constant VERSION = \"1.0.0\";\n\n    /// @notice Emitted when CR is updated\n    event CollateralizationRatioUpdated(uint256 oldCollateralizationRatio, uint256 newCollateralizationRatio);\n\n    /// @notice Emitted when minimum deposit time is updated\n    event MinDepositTimeUpdated(uint256 oldMinDepositTime, uint256 newMinDepositTime);\n\n    /// @notice Emitted when active flag is updated\n    event DepositTokenActiveUpdated(bool oldActive, bool newActive);\n\n    /// @notice Emitted when max total supply is updated\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupplyInUsd, uint256 newMaxTotalSupplyInUsd);\n\n    /// @notice Emitted when collateral is deposited\n    event CollateralDeposited(address indexed from, address indexed account, uint256 amount, uint256 fee);\n\n    /// @notice Emitted when collateral is withdrawn\n    event CollateralWithdrawn(address indexed account, address indexed to, uint256 amount, uint256 fee);\n\n    /**\n     * @dev Throws if minimum deposit time haven't passed\n     */\n    modifier onlyIfMinDepositTimePassed(address _account) {\n        require(block.timestamp >= lastDepositOf[_account] + minDepositTime, \"min-deposit-time-have-not-passed\");\n        _;\n    }\n\n    /**\n     * @notice Requires that amount is lower than the account's unlocked balance\n     */\n    modifier onlyIfNotLocked(address _account, uint256 _amount) {\n        require(unlockedBalanceOf(_account) >= _amount, \"not-enough-free-balance\");\n        _;\n    }\n\n    /**\n     * @dev Throws if deposit token doesn't exist\n     */\n    modifier onlyIfDepositTokenExists() {\n        require(controller.isDepositTokenExists(this), \"collateral-inexistent\");\n        _;\n    }\n\n    /**\n     * @notice Update reward contracts' states\n     * @dev Should be called before balance changes (i.e. mint/burn)\n     */\n    modifier updateRewardsBeforeMintOrBurn(address _account) {\n        IRewardsDistributor[] memory _rewardsDistributors = controller.getRewardsDistributors();\n        uint256 _length = _rewardsDistributors.length;\n        for (uint256 i; i < _length; i++) {\n            _rewardsDistributors[i].updateBeforeMintOrBurn(this, _account);\n        }\n        _;\n    }\n\n    /**\n     * @notice Update reward contracts' states\n     * @dev Should be called before balance changes (i.e. transfer)\n     */\n    modifier updateRewardsBeforeTransfer(address _sender, address _recipient) {\n        IRewardsDistributor[] memory _rewardsDistributors = controller.getRewardsDistributors();\n        uint256 _length = _rewardsDistributors.length;\n        for (uint256 i; i < _length; i++) {\n            _rewardsDistributors[i].updateBeforeTransfer(this, _sender, _recipient);\n        }\n        _;\n    }\n\n    /**\n     * @dev Throws if deposit token isn't enabled\n     */\n    modifier onlyIfDepositTokenIsActive() {\n        require(isActive, \"deposit-token-is-inactive\");\n        _;\n    }\n\n    function initialize(\n        IERC20 _underlying,\n        IController _controller,\n        string calldata _symbol,\n        uint8 _decimals,\n        uint128 _collateralizationRatio,\n        uint256 _maxTotalSupplyInUsd\n    ) public initializer {\n        require(address(_underlying) != address(0), \"underlying-is-null\");\n        require(address(_controller) != address(0), \"controller-address-is-zero\");\n        require(_collateralizationRatio <= 1e18, \"collateralization-ratio-gt-100%\");\n\n        __Manageable_init();\n\n        controller = _controller;\n        name = \"Tokenized deposit position\";\n        symbol = _symbol;\n        underlying = _underlying;\n        minDepositTime = 0;\n        isActive = true;\n        decimals = _decimals;\n        collateralizationRatio = _collateralizationRatio;\n        maxTotalSupplyInUsd = _maxTotalSupplyInUsd;\n    }\n\n    function approve(address spender, uint256 _amount) external override returns (bool) {\n        _approve(_msgSender(), spender, _amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n        uint256 currentAllowance = allowance[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"decreased-allowance-below-zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) private updateRewardsBeforeTransfer(_sender, _recipient) {\n        require(_sender != address(0), \"transfer-from-the-zero-address\");\n        require(_recipient != address(0), \"transfer-to-the-zero-address\");\n\n        uint256 _senderBalance = balanceOf[_sender];\n        require(_senderBalance >= _amount, \"transfer-amount-exceeds-balance\");\n        unchecked {\n            balanceOf[_sender] = _senderBalance - _amount;\n        }\n        balanceOf[_recipient] += _amount;\n\n        emit Transfer(_sender, _recipient, _amount);\n\n        unchecked {\n            _addToDepositTokensOfRecipientIfNeeded(_recipient, balanceOf[_recipient] - _amount);\n        }\n        _removeFromDepositTokensOfSenderIfNeeded(_sender, balanceOf[_sender]);\n    }\n\n    function _mint(address _account, uint256 _amount)\n        private\n        onlyIfDepositTokenIsActive\n        updateRewardsBeforeMintOrBurn(_account)\n    {\n        require(_account != address(0), \"mint-to-the-zero-address\");\n\n        uint256 _newTotalSupplyInUsd = controller.masterOracle().quoteTokenToUsd(this, totalSupply + _amount);\n        require(_newTotalSupplyInUsd <= maxTotalSupplyInUsd, \"surpass-max-total-supply\");\n        lastDepositOf[_account] = block.timestamp;\n\n        totalSupply += _amount;\n        balanceOf[_account] += _amount;\n        emit Transfer(address(0), _account, _amount);\n\n        unchecked {\n            _addToDepositTokensOfRecipientIfNeeded(_account, balanceOf[_account] - _amount);\n        }\n    }\n\n    function _burn(address _account, uint256 _amount) private updateRewardsBeforeMintOrBurn(_account) {\n        require(_account != address(0), \"burn-from-the-zero-address\");\n\n        uint256 _accountBalance = balanceOf[_account];\n        require(_accountBalance >= _amount, \"burn-amount-exceeds-balance\");\n        unchecked {\n            balanceOf[_account] = _accountBalance - _amount;\n        }\n        totalSupply -= _amount;\n\n        emit Transfer(_account, address(0), _amount);\n\n        _removeFromDepositTokensOfSenderIfNeeded(_account, balanceOf[_account]);\n    }\n\n    function _approve(\n        address _owner,\n        address _spender,\n        uint256 _amount\n    ) private {\n        require(_owner != address(0), \"approve-from-the-zero-address\");\n        require(_spender != address(0), \"approve-to-the-zero-address\");\n\n        allowance[_owner][_spender] = _amount;\n        emit Approval(_owner, _spender, _amount);\n    }\n\n    function _addToDepositTokensOfRecipientIfNeeded(address _recipient, uint256 _recipientBalanceBefore) private {\n        if (_recipientBalanceBefore == 0) {\n            controller.addToDepositTokensOfAccount(_recipient);\n        }\n    }\n\n    function _removeFromDepositTokensOfSenderIfNeeded(address _sender, uint256 _senderBalanceAfter) private {\n        if (_senderBalanceAfter == 0) {\n            controller.removeFromDepositTokensOfAccount(_sender);\n        }\n    }\n\n    /**\n     * @notice Deposit collateral and mint vsdTOKEN (tokenized deposit position)\n     * @param _amount The amount of collateral tokens to deposit\n     * @param _onBehalfOf The account to deposit to\n     */\n    function deposit(uint256 _amount, address _onBehalfOf)\n        external\n        override\n        whenNotPaused\n        nonReentrant\n        onlyIfDepositTokenIsActive\n        onlyIfDepositTokenExists\n    {\n        require(_amount > 0, \"amount-is-zero\");\n\n        address _sender = _msgSender();\n        ITreasury _treasury = controller.treasury();\n\n        uint256 _balanceBefore = underlying.balanceOf(address(_treasury));\n\n        underlying.safeTransferFrom(_sender, address(_treasury), _amount);\n\n        _amount = underlying.balanceOf(address(_treasury)) - _balanceBefore;\n\n        uint256 _depositFee = controller.depositFee();\n        uint256 _amountToDeposit = _amount;\n        uint256 _feeAmount;\n        if (_depositFee > 0) {\n            _feeAmount = _amount.wadMul(_depositFee);\n            _mint(address(_treasury), _feeAmount);\n            _amountToDeposit -= _feeAmount;\n        }\n\n        _mint(_onBehalfOf, _amountToDeposit);\n\n        emit CollateralDeposited(_sender, _onBehalfOf, _amount, _feeAmount);\n    }\n\n    /**\n     * @notice Burn vsdTOKEN and withdraw collateral\n     * @param _amount The amount of collateral to withdraw\n     * @param _to The account that will receive withdrawn collateral\n     */\n    function withdraw(uint256 _amount, address _to)\n        external\n        override\n        whenNotShutdown\n        nonReentrant\n        onlyIfDepositTokenExists\n    {\n        require(_amount > 0, \"amount-is-zero\");\n\n        address _account = _msgSender();\n\n        require(_amount <= unlockedBalanceOf(_account), \"amount-gt-unlocked\");\n\n        ITreasury _treasury = controller.treasury();\n\n        uint256 _withdrawFee = controller.withdrawFee();\n        uint256 _amountToWithdraw = _amount;\n        uint256 _feeAmount;\n        if (_withdrawFee > 0) {\n            _feeAmount = _amount.wadMul(_withdrawFee);\n            _transfer(_account, address(_treasury), _feeAmount);\n            _amountToWithdraw -= _feeAmount;\n        }\n\n        _burnForWithdraw(_account, _amountToWithdraw);\n        _treasury.pull(_to, _amountToWithdraw);\n\n        emit CollateralWithdrawn(_account, _to, _amount, _feeAmount);\n    }\n\n    /**\n     * @notice Mint deposit token when an account deposits collateral\n     * @param _to The account to mint to\n     * @param _amount The amount to mint\n     */\n    function mint(address _to, uint256 _amount) external override onlyController {\n        _mint(_to, _amount);\n    }\n\n    /**\n     * @notice Burn deposit token as part of withdraw process\n     * @param _from The account to burn from\n     * @param _amount The amount to burn\n     */\n    function _burnForWithdraw(address _from, uint256 _amount) private onlyIfMinDepositTimePassed(_from) {\n        _burn(_from, _amount);\n    }\n\n    /**\n     * @notice Burn deposit tokens\n     * @param _from The account to burn from\n     * @param _amount The amount to burn\n     */\n    function burn(address _from, uint256 _amount) external override onlyController {\n        _burn(_from, _amount);\n    }\n\n    /**\n     * @notice Transfer tokens if checks pass\n     * @param _sender The account to transfer from\n     * @param _recipient The account to transfer to\n     * @param _amount The amount to transfer\n     */\n    function _transferWithChecks(\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) private onlyIfNotLocked(_sender, _amount) onlyIfMinDepositTimePassed(_sender) {\n        _transfer(_sender, _recipient, _amount);\n    }\n\n    function transfer(address _to, uint256 _amount) external override returns (bool) {\n        _transferWithChecks(_msgSender(), _to, _amount);\n        return true;\n    }\n\n    function transferFrom(\n        address _sender,\n        address _recipient,\n        uint256 _amount\n    ) external override nonReentrant returns (bool) {\n        _transferWithChecks(_sender, _recipient, _amount);\n\n        uint256 currentAllowance = allowance[_sender][_msgSender()];\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= _amount, \"amount-exceeds-allowance\");\n            unchecked {\n                _approve(_sender, _msgSender(), currentAllowance - _amount);\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice Get the unlocked balance (i.e. transferable, withdrawable)\n     * @param _account The account to check\n     * @return _unlockedBalance The amount that user can transfer or withdraw\n     */\n    function unlockedBalanceOf(address _account) public view override returns (uint256 _unlockedBalance) {\n        (, , , , uint256 _issuableInUsd) = controller.debtPositionOf(_account);\n\n        if (_issuableInUsd > 0) {\n            uint256 _unlockedInUsd = _issuableInUsd.wadDiv(collateralizationRatio);\n            _unlockedBalance = Math.min(\n                balanceOf[_account],\n                controller.masterOracle().quoteUsdToToken(this, _unlockedInUsd)\n            );\n        }\n    }\n\n    /**\n     * @notice Get the locked balance\n     * @param _account The account to check\n     * @return _lockedBalance The locked amount\n     */\n    function lockedBalanceOf(address _account) external view override returns (uint256 _lockedBalance) {\n        unchecked {\n            return balanceOf[_account] - unlockedBalanceOf(_account);\n        }\n    }\n\n    /**\n     * @notice Seize tokens\n     * @dev Same as _transfer\n     * @param _from The account to seize from\n     * @param _to The beneficiary account\n     * @param _amount The amount to seize\n     */\n    function seize(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external override onlyController {\n        _transfer(_from, _to, _amount);\n    }\n\n    /**\n     * @notice Update collateralization ratio\n     * @param _newCollateralizationRatio The new CR value\n     */\n    function updateCollateralizationRatio(uint128 _newCollateralizationRatio) external override onlyGovernor {\n        require(_newCollateralizationRatio <= 1e18, \"collateralization-ratio-gt-100%\");\n        uint256 _currentCollateralizationRatio = collateralizationRatio;\n        require(_newCollateralizationRatio != _currentCollateralizationRatio, \"new-same-as-current\");\n        emit CollateralizationRatioUpdated(_currentCollateralizationRatio, _newCollateralizationRatio);\n        collateralizationRatio = _newCollateralizationRatio;\n    }\n\n    /**\n     * @notice Update minimum deposit time\n     */\n    function updateMinDepositTime(uint256 _newMinDepositTime) external onlyGovernor {\n        uint256 _currentMinDepositTime = minDepositTime;\n        require(_newMinDepositTime != _currentMinDepositTime, \"new-same-as-current\");\n        emit MinDepositTimeUpdated(_currentMinDepositTime, _newMinDepositTime);\n        minDepositTime = _newMinDepositTime;\n    }\n\n    /**\n     * @notice Update max total supply\n     * @param _newMaxTotalSupplyInUsd The new max total supply\n     */\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupplyInUsd) external override onlyGovernor {\n        uint256 _currentMaxTotalSupplyInUsd = maxTotalSupplyInUsd;\n        require(_newMaxTotalSupplyInUsd != _currentMaxTotalSupplyInUsd, \"new-same-as-current\");\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupplyInUsd, _newMaxTotalSupplyInUsd);\n        maxTotalSupplyInUsd = _newMaxTotalSupplyInUsd;\n    }\n\n    /**\n     * @notice Enable/Disable the Deposit Token\n     */\n    function toggleIsActive() external override onlyGovernor {\n        bool _isActive = isActive;\n        emit DepositTokenActiveUpdated(_isActive, !_isActive);\n        isActive = !_isActive;\n    }\n}\n"
    },
    "contracts/lib/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @title Math library\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\n */\nlibrary WadRayMath {\n    uint256 internal constant WAD = 1e18;\n    uint256 internal constant HALF_WAD = WAD / 2;\n\n    uint256 internal constant RAY = 1e27;\n    uint256 internal constant HALF_RAY = RAY / 2;\n\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\n\n    /**\n     * @dev Multiplies two wad, rounding half up to the nearest wad\n     * @param a Wad\n     * @param b Wad\n     * @return The result of a*b, in wad\n     */\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n\n        return (a * b + HALF_WAD) / WAD;\n    }\n\n    /**\n     * @dev Divides two wad, rounding half up to the nearest wad\n     * @param a Wad\n     * @param b Wad\n     * @return The result of a/b, in wad\n     */\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a * WAD + b / 2) / b;\n    }\n\n    /**\n     * @dev Multiplies two ray, rounding half up to the nearest ray\n     * @param a Ray\n     * @param b Ray\n     * @return The result of a*b, in ray\n     */\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n\n        return (a * b + HALF_RAY) / RAY;\n    }\n\n    /**\n     * @dev Divides two ray, rounding half up to the nearest ray\n     * @param a Ray\n     * @param b Ray\n     * @return The result of a/b, in ray\n     */\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a * RAY + b / 2) / b;\n    }\n\n    /**\n     * @dev Casts ray down to wad\n     * @param a Ray\n     * @return a casted to wad, rounded half up to the nearest wad\n     */\n    function rayToWad(uint256 a) internal pure returns (uint256) {\n        return ((WAD_RAY_RATIO / 2) + a) / WAD_RAY_RATIO;\n    }\n\n    /**\n     * @dev Converts wad up to ray\n     * @param a Wad\n     * @return a converted in ray\n     */\n    function wadToRay(uint256 a) internal pure returns (uint256) {\n        return a * WAD_RAY_RATIO;\n    }\n}\n"
    },
    "contracts/access/Manageable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/utils/Context.sol\";\nimport \"../dependencies/openzeppelin/proxy/utils/Initializable.sol\";\nimport \"../utils/TokenHolder.sol\";\nimport \"../interface/IGovernable.sol\";\nimport \"../interface/IController.sol\";\n\n/**\n * @title Reusable contract that handles accesses\n */\nabstract contract Manageable is Context, TokenHolder, Initializable {\n    /**\n     * @notice Controller contract\n     */\n    IController public controller;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __Manageable_init() internal initializer {}\n\n    /**\n     * @notice Requires that the caller is the Controller contract\n     */\n    modifier onlyController() {\n        require(_msgSender() == address(controller), \"not-controller\");\n        _;\n    }\n\n    /**\n     * @notice Requires that the caller is the Controller contract\n     */\n    modifier onlyGovernor() {\n        require(_msgSender() == governor(), \"not-governor\");\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(!controller.paused(), \"paused\");\n        _;\n    }\n\n    modifier whenNotShutdown() {\n        require(!controller.everythingStopped(), \"not-shutdown\");\n        _;\n    }\n\n    function governor() public view returns (address _governor) {\n        _governor = IGovernable(address(controller)).governor();\n    }\n\n    function _requireCanSweep() internal view override onlyGovernor {}\n\n    /**\n     * @notice Update Controller contract\n     * @param _controller The new Controller contract\n     */\n    function setController(IController _controller) external onlyGovernor {\n        require(address(_controller) != address(0), \"new-controller-address-is-zero\");\n        controller = _controller;\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/Treasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./access/Manageable.sol\";\nimport \"./storage/TreasuryStorage.sol\";\n\n/**\n * @title Treasury contract\n */\ncontract Treasury is ReentrancyGuard, Manageable, TreasuryStorageV1 {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IDepositToken;\n\n    string public constant VERSION = \"1.0.0\";\n\n    /**\n     * @dev Throws if caller isn't a deposit token\n     */\n    modifier onlyIfDepositToken() {\n        require(controller.isDepositTokenExists(IDepositToken(_msgSender())), \"not-deposit-token\");\n        _;\n    }\n\n    function initialize(IController _controller) public initializer {\n        require(address(_controller) != address(0), \"controller-address-is-zero\");\n\n        __ReentrancyGuard_init();\n        __Manageable_init();\n\n        controller = _controller;\n    }\n\n    /**\n     * @notice Pull token from the Treasury\n     */\n    function pull(address _to, uint256 _amount) external override nonReentrant onlyIfDepositToken {\n        require(_amount > 0, \"amount-is-zero\");\n        IDepositToken(_msgSender()).underlying().safeTransfer(_to, _amount);\n    }\n\n    /**\n     * @notice Transfer all funds to another contract\n     * @dev This function can become too expensive depending on the length of the arrays\n     */\n    function migrateTo(address _newTreasury) external override onlyController {\n        address[] memory _depositTokens = controller.getDepositTokens();\n        uint256 _depositTokensLength = _depositTokens.length;\n\n        for (uint256 i; i < _depositTokensLength; ++i) {\n            IDepositToken _depositToken = IDepositToken(_depositTokens[i]);\n            IERC20 _underlying = _depositToken.underlying();\n\n            uint256 _balance = _depositToken.balanceOf(address(this));\n            uint256 _underlyingBalance = _underlying.balanceOf(address(this));\n\n            if (_balance > 0) {\n                _depositToken.safeTransfer(_newTreasury, _balance);\n            }\n            if (_underlyingBalance > 0) {\n                _underlying.safeTransfer(_newTreasury, _underlyingBalance);\n            }\n        }\n\n        address[] memory _syntheticTokens = controller.getSyntheticTokens();\n        uint256 _syntheticTokensLength = _syntheticTokens.length;\n\n        for (uint256 i; i < _syntheticTokensLength; ++i) {\n            IERC20 _vsAsset = IERC20(_syntheticTokens[i]);\n            uint256 _balance = _vsAsset.balanceOf(address(this));\n            if (_balance > 0) {\n                _vsAsset.safeTransfer(_newTreasury, _balance);\n            }\n        }\n    }\n}\n"
    },
    "contracts/storage/TreasuryStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interface/ITreasury.sol\";\n\nabstract contract TreasuryStorageV1 is ITreasury {}\n"
    },
    "contracts/storage/ControllerStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\";\nimport \"../lib/MappedEnumerableSet.sol\";\nimport \"../interface/IController.sol\";\nimport \"../interface/ITreasury.sol\";\nimport \"../interface/IRewardsDistributor.sol\";\n\nabstract contract ControllerStorageV1 is IController {\n    /**\n     * @notice The debt floor (in USD) for each synthetic token\n     * This parameters is used to keep incentive for liquidators (i.e. cover gas and provide enough profit)\n     */\n    uint256 public debtFloorInUsd;\n\n    /**\n     * @notice The fee charged when depositing collateral\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public depositFee;\n\n    /**\n     * @notice The fee charged when minting a synthetic token\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public issueFee;\n\n    /**\n     * @notice The fee charged when withdrawing collateral\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public withdrawFee;\n\n    /**\n     * @notice The fee charged when repaying debt\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public repayFee;\n\n    /**\n     * @notice The fee charged when swapping synthetic tokens\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public swapFee;\n\n    /**\n     * @notice The fee charged from liquidated deposit that goes to the liquidator\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public liquidatorLiquidationFee;\n\n    /**\n     * @notice The fee charged when liquidating a position\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public protocolLiquidationFee;\n\n    /**\n     * @notice The max percent of the debt allowed to liquidate\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\n     */\n    uint256 public maxLiquidable;\n\n    /**\n     * @notice Prices oracle\n     */\n    IMasterOracle public masterOracle;\n\n    /**\n     * @notice Treasury contract\n     */\n    ITreasury public treasury;\n\n    /**\n     * @notice Represents collateral's deposits\n     */\n    EnumerableSet.AddressSet internal depositTokens;\n\n    /**\n     * @notice Get the deposit token's address from given underlying asset\n     */\n    mapping(IERC20 => IDepositToken) public depositTokenOf;\n\n    /**\n     * @notice Available synthetic tokens\n     */\n    EnumerableSet.AddressSet internal syntheticTokens;\n\n    /**\n     * @notice Per-account deposit tokens (i.e. tokens that user has balance > 0)\n     */\n    MappedEnumerableSet.AddressSet internal depositTokensOfAccount;\n\n    /**\n     * @notice Per-account debt tokens (i.e. tokens that user has balance > 0)\n     */\n    MappedEnumerableSet.AddressSet internal debtTokensOfAccount;\n\n    /**\n     * @notice RewardsDistributor contracts\n     */\n    IRewardsDistributor[] internal rewardsDistributors;\n}\n"
    },
    "contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/lib/MappedEnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev EnumerableSet fork to support `address => address[]` mapping\n * @dev Forked from OZ 4.3.2\n */\nlibrary MappedEnumerableSet {\n    struct Set {\n        // Storage of set values\n        address[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(address => uint256) _indexes;\n    }\n\n    struct AddressSet {\n        mapping(address => Set) _ofAddress;\n    }\n\n    function _add(\n        AddressSet storage set,\n        address _key,\n        address value\n    ) private returns (bool) {\n        if (!_contains(set, _key, value)) {\n            set._ofAddress[_key]._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._ofAddress[_key]._indexes[value] = set._ofAddress[_key]._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _remove(\n        AddressSet storage set,\n        address _key,\n        address value\n    ) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._ofAddress[_key]._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._ofAddress[_key]._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                address lastvalue = set._ofAddress[_key]._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._ofAddress[_key]._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._ofAddress[_key]._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._ofAddress[_key]._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._ofAddress[_key]._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _contains(\n        AddressSet storage set,\n        address _key,\n        address value\n    ) private view returns (bool) {\n        return set._ofAddress[_key]._indexes[value] != 0;\n    }\n\n    function _length(AddressSet storage set, address _key) private view returns (uint256) {\n        return set._ofAddress[_key]._values.length;\n    }\n\n    function _at(\n        AddressSet storage set,\n        address _key,\n        uint256 index\n    ) private view returns (address) {\n        return set._ofAddress[_key]._values[index];\n    }\n\n    function _values(AddressSet storage set, address _key) private view returns (address[] memory) {\n        return set._ofAddress[_key]._values;\n    }\n\n    function add(\n        AddressSet storage set,\n        address key,\n        address value\n    ) internal returns (bool) {\n        return _add(set, key, value);\n    }\n\n    function remove(\n        AddressSet storage set,\n        address key,\n        address value\n    ) internal returns (bool) {\n        return _remove(set, key, value);\n    }\n\n    function contains(\n        AddressSet storage set,\n        address key,\n        address value\n    ) internal view returns (bool) {\n        return _contains(set, key, value);\n    }\n\n    function length(AddressSet storage set, address key) internal view returns (uint256) {\n        return _length(set, key);\n    }\n\n    function at(\n        AddressSet storage set,\n        address key,\n        uint256 index\n    ) internal view returns (address) {\n        return _at(set, key, index);\n    }\n\n    function values(AddressSet storage set, address key) internal view returns (address[] memory) {\n        address[] memory store = _values(set, key);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/storage/RewardsDistributorStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interface/IRewardsDistributor.sol\";\n\nabstract contract RewardsDistributorStorageV1 is IRewardsDistributor {\n    /**\n     * @notice The token to reward\n     */\n    IERC20 public rewardToken;\n\n    struct TokenState {\n        uint224 index; // The last updated index\n        uint32 timestamp; // The timestamp of the latest index update\n    }\n\n    /**\n     * @notice Track tokens for reward\n     */\n    IERC20[] public tokens;\n\n    /**\n     * @notice The amount of token distributed for each token per second\n     */\n    mapping(IERC20 => uint256) public tokenSpeeds;\n\n    /**\n     * @notice The reward state for each token\n     */\n    mapping(IERC20 => TokenState) public tokenStates;\n\n    /**\n     * @notice The supply index for each token for each account as of the last time they accrued token\n     */\n    mapping(IERC20 => mapping(address => uint256)) public accountIndexOf;\n\n    /**\n     * @notice The token accrued but not yet transferred to each user\n     */\n    mapping(address => uint256) public tokensAccruedOf;\n}\n"
    },
    "contracts/RewardsDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/utils/math/SafeCast.sol\";\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./access/Manageable.sol\";\nimport \"./storage/RewardsDistributorStorage.sol\";\nimport \"./lib/WadRayMath.sol\";\n\n/**\n * @title RewardsDistributor contract\n */\ncontract RewardsDistributor is ReentrancyGuard, Manageable, RewardsDistributorStorageV1 {\n    using SafeERC20 for IERC20;\n    using SafeCast for uint256;\n    using WadRayMath for uint256;\n\n    /// @notice The initial index\n    uint224 public constant INITIAL_INDEX = 1e18;\n\n    /// @notice Emitted when updating token speed\n    event TokenSpeedUpdated(IERC20 indexed token, uint256 oldSpeed, uint256 newSpeed);\n\n    /// @notice Emitted when updating accrued token\n    event TokensAccruedUpdated(IERC20 indexed token, address indexed account, uint256 tokensDelta, uint256 supplyIndex);\n\n    /// @notice Emitted when reward is claimed\n    event RewardClaimed(address account, uint256 amount);\n\n    /**\n     * @dev Throws if this contract isn't registered on controller\n     */\n    modifier onlyIfDistributorExists() {\n        bool _distributorAdded = false;\n        IRewardsDistributor[] memory _rewardsDistributors = controller.getRewardsDistributors();\n        uint256 _length = _rewardsDistributors.length;\n        for (uint256 i; i < _length; i++) {\n            if (_rewardsDistributors[i] == this) {\n                _distributorAdded = true;\n                break;\n            }\n        }\n        require(_distributorAdded, \"distributor-not-added\");\n        _;\n    }\n\n    /**\n     * @dev Throws if token doesn't exist\n     * @dev Should be a DepositToken (suppliers) or DebtToken (borrowers)\n     */\n    modifier onlyIfTokenExists(IERC20 _token) {\n        if (!controller.isDepositTokenExists(IDepositToken(address(_token)))) {\n            ISyntheticToken _syntheticToken = IDebtToken(address(_token)).syntheticToken();\n            require(controller.isSyntheticTokenExists(_syntheticToken), \"invalid-token\");\n            require(address(_syntheticToken.debtToken()) == address(_token), \"invalid-token\");\n        }\n        _;\n    }\n\n    function initialize(IController _controller, IERC20 _rewardToken) external initializer {\n        __Manageable_init();\n\n        require(address(_controller) != address(0), \"controller-is-null\");\n        require(address(_rewardToken) != address(0), \"reward-token-is-null\");\n\n        controller = _controller;\n        rewardToken = _rewardToken;\n    }\n\n    /**\n     * @notice Update speed for token\n     */\n    function _updateTokenSpeed(IERC20 _token, uint256 _newSpeed)\n        private\n        onlyIfDistributorExists\n        onlyIfTokenExists(_token)\n    {\n        uint256 _currentSpeed = tokenSpeeds[_token];\n        if (_currentSpeed > 0) {\n            _updateTokenIndex(_token);\n        } else if (_newSpeed > 0) {\n            // Add token token to the list\n            if (tokenStates[_token].index == 0) {\n                tokenStates[_token] = TokenState({index: INITIAL_INDEX, timestamp: block.timestamp.toUint32()});\n\n                tokens.push(_token);\n            } else {\n                // Update timestamp to ensure extra interest is not accrued during the prior period\n                tokenStates[_token].timestamp = block.timestamp.toUint32();\n            }\n        }\n\n        if (_currentSpeed != _newSpeed) {\n            tokenSpeeds[_token] = _newSpeed;\n            emit TokenSpeedUpdated(_token, _currentSpeed, _newSpeed);\n        }\n    }\n\n    /**\n     * @notice Accrue reward token by updating the index\n     */\n    function _updateTokenIndex(IERC20 _token) private {\n        TokenState storage _supplyState = tokenStates[_token];\n        uint256 _speed = tokenSpeeds[_token];\n        uint256 _timestamp = block.timestamp;\n        uint256 _deltaTimestamps = _timestamp - uint256(_supplyState.timestamp);\n        if (_deltaTimestamps > 0 && _speed > 0) {\n            uint256 _totalSupply = _token.totalSupply();\n            uint256 _tokensAccrued = _deltaTimestamps * _speed;\n            uint256 _ratio = _totalSupply > 0 ? _tokensAccrued.wadDiv(_totalSupply) : 0;\n            uint256 _newIndex = _supplyState.index + _ratio;\n            tokenStates[_token] = TokenState({index: _newIndex.toUint224(), timestamp: _timestamp.toUint32()});\n        } else if (_deltaTimestamps > 0 && _supplyState.index > 0) {\n            _supplyState.timestamp = _timestamp.toUint32();\n        }\n    }\n\n    /**\n     * @notice Calculate tokens accrued by an account\n     */\n    function _updateTokensAccruedOf(IERC20 _token, address _account) private {\n        uint256 _tokenIndex = tokenStates[_token].index;\n        uint256 _accountIndex = accountIndexOf[_token][_account];\n        accountIndexOf[_token][_account] = _tokenIndex;\n\n        if (_accountIndex == 0 && _tokenIndex > 0) {\n            _accountIndex = INITIAL_INDEX;\n        }\n\n        uint256 _deltaIndex = _tokenIndex - _accountIndex;\n        uint256 _delta = _token.balanceOf(_account).wadMul(_deltaIndex);\n        uint256 _tokensAccrued = tokensAccruedOf[_account] + _delta;\n        tokensAccruedOf[_account] = _tokensAccrued;\n        emit TokensAccruedUpdated(_token, _account, _delta, _tokenIndex);\n    }\n\n    /**\n     * @notice Update indexes on pre-mint and pre-burn\n     * @dev Called by DepositToken and DebtToken contracts\n     */\n    function updateBeforeMintOrBurn(IERC20 _token, address _account) external {\n        if (tokenStates[_token].index > 0) {\n            _updateTokenIndex(_token);\n            _updateTokensAccruedOf(_token, _account);\n        }\n    }\n\n    /**\n     * @notice Update indexes on pre-transfer\n     * @dev Called by DepositToken and DebtToken contracts\n     */\n    function updateBeforeTransfer(\n        IERC20 _token,\n        address _from,\n        address _to\n    ) external {\n        if (tokenStates[_token].index > 0) {\n            _updateTokenIndex(_token);\n            _updateTokensAccruedOf(_token, _from);\n            _updateTokensAccruedOf(_token, _to);\n        }\n    }\n\n    /**\n     * @notice Claim tokens accrued by account in all tokens\n     */\n    function claimRewards(address _account) external {\n        claimRewards(_account, tokens);\n    }\n\n    /**\n     * @notice Claim tokens accrued by account in the specified tokens\n     */\n    function claimRewards(address _account, IERC20[] memory _tokens) public {\n        address[] memory accounts = new address[](1);\n        accounts[0] = _account;\n        claimRewards(accounts, _tokens);\n    }\n\n    /**\n     * @notice Claim tokens accrued by the accounts in the specified tokens\n     */\n    function claimRewards(address[] memory _accounts, IERC20[] memory _tokens) public nonReentrant {\n        uint256 _accountsLength = _accounts.length;\n        uint256 _tokensLength = _tokens.length;\n        for (uint256 i; i < _tokensLength; i++) {\n            IERC20 _token = _tokens[i];\n\n            if (tokenStates[_token].index > 0) {\n                _updateTokenIndex(_token);\n                for (uint256 j; j < _accountsLength; j++) {\n                    _updateTokensAccruedOf(_token, _accounts[j]);\n                }\n            }\n        }\n\n        for (uint256 j; j < _accountsLength; j++) {\n            address _account = _accounts[j];\n            _transferRewardIfEnoughTokens(_account, tokensAccruedOf[_account]);\n        }\n    }\n\n    /**\n     * @notice Transfer tokens to the user\n     * @dev If there is not enough tokens, we do not perform the transfer\n     */\n    function _transferRewardIfEnoughTokens(address _account, uint256 _amount) private {\n        uint256 _balance = rewardToken.balanceOf(address(this));\n        if (_amount > 0 && _amount <= _balance) {\n            tokensAccruedOf[_account] = 0;\n            rewardToken.safeTransfer(_account, _amount);\n            emit RewardClaimed(_account, _amount);\n        }\n    }\n\n    /**\n     * @notice Update speed for a single deposit token\n     */\n    function updateTokenSpeed(IERC20 _token, uint256 _newSpeed) external onlyGovernor {\n        _updateTokenSpeed(_token, _newSpeed);\n    }\n\n    /**\n     * @notice Update token speeds\n     */\n    function updateTokenSpeeds(IERC20[] calldata _tokens, uint256[] calldata _speeds) external onlyGovernor {\n        uint256 _tokensLength = _tokens.length;\n        require(_tokensLength == _speeds.length, \"invalid-input\");\n\n        for (uint256 i; i < _tokensLength; ++i) {\n            _updateTokenSpeed(_tokens[i], _speeds[i]);\n        }\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/SyntheticToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./access/Manageable.sol\";\nimport \"./lib/WadRayMath.sol\";\nimport \"./storage/SyntheticTokenStorage.sol\";\n\n/**\n * @title Synthetic Token contract\n */\ncontract SyntheticToken is ReentrancyGuard, Manageable, SyntheticTokenStorageV1 {\n    using WadRayMath for uint256;\n\n    string public constant VERSION = \"1.0.0\";\n\n    uint256 public constant SECONDS_PER_YEAR = 365 days;\n\n    /// @notice Emitted when synthetic token is issued\n    event SyntheticTokenIssued(address indexed account, address indexed to, uint256 amount, uint256 fee);\n\n    /// @notice Emitted when synthetic's debt is repaid\n    event DebtRepaid(address indexed payer, address indexed account, uint256 amount, uint256 fee);\n\n    /**\n     * @dev Throws if synthetic token doesn't exist\n     */\n    modifier onlyIfSyntheticTokenExists() {\n        require(controller.isSyntheticTokenExists(this), \"synthetic-inexistent\");\n        _;\n    }\n\n    /**\n     * @dev Throws if synthetic token isn't enabled\n     */\n    modifier onlyIfSyntheticTokenIsActive() {\n        require(isActive, \"synthetic-inactive\");\n        _;\n    }\n\n    function initialize(\n        string calldata _name,\n        string calldata _symbol,\n        uint8 _decimals,\n        IController _controller,\n        IDebtToken _debtToken,\n        uint256 _interestRate,\n        uint256 _maxTotalSupplyInUsd\n    ) public initializer {\n        require(address(_debtToken) != address(0), \"debt-token-is-null\");\n        require(address(_controller) != address(0), \"controller-address-is-zero\");\n\n        __Manageable_init();\n\n        controller = _controller;\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        debtToken = _debtToken;\n        isActive = true;\n        interestRate = _interestRate;\n        maxTotalSupplyInUsd = _maxTotalSupplyInUsd;\n    }\n\n    /// @notice Emitted when max total supply is updated\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupply, uint256 newMaxTotalSupply);\n\n    /// @notice Emitted when active flag is updated\n    event SyntheticTokenActiveUpdated(bool oldActive, bool newActive);\n\n    /// @notice Emitted when interest rate is updated\n    event InterestRateUpdated(uint256 oldInterestRate, uint256 newInterestRate);\n\n    function interestRatePerSecond() external view virtual override returns (uint256) {\n        return interestRate / SECONDS_PER_YEAR;\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = allowance[sender][_msgSender()];\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"amount-exceeds-allowance\");\n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n        }\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n        uint256 currentAllowance = allowance[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"decreased-allowance-below-zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) private {\n        require(sender != address(0), \"transfer-from-the-zero-address\");\n        require(recipient != address(0), \"transfer-to-the-zero-address\");\n\n        uint256 senderBalance = balanceOf[sender];\n        require(senderBalance >= amount, \"transfer-amount-exceeds-balance\");\n        unchecked {\n            balanceOf[sender] = senderBalance - amount;\n        }\n        balanceOf[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) private onlyIfSyntheticTokenIsActive {\n        require(account != address(0), \"mint-to-the-zero-address\");\n        uint256 _newTotalSupplyInUsd = controller.masterOracle().quoteTokenToUsd(this, totalSupply + amount);\n        require(_newTotalSupplyInUsd <= maxTotalSupplyInUsd, \"surpass-max-total-supply\");\n\n        totalSupply += amount;\n        balanceOf[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) private {\n        require(account != address(0), \"burn-from-the-zero-address\");\n\n        uint256 accountBalance = balanceOf[account];\n        require(accountBalance >= amount, \"burn-amount-exceeds-balance\");\n        unchecked {\n            balanceOf[account] = accountBalance - amount;\n        }\n        totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), \"approve-from-the-zero-address\");\n        require(spender != address(0), \"approve-to-the-zero-address\");\n\n        allowance[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @notice Lock collateral and mint synthetic token\n     * @param _amount The amount to mint\n     */\n    function issue(uint256 _amount, address _to)\n        external\n        override\n        whenNotShutdown\n        nonReentrant\n        onlyIfSyntheticTokenExists\n        onlyIfSyntheticTokenIsActive\n    {\n        require(_amount > 0, \"amount-is-zero\");\n\n        address _account = _msgSender();\n\n        accrueInterest();\n\n        (, , , , uint256 _issuableInUsd) = controller.debtPositionOf(_account);\n\n        IMasterOracle _masterOracle = controller.masterOracle();\n\n        require(_amount <= _masterOracle.quoteUsdToToken(this, _issuableInUsd), \"not-enough-collateral\");\n\n        uint256 _debtFloorInUsd = controller.debtFloorInUsd();\n\n        if (_debtFloorInUsd > 0) {\n            require(\n                _masterOracle.quoteTokenToUsd(this, debtToken.balanceOf(_account) + _amount) >= _debtFloorInUsd,\n                \"debt-lt-floor\"\n            );\n        }\n\n        uint256 _issueFee = controller.issueFee();\n        uint256 _amountToIssue = _amount;\n        uint256 _feeAmount;\n        if (_issueFee > 0) {\n            _feeAmount = _amount.wadMul(_issueFee);\n            _mint(address(controller.treasury()), _feeAmount);\n            _amountToIssue -= _feeAmount;\n        }\n\n        _mint(_to, _amountToIssue);\n        debtToken.mint(_account, _amount);\n\n        emit SyntheticTokenIssued(_account, _to, _amount, _feeAmount);\n    }\n\n    /**\n     * @notice Send synthetic token to decrease debt\n     * @dev The msg.sender is the payer and the account beneficed\n     * @param _onBehalfOf The account that will have debt decreased\n     * @param _amount The amount of synthetic token to burn (this is the gross amount, the repay fee will be subtracted from it)\n     */\n    function repay(address _onBehalfOf, uint256 _amount) external override whenNotShutdown nonReentrant {\n        require(_amount > 0, \"amount-is-zero\");\n\n        accrueInterest();\n\n        address _payer = _msgSender();\n\n        uint256 _repayFee = controller.repayFee();\n        uint256 _amountToRepay = _amount;\n        uint256 _feeAmount;\n        if (_repayFee > 0) {\n            // Note: `_amountToRepay = _amount - repayFeeAmount`\n            _amountToRepay = _amount.wadDiv(1e18 + _repayFee);\n            _feeAmount = _amount - _amountToRepay;\n            _transfer(_payer, address(controller.treasury()), _feeAmount);\n        }\n\n        uint256 _debtFloorInUsd = controller.debtFloorInUsd();\n\n        if (_debtFloorInUsd > 0) {\n            uint256 _newDebtInUsd = controller.masterOracle().quoteTokenToUsd(\n                this,\n                debtToken.balanceOf(_onBehalfOf) - _amountToRepay\n            );\n            require(_newDebtInUsd == 0 || _newDebtInUsd >= _debtFloorInUsd, \"debt-lt-floor\");\n        }\n\n        _burn(_payer, _amountToRepay);\n        debtToken.burn(_onBehalfOf, _amountToRepay);\n\n        emit DebtRepaid(_payer, _onBehalfOf, _amount, _feeAmount);\n    }\n\n    /**\n     * @notice Mint synthetic token\n     * @param _to The account to mint to\n     * @param _amount The amount to mint\n     */\n    function mint(address _to, uint256 _amount) external override onlyController {\n        _mint(_to, _amount);\n    }\n\n    /**\n     * @notice Burn synthetic token\n     * @param _from The account to burn from\n     * @param _amount The amount to burn\n     */\n    function burn(address _from, uint256 _amount) external override onlyController {\n        _burn(_from, _amount);\n    }\n\n    /**\n     * @notice Update max total supply (in USD)\n     * @param _newMaxTotalSupplyInUsd The new max total supply (in USD)\n     */\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupplyInUsd) external override onlyGovernor {\n        uint256 _currentMaxTotalSupplyInUsd = maxTotalSupplyInUsd;\n        require(_newMaxTotalSupplyInUsd != _currentMaxTotalSupplyInUsd, \"new-same-as-current\");\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupplyInUsd, _newMaxTotalSupplyInUsd);\n        maxTotalSupplyInUsd = _newMaxTotalSupplyInUsd;\n    }\n\n    /**\n     * @notice Enable/Disable the Synthetic Token\n     */\n    function toggleIsActive() external override onlyGovernor {\n        bool _isActive = isActive;\n        emit SyntheticTokenActiveUpdated(_isActive, !_isActive);\n        isActive = !_isActive;\n    }\n\n    /**\n     * @notice Update interest rate (APR)\n     */\n    function updateInterestRate(uint256 _newInterestRate) external onlyGovernor {\n        accrueInterest();\n        uint256 _currentInterestRate = interestRate;\n        require(_newInterestRate != _currentInterestRate, \"new-same-as-current\");\n        emit InterestRateUpdated(_currentInterestRate, _newInterestRate);\n        interestRate = _newInterestRate;\n    }\n\n    /**\n     * @notice Accrue interest\n     */\n    function accrueInterest() public {\n        uint256 _interestAmountAccrued = debtToken.accrueInterest();\n\n        if (_interestAmountAccrued > 0) {\n            // Note: We can save some gas by incrementing only and mint all accrued amount later\n            _mint(address(controller.treasury()), _interestAmountAccrued);\n        }\n    }\n}\n"
    },
    "contracts/storage/SyntheticTokenStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interface/ISyntheticToken.sol\";\nimport \"../interface/IDebtToken.sol\";\n\nabstract contract SyntheticTokenStorageV1 is ISyntheticToken {\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    string public name;\n    string public symbol;\n\n    uint256 public totalSupply;\n    uint256 public maxTotalSupplyInUsd;\n\n    uint8 public decimals;\n\n    /**\n     * @notice Non-transferable token that represents users' debts\n     */\n    IDebtToken public debtToken;\n\n    /**\n     * @notice If a vsAsset isn't active, it disables minting new tokens\n     */\n    bool public isActive;\n\n    /**\n     * @notice Interest rate\n     * @dev Use 0.1e18 for 10% APR\n     */\n    uint256 public interestRate;\n}\n"
    },
    "contracts/storage/DebtTokenStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../interface/IDebtToken.sol\";\n\nabstract contract DebtTokenStorageV1 is IDebtToken {\n    /**\n     * @notice The total amount of minted tokens\n     * @dev This value changes within the mint and burn operations\n     */\n    mapping(address => uint256) internal principalOf;\n\n    /**\n     * @notice The `debtIndex` \"snapshot\" of the account's latest `principalOf` update (i.e. mint/burn)\n     */\n    mapping(address => uint256) internal debtIndexOf;\n\n    uint256 internal totalSupply_;\n    uint8 public decimals;\n    string public name;\n    string public symbol;\n\n    ISyntheticToken public syntheticToken;\n\n    /**\n     * @notice The timestamp when interest accrual was calculated for the last time\n     */\n    uint256 public lastTimestampAccrued;\n\n    /**\n     * @notice Accumulator of the total earned interest rate since the beginning\n     */\n    uint256 public override debtIndex;\n}\n"
    },
    "contracts/DebtToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./access/Manageable.sol\";\nimport \"./storage/DebtTokenStorage.sol\";\nimport \"./lib/WadRayMath.sol\";\n\n/**\n * @title Non-transferable token that represents users' debts\n */\ncontract DebtToken is Manageable, DebtTokenStorageV1 {\n    using WadRayMath for uint256;\n\n    string public constant VERSION = \"1.0.0\";\n\n    /**\n     * @dev Throws if caller isn't authorized\n     */\n    modifier onlyIfAuthorized() {\n        require(_msgSender() == address(controller) || _msgSender() == address(syntheticToken), \"not-authorized\");\n        _;\n    }\n\n    /**\n     * @dev Throws if the caller isn't the synthetic token\n     */\n    modifier onlyIfSyntheticToken() {\n        require(_msgSender() == address(syntheticToken), \"not-synthetic-token\");\n        _;\n    }\n\n    /**\n     * @notice Update reward contracts' states\n     * @dev Should be called before balance changes (i.e. mint/burn)\n     */\n    modifier updateRewardsBeforeMintOrBurn(address _account) {\n        IRewardsDistributor[] memory _rewardsDistributors = controller.getRewardsDistributors();\n        uint256 _length = _rewardsDistributors.length;\n        for (uint256 i; i < _length; i++) {\n            _rewardsDistributors[i].updateBeforeMintOrBurn(syntheticToken, _account);\n        }\n        _;\n    }\n\n    function initialize(\n        string calldata _name,\n        string calldata _symbol,\n        uint8 _decimals,\n        IController _controller\n    ) public initializer {\n        require(address(_controller) != address(0), \"controller-address-is-zero\");\n\n        __Manageable_init();\n\n        controller = _controller;\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        lastTimestampAccrued = block.timestamp;\n        debtIndex = 1e18;\n    }\n\n    function setSyntheticToken(ISyntheticToken _syntheticToken) external onlyGovernor {\n        require(address(_syntheticToken) != address(0), \"synthetic-is-null\");\n        require(address(syntheticToken) == address(0), \"synthetic-already-assigned\");\n        require(_syntheticToken.debtToken() == this, \"invalid-synthetic-debt-token\");\n        require(decimals == _syntheticToken.decimals(), \"invalid-synthetic-decimals\");\n        syntheticToken = _syntheticToken;\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        (uint256 _interestAmountAccrued, , ) = _calculateInterestAccrual();\n\n        return totalSupply_ + _interestAmountAccrued;\n    }\n\n    /**\n     * @notice Get the updated (principal + interest) user's debt\n     */\n    function balanceOf(address _account) public view override returns (uint256) {\n        if (principalOf[_account] == 0) {\n            return 0;\n        }\n\n        (, uint256 _debtIndex, ) = _calculateInterestAccrual();\n\n        // Note: The `debtIndex / debtIndexOf` gives the interest to apply to the principal amount\n        return (principalOf[_account] * _debtIndex) / debtIndexOf[_account];\n    }\n\n    function transfer(\n        address, /*recipient*/\n        uint256 /*amount*/\n    ) external pure override returns (bool) {\n        revert(\"transfer-not-supported\");\n    }\n\n    function allowance(\n        address, /*owner*/\n        address /*spender*/\n    ) external pure override returns (uint256) {\n        revert(\"allowance-not-supported\");\n    }\n\n    function approve(\n        address, /*spender*/\n        uint256 /*amount*/\n    ) external pure override returns (bool) {\n        revert(\"approval-not-supported\");\n    }\n\n    function transferFrom(\n        address, /*sender*/\n        address, /*recipient*/\n        uint256 /*amount*/\n    ) external pure override returns (bool) {\n        revert(\"transfer-not-supported\");\n    }\n\n    function increaseAllowance(\n        address, /*spender*/\n        uint256 /*addedValue*/\n    ) external pure returns (bool) {\n        revert(\"allowance-not-supported\");\n    }\n\n    function decreaseAllowance(\n        address, /*spender*/\n        uint256 /*subtractedValue*/\n    ) external pure returns (bool) {\n        revert(\"allowance-not-supported\");\n    }\n\n    function _mint(address _account, uint256 _amount) private updateRewardsBeforeMintOrBurn(_account) {\n        require(_account != address(0), \"mint-to-the-zero-address\");\n\n        uint256 _accountBalance = balanceOf(_account);\n\n        totalSupply_ += _amount;\n        principalOf[_account] += _amount;\n        debtIndexOf[_account] = debtIndex;\n        emit Transfer(address(0), _account, _amount);\n\n        _addToDebtTokensOfRecipientIfNeeded(_account, _accountBalance);\n    }\n\n    function _burn(address _account, uint256 _amount) private updateRewardsBeforeMintOrBurn(_account) {\n        require(_account != address(0), \"burn-from-the-zero-address\");\n\n        uint256 accountBalance = balanceOf(_account);\n        require(accountBalance >= _amount, \"burn-amount-exceeds-balance\");\n\n        unchecked {\n            principalOf[_account] = accountBalance - _amount;\n            debtIndexOf[_account] = debtIndex;\n\n            totalSupply_ -= _amount;\n        }\n\n        emit Transfer(_account, address(0), _amount);\n\n        _removeFromDebtTokensOfSenderIfNeeded(_account, balanceOf(_account));\n    }\n\n    function _addToDebtTokensOfRecipientIfNeeded(address _recipient, uint256 _recipientBalanceBefore) private {\n        if (_recipientBalanceBefore == 0) {\n            controller.addToDebtTokensOfAccount(_recipient);\n        }\n    }\n\n    function _removeFromDebtTokensOfSenderIfNeeded(address _sender, uint256 _senderBalanceAfter) private {\n        if (_senderBalanceAfter == 0) {\n            controller.removeFromDebtTokensOfAccount(_sender);\n        }\n    }\n\n    /**\n     * @notice Mint debt token\n     * @param _to The account to mint to\n     * @param _amount The amount to mint\n     */\n    function mint(address _to, uint256 _amount) external override onlyIfSyntheticToken {\n        _mint(_to, _amount);\n    }\n\n    /**\n     * @notice Burn debt token\n     * @param _from The account to burn from\n     * @param _amount The amount to burn\n     */\n    function burn(address _from, uint256 _amount) external override onlyIfAuthorized {\n        _burn(_from, _amount);\n    }\n\n    /**\n     * @notice Calculate interest to accrue\n     * @dev This util function avoids code duplication across `balanceOf` and `accrueInterest`\n     * @return _interestAmountAccrued The total amount of debt tokens accrued\n     * @return _debtIndex The new `debtIndex` value\n     * @return _currentTimestamp The current block timestamp\n     */\n\n    function _calculateInterestAccrual()\n        private\n        view\n        returns (\n            uint256 _interestAmountAccrued,\n            uint256 _debtIndex,\n            uint256 _currentTimestamp\n        )\n    {\n        _currentTimestamp = block.timestamp;\n\n        if (lastTimestampAccrued == _currentTimestamp) {\n            return (0, debtIndex, _currentTimestamp);\n        }\n\n        uint256 _interestRateToAccrue = syntheticToken.interestRatePerSecond() *\n            (_currentTimestamp - lastTimestampAccrued);\n\n        _interestAmountAccrued = _interestRateToAccrue.wadMul(totalSupply_);\n\n        _debtIndex = debtIndex + _interestRateToAccrue.wadMul(debtIndex);\n    }\n\n    /**\n     * @notice Accrue interest over debt supply\n     * @return _interestAmountAccrued The total amount of debt tokens accrued\n     */\n    function accrueInterest() external override onlyIfSyntheticToken returns (uint256 _interestAmountAccrued) {\n        uint256 _debtIndex;\n        uint256 _currentTimestamp;\n\n        (_interestAmountAccrued, _debtIndex, _currentTimestamp) = _calculateInterestAccrual();\n\n        if (_currentTimestamp == lastTimestampAccrued) {\n            return 0;\n        }\n\n        totalSupply_ += _interestAmountAccrued;\n        debtIndex = _debtIndex;\n        lastTimestampAccrued = _currentTimestamp;\n    }\n}\n"
    },
    "contracts/mock/ControllerMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable no-unused-vars\n// solhint-disable avoid-low-level-calls\n// solhint-disable use-forbidden-name\n// solhint-disable no-empty-blocks\n\npragma solidity 0.8.9;\n\nimport \"../lib/WadRayMath.sol\";\nimport \"../Pausable.sol\";\nimport \"../interface/IController.sol\";\nimport \"../access/Governable.sol\";\n\ncontract ControllerMock is IController, Governable, Pausable {\n    using WadRayMath for uint256;\n\n    ITreasury public treasury;\n    ISyntheticToken public syntheticToken;\n    IDepositToken public depositToken;\n    IMasterOracle public masterOracle;\n    uint256 public issueFee;\n    uint256 public depositFee;\n    uint256 public repayFee;\n    uint256 public withdrawFee;\n    uint256 public debtFloorInUsd;\n\n    constructor(\n        IDepositToken _depositToken,\n        IMasterOracle _masterOracle,\n        ISyntheticToken _syntheticToken\n    ) {\n        depositToken = _depositToken;\n        masterOracle = _masterOracle;\n        syntheticToken = _syntheticToken;\n    }\n\n    function mockCall(address _to, bytes memory _data) public {\n        (bool success, bytes memory data) = _to.call(_data);\n        require(success, extractRevertReason(data));\n    }\n\n    function extractRevertReason(bytes memory revertData) internal pure returns (string memory reason) {\n        uint256 l = revertData.length;\n        if (l < 68) return \"\";\n        uint256 t;\n        assembly {\n            revertData := add(revertData, 4)\n            t := mload(revertData) // Save the content of the length slot\n            mstore(revertData, sub(l, 4)) // Set proper length\n        }\n        reason = abi.decode(revertData, (string));\n        assembly {\n            mstore(revertData, t) // Restore the content of the length slot\n        }\n    }\n\n    function getDepositTokens() external pure override returns (address[] memory) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function getSyntheticTokens() external pure override returns (address[] memory) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function debtOf(address _account) public view override returns (uint256 _debtInUsd) {\n        if (address(syntheticToken) != address(0)) {\n            uint256 _debtBalance = syntheticToken.debtToken().balanceOf(_account);\n            return masterOracle.quoteTokenToUsd(syntheticToken, _debtBalance);\n        }\n    }\n\n    function depositOf(address) external pure override returns (uint256, uint256) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function debtPositionOf(address _account)\n        public\n        view\n        override\n        returns (\n            bool _isHealthy,\n            uint256 _depositInUsd,\n            uint256 _debtInUsd,\n            uint256 _issuableLimitInUsd,\n            uint256 _issuableInUsd\n        )\n    {\n        _isHealthy = true;\n        uint256 _deposit = depositToken.balanceOf(_account);\n        _depositInUsd = masterOracle.quoteTokenToUsd(depositToken, _deposit);\n        _debtInUsd = debtOf(_account);\n        _issuableLimitInUsd = _depositInUsd.wadMul(depositToken.collateralizationRatio());\n        _issuableInUsd = _debtInUsd < _issuableLimitInUsd ? _issuableLimitInUsd - _debtInUsd : 0;\n    }\n\n    function addSyntheticToken(address) external pure override {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function removeSyntheticToken(ISyntheticToken) external pure override {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function addDepositToken(address) external pure override {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function removeDepositToken(IDepositToken) external pure override {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function liquidate(\n        ISyntheticToken,\n        address,\n        uint256,\n        IDepositToken\n    ) external pure override {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function swap(\n        ISyntheticToken,\n        ISyntheticToken,\n        uint256\n    ) external pure override returns (uint256) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function updateMasterOracle(IMasterOracle _newMasterOracle) external {\n        masterOracle = _newMasterOracle;\n    }\n\n    function updateDebtFloor(uint256 _newDebtFloorInUsd) external override {\n        debtFloorInUsd = _newDebtFloorInUsd;\n    }\n\n    function updateDepositFee(uint256 _newDepositFee) external override {\n        depositFee = _newDepositFee;\n    }\n\n    function updateIssueFee(uint256 _newIssueFee) external override {\n        issueFee = _newIssueFee;\n    }\n\n    function updateWithdrawFee(uint256) external pure override {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function updateRepayFee(uint256 _newRepayFee) external override {\n        repayFee = _newRepayFee;\n    }\n\n    function updateSwapFee(uint256) external pure override {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function updateLiquidatorLiquidationFee(uint256) external pure override {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function updateProtocolLiquidationFee(uint256) external pure override {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function updateMaxLiquidable(uint256) external pure override {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function isSyntheticTokenExists(ISyntheticToken _syntheticToken) external view override returns (bool) {\n        return address(_syntheticToken) == address(syntheticToken);\n    }\n\n    function isDepositTokenExists(IDepositToken) external pure override returns (bool) {\n        return true;\n    }\n\n    function updateTreasury(ITreasury _treasury, bool) external override {\n        treasury = _treasury;\n    }\n\n    function depositTokenOf(IERC20) external view override returns (IDepositToken) {\n        return depositToken;\n    }\n\n    function addToDepositTokensOfAccount(address) external pure override {}\n\n    function removeFromDepositTokensOfAccount(address) external pure override {}\n\n    function addToDebtTokensOfAccount(address) external pure override {}\n\n    function removeFromDebtTokensOfAccount(address) external pure override {}\n\n    function getDepositTokensOfAccount(address) external pure override returns (address[] memory) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function getDebtTokensOfAccount(address) external pure override returns (address[] memory) {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function addRewardsDistributor(IRewardsDistributor) external pure override {\n        revert(\"mock-does-not-implement\");\n    }\n\n    function getRewardsDistributors()\n        external\n        pure\n        override\n        returns (IRewardsDistributor[] memory _rewardsDistributors)\n    {}\n}\n"
    },
    "contracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/utils/Context.sol\";\nimport \"./interface/IPausable.sol\";\nimport \"./access/Governable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n */\nabstract contract Pausable is IPausable, Governable {\n    event Paused(address account);\n    event Shutdown(address account);\n    event Unpaused(address account);\n    event Open(address account);\n\n    bool public override paused;\n    bool public override everythingStopped;\n\n    modifier whenNotPaused() {\n        require(!paused, \"paused\");\n        _;\n    }\n    modifier whenPaused() {\n        require(paused, \"not-paused\");\n        _;\n    }\n\n    modifier whenNotShutdown() {\n        require(!everythingStopped, \"shutdown\");\n        _;\n    }\n\n    modifier whenShutdown() {\n        require(everythingStopped, \"not-shutdown\");\n        _;\n    }\n\n    /// @dev Pause contract operations, if contract is not paused.\n    function pause() external virtual whenNotPaused onlyGovernor {\n        paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\n    function unpause() external virtual whenPaused whenNotShutdown onlyGovernor {\n        paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /// @dev Shutdown contract operations, if not already shutdown.\n    function shutdown() external virtual whenNotShutdown onlyGovernor {\n        everythingStopped = true;\n        paused = true;\n        emit Shutdown(_msgSender());\n    }\n\n    /// @dev Open contract operations, if contract is in shutdown state\n    function open() external virtual whenShutdown onlyGovernor {\n        everythingStopped = false;\n        emit Open(_msgSender());\n    }\n}\n"
    },
    "contracts/Controller.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/security/ReentrancyGuard.sol\";\nimport \"./dependencies/openzeppelin/utils/math/Math.sol\";\nimport \"./storage/ControllerStorage.sol\";\nimport \"./lib/WadRayMath.sol\";\nimport \"./Pausable.sol\";\n\n/**\n * @title Controller contract\n */\ncontract Controller is ReentrancyGuard, Pausable, ControllerStorageV1 {\n    using SafeERC20 for IERC20;\n    using WadRayMath for uint256;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using MappedEnumerableSet for MappedEnumerableSet.AddressSet;\n\n    string public constant VERSION = \"1.0.0\";\n\n    /// @notice Emitted when synthetic token is enabled\n    event SyntheticTokenAdded(address indexed syntheticToken);\n\n    /// @notice Emitted when synthetic token is disabled\n    event SyntheticTokenRemoved(ISyntheticToken indexed syntheticToken);\n\n    /// @notice Emitted when deposit token is enabled\n    event DepositTokenAdded(address indexed depositToken);\n\n    /// @notice Emitted when deposit token is disabled\n    event DepositTokenRemoved(IDepositToken indexed depositToken);\n\n    /// @notice Emitted when a position is liquidated\n    event PositionLiquidated(\n        address indexed liquidator,\n        address indexed account,\n        ISyntheticToken indexed syntheticToken,\n        uint256 amountRepaid,\n        uint256 depositSeized,\n        uint256 fee\n    );\n\n    /// @notice Emitted when synthetic token is swapped\n    event SyntheticTokenSwapped(\n        address indexed account,\n        ISyntheticToken indexed syntheticTokenIn,\n        ISyntheticToken indexed syntheticTokenOut,\n        uint256 amountIn,\n        uint256 amountOut,\n        uint256 fee\n    );\n\n    /// @notice Emitted when protocol liquidation fee is updated\n    event DebtFloorUpdated(uint256 oldDebtFloorInUsd, uint256 newDebtFloorInUsd);\n\n    /// @notice Emitted when deposit fee is updated\n    event DepositFeeUpdated(uint256 oldDepositFee, uint256 newDepositFee);\n\n    /// @notice Emitted when issue fee is updated\n    event IssueFeeUpdated(uint256 oldIssueFee, uint256 newIssueFee);\n\n    /// @notice Emitted when withdraw fee is updated\n    event WithdrawFeeUpdated(uint256 oldWithdrawFee, uint256 newWithdrawFee);\n\n    /// @notice Emitted when repay fee is updated\n    event RepayFeeUpdated(uint256 oldRepayFee, uint256 newRepayFee);\n\n    /// @notice Emitted when swap fee is updated\n    event SwapFeeUpdated(uint256 oldSwapFee, uint256 newSwapFee);\n\n    /// @notice Emitted when refinance fee is updated\n    event RefinanceFeeUpdated(uint256 oldRefinanceFee, uint256 newRefinanceFee);\n\n    /// @notice Emitted when liquidator liquidation fee is updated\n    event LiquidatorLiquidationFeeUpdated(uint256 oldLiquidatorLiquidationFee, uint256 newLiquidatorLiquidationFee);\n\n    /// @notice Emitted when maxLiquidable (liquidation cap) is updated\n    event MaxLiquidableUpdated(uint256 oldMaxLiquidable, uint256 newMaxLiquidable);\n\n    /// @notice Emitted when protocol liquidation fee is updated\n    event ProtocolLiquidationFeeUpdated(uint256 oldProtocolLiquidationFee, uint256 newProtocolLiquidationFee);\n\n    /// @notice Emitted when master oracle contract is updated\n    event MasterOracleUpdated(IMasterOracle indexed oldOracle, IMasterOracle indexed newOracle);\n\n    /// @notice Emitted when treasury contract is updated\n    event TreasuryUpdated(ITreasury indexed oldTreasury, ITreasury indexed newTreasury);\n\n    /// @notice Emitted when rewards distributor contract is added\n    event RewardsDistributorAdded(IRewardsDistributor _distributor);\n\n    /**\n     * @dev Throws if synthetic token doesn't exist\n     */\n    modifier onlyIfSyntheticTokenExists(ISyntheticToken _syntheticToken) {\n        require(isSyntheticTokenExists(_syntheticToken), \"synthetic-inexistent\");\n        _;\n    }\n\n    /**\n     * @dev Throws if synthetic token isn't enabled\n     */\n    modifier onlyIfSyntheticTokenIsActive(ISyntheticToken _syntheticToken) {\n        require(_syntheticToken.isActive(), \"synthetic-inactive\");\n        _;\n    }\n\n    /**\n     * @dev Throws if deposit token doesn't exist\n     */\n    modifier onlyIfDepositTokenExists(IDepositToken _depositToken) {\n        require(isDepositTokenExists(_depositToken), \"collateral-inexistent\");\n        _;\n    }\n\n    /**\n     * @dev Throws if `msg.sender` isn't a debt token\n     */\n    modifier onlyIfMsgSenderIsDebtToken() {\n        ISyntheticToken _syntheticToken = IDebtToken(_msgSender()).syntheticToken();\n        require(\n            syntheticTokens.contains(address(_syntheticToken)) && _msgSender() == address(_syntheticToken.debtToken()),\n            \"caller-is-not-debt-token\"\n        );\n        _;\n    }\n\n    function initialize(IMasterOracle _masterOracle) public initializer {\n        require(address(_masterOracle) != address(0), \"oracle-is-null\");\n\n        __ReentrancyGuard_init();\n        __Governable_init();\n\n        masterOracle = _masterOracle;\n\n        repayFee = 3e15; // 0.3%\n        swapFee = 6e15; // 0.6%\n        liquidatorLiquidationFee = 1e17; // 10%\n        protocolLiquidationFee = 8e16; // 8%\n        maxLiquidable = 0.5e18; // 50%\n    }\n\n    /**\n     * @notice Get all synthetic tokens\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees.\n     */\n    function getSyntheticTokens() external view override returns (address[] memory) {\n        return syntheticTokens.values();\n    }\n\n    /**\n     * @notice Get all deposit tokens\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees.\n     */\n    function getDepositTokens() external view override returns (address[] memory) {\n        return depositTokens.values();\n    }\n\n    /**\n     * @notice Get deposit tokens of an account\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees.\n     */\n    function getDepositTokensOfAccount(address _account) external view override returns (address[] memory) {\n        return depositTokensOfAccount.values(_account);\n    }\n\n    /**\n     * @notice Get all debt tokens\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees.\n     */\n    function getDebtTokensOfAccount(address _account) external view override returns (address[] memory) {\n        return debtTokensOfAccount.values(_account);\n    }\n\n    /**\n     * @notice Get all rewards distributors\n     */\n    function getRewardsDistributors() external view override returns (IRewardsDistributor[] memory) {\n        return rewardsDistributors;\n    }\n\n    /**\n     * @notice Check if token is part of the synthetic offerings\n     * @param _syntheticToken Asset to check\n     * @return true if exist\n     */\n    function isSyntheticTokenExists(ISyntheticToken _syntheticToken) public view override returns (bool) {\n        return syntheticTokens.contains(address(_syntheticToken));\n    }\n\n    /**\n     * @notice Check if collateral is supported\n     * @param _depositToken Asset to check\n     * @return true if exist\n     */\n    function isDepositTokenExists(IDepositToken _depositToken) public view override returns (bool) {\n        return depositTokens.contains(address(_depositToken));\n    }\n\n    /**\n     * @notice Get account's debt by querying latest prices from oracles\n     * @param _account The account to check\n     * @return _debtInUsd The debt value in USD\n     */\n    function debtOf(address _account) public view override returns (uint256 _debtInUsd) {\n        uint256 _length = debtTokensOfAccount.length(_account);\n        for (uint256 i; i < _length; ++i) {\n            IDebtToken _debtToken = IDebtToken(debtTokensOfAccount.at(_account, i));\n            ISyntheticToken _syntheticToken = _debtToken.syntheticToken();\n            _debtInUsd += masterOracle.quoteTokenToUsd(_syntheticToken, _debtToken.balanceOf(_account));\n        }\n    }\n\n    /**\n     * @notice Get account's total collateral deposited by querying latest prices from oracles\n     * @param _account The account to check\n     * @return _depositInUsd The total deposit value in USD among all collaterals\n     * @return _issuableLimitInUsd The max value in USD that can be used to issue synthetic tokens\n     */\n    function depositOf(address _account)\n        public\n        view\n        override\n        returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd)\n    {\n        uint256 _length = depositTokensOfAccount.length(_account);\n        for (uint256 i; i < _length; ++i) {\n            IDepositToken _depositToken = IDepositToken(depositTokensOfAccount.at(_account, i));\n            uint256 _amountInUsd = masterOracle.quoteTokenToUsd(_depositToken, _depositToken.balanceOf(_account));\n            _depositInUsd += _amountInUsd;\n            _issuableLimitInUsd += _amountInUsd.wadMul(_depositToken.collateralizationRatio());\n        }\n    }\n\n    /**\n     * @notice Get if the debt position from an account is healthy\n     * @param _account The account to check\n     * @return _isHealthy Whether the account's position is healthy\n     * @return _depositInUsd The total collateral deposited in USD\n     * @return _debtInUsd The total debt in USD\n     * @return _issuableLimitInUsd The max amount of debt (is USD) that can be created (considering collateralization ratios)\n     * @return _issuableInUsd The amount of debt (is USD) that is free (i.e. can be used to issue synthetic tokens)\n     */\n    function debtPositionOf(address _account)\n        public\n        view\n        override\n        returns (\n            bool _isHealthy,\n            uint256 _depositInUsd,\n            uint256 _debtInUsd,\n            uint256 _issuableLimitInUsd,\n            uint256 _issuableInUsd\n        )\n    {\n        _debtInUsd = debtOf(_account);\n        (_depositInUsd, _issuableLimitInUsd) = depositOf(_account);\n        _isHealthy = _debtInUsd <= _issuableLimitInUsd;\n        _issuableInUsd = _debtInUsd < _issuableLimitInUsd ? _issuableLimitInUsd - _debtInUsd : 0;\n    }\n\n    /**\n     * @notice Burn synthetic token, unlock deposit token and send liquidator liquidation fee\n     * @param _syntheticToken The vsAsset to use for repayment\n     * @param _account The account with an unhealthy position\n     * @param _amountToRepay The amount to repay in synthetic token\n     * @param _depositToken The collateral to seize from\n     */\n    function liquidate(\n        ISyntheticToken _syntheticToken,\n        address _account,\n        uint256 _amountToRepay,\n        IDepositToken _depositToken\n    ) external override whenNotShutdown nonReentrant onlyIfDepositTokenExists(_depositToken) {\n        require(_amountToRepay > 0, \"amount-is-zero\");\n\n        address _liquidator = _msgSender();\n        require(_liquidator != _account, \"can-not-liquidate-own-position\");\n\n        _syntheticToken.accrueInterest();\n\n        (bool _isHealthy, , , , ) = debtPositionOf(_account);\n\n        require(!_isHealthy, \"position-is-healthy\");\n\n        IDebtToken _debtToken = _syntheticToken.debtToken();\n        uint256 _debtTokenBalance = _debtToken.balanceOf(_account);\n\n        require(_amountToRepay.wadDiv(_debtTokenBalance) <= maxLiquidable, \"amount-gt-max-liquidable\");\n\n        if (debtFloorInUsd > 0) {\n            uint256 _newDebtInUsd = masterOracle.quoteTokenToUsd(_syntheticToken, _debtTokenBalance - _amountToRepay);\n            require(_newDebtInUsd == 0 || _newDebtInUsd >= debtFloorInUsd, \"remaining-debt-lt-floor\");\n        }\n\n        uint256 _amountToRepayInCollateral = masterOracle.quote(_syntheticToken, _depositToken, _amountToRepay);\n\n        uint256 _toProtocol = protocolLiquidationFee > 0\n            ? _amountToRepayInCollateral.wadMul(protocolLiquidationFee)\n            : 0;\n        uint256 _toLiquidator = _amountToRepayInCollateral.wadMul(1e18 + liquidatorLiquidationFee);\n        uint256 _depositToSeize = _toProtocol + _toLiquidator;\n\n        require(_depositToSeize <= _depositToken.balanceOf(_account), \"amount-too-high\");\n\n        _syntheticToken.burn(_liquidator, _amountToRepay);\n        _debtToken.burn(_account, _amountToRepay);\n        _depositToken.seize(_account, _liquidator, _toLiquidator);\n\n        if (_toProtocol > 0) {\n            _depositToken.seize(_account, address(treasury), _toProtocol);\n        }\n\n        emit PositionLiquidated(_liquidator, _account, _syntheticToken, _amountToRepay, _depositToSeize, _toProtocol);\n    }\n\n    /**\n     * @notice Swap synthetic tokens\n     * @param _syntheticTokenIn Synthetic token to sell\n     * @param _syntheticTokenOut Synthetic token to buy\n     * @param _amountIn Amount to swap\n     */\n    function swap(\n        ISyntheticToken _syntheticTokenIn,\n        ISyntheticToken _syntheticTokenOut,\n        uint256 _amountIn\n    )\n        external\n        override\n        whenNotShutdown\n        nonReentrant\n        onlyIfSyntheticTokenExists(_syntheticTokenIn)\n        onlyIfSyntheticTokenExists(_syntheticTokenOut)\n        onlyIfSyntheticTokenIsActive(_syntheticTokenOut)\n        returns (uint256 _amountOut)\n    {\n        _syntheticTokenIn.accrueInterest();\n        _syntheticTokenOut.accrueInterest();\n\n        address _account = _msgSender();\n\n        require(_amountIn > 0, \"amount-in-is-0\");\n        require(_amountIn <= _syntheticTokenIn.balanceOf(_account), \"amount-in-gt-balance\");\n\n        _syntheticTokenIn.burn(_account, _amountIn);\n\n        _amountOut = masterOracle.quote(_syntheticTokenIn, _syntheticTokenOut, _amountIn);\n\n        uint256 _feeAmount;\n        if (swapFee > 0) {\n            _feeAmount = _amountOut.wadMul(swapFee);\n            _syntheticTokenOut.mint(address(treasury), _feeAmount);\n            _amountOut -= _feeAmount;\n        }\n\n        _syntheticTokenOut.mint(_account, _amountOut);\n\n        emit SyntheticTokenSwapped(_account, _syntheticTokenIn, _syntheticTokenOut, _amountIn, _amountOut, _feeAmount);\n    }\n\n    /**\n     * @notice Add synthetic token to vSynth offerings\n     */\n    function addSyntheticToken(address _syntheticToken) external override onlyGovernor {\n        require(_syntheticToken != address(0), \"address-is-null\");\n\n        require(syntheticTokens.add(_syntheticToken), \"synthetic-exists\");\n\n        emit SyntheticTokenAdded(_syntheticToken);\n    }\n\n    /**\n     * @notice Remove synthetic token from vSynth offerings\n     */\n    function removeSyntheticToken(ISyntheticToken _syntheticToken)\n        external\n        override\n        onlyGovernor\n        onlyIfSyntheticTokenExists(_syntheticToken)\n    {\n        require(_syntheticToken.totalSupply() == 0, \"supply-gt-0\");\n        require(_syntheticToken.debtToken().totalSupply() == 0, \"synthetic-with-debt-supply\");\n\n        require(syntheticTokens.remove(address(_syntheticToken)), \"synthetic-doesnt-exist\");\n\n        emit SyntheticTokenRemoved(_syntheticToken);\n    }\n\n    /**\n     * @notice Add deposit token (i.e. collateral) to vSynth\n     */\n    function addDepositToken(address _depositToken) external override onlyGovernor {\n        require(_depositToken != address(0), \"address-is-null\");\n\n        require(depositTokens.add(_depositToken), \"deposit-token-exists\");\n        depositTokenOf[IDepositToken(_depositToken).underlying()] = IDepositToken(_depositToken);\n\n        emit DepositTokenAdded(_depositToken);\n    }\n\n    /**\n     * @notice Remove deposit token (i.e. collateral) from vSynth\n     */\n    function removeDepositToken(IDepositToken _depositToken)\n        external\n        override\n        onlyGovernor\n        onlyIfDepositTokenExists(_depositToken)\n    {\n        require(_depositToken.totalSupply() == 0, \"supply-gt-0\");\n\n        require(depositTokens.remove(address(_depositToken)), \"deposit-token-doesnt-exist\");\n        delete depositTokenOf[_depositToken.underlying()];\n\n        emit DepositTokenRemoved(_depositToken);\n    }\n\n    /**\n     * @notice Add a deposit token to the per-account list\n     * @dev This function is called from `DepositToken` when user's balance changes from `0`\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\n     * @param _account The account address\n     */\n    function addToDepositTokensOfAccount(address _account) external {\n        require(depositTokens.contains(_msgSender()), \"caller-is-not-deposit-token\");\n        require(depositTokensOfAccount.add(_account, _msgSender()), \"deposit-token-exists\");\n    }\n\n    /**\n     * @notice Remove a deposit token from the per-account list\n     * @dev This function is called from `DepositToken` when user's balance changes to `0`\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\n     * @param _account The account address\n     */\n    function removeFromDepositTokensOfAccount(address _account) external {\n        require(depositTokens.contains(_msgSender()), \"caller-is-not-deposit-token\");\n        require(depositTokensOfAccount.remove(_account, _msgSender()), \"deposit-token-doesnt-exist\");\n    }\n\n    /**\n     * @notice Add a debt token to the per-account list\n     * @dev This function is called from `DebtToken` when user's balance changes from `0`\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\n     * @param _account The account address\n     */\n    function addToDebtTokensOfAccount(address _account) external onlyIfMsgSenderIsDebtToken {\n        require(debtTokensOfAccount.add(_account, _msgSender()), \"debt-token-exists\");\n    }\n\n    /**\n     * @notice Remove a debt token from the per-account list\n     * @dev This function is called from `DebtToken` when user's balance changes to `0`\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\n     * @param _account The account address\n     */\n    function removeFromDebtTokensOfAccount(address _account) external onlyIfMsgSenderIsDebtToken {\n        require(debtTokensOfAccount.remove(_account, _msgSender()), \"debt-token-doesnt-exist\");\n    }\n\n    /**\n     * @notice Update master oracle contract\n     */\n    function updateMasterOracle(IMasterOracle _newMasterOracle) external override onlyGovernor {\n        require(address(_newMasterOracle) != address(0), \"address-is-null\");\n        IMasterOracle _currentMasterOracle = masterOracle;\n        require(_newMasterOracle != _currentMasterOracle, \"new-same-as-current\");\n\n        emit MasterOracleUpdated(_currentMasterOracle, _newMasterOracle);\n        masterOracle = _newMasterOracle;\n    }\n\n    /**\n     * @notice Update deposit fee\n     */\n    function updateDepositFee(uint256 _newDepositFee) external override onlyGovernor {\n        require(_newDepositFee <= 1e18, \"max-is-100%\");\n        uint256 _currentDepositFee = depositFee;\n        require(_newDepositFee != _currentDepositFee, \"new-same-as-current\");\n        emit DepositFeeUpdated(_currentDepositFee, _newDepositFee);\n        depositFee = _newDepositFee;\n    }\n\n    /**\n     * @notice Update issue fee\n     */\n    function updateIssueFee(uint256 _newIssueFee) external override onlyGovernor {\n        require(_newIssueFee <= 1e18, \"max-is-100%\");\n        uint256 _currentIssueFee = issueFee;\n        require(_newIssueFee != _currentIssueFee, \"new-same-as-current\");\n        emit IssueFeeUpdated(_currentIssueFee, _newIssueFee);\n        issueFee = _newIssueFee;\n    }\n\n    /**\n     * @notice Update withdraw fee\n     */\n    function updateWithdrawFee(uint256 _newWithdrawFee) external override onlyGovernor {\n        require(_newWithdrawFee <= 1e18, \"max-is-100%\");\n        uint256 _currentWithdrawFee = withdrawFee;\n        require(_newWithdrawFee != _currentWithdrawFee, \"new-same-as-current\");\n        emit WithdrawFeeUpdated(_currentWithdrawFee, _newWithdrawFee);\n        withdrawFee = _newWithdrawFee;\n    }\n\n    /**\n     * @notice Update repay fee\n     */\n    function updateRepayFee(uint256 _newRepayFee) external override onlyGovernor {\n        require(_newRepayFee <= 1e18, \"max-is-100%\");\n        uint256 _currentRepayFee = repayFee;\n        require(_newRepayFee != _currentRepayFee, \"new-same-as-current\");\n        emit RepayFeeUpdated(_currentRepayFee, _newRepayFee);\n        repayFee = _newRepayFee;\n    }\n\n    /**\n     * @notice Update swap fee\n     */\n    function updateSwapFee(uint256 _newSwapFee) external override onlyGovernor {\n        require(_newSwapFee <= 1e18, \"max-is-100%\");\n        uint256 _currentSwapFee = swapFee;\n        require(_newSwapFee != _currentSwapFee, \"new-same-as-current\");\n        emit SwapFeeUpdated(_currentSwapFee, _newSwapFee);\n        swapFee = _newSwapFee;\n    }\n\n    /**\n     * @notice Update liquidator liquidation fee\n     */\n    function updateLiquidatorLiquidationFee(uint256 _newLiquidatorLiquidationFee) external override onlyGovernor {\n        require(_newLiquidatorLiquidationFee <= 1e18, \"max-is-100%\");\n        uint256 _currentLiquidatorLiquidationFee = liquidatorLiquidationFee;\n        require(_newLiquidatorLiquidationFee != _currentLiquidatorLiquidationFee, \"new-same-as-current\");\n        emit LiquidatorLiquidationFeeUpdated(_currentLiquidatorLiquidationFee, _newLiquidatorLiquidationFee);\n        liquidatorLiquidationFee = _newLiquidatorLiquidationFee;\n    }\n\n    /**\n     * @notice Update protocol liquidation fee\n     */\n    function updateProtocolLiquidationFee(uint256 _newProtocolLiquidationFee) external override onlyGovernor {\n        require(_newProtocolLiquidationFee <= 1e18, \"max-is-100%\");\n        uint256 _currentProtocolLiquidationFee = protocolLiquidationFee;\n        require(_newProtocolLiquidationFee != _currentProtocolLiquidationFee, \"new-same-as-current\");\n        emit ProtocolLiquidationFeeUpdated(_currentProtocolLiquidationFee, _newProtocolLiquidationFee);\n        protocolLiquidationFee = _newProtocolLiquidationFee;\n    }\n\n    /**\n     * @notice Update maxLiquidable (liquidation cap)\n     */\n    function updateMaxLiquidable(uint256 _newMaxLiquidable) external override onlyGovernor {\n        require(_newMaxLiquidable <= 1e18, \"max-is-100%\");\n        uint256 _currentMaxLiquidable = maxLiquidable;\n        require(_newMaxLiquidable != _currentMaxLiquidable, \"new-same-as-current\");\n        emit MaxLiquidableUpdated(_currentMaxLiquidable, _newMaxLiquidable);\n        maxLiquidable = _newMaxLiquidable;\n    }\n\n    /**\n     * @notice Update debt floor\n     */\n    function updateDebtFloor(uint256 _newDebtFloorInUsd) external override onlyGovernor {\n        uint256 _currentDebtFloorInUsd = debtFloorInUsd;\n        require(_newDebtFloorInUsd != _currentDebtFloorInUsd, \"new-same-as-current\");\n        emit DebtFloorUpdated(_currentDebtFloorInUsd, _newDebtFloorInUsd);\n        debtFloorInUsd = _newDebtFloorInUsd;\n    }\n\n    /**\n     * @notice Update treasury contract - will migrate funds to the new contract\n     */\n    function updateTreasury(ITreasury _newTreasury, bool _withMigration) external override onlyGovernor {\n        require(address(_newTreasury) != address(0), \"address-is-null\");\n        ITreasury _currentTreasury = treasury;\n        require(_newTreasury != _currentTreasury, \"new-same-as-current\");\n\n        if (_withMigration) _currentTreasury.migrateTo(address(_newTreasury));\n\n        emit TreasuryUpdated(_currentTreasury, _newTreasury);\n        treasury = _newTreasury;\n    }\n\n    /**\n     * @notice Add a RewardsDistributor contract\n     */\n    function addRewardsDistributor(IRewardsDistributor _distributor) external override onlyGovernor {\n        require(address(_distributor) != address(0), \"address-is-null\");\n\n        for (uint256 i; i < rewardsDistributors.length; i++)\n            require(_distributor != rewardsDistributors[i], \"contract-already-added\");\n\n        rewardsDistributors.push(_distributor);\n        emit RewardsDistributorAdded(_distributor);\n    }\n}\n"
    },
    "contracts/oracle/ChainlinkPriceProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/utils/math/Math.sol\";\nimport \"../dependencies/openzeppelin/utils/math/SafeCast.sol\";\nimport \"../dependencies/chainlink/interfaces/AggregatorV3Interface.sol\";\nimport \"../interface/oracle/IPriceProvider.sol\";\n\n/**\n * @title ChainLink's price provider\n * @dev This contract wraps chainlink aggregators\n */\ncontract ChainlinkPriceProvider is IPriceProvider {\n    /**\n     * @notice Used to convert 8-decimals from Chainlink to 18-decimals values\n     */\n    uint256 public constant TEN_DECIMALS = 1e10;\n\n    /**\n     * @notice Get price from an aggregator\n     * @param _aggregator The aggregator contract address\n     * @return The price (18-decimals) and its timestamp\n     */\n    function _getPriceOfAsset(address _aggregator) private view returns (uint256, uint256) {\n        (, int256 _price, , uint256 _lastUpdatedAt, ) = AggregatorV3Interface(_aggregator).latestRoundData();\n        return (SafeCast.toUint256(_price) * TEN_DECIMALS, _lastUpdatedAt);\n    }\n\n    /**\n     * @notice Get asset's USD price\n     * @param _aggregator The asset's aggregator\n     * @return _priceInUsd The amount in USD (18 decimals)\n     * @return _lastUpdatedAt The timestamp of the price used to convert\n     */\n    function getPriceInUsd(address _aggregator)\n        external\n        view\n        override\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt)\n    {\n        (_priceInUsd, _lastUpdatedAt) = _getPriceOfAsset(_aggregator);\n    }\n\n    /**\n     * @dev This function is here just to follow IPriceProvider\n     */\n    // solhint-disable-next-line no-empty-blocks\n    function update(address) external {}\n}\n"
    },
    "contracts/dependencies/chainlink/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n"
    },
    "contracts/oracle/ib/CTokenOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../interface/external/ICToken.sol\";\nimport \"../../interface/oracle/IOracle.sol\";\nimport \"../../lib/OracleHelpers.sol\";\nimport \"../../lib/WadRayMath.sol\";\n\n/**\n * @title Oracle for `CTokens`\n */\ncontract CTokenOracle is IOracle {\n    using WadRayMath for uint256;\n\n    uint256 public constant ONE_CTOKEN = 1e8;\n    /**\n     * @notice The oracle that resolves the price of underlying token\n     */\n    IOracle public underlyingOracle;\n\n    /**\n     * @notice The address of the `CEther` underlying (Usually WETH)\n     */\n    address public wethLike;\n\n    constructor(IOracle _underlyingOracle, address _wethLike) {\n        underlyingOracle = _underlyingOracle;\n        wethLike = _wethLike;\n    }\n\n    /**\n     * @notice Get cToken's USD price\n     * @param _asset The asset's to get price from\n     * @return _priceInUsd The amount in USD (18 decimals)\n     */\n    function getPriceInUsd(IERC20 _asset) external view returns (uint256 _priceInUsd) {\n        address _underlyingAddress;\n        // Note: Compound's `CEther` hasn't the `underlying()` function, forks may return `address(0)` (e.g. RariFuse)\n        try ICToken(address(_asset)).underlying() returns (address _underlying) {\n            _underlyingAddress = _underlying;\n        } catch {}\n\n        if (_underlyingAddress == address(0)) {\n            _underlyingAddress = wethLike;\n        }\n        uint256 _underlyingPriceInUsd = underlyingOracle.getPriceInUsd(IERC20(_underlyingAddress));\n        uint256 _underlyingAmount = (ONE_CTOKEN * ICToken(address(_asset)).exchangeRateStored()) / 1e18;\n        _priceInUsd = (_underlyingPriceInUsd * _underlyingAmount) / 10**IERC20Metadata(_underlyingAddress).decimals();\n    }\n}\n"
    },
    "contracts/interface/external/ICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface ICToken {\n    function exchangeRateStored() external view returns (uint256);\n\n    function underlying() external view returns (address);\n}\n"
    },
    "contracts/mock/TokenHolderMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../utils/TokenHolder.sol\";\n\ncontract TokenHolderMock is TokenHolder {\n    address public sweeper;\n    bool public acceptETH;\n\n    constructor(address _sweeper) {\n        sweeper = _sweeper;\n    }\n\n    function _requireCanSweep() internal view override {\n        require(msg.sender == sweeper, \"not-sweeper\");\n    }\n\n    function toggleAcceptETH() public {\n        acceptETH = !acceptETH;\n    }\n\n    receive() external payable override {\n        require(acceptETH, \"not-allowed-to-receive-eth\");\n    }\n}\n"
    },
    "contracts/upgraders/ControllerUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract ControllerUpgrader is UpgraderBase {\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](11);\n        calls[0] = abi.encodeWithSignature(\"debtFloorInUsd()\");\n        calls[1] = abi.encodeWithSignature(\"depositFee()\");\n        calls[2] = abi.encodeWithSignature(\"issueFee()\");\n        calls[3] = abi.encodeWithSignature(\"withdrawFee()\");\n        calls[4] = abi.encodeWithSignature(\"repayFee()\");\n        calls[5] = abi.encodeWithSignature(\"swapFee()\");\n        calls[6] = abi.encodeWithSignature(\"liquidatorLiquidationFee()\");\n        calls[7] = abi.encodeWithSignature(\"protocolLiquidationFee()\");\n        calls[8] = abi.encodeWithSignature(\"maxLiquidable()\");\n        calls[9] = abi.encodeWithSignature(\"masterOracle()\");\n        calls[10] = abi.encodeWithSignature(\"treasury()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        _checkUint256Results(_beforeResults, _afterResults, 0, 8);\n        _checkAddressResults(_beforeResults, _afterResults, 9, 10);\n    }\n}\n"
    },
    "contracts/mock/DefaultOracleMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable no-empty-blocks\n\npragma solidity 0.8.9;\n\nimport \"../interface/oracle/IOracle.sol\";\n\ncontract DefaultOracleMock is IOracle {\n    mapping(IERC20 => uint256) public prices;\n\n    function updatePrice(IERC20 _asset, uint256 _price) external {\n        prices[_asset] = _price;\n    }\n\n    function getPriceInUsd(IERC20 _asset) public view override returns (uint256 _priceInUsd) {\n        return prices[_asset];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}