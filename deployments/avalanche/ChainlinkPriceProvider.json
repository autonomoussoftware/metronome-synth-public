{
  "address": "0x04Db2DA16318e616d28f0DA7AA59EEb12AcEc72c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_assetData",
          "type": "bytes"
        }
      ],
      "name": "getPriceInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_priceInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastUpdatedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x43db81f4844696cfff336f6a0ff8df6b2a5bf305687c101fe6d587149707fadf",
  "receipt": {
    "to": null,
    "from": "0xF5F5195cF6998c57C651f9f0bBFA7cFC72a6FaC1",
    "contractAddress": "0x04Db2DA16318e616d28f0DA7AA59EEb12AcEc72c",
    "transactionIndex": 25,
    "gasUsed": "233858",
    "logsBloom": "0x
    "blockHash": "0x58d578d7e025f5c561f281e89705383223fcc7cc96cce91dda00a7302f827cb2",
    "transactionHash": "0x43db81f4844696cfff336f6a0ff8df6b2a5bf305687c101fe6d587149707fadf",
    "logs": [],
    "blockNumber": 12442207,
    "cumulativeGasUsed": "3678799",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0077a7bd8b2b7c639ec050e1f3a43041",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_assetData\",\"type\":\"bytes\"}],\"name\":\"getPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract wrapps chainlink agreggators\",\"kind\":\"dev\",\"methods\":{\"getPriceInUsd(bytes)\":{\"params\":{\"_assetData\":\"The asset's query encoded data\"},\"returns\":{\"_lastUpdatedAt\":\"The timestamp of the price used to convert\",\"_priceInUsd\":\"The amount in USD (18 decimals)\"}},\"update(bytes)\":{\"details\":\"This function is here just to follow IPriceProvider\"}},\"title\":\"ChainLink's price provider\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPriceInUsd(bytes)\":{\"notice\":\"Get asset's USD price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/ChainlinkPriceProvider.sol\":\"ChainlinkPriceProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0xbf89bfa250e6a1d6854fe43490602d4ffe1ff62ba15d792e27dc1b51b73ccc51\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/interface/oracle/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    function update(bytes calldata _assetData) external;\\n\\n    function getPriceInUsd(bytes calldata _assetData)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0xb9a85340ae4de861a6f0a8c591d28272176e44198c03e214b0f41db7dab4a4ff\",\"license\":\"MIT\"},\"contracts/oracle/ChainlinkPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/utils/math/Math.sol\\\";\\nimport \\\"../dependencies/openzeppelin/utils/math/SafeCast.sol\\\";\\nimport \\\"../dependencies/chainlink/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../interface/oracle/IPriceProvider.sol\\\";\\n\\n/**\\n * @title ChainLink's price provider\\n * @dev This contract wrapps chainlink agreggators\\n */\\ncontract ChainlinkPriceProvider is IPriceProvider {\\n    /**\\n     * @notice Get price from an aggregator\\n     * @param _aggregator The aggregator contract address\\n     * @return The price and its timestamp\\n     */\\n    function _getPriceOfAsset(address _aggregator) private view returns (uint256, uint256) {\\n        (, int256 _price, , uint256 _lastUpdatedAt, ) = AggregatorV3Interface(_aggregator).latestRoundData();\\n        return (SafeCast.toUint256(_price) * 1e10, _lastUpdatedAt);\\n    }\\n\\n    /**\\n     * @notice Decode asset data\\n     * @param _assetData The asset's query encoded data\\n     * @return _aggregator The aggregator contract address\\n     * @return _decimals The asset's decimals\\n     */\\n    function _decode(bytes calldata _assetData) private pure returns (address _aggregator, uint8 _decimals) {\\n        (_aggregator, _decimals) = abi.decode(_assetData, (address, uint8));\\n    }\\n\\n    /**\\n     * @notice Get asset's USD price\\n     * @param _assetData The asset's query encoded data\\n     * @return _priceInUsd The amount in USD (18 decimals)\\n     * @return _lastUpdatedAt The timestamp of the price used to convert\\n     */\\n    function getPriceInUsd(bytes calldata _assetData)\\n        external\\n        view\\n        override\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt)\\n    {\\n        (address _aggregator, ) = _decode(_assetData);\\n        (_priceInUsd, _lastUpdatedAt) = _getPriceOfAsset(_aggregator);\\n    }\\n\\n    /**\\n     * @dev This function is here just to follow IPriceProvider\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    function update(bytes calldata) external {}\\n}\\n\",\"keccak256\":\"0x7eaba35431ce0e924a63d4f9ab517a4beb3c7ef6dd07689d6407e809a32da49d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610345806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b82684431461003b578063c43ed2c814610067575b600080fd5b61004e6100493660046101b6565b61007b565b6040805192835260208301919091520160405180910390f35b6100796100753660046101b6565b5050565b005b600080600061008a85856100a2565b509050610096816100bc565b90969095509350505050565b6000806100b183850185610228565b909590945092505050565b600080600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156100fb57600080fd5b505afa15801561010f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101339190610292565b509350509250506101438261015c565b610152906402540be4006102e2565b9590945092505050565b6000808212156101b25760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640160405180910390fd5b5090565b600080602083850312156101c957600080fd5b823567ffffffffffffffff808211156101e157600080fd5b818501915085601f8301126101f557600080fd5b81358181111561020457600080fd5b86602082850101111561021657600080fd5b60209290920196919550909350505050565b6000806040838503121561023b57600080fd5b82356001600160a01b038116811461025257600080fd5b9150602083013560ff8116811461026857600080fd5b809150509250929050565b805169ffffffffffffffffffff8116811461028d57600080fd5b919050565b600080600080600060a086880312156102aa57600080fd5b6102b386610273565b94506020860151935060408601519250606086015191506102d660808701610273565b90509295509295909350565b600081600019048311821515161561030a57634e487b7160e01b600052601160045260246000fd5b50029056fea264697066735822122049e2c875c0ff9019200beff7c486f4263dcc9118f05358d1b23e317156ea16fb64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063b82684431461003b578063c43ed2c814610067575b600080fd5b61004e6100493660046101b6565b61007b565b6040805192835260208301919091520160405180910390f35b6100796100753660046101b6565b5050565b005b600080600061008a85856100a2565b509050610096816100bc565b90969095509350505050565b6000806100b183850185610228565b909590945092505050565b600080600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156100fb57600080fd5b505afa15801561010f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101339190610292565b509350509250506101438261015c565b610152906402540be4006102e2565b9590945092505050565b6000808212156101b25760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640160405180910390fd5b5090565b600080602083850312156101c957600080fd5b823567ffffffffffffffff808211156101e157600080fd5b818501915085601f8301126101f557600080fd5b81358181111561020457600080fd5b86602082850101111561021657600080fd5b60209290920196919550909350505050565b6000806040838503121561023b57600080fd5b82356001600160a01b038116811461025257600080fd5b9150602083013560ff8116811461026857600080fd5b809150509250929050565b805169ffffffffffffffffffff8116811461028d57600080fd5b919050565b600080600080600060a086880312156102aa57600080fd5b6102b386610273565b94506020860151935060408601519250606086015191506102d660808701610273565b90509295509295909350565b600081600019048311821515161561030a57634e487b7160e01b600052601160045260246000fd5b50029056fea264697066735822122049e2c875c0ff9019200beff7c486f4263dcc9118f05358d1b23e317156ea16fb64736f6c63430008090033",
  "devdoc": {
    "details": "This contract wrapps chainlink agreggators",
    "kind": "dev",
    "methods": {
      "getPriceInUsd(bytes)": {
        "params": {
          "_assetData": "The asset's query encoded data"
        },
        "returns": {
          "_lastUpdatedAt": "The timestamp of the price used to convert",
          "_priceInUsd": "The amount in USD (18 decimals)"
        }
      },
      "update(bytes)": {
        "details": "This function is here just to follow IPriceProvider"
      }
    },
    "title": "ChainLink's price provider",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPriceInUsd(bytes)": {
        "notice": "Get asset's USD price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}