{
  "address": "0x52EDbC52Fe7fE1b2E34A9dA11B4Ec0c323525f07",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_interestAmountAccrued",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "contract IController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimestampAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "_syntheticToken",
          "type": "address"
        }
      ],
      "name": "setSyntheticToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "syntheticToken",
      "outputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa41acfa7331e2aef4dc19932200c4f8ab218cfa6f12b866534454ba80d8242f4",
  "receipt": {
    "to": null,
    "from": "0xF5F5195cF6998c57C651f9f0bBFA7cFC72a6FaC1",
    "contractAddress": "0x52EDbC52Fe7fE1b2E34A9dA11B4Ec0c323525f07",
    "transactionIndex": 0,
    "gasUsed": "1729364",
    "logsBloom": "0x
    "blockHash": "0x2bb559de8848781ab01dadde46f918f1a9f9a9fffc40ab6d77d0e7f6886dc9a4",
    "transactionHash": "0xa41acfa7331e2aef4dc19932200c4f8ab218cfa6f12b866534454ba80d8242f4",
    "logs": [],
    "blockNumber": 15251769,
    "cumulativeGasUsed": "1729364",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d8b118bc2b869f1cad3e67e355255d78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestAmountAccrued\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimestampAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"_syntheticToken\",\"type\":\"address\"}],\"name\":\"setSyntheticToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syntheticToken\",\"outputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accrueInterest()\":{\"returns\":{\"_interestAmountAccrued\":\"The total amount of debt tokens accrued\"}},\"burn(address,uint256)\":{\"params\":{\"_amount\":\"The amount to burn\",\"_from\":\"The account to burn from\"}},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"The amount to mint\",\"_to\":\"The account to mint to\"}},\"setController(address)\":{\"params\":{\"_controller\":\"The new Controller contract\"}},\"sweep(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to send\",\"_to\":\"The recipient of the transfer\",\"_token\":\"The token to transfer\"}},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"}},\"title\":\"Non-transferable token that represents users' debts\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accrueInterest()\":{\"notice\":\"Accrue interest over debt supply\"},\"balanceOf(address)\":{\"notice\":\"Get the updated (principal + interest) user's debt\"},\"burn(address,uint256)\":{\"notice\":\"Burn debt token\"},\"controller()\":{\"notice\":\"Controller contract\"},\"debtIndex()\":{\"notice\":\"Accumulator of the total earned interest rate since the beginning\"},\"lastTimestampAccrued()\":{\"notice\":\"The timestamp when interest accrual was calculated for the last time\"},\"mint(address,uint256)\":{\"notice\":\"Mint debt token\"},\"setController(address)\":{\"notice\":\"Update Controller contract\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DebtToken.sol\":\"DebtToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/DebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./access/Manageable.sol\\\";\\nimport \\\"./storage/DebtTokenStorage.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\n\\n/**\\n * @title Non-transferable token that represents users' debts\\n */\\ncontract DebtToken is Manageable, DebtTokenStorageV1 {\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    /**\\n     * @dev Throws if caller isn't authorized\\n     */\\n    modifier onlyIfAuthorized() {\\n        require(_msgSender() == address(controller) || _msgSender() == address(syntheticToken), \\\"not-authorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if the caller isn't the synthetic token\\n     */\\n    modifier onlyIfSyntheticToken() {\\n        require(_msgSender() == address(syntheticToken), \\\"not-synthetic-token\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update reward contracts' states\\n     * @dev Should be called before balance changes (i.e. mint/burn)\\n     */\\n    modifier updateRewardsBeforeMintOrBurn(address _account) {\\n        IRewardsDistributor[] memory _rewardsDistributors = controller.getRewardsDistributors();\\n        uint256 _length = _rewardsDistributors.length;\\n        for (uint256 i; i < _length; i++) {\\n            _rewardsDistributors[i].updateBeforeMintOrBurn(syntheticToken, _account);\\n        }\\n        _;\\n    }\\n\\n    function initialize(\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 _decimals,\\n        IController _controller\\n    ) public initializer {\\n        require(address(_controller) != address(0), \\\"controller-address-is-zero\\\");\\n\\n        __Manageable_init();\\n\\n        controller = _controller;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        lastTimestampAccrued = block.timestamp;\\n        debtIndex = 1e18;\\n    }\\n\\n    function setSyntheticToken(ISyntheticToken _syntheticToken) external onlyGovernor {\\n        require(address(_syntheticToken) != address(0), \\\"synthetic-is-null\\\");\\n        require(address(syntheticToken) == address(0), \\\"synthetic-already-assigned\\\");\\n        require(_syntheticToken.debtToken() == this, \\\"invalid-synthetic-debt-token\\\");\\n        require(decimals == _syntheticToken.decimals(), \\\"invalid-synthetic-decimals\\\");\\n        syntheticToken = _syntheticToken;\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        (uint256 _interestAmountAccrued, , ) = _calculateInterestAccrual();\\n\\n        return totalSupply_ + _interestAmountAccrued;\\n    }\\n\\n    /**\\n     * @notice Get the updated (principal + interest) user's debt\\n     */\\n    function balanceOf(address _account) public view override returns (uint256) {\\n        if (principalOf[_account] == 0) {\\n            return 0;\\n        }\\n\\n        (, uint256 _debtIndex, ) = _calculateInterestAccrual();\\n\\n        // Note: The `debtIndex / debtIndexOf` gives the interest to apply to the principal amount\\n        return (principalOf[_account] * _debtIndex) / debtIndexOf[_account];\\n    }\\n\\n    function transfer(\\n        address, /*recipient*/\\n        uint256 /*amount*/\\n    ) external pure override returns (bool) {\\n        revert(\\\"transfer-not-supported\\\");\\n    }\\n\\n    function allowance(\\n        address, /*owner*/\\n        address /*spender*/\\n    ) external pure override returns (uint256) {\\n        revert(\\\"allowance-not-supported\\\");\\n    }\\n\\n    function approve(\\n        address, /*spender*/\\n        uint256 /*amount*/\\n    ) external pure override returns (bool) {\\n        revert(\\\"approval-not-supported\\\");\\n    }\\n\\n    function transferFrom(\\n        address, /*sender*/\\n        address, /*recipient*/\\n        uint256 /*amount*/\\n    ) external pure override returns (bool) {\\n        revert(\\\"transfer-not-supported\\\");\\n    }\\n\\n    function increaseAllowance(\\n        address, /*spender*/\\n        uint256 /*addedValue*/\\n    ) external pure returns (bool) {\\n        revert(\\\"allowance-not-supported\\\");\\n    }\\n\\n    function decreaseAllowance(\\n        address, /*spender*/\\n        uint256 /*subtractedValue*/\\n    ) external pure returns (bool) {\\n        revert(\\\"allowance-not-supported\\\");\\n    }\\n\\n    function _mint(address _account, uint256 _amount) private updateRewardsBeforeMintOrBurn(_account) {\\n        require(_account != address(0), \\\"mint-to-the-zero-address\\\");\\n\\n        uint256 _accountBalance = balanceOf(_account);\\n\\n        totalSupply_ += _amount;\\n        principalOf[_account] += _amount;\\n        debtIndexOf[_account] = debtIndex;\\n        emit Transfer(address(0), _account, _amount);\\n\\n        _addToDebtTokensOfRecipientIfNeeded(_account, _accountBalance);\\n    }\\n\\n    function _burn(address _account, uint256 _amount) private updateRewardsBeforeMintOrBurn(_account) {\\n        require(_account != address(0), \\\"burn-from-the-zero-address\\\");\\n\\n        uint256 accountBalance = balanceOf(_account);\\n        require(accountBalance >= _amount, \\\"burn-amount-exceeds-balance\\\");\\n\\n        unchecked {\\n            principalOf[_account] = accountBalance - _amount;\\n            debtIndexOf[_account] = debtIndex;\\n\\n            totalSupply_ -= _amount;\\n        }\\n\\n        emit Transfer(_account, address(0), _amount);\\n\\n        _removeFromDebtTokensOfSenderIfNeeded(_account, balanceOf(_account));\\n    }\\n\\n    function _addToDebtTokensOfRecipientIfNeeded(address _recipient, uint256 _recipientBalanceBefore) private {\\n        if (_recipientBalanceBefore == 0) {\\n            controller.addToDebtTokensOfAccount(_recipient);\\n        }\\n    }\\n\\n    function _removeFromDebtTokensOfSenderIfNeeded(address _sender, uint256 _senderBalanceAfter) private {\\n        if (_senderBalanceAfter == 0) {\\n            controller.removeFromDebtTokensOfAccount(_sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Mint debt token\\n     * @param _to The account to mint to\\n     * @param _amount The amount to mint\\n     */\\n    function mint(address _to, uint256 _amount) external override onlyIfSyntheticToken {\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn debt token\\n     * @param _from The account to burn from\\n     * @param _amount The amount to burn\\n     */\\n    function burn(address _from, uint256 _amount) external override onlyIfAuthorized {\\n        _burn(_from, _amount);\\n    }\\n\\n    /**\\n     * @notice Calculate interest to accrue\\n     * @dev This util function avoids code duplication across `balanceOf` and `accrueInterest`\\n     * @return _interestAmountAccrued The total amount of debt tokens accrued\\n     * @return _debtIndex The new `debtIndex` value\\n     * @return _currentTimestamp The current block timestamp\\n     */\\n\\n    function _calculateInterestAccrual()\\n        private\\n        view\\n        returns (\\n            uint256 _interestAmountAccrued,\\n            uint256 _debtIndex,\\n            uint256 _currentTimestamp\\n        )\\n    {\\n        _currentTimestamp = block.timestamp;\\n\\n        if (lastTimestampAccrued == _currentTimestamp) {\\n            return (0, debtIndex, _currentTimestamp);\\n        }\\n\\n        uint256 _interestRateToAccrue = syntheticToken.interestRatePerSecond() *\\n            (_currentTimestamp - lastTimestampAccrued);\\n\\n        _interestAmountAccrued = _interestRateToAccrue.wadMul(totalSupply_);\\n\\n        _debtIndex = debtIndex + _interestRateToAccrue.wadMul(debtIndex);\\n    }\\n\\n    /**\\n     * @notice Accrue interest over debt supply\\n     * @return _interestAmountAccrued The total amount of debt tokens accrued\\n     */\\n    function accrueInterest() external override onlyIfSyntheticToken returns (uint256 _interestAmountAccrued) {\\n        uint256 _debtIndex;\\n        uint256 _currentTimestamp;\\n\\n        (_interestAmountAccrued, _debtIndex, _currentTimestamp) = _calculateInterestAccrual();\\n\\n        if (_currentTimestamp == lastTimestampAccrued) {\\n            return 0;\\n        }\\n\\n        totalSupply_ += _interestAmountAccrued;\\n        debtIndex = _debtIndex;\\n        lastTimestampAccrued = _currentTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x2154544ed8b54b8f6e8e04ae5dd1448e2c66b164664bd7cb5e1560e323dda6a2\",\"license\":\"MIT\"},\"contracts/access/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/TokenHolder.sol\\\";\\nimport \\\"../interface/IGovernable.sol\\\";\\nimport \\\"../interface/IController.sol\\\";\\n\\n/**\\n * @title Reusable contract that handles accesses\\n */\\nabstract contract Manageable is Context, TokenHolder, Initializable {\\n    /**\\n     * @notice Controller contract\\n     */\\n    IController public controller;\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Manageable_init() internal initializer {}\\n\\n    /**\\n     * @notice Requires that the caller is the Controller contract\\n     */\\n    modifier onlyController() {\\n        require(_msgSender() == address(controller), \\\"not-controller\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Requires that the caller is the Controller contract\\n     */\\n    modifier onlyGovernor() {\\n        require(_msgSender() == governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!controller.paused(), \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotShutdown() {\\n        require(!controller.everythingStopped(), \\\"not-shutdown\\\");\\n        _;\\n    }\\n\\n    function governor() public view returns (address _governor) {\\n        _governor = IGovernable(address(controller)).governor();\\n    }\\n\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    /**\\n     * @notice Update Controller contract\\n     * @param _controller The new Controller contract\\n     */\\n    function setController(IController _controller) external onlyGovernor {\\n        require(address(_controller) != address(0), \\\"new-controller-address-is-zero\\\");\\n        controller = _controller;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4c5748261dc442194c4de6d8039648df01ecc0689f233a319e4f0a4c48532038\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/interface/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./oracle/IMasterOracle.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\n\\n/**\\n * @notice Controller interface\\n */\\ninterface IController is IPausable {\\n    function debtFloorInUsd() external returns (uint256);\\n\\n    function depositFee() external returns (uint256);\\n\\n    function issueFee() external returns (uint256);\\n\\n    function withdrawFee() external returns (uint256);\\n\\n    function repayFee() external returns (uint256);\\n\\n    function isSyntheticTokenExists(ISyntheticToken _syntheticToken) external view returns (bool);\\n\\n    function isDepositTokenExists(IDepositToken _depositToken) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 _underlying) external view returns (IDepositToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getSyntheticTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n\\n    function debtOf(address _account) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address _account) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(address _account)\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function addSyntheticToken(address _synthetic) external;\\n\\n    function removeSyntheticToken(ISyntheticToken _synthetic) external;\\n\\n    function addDepositToken(address _depositToken) external;\\n\\n    function removeDepositToken(IDepositToken _depositToken) external;\\n\\n    function liquidate(\\n        ISyntheticToken _syntheticToken,\\n        address _account,\\n        uint256 _amountToRepay,\\n        IDepositToken _depositToken\\n    ) external;\\n\\n    function swap(\\n        ISyntheticToken _syntheticTokenIn,\\n        ISyntheticToken _syntheticTokenOut,\\n        uint256 _amountIn\\n    ) external returns (uint256 _amountOut);\\n\\n    function updateMasterOracle(IMasterOracle _newOracle) external;\\n\\n    function updateDebtFloor(uint256 _newDebtFloorInUsd) external;\\n\\n    function updateDepositFee(uint256 _newDepositFee) external;\\n\\n    function updateIssueFee(uint256 _newIssueFee) external;\\n\\n    function updateWithdrawFee(uint256 _newWithdrawFee) external;\\n\\n    function updateRepayFee(uint256 _newRepayFee) external;\\n\\n    function updateSwapFee(uint256 _newSwapFee) external;\\n\\n    function updateLiquidatorLiquidationFee(uint256 _newLiquidatorLiquidationFee) external;\\n\\n    function updateProtocolLiquidationFee(uint256 _newProtocolLiquidationFee) external;\\n\\n    function updateMaxLiquidable(uint256 _newMaxLiquidable) external;\\n\\n    function updateTreasury(ITreasury _newTreasury, bool _withMigration) external;\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function addToDepositTokensOfAccount(address _account) external;\\n\\n    function removeFromDepositTokensOfAccount(address _account) external;\\n\\n    function addToDebtTokensOfAccount(address _account) external;\\n\\n    function removeFromDebtTokensOfAccount(address _account) external;\\n\\n    function getDepositTokensOfAccount(address _account) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address _account) external view returns (address[] memory);\\n\\n    function addRewardsDistributor(IRewardsDistributor _distributor) external;\\n}\\n\",\"keccak256\":\"0x312e1166c4aea80d5c402933d1828167bff1abd4836b70375a79956c4ef771dd\",\"license\":\"MIT\"},\"contracts/interface/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external returns (uint256 _interestAmountAccrued);\\n\\n    function debtIndex() external returns (uint256 _debtIndex);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x52995b704e1b38d0df3b312386c8ab25bbb63a3fd404dd53882cc8c6640fcd40\",\"license\":\"MIT\"},\"contracts/interface/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralizationRatio() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address _account) external view returns (uint256);\\n\\n    function lockedBalanceOf(address _account) external view returns (uint256);\\n\\n    function minDepositTime() external view returns (uint256);\\n\\n    function lastDepositOf(address _account) external view returns (uint256);\\n\\n    function deposit(uint256 _amount, address _onBehalfOf) external;\\n\\n    function withdraw(uint256 _amount, address _to) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function seize(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function updateCollateralizationRatio(uint128 _newCollateralizationRatio) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupplyInUsd() external view returns (uint256);\\n\\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupplyInUsd) external;\\n}\\n\",\"keccak256\":\"0x407a65fba2b513ae968e2a9df7338d619bf536cae66d2a0d8cc5cd013028390f\",\"license\":\"MIT\"},\"contracts/interface/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interface/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPausable {\\n    function paused() external returns (bool);\\n\\n    function everythingStopped() external returns (bool);\\n}\\n\",\"keccak256\":\"0x08d873c08ae95c72f876f933478433bc30eb733925944e04969083ce12fce855\",\"license\":\"MIT\"},\"contracts/interface/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 _token) external view returns (uint256);\\n\\n    function tokensAccruedOf(address _account) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 _token, address _account) external;\\n\\n    function updateBeforeTransfer(\\n        IERC20 _token,\\n        address _from,\\n        address _to\\n    ) external;\\n\\n    function claimRewards(address _account) external;\\n\\n    function claimRewards(address _account, IERC20[] memory _tokens) external;\\n\\n    function claimRewards(address[] memory _accounts, IERC20[] memory _tokens) external;\\n}\\n\",\"keccak256\":\"0x95f3e703f532261a857d6b3734d240cc625ce6a18a9e5bd4f40e41f72996c530\",\"license\":\"MIT\"},\"contracts/interface/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function maxTotalSupplyInUsd() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function mint(address _to, uint256 amount) external;\\n\\n    function burn(address _from, uint256 amount) external;\\n\\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupply) external;\\n\\n    function toggleIsActive() external;\\n\\n    function updateInterestRate(uint256 _newInterestRate) external;\\n\\n    function issue(uint256 _amount, address _to) external;\\n\\n    function repay(address _onBehalfOf, uint256 _amount) external;\\n\\n    function accrueInterest() external;\\n}\\n\",\"keccak256\":\"0xe8cad6047ced36a24abe7246849b2a787e8586d4312569d1f15997c898ea320a\",\"license\":\"MIT\"},\"contracts/interface/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address _to, uint256 _amount) external;\\n\\n    function migrateTo(address _newTreasury) external;\\n}\\n\",\"keccak256\":\"0x06e75dc8161f246f43a22c1167cdc22b9eee6bc59ad378d813278a5fe95b5c42\",\"license\":\"MIT\"},\"contracts/interface/oracle/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(IERC20 _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(IERC20 _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(\\n        IERC20 _assetIn,\\n        IERC20 _assetOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xf250e3b49704c620bbe6e5fd8cf2f82f52adc6c25cd4baac6be669165b86b8ff\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     */\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_RAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     */\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * RAY + b / 2) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     */\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        return ((WAD_RAY_RATIO / 2) + a) / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     */\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a * WAD_RAY_RATIO;\\n    }\\n}\\n\",\"keccak256\":\"0xe338023e9d06145105bf9676436029c27551454b11b67cbc4188df9a270b51af\",\"license\":\"MIT\"},\"contracts/storage/DebtTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interface/IDebtToken.sol\\\";\\n\\nabstract contract DebtTokenStorageV1 is IDebtToken {\\n    /**\\n     * @notice The total amount of minted tokens\\n     * @dev This value changes within the mint and burn operations\\n     */\\n    mapping(address => uint256) internal principalOf;\\n\\n    /**\\n     * @notice The `debtIndex` \\\"snapshot\\\" of the account's latest `principalOf` update (i.e. mint/burn)\\n     */\\n    mapping(address => uint256) internal debtIndexOf;\\n\\n    uint256 internal totalSupply_;\\n    uint8 public decimals;\\n    string public name;\\n    string public symbol;\\n\\n    ISyntheticToken public syntheticToken;\\n\\n    /**\\n     * @notice The timestamp when interest accrual was calculated for the last time\\n     */\\n    uint256 public lastTimestampAccrued;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the beginning\\n     */\\n    uint256 public override debtIndex;\\n}\\n\",\"keccak256\":\"0xdd4e9c5f89b39e7259a5d9be3ac6ddd2c40a5cbeb5e47bf1e939175114c924b6\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     */\\n    function _requireCanSweep() internal view virtual;\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param _token The token to transfer\\n     * @param _to The recipient of the transfer\\n     * @param _amount The amount to send\\n     */\\n    function sweep(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _amount\\n    ) external {\\n        _requireCanSweep();\\n\\n        if (address(_token) == address(0)) {\\n            Address.sendValue(payable(_to), _amount);\\n        } else {\\n            _token.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert(\\\"receive-not-allowed\\\");\\n    }\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert(\\\"fallback-not-allowed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x45fed62204599ac0c9bed76de4ce8b6b070d96d548e029ce1f9f2d0c7c87a99d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e56806100206000396000f3fe60806040526004361061014f5760003560e01c80638230ecd6116100b6578063a9059cbb1161006f578063a9059cbb14610404578063bb8c631f1461041f578063dd62ed3e14610435578063de7ea79d14610450578063f77c479114610470578063ffa1ad741461049657610197565b80638230ecd61461037a57806392eefe9b1461039a57806395d89b41146103ba5780639dc29fac146103cf578063a457c2d7146102e4578063a6afed95146103ef57610197565b8063313ce56711610108578063313ce567146102b857806339509351146102e457806340c10f1914610304578063565f3d4f1461032457806362c067671461033a57806370a082311461035a57610197565b806306fdde03146101d6578063095ea7b3146102015780630c340a241461023157806318160ddd1461025357806320b74e731461027657806323b872dd1461029857610197565b366101975760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b604482015260640161018e565b3480156101e257600080fd5b506101eb6104c7565b6040516101f89190611905565b60405180910390f35b34801561020d57600080fd5b5061022161021c36600461194d565b610555565b60405190151581526020016101f8565b34801561023d57600080fd5b50610246610599565b6040516101f89190611979565b34801561025f57600080fd5b50610268610625565b6040519081526020016101f8565b34801561028257600080fd5b5061029661029136600461198d565b610648565b005b3480156102a457600080fd5b506102216102b33660046119aa565b6108de565b3480156102c457600080fd5b506035546102d29060ff1681565b60405160ff90911681526020016101f8565b3480156102f057600080fd5b506102216102ff36600461194d565b610922565b34801561031057600080fd5b5061029661031f36600461194d565b610967565b34801561033057600080fd5b5061026860395481565b34801561034657600080fd5b506102966103553660046119aa565b6109a8565b34801561036657600080fd5b5061026861037536600461198d565b6109e1565b34801561038657600080fd5b50603854610246906001600160a01b031681565b3480156103a657600080fd5b506102966103b536600461198d565b610a57565b3480156103c657600080fd5b506101eb610b0f565b3480156103db57600080fd5b506102966103ea36600461194d565b610b1c565b3480156103fb57600080fd5b50610268610b9e565b34801561041057600080fd5b506102216102b336600461194d565b34801561042b57600080fd5b50610268603a5481565b34801561044157600080fd5b506102686102ff3660046119eb565b34801561045c57600080fd5b5061029661046b366004611a7c565b610c1d565b34801561047c57600080fd5b50600054610246906201000090046001600160a01b031681565b3480156104a257600080fd5b506101eb604051806040016040528060058152602001640312e302e360dc1b81525081565b603680546104d490611b11565b80601f016020809104026020016040519081016040528092919081815260200182805461050090611b11565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b505050505081565b60405162461bcd60e51b8152602060048201526016602482015275185c1c1c9bdd985b0b5b9bdd0b5cdd5c1c1bdc9d195960521b604482015260009060640161018e565b60008060029054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105e857600080fd5b505afa1580156105fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106209190611b4c565b905090565b600080610630610d48565b50509050806034546106429190611b7f565b91505090565b610650610599565b6001600160a01b0316336001600160a01b0316146106805760405162461bcd60e51b815260040161018e90611b97565b6001600160a01b0381166106ca5760405162461bcd60e51b81526020600482015260116024820152701cde5b9d1a195d1a58cb5a5ccb5b9d5b1b607a1b604482015260640161018e565b6038546001600160a01b0316156107235760405162461bcd60e51b815260206004820152601a60248201527f73796e7468657469632d616c72656164792d61737369676e6564000000000000604482015260640161018e565b306001600160a01b0316816001600160a01b031663f8d898986040518163ffffffff1660e01b815260040160206040518083038186803b15801561076657600080fd5b505afa15801561077a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079e9190611b4c565b6001600160a01b0316146107f45760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642d73796e7468657469632d646562742d746f6b656e00000000604482015260640161018e565b806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561082d57600080fd5b505afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108659190611bbd565b60355460ff9081169116146108bc5760405162461bcd60e51b815260206004820152601a60248201527f696e76616c69642d73796e7468657469632d646563696d616c73000000000000604482015260640161018e565b603880546001600160a01b0319166001600160a01b0392909216919091179055565b60405162461bcd60e51b81526020600482015260166024820152751d1c985b9cd9995c8b5b9bdd0b5cdd5c1c1bdc9d195960521b604482015260009060640161018e565b60405162461bcd60e51b8152602060048201526017602482015276185b1b1bddd85b98d94b5b9bdd0b5cdd5c1c1bdc9d1959604a1b604482015260009060640161018e565b6038546001600160a01b0316336001600160a01b03161461099a5760405162461bcd60e51b815260040161018e90611bda565b6109a48282610e4b565b5050565b6109b061108d565b6001600160a01b0383166109cd576109c882826110c7565b505050565b6109c86001600160a01b03841683836111e0565b6001600160a01b038116600090815260326020526040812054610a0657506000919050565b6000610a10610d48565b506001600160a01b0385166000908152603360209081526040808320546032909252909120549193509150610a46908390611c07565b610a509190611c26565b9392505050565b610a5f610599565b6001600160a01b0316336001600160a01b031614610a8f5760405162461bcd60e51b815260040161018e90611b97565b6001600160a01b038116610ae55760405162461bcd60e51b815260206004820152601e60248201527f6e65772d636f6e74726f6c6c65722d616464726573732d69732d7a65726f0000604482015260640161018e565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b603780546104d490611b11565b6000546201000090046001600160a01b0316336001600160a01b03161480610b5757506038546001600160a01b0316336001600160a01b0316145b610b945760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd0b585d5d1a1bdc9a5e995960921b604482015260640161018e565b6109a48282611232565b6038546000906001600160a01b0316336001600160a01b031614610bd45760405162461bcd60e51b815260040161018e90611bda565b600080610bdf610d48565b6039549295509093509150811415610bfa5760009250505090565b8260346000828254610c0c9190611b7f565b9091555050603a9190915560395590565b600054610100900460ff1680610c36575060005460ff16155b610c525760405162461bcd60e51b815260040161018e90611c48565b600054610100900460ff16158015610c74576000805461ffff19166101011790555b6001600160a01b038216610cca5760405162461bcd60e51b815260206004820152601a60248201527f636f6e74726f6c6c65722d616464726573732d69732d7a65726f000000000000604482015260640161018e565b610cd261148f565b6000805462010000600160b01b031916620100006001600160a01b03851602179055610d006036888861183c565b50610d0d6037868661183c565b506035805460ff191660ff851617905542603955670de0b6b3a7640000603a558015610d3f576000805461ff00191690555b50505050505050565b6000806000429050806039541415610d68576000603a5492509250909192565b600060395482610d789190611c96565b603860009054906101000a90046001600160a01b03166001600160a01b0316639cc820da6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dc657600080fd5b505afa158015610dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfe9190611cad565b610e089190611c07565b9050610e1f603454826114fb90919063ffffffff16565b9350610e36603a54826114fb90919063ffffffff16565b603a54610e439190611b7f565b925050909192565b8160008060029054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610e9b57600080fd5b505afa158015610eaf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ed79190810190611cec565b805190915060005b81811015610f7c57828181518110610ef957610ef9611db1565b6020908102919091010151603854604051626cc3c360e61b81526001600160a01b0391821660048201528682166024820152911690631b30f0c090604401600060405180830381600087803b158015610f5157600080fd5b505af1158015610f65573d6000803e3d6000fd5b505050508080610f7490611dc7565b915050610edf565b506001600160a01b038516610fce5760405162461bcd60e51b81526020600482015260186024820152776d696e742d746f2d7468652d7a65726f2d6164647265737360401b604482015260640161018e565b6000610fd9866109e1565b90508460346000828254610fed9190611b7f565b90915550506001600160a01b0386166000908152603260205260408120805487929061101a908490611b7f565b9091555050603a546001600160a01b0387166000818152603360205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110739089815260200190565b60405180910390a36110858682611550565b505050505050565b611095610599565b6001600160a01b0316336001600160a01b0316146110c55760405162461bcd60e51b815260040161018e90611b97565b565b804710156111175760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161018e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611164576040519150601f19603f3d011682016040523d82523d6000602084013e611169565b606091505b50509050806109c85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161018e565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109c89084906115b8565b8160008060029054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112be9190810190611cec565b805190915060005b81811015611363578281815181106112e0576112e0611db1565b6020908102919091010151603854604051626cc3c360e61b81526001600160a01b0391821660048201528682166024820152911690631b30f0c090604401600060405180830381600087803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b50505050808061135b90611dc7565b9150506112c6565b506001600160a01b0385166113ba5760405162461bcd60e51b815260206004820152601a60248201527f6275726e2d66726f6d2d7468652d7a65726f2d61646472657373000000000000604482015260640161018e565b60006113c5866109e1565b9050848110156114175760405162461bcd60e51b815260206004820152601b60248201527f6275726e2d616d6f756e742d657863656564732d62616c616e63650000000000604482015260640161018e565b6001600160a01b03861660008181526032602090815260408083208986039055603a546033835281842055603480548a90039055518881529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36110858661148a886109e1565b61168a565b600054610100900460ff16806114a8575060005460ff16155b6114c45760405162461bcd60e51b815260040161018e90611c48565b600054610100900460ff161580156114e6576000805461ffff19166101011790555b80156114f8576000805461ff00191690555b50565b6000821580611508575081155b156115155750600061154a565b670de0b6b3a7640000611529600282611c26565b6115338486611c07565b61153d9190611b7f565b6115479190611c26565b90505b92915050565b806109a457600054604051631dc2da6d60e21b8152620100009091046001600160a01b03169063770b69b49061158a908590600401611979565b600060405180830381600087803b1580156115a457600080fd5b505af1158015611085573d6000803e3d6000fd5b600061160d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116c49092919063ffffffff16565b8051909150156109c8578080602001905181019061162b9190611de2565b6109c85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161018e565b806109a457600054604051631d71be3b60e21b8152620100009091046001600160a01b0316906375c6f8ec9061158a908590600401611979565b60606116d384846000856116db565b949350505050565b60608247101561173c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161018e565b843b61178a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161018e565b600080866001600160a01b031685876040516117a69190611e04565b60006040518083038185875af1925050503d80600081146117e3576040519150601f19603f3d011682016040523d82523d6000602084013e6117e8565b606091505b50915091506117f8828286611803565b979650505050505050565b60608315611812575081610a50565b8251156118225782518084602001fd5b8160405162461bcd60e51b815260040161018e9190611905565b82805461184890611b11565b90600052602060002090601f01602090048101928261186a57600085556118b0565b82601f106118835782800160ff198235161785556118b0565b828001600101855582156118b0579182015b828111156118b0578235825591602001919060010190611895565b506118bc9291506118c0565b5090565b5b808211156118bc57600081556001016118c1565b60005b838110156118f05781810151838201526020016118d8565b838111156118ff576000848401525b50505050565b60208152600082518060208401526119248160408501602087016118d5565b601f01601f19169190910160400192915050565b6001600160a01b03811681146114f857600080fd5b6000806040838503121561196057600080fd5b823561196b81611938565b946020939093013593505050565b6001600160a01b0391909116815260200190565b60006020828403121561199f57600080fd5b8135610a5081611938565b6000806000606084860312156119bf57600080fd5b83356119ca81611938565b925060208401356119da81611938565b929592945050506040919091013590565b600080604083850312156119fe57600080fd5b8235611a0981611938565b91506020830135611a1981611938565b809150509250929050565b60008083601f840112611a3657600080fd5b50813567ffffffffffffffff811115611a4e57600080fd5b602083019150836020828501011115611a6657600080fd5b9250929050565b60ff811681146114f857600080fd5b60008060008060008060808789031215611a9557600080fd5b863567ffffffffffffffff80821115611aad57600080fd5b611ab98a838b01611a24565b90985096506020890135915080821115611ad257600080fd5b50611adf89828a01611a24565b9095509350506040870135611af381611a6d565b91506060870135611b0381611938565b809150509295509295509295565b600181811c90821680611b2557607f821691505b60208210811415611b4657634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611b5e57600080fd5b8151610a5081611938565b634e487b7160e01b600052601160045260246000fd5b60008219821115611b9257611b92611b69565b500190565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b600060208284031215611bcf57600080fd5b8151610a5081611a6d565b6020808252601390820152723737ba16b9bcb73a3432ba34b196ba37b5b2b760691b604082015260600190565b6000816000190483118215151615611c2157611c21611b69565b500290565b600082611c4357634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082821015611ca857611ca8611b69565b500390565b600060208284031215611cbf57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b8051611ce781611938565b919050565b60006020808385031215611cff57600080fd5b825167ffffffffffffffff80821115611d1757600080fd5b818501915085601f830112611d2b57600080fd5b815181811115611d3d57611d3d611cc6565b8060051b604051601f19603f83011681018181108582111715611d6257611d62611cc6565b604052918252848201925083810185019188831115611d8057600080fd5b938501935b82851015611da557611d9685611cdc565b84529385019392850192611d85565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611ddb57611ddb611b69565b5060010190565b600060208284031215611df457600080fd5b81518015158114610a5057600080fd5b60008251611e168184602087016118d5565b919091019291505056fea2646970667358221220a693a8b505d88df9bf9bbf7001801109fd0d33c93d54820357d74778f00c525764736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061014f5760003560e01c80638230ecd6116100b6578063a9059cbb1161006f578063a9059cbb14610404578063bb8c631f1461041f578063dd62ed3e14610435578063de7ea79d14610450578063f77c479114610470578063ffa1ad741461049657610197565b80638230ecd61461037a57806392eefe9b1461039a57806395d89b41146103ba5780639dc29fac146103cf578063a457c2d7146102e4578063a6afed95146103ef57610197565b8063313ce56711610108578063313ce567146102b857806339509351146102e457806340c10f1914610304578063565f3d4f1461032457806362c067671461033a57806370a082311461035a57610197565b806306fdde03146101d6578063095ea7b3146102015780630c340a241461023157806318160ddd1461025357806320b74e731461027657806323b872dd1461029857610197565b366101975760405162461bcd60e51b81526020600482015260136024820152721c9958d95a5d994b5b9bdd0b585b1b1bddd959606a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601460248201527319985b1b189858dacb5b9bdd0b585b1b1bddd95960621b604482015260640161018e565b3480156101e257600080fd5b506101eb6104c7565b6040516101f89190611905565b60405180910390f35b34801561020d57600080fd5b5061022161021c36600461194d565b610555565b60405190151581526020016101f8565b34801561023d57600080fd5b50610246610599565b6040516101f89190611979565b34801561025f57600080fd5b50610268610625565b6040519081526020016101f8565b34801561028257600080fd5b5061029661029136600461198d565b610648565b005b3480156102a457600080fd5b506102216102b33660046119aa565b6108de565b3480156102c457600080fd5b506035546102d29060ff1681565b60405160ff90911681526020016101f8565b3480156102f057600080fd5b506102216102ff36600461194d565b610922565b34801561031057600080fd5b5061029661031f36600461194d565b610967565b34801561033057600080fd5b5061026860395481565b34801561034657600080fd5b506102966103553660046119aa565b6109a8565b34801561036657600080fd5b5061026861037536600461198d565b6109e1565b34801561038657600080fd5b50603854610246906001600160a01b031681565b3480156103a657600080fd5b506102966103b536600461198d565b610a57565b3480156103c657600080fd5b506101eb610b0f565b3480156103db57600080fd5b506102966103ea36600461194d565b610b1c565b3480156103fb57600080fd5b50610268610b9e565b34801561041057600080fd5b506102216102b336600461194d565b34801561042b57600080fd5b50610268603a5481565b34801561044157600080fd5b506102686102ff3660046119eb565b34801561045c57600080fd5b5061029661046b366004611a7c565b610c1d565b34801561047c57600080fd5b50600054610246906201000090046001600160a01b031681565b3480156104a257600080fd5b506101eb604051806040016040528060058152602001640312e302e360dc1b81525081565b603680546104d490611b11565b80601f016020809104026020016040519081016040528092919081815260200182805461050090611b11565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b505050505081565b60405162461bcd60e51b8152602060048201526016602482015275185c1c1c9bdd985b0b5b9bdd0b5cdd5c1c1bdc9d195960521b604482015260009060640161018e565b60008060029054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105e857600080fd5b505afa1580156105fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106209190611b4c565b905090565b600080610630610d48565b50509050806034546106429190611b7f565b91505090565b610650610599565b6001600160a01b0316336001600160a01b0316146106805760405162461bcd60e51b815260040161018e90611b97565b6001600160a01b0381166106ca5760405162461bcd60e51b81526020600482015260116024820152701cde5b9d1a195d1a58cb5a5ccb5b9d5b1b607a1b604482015260640161018e565b6038546001600160a01b0316156107235760405162461bcd60e51b815260206004820152601a60248201527f73796e7468657469632d616c72656164792d61737369676e6564000000000000604482015260640161018e565b306001600160a01b0316816001600160a01b031663f8d898986040518163ffffffff1660e01b815260040160206040518083038186803b15801561076657600080fd5b505afa15801561077a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079e9190611b4c565b6001600160a01b0316146107f45760405162461bcd60e51b815260206004820152601c60248201527f696e76616c69642d73796e7468657469632d646562742d746f6b656e00000000604482015260640161018e565b806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561082d57600080fd5b505afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108659190611bbd565b60355460ff9081169116146108bc5760405162461bcd60e51b815260206004820152601a60248201527f696e76616c69642d73796e7468657469632d646563696d616c73000000000000604482015260640161018e565b603880546001600160a01b0319166001600160a01b0392909216919091179055565b60405162461bcd60e51b81526020600482015260166024820152751d1c985b9cd9995c8b5b9bdd0b5cdd5c1c1bdc9d195960521b604482015260009060640161018e565b60405162461bcd60e51b8152602060048201526017602482015276185b1b1bddd85b98d94b5b9bdd0b5cdd5c1c1bdc9d1959604a1b604482015260009060640161018e565b6038546001600160a01b0316336001600160a01b03161461099a5760405162461bcd60e51b815260040161018e90611bda565b6109a48282610e4b565b5050565b6109b061108d565b6001600160a01b0383166109cd576109c882826110c7565b505050565b6109c86001600160a01b03841683836111e0565b6001600160a01b038116600090815260326020526040812054610a0657506000919050565b6000610a10610d48565b506001600160a01b0385166000908152603360209081526040808320546032909252909120549193509150610a46908390611c07565b610a509190611c26565b9392505050565b610a5f610599565b6001600160a01b0316336001600160a01b031614610a8f5760405162461bcd60e51b815260040161018e90611b97565b6001600160a01b038116610ae55760405162461bcd60e51b815260206004820152601e60248201527f6e65772d636f6e74726f6c6c65722d616464726573732d69732d7a65726f0000604482015260640161018e565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b603780546104d490611b11565b6000546201000090046001600160a01b0316336001600160a01b03161480610b5757506038546001600160a01b0316336001600160a01b0316145b610b945760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd0b585d5d1a1bdc9a5e995960921b604482015260640161018e565b6109a48282611232565b6038546000906001600160a01b0316336001600160a01b031614610bd45760405162461bcd60e51b815260040161018e90611bda565b600080610bdf610d48565b6039549295509093509150811415610bfa5760009250505090565b8260346000828254610c0c9190611b7f565b9091555050603a9190915560395590565b600054610100900460ff1680610c36575060005460ff16155b610c525760405162461bcd60e51b815260040161018e90611c48565b600054610100900460ff16158015610c74576000805461ffff19166101011790555b6001600160a01b038216610cca5760405162461bcd60e51b815260206004820152601a60248201527f636f6e74726f6c6c65722d616464726573732d69732d7a65726f000000000000604482015260640161018e565b610cd261148f565b6000805462010000600160b01b031916620100006001600160a01b03851602179055610d006036888861183c565b50610d0d6037868661183c565b506035805460ff191660ff851617905542603955670de0b6b3a7640000603a558015610d3f576000805461ff00191690555b50505050505050565b6000806000429050806039541415610d68576000603a5492509250909192565b600060395482610d789190611c96565b603860009054906101000a90046001600160a01b03166001600160a01b0316639cc820da6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dc657600080fd5b505afa158015610dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfe9190611cad565b610e089190611c07565b9050610e1f603454826114fb90919063ffffffff16565b9350610e36603a54826114fb90919063ffffffff16565b603a54610e439190611b7f565b925050909192565b8160008060029054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610e9b57600080fd5b505afa158015610eaf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ed79190810190611cec565b805190915060005b81811015610f7c57828181518110610ef957610ef9611db1565b6020908102919091010151603854604051626cc3c360e61b81526001600160a01b0391821660048201528682166024820152911690631b30f0c090604401600060405180830381600087803b158015610f5157600080fd5b505af1158015610f65573d6000803e3d6000fd5b505050508080610f7490611dc7565b915050610edf565b506001600160a01b038516610fce5760405162461bcd60e51b81526020600482015260186024820152776d696e742d746f2d7468652d7a65726f2d6164647265737360401b604482015260640161018e565b6000610fd9866109e1565b90508460346000828254610fed9190611b7f565b90915550506001600160a01b0386166000908152603260205260408120805487929061101a908490611b7f565b9091555050603a546001600160a01b0387166000818152603360205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110739089815260200190565b60405180910390a36110858682611550565b505050505050565b611095610599565b6001600160a01b0316336001600160a01b0316146110c55760405162461bcd60e51b815260040161018e90611b97565b565b804710156111175760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161018e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611164576040519150601f19603f3d011682016040523d82523d6000602084013e611169565b606091505b50509050806109c85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161018e565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109c89084906115b8565b8160008060029054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112be9190810190611cec565b805190915060005b81811015611363578281815181106112e0576112e0611db1565b6020908102919091010151603854604051626cc3c360e61b81526001600160a01b0391821660048201528682166024820152911690631b30f0c090604401600060405180830381600087803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b50505050808061135b90611dc7565b9150506112c6565b506001600160a01b0385166113ba5760405162461bcd60e51b815260206004820152601a60248201527f6275726e2d66726f6d2d7468652d7a65726f2d61646472657373000000000000604482015260640161018e565b60006113c5866109e1565b9050848110156114175760405162461bcd60e51b815260206004820152601b60248201527f6275726e2d616d6f756e742d657863656564732d62616c616e63650000000000604482015260640161018e565b6001600160a01b03861660008181526032602090815260408083208986039055603a546033835281842055603480548a90039055518881529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36110858661148a886109e1565b61168a565b600054610100900460ff16806114a8575060005460ff16155b6114c45760405162461bcd60e51b815260040161018e90611c48565b600054610100900460ff161580156114e6576000805461ffff19166101011790555b80156114f8576000805461ff00191690555b50565b6000821580611508575081155b156115155750600061154a565b670de0b6b3a7640000611529600282611c26565b6115338486611c07565b61153d9190611b7f565b6115479190611c26565b90505b92915050565b806109a457600054604051631dc2da6d60e21b8152620100009091046001600160a01b03169063770b69b49061158a908590600401611979565b600060405180830381600087803b1580156115a457600080fd5b505af1158015611085573d6000803e3d6000fd5b600061160d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116c49092919063ffffffff16565b8051909150156109c8578080602001905181019061162b9190611de2565b6109c85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161018e565b806109a457600054604051631d71be3b60e21b8152620100009091046001600160a01b0316906375c6f8ec9061158a908590600401611979565b60606116d384846000856116db565b949350505050565b60608247101561173c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161018e565b843b61178a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161018e565b600080866001600160a01b031685876040516117a69190611e04565b60006040518083038185875af1925050503d80600081146117e3576040519150601f19603f3d011682016040523d82523d6000602084013e6117e8565b606091505b50915091506117f8828286611803565b979650505050505050565b60608315611812575081610a50565b8251156118225782518084602001fd5b8160405162461bcd60e51b815260040161018e9190611905565b82805461184890611b11565b90600052602060002090601f01602090048101928261186a57600085556118b0565b82601f106118835782800160ff198235161785556118b0565b828001600101855582156118b0579182015b828111156118b0578235825591602001919060010190611895565b506118bc9291506118c0565b5090565b5b808211156118bc57600081556001016118c1565b60005b838110156118f05781810151838201526020016118d8565b838111156118ff576000848401525b50505050565b60208152600082518060208401526119248160408501602087016118d5565b601f01601f19169190910160400192915050565b6001600160a01b03811681146114f857600080fd5b6000806040838503121561196057600080fd5b823561196b81611938565b946020939093013593505050565b6001600160a01b0391909116815260200190565b60006020828403121561199f57600080fd5b8135610a5081611938565b6000806000606084860312156119bf57600080fd5b83356119ca81611938565b925060208401356119da81611938565b929592945050506040919091013590565b600080604083850312156119fe57600080fd5b8235611a0981611938565b91506020830135611a1981611938565b809150509250929050565b60008083601f840112611a3657600080fd5b50813567ffffffffffffffff811115611a4e57600080fd5b602083019150836020828501011115611a6657600080fd5b9250929050565b60ff811681146114f857600080fd5b60008060008060008060808789031215611a9557600080fd5b863567ffffffffffffffff80821115611aad57600080fd5b611ab98a838b01611a24565b90985096506020890135915080821115611ad257600080fd5b50611adf89828a01611a24565b9095509350506040870135611af381611a6d565b91506060870135611b0381611938565b809150509295509295509295565b600181811c90821680611b2557607f821691505b60208210811415611b4657634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611b5e57600080fd5b8151610a5081611938565b634e487b7160e01b600052601160045260246000fd5b60008219821115611b9257611b92611b69565b500190565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b600060208284031215611bcf57600080fd5b8151610a5081611a6d565b6020808252601390820152723737ba16b9bcb73a3432ba34b196ba37b5b2b760691b604082015260600190565b6000816000190483118215151615611c2157611c21611b69565b500290565b600082611c4357634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082821015611ca857611ca8611b69565b500390565b600060208284031215611cbf57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b8051611ce781611938565b919050565b60006020808385031215611cff57600080fd5b825167ffffffffffffffff80821115611d1757600080fd5b818501915085601f830112611d2b57600080fd5b815181811115611d3d57611d3d611cc6565b8060051b604051601f19603f83011681018181108582111715611d6257611d62611cc6565b604052918252848201925083810185019188831115611d8057600080fd5b938501935b82851015611da557611d9685611cdc565b84529385019392850192611d85565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611ddb57611ddb611b69565b5060010190565b600060208284031215611df457600080fd5b81518015158114610a5057600080fd5b60008251611e168184602087016118d5565b919091019291505056fea2646970667358221220a693a8b505d88df9bf9bbf7001801109fd0d33c93d54820357d74778f00c525764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accrueInterest()": {
        "returns": {
          "_interestAmountAccrued": "The total amount of debt tokens accrued"
        }
      },
      "burn(address,uint256)": {
        "params": {
          "_amount": "The amount to burn",
          "_from": "The account to burn from"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "The amount to mint",
          "_to": "The account to mint to"
        }
      },
      "setController(address)": {
        "params": {
          "_controller": "The new Controller contract"
        }
      },
      "sweep(address,address,uint256)": {
        "params": {
          "_amount": "The amount to send",
          "_to": "The recipient of the transfer",
          "_token": "The token to transfer"
        }
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      }
    },
    "title": "Non-transferable token that represents users' debts",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accrueInterest()": {
        "notice": "Accrue interest over debt supply"
      },
      "balanceOf(address)": {
        "notice": "Get the updated (principal + interest) user's debt"
      },
      "burn(address,uint256)": {
        "notice": "Burn debt token"
      },
      "controller()": {
        "notice": "Controller contract"
      },
      "debtIndex()": {
        "notice": "Accumulator of the total earned interest rate since the beginning"
      },
      "lastTimestampAccrued()": {
        "notice": "The timestamp when interest accrual was calculated for the last time"
      },
      "mint(address,uint256)": {
        "notice": "Mint debt token"
      },
      "setController(address)": {
        "notice": "Update Controller contract"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7131,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7134,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6095,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "controller",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IController)10815"
      },
      {
        "astId": 6210,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14533,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "principalOf",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14538,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "debtIndexOf",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14540,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "totalSupply_",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 14542,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "decimals",
        "offset": 0,
        "slot": "53",
        "type": "t_uint8"
      },
      {
        "astId": 14544,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 14546,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 14549,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "syntheticToken",
        "offset": 0,
        "slot": "56",
        "type": "t_contract(ISyntheticToken)11145"
      },
      {
        "astId": 14552,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "lastTimestampAccrued",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 14556,
        "contract": "contracts/DebtToken.sol:DebtToken",
        "label": "debtIndex",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IController)10815": {
        "encoding": "inplace",
        "label": "contract IController",
        "numberOfBytes": "20"
      },
      "t_contract(ISyntheticToken)11145": {
        "encoding": "inplace",
        "label": "contract ISyntheticToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}