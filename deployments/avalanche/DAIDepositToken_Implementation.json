{
  "address": "0xB2D749117A2cac266F54b65b5EEEEEaC4C217e3A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "CollateralDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCollateralizationRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateralizationRatio",
          "type": "uint256"
        }
      ],
      "name": "CollateralizationRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldActive",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newActive",
          "type": "bool"
        }
      ],
      "name": "DepositTokenActiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxTotalSupplyInUsd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxTotalSupplyInUsd",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinDepositTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinDepositTime",
          "type": "uint256"
        }
      ],
      "name": "MinDepositTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralizationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_onBehalfOf",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "contract IController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "_collateralizationRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "_maxTotalSupplyInUsd",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDepositOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "lockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lockedBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalSupplyInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDepositTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "unlockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_unlockedBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_newCollateralizationRatio",
          "type": "uint128"
        }
      ],
      "name": "updateCollateralizationRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxTotalSupplyInUsd",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTotalSupplyInUsd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMinDepositTime",
          "type": "uint256"
        }
      ],
      "name": "updateMinDepositTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6478cba72139fc4f3c02fed8f6e3f512b0613b9a0347185ef288e6bf3cb1d8fe",
  "receipt": {
    "to": null,
    "from": "0xF5F5195cF6998c57C651f9f0bBFA7cFC72a6FaC1",
    "contractAddress": "0xB2D749117A2cac266F54b65b5EEEEEaC4C217e3A",
    "transactionIndex": 2,
    "gasUsed": "2720597",
    "logsBloom": "0x
    "blockHash": "0x07ac67de0474784ece93f5c563e44ea9b04a3279b66440493822d4281ca67fce",
    "transactionHash": "0x6478cba72139fc4f3c02fed8f6e3f512b0613b9a0347185ef288e6bf3cb1d8fe",
    "logs": [],
    "blockNumber": 12442812,
    "cumulativeGasUsed": "3026456",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0077a7bd8b2b7c639ec050e1f3a43041",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCollateralizationRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateralizationRatio\",\"type\":\"uint256\"}],\"name\":\"CollateralizationRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newActive\",\"type\":\"bool\"}],\"name\":\"DepositTokenActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTotalSupplyInUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupplyInUsd\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinDepositTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinDepositTime\",\"type\":\"uint256\"}],\"name\":\"MinDepositTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_onBehalfOf\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"_collateralizationRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalSupplyInUsd\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDepositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupplyInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newCollateralizationRatio\",\"type\":\"uint128\"}],\"name\":\"updateCollateralizationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxTotalSupplyInUsd\",\"type\":\"uint256\"}],\"name\":\"updateMaxTotalSupplyInUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinDepositTime\",\"type\":\"uint256\"}],\"name\":\"updateMinDepositTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(address,uint256)\":{\"params\":{\"_amount\":\"The amount to burn\",\"_from\":\"The account to burn from\"}},\"deposit(uint256,address)\":{\"params\":{\"_amount\":\"The amount of collateral tokens to deposit\",\"_onBehalfOf\":\"The account to deposit to\"}},\"lockedBalanceOf(address)\":{\"params\":{\"_account\":\"The account to check\"},\"returns\":{\"_lockedBalance\":\"The locked amount\"}},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"The amount to mint\",\"_to\":\"The account to mint to\"}},\"seize(address,address,uint256)\":{\"details\":\"Same as _transfer\",\"params\":{\"_amount\":\"The amount to seize\",\"_from\":\"The account to seize from\",\"_to\":\"The beneficiary account\"}},\"setController(address)\":{\"params\":{\"_controller\":\"The new Controller contract\"}},\"unlockedBalanceOf(address)\":{\"params\":{\"_account\":\"The account to check\"},\"returns\":{\"_unlockedBalance\":\"The amount that user can transfer or withdraw\"}},\"updateCollateralizationRatio(uint128)\":{\"params\":{\"_newCollateralizationRatio\":\"The new CR value\"}},\"updateMaxTotalSupplyInUsd(uint256)\":{\"params\":{\"_newMaxTotalSupplyInUsd\":\"The new max total supply\"}},\"withdraw(uint256,address)\":{\"params\":{\"_amount\":\"The amount of collateral to withdraw\",\"_to\":\"The account that will receive withdrawn collateral\"}}},\"title\":\"Represents the users' deposits\",\"version\":1},\"userdoc\":{\"events\":{\"CollateralDeposited(address,address,uint256,uint256)\":{\"notice\":\"Emitted when collateral is deposited\"},\"CollateralWithdrawn(address,address,uint256,uint256)\":{\"notice\":\"Emitted when collateral is withdrawn\"},\"CollateralizationRatioUpdated(uint256,uint256)\":{\"notice\":\"Emitted when CR is updated\"},\"DepositTokenActiveUpdated(bool,bool)\":{\"notice\":\"Emitted when active flag is updated\"},\"MaxTotalSupplyUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max total supply is updated\"},\"MinDepositTimeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when minimum deposit time is updated\"}},\"kind\":\"user\",\"methods\":{\"burn(address,uint256)\":{\"notice\":\"Burn deposit tokens\"},\"collateralizationRatio()\":{\"notice\":\"Collaterization ration for the deposit token\"},\"controller()\":{\"notice\":\"Controller contract\"},\"deposit(uint256,address)\":{\"notice\":\"Deposit colleteral and mint vsdTOKEN (tokenized deposit position)\"},\"isActive()\":{\"notice\":\"If a collateral isn't active, it disables minting new tokens\"},\"lastDepositOf(address)\":{\"notice\":\"Stores de timestamp of last deposit event of each account. It's used combined with `minDepositTime`.\"},\"lockedBalanceOf(address)\":{\"notice\":\"Get the locked balance\"},\"minDepositTime()\":{\"notice\":\"The min amount of time that an account should wait after deposit collateral before be able to withdraw\"},\"mint(address,uint256)\":{\"notice\":\"Mint deposit token when an account deposits collateral\"},\"seize(address,address,uint256)\":{\"notice\":\"Seize tokens\"},\"setController(address)\":{\"notice\":\"Update Controller contract\"},\"toggleIsActive()\":{\"notice\":\"Enable/Disable the Deposit Token\"},\"underlying()\":{\"notice\":\"Deposit underlying asset (e.g. MET)\"},\"unlockedBalanceOf(address)\":{\"notice\":\"Get the unlocked balance (i.e. transfarable, withdrawable)\"},\"updateCollateralizationRatio(uint128)\":{\"notice\":\"Update collateralization ratio\"},\"updateMaxTotalSupplyInUsd(uint256)\":{\"notice\":\"Update max total supply\"},\"updateMinDepositTime(uint256)\":{\"notice\":\"Update minimum deposit time\"},\"withdraw(uint256,address)\":{\"notice\":\"Burn vsdTOKEN and withdraw collateral\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DepositToken.sol\":\"DepositToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/DepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./dependencies/openzeppelin/utils/math/Math.sol\\\";\\nimport \\\"./dependencies/openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./access/Manageable.sol\\\";\\nimport \\\"./storage/DepositTokenStorage.sol\\\";\\n\\n/**\\n * @title Represents the users' deposits\\n */\\ncontract DepositToken is ReentrancyGuard, Manageable, DepositTokenStorageV1 {\\n    using SafeERC20 for IERC20;\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    /// @notice Emitted when CR is updated\\n    event CollateralizationRatioUpdated(uint256 oldCollateralizationRatio, uint256 newCollateralizationRatio);\\n\\n    /// @notice Emitted when minimum deposit time is updated\\n    event MinDepositTimeUpdated(uint256 oldMinDepositTime, uint256 newMinDepositTime);\\n\\n    /// @notice Emitted when active flag is updated\\n    event DepositTokenActiveUpdated(bool oldActive, bool newActive);\\n\\n    /// @notice Emitted when max total supply is updated\\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupplyInUsd, uint256 newMaxTotalSupplyInUsd);\\n\\n    /// @notice Emitted when collateral is deposited\\n    event CollateralDeposited(address indexed from, address indexed account, uint256 amount, uint256 fee);\\n\\n    /// @notice Emitted when collateral is withdrawn\\n    event CollateralWithdrawn(address indexed account, address indexed to, uint256 amount, uint256 fee);\\n\\n    /**\\n     * @dev Throws if minimum deposit time haven't passed\\n     */\\n    modifier onlyIfMinDepositTimePassed(address _account) {\\n        require(block.timestamp >= lastDepositOf[_account] + minDepositTime, \\\"min-deposit-time-have-not-passed\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Requires that amount is lower than the account's unlocked balance\\n     */\\n    modifier onlyIfNotLocked(address _account, uint256 _amount) {\\n        uint256 _unlockedDeposit = unlockedBalanceOf(_account);\\n        require(_unlockedDeposit >= _amount, \\\"not-enough-free-balance\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if deposit token doesn't exist\\n     */\\n    modifier onlyIfDepositTokenExists() {\\n        require(controller.isDepositTokenExists(this), \\\"collateral-inexistent\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update reward contracts' states\\n     * @dev Should be called before balance changes (i.e. mint/burn)\\n     */\\n    modifier updateRewardsBeforeMintOrBurn(address _account) {\\n        IRewardsDistributor[] memory _rewardsDistributors = controller.getRewardsDistributors();\\n        for (uint256 i = 0; i < _rewardsDistributors.length; i++) {\\n            _rewardsDistributors[i].updateBeforeMintOrBurn(this, _account);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update reward contracts' states\\n     * @dev Should be called before balance changes (i.e. transfer)\\n     */\\n    modifier updateRewardsBeforeTransfer(address _sender, address _recipient) {\\n        IRewardsDistributor[] memory _rewardsDistributors = controller.getRewardsDistributors();\\n        uint256 _length = _rewardsDistributors.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            _rewardsDistributors[i].updateBeforeTransfer(this, _sender, _recipient);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if deposit token isn't enabled\\n     */\\n    modifier onlyIfDepositTokenIsActive() {\\n        require(isActive, \\\"deposit-token-is-inactive\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        IERC20 _underlying,\\n        IController _controller,\\n        string calldata _symbol,\\n        uint8 _decimals,\\n        uint128 _collateralizationRatio,\\n        uint256 _maxTotalSupplyInUsd\\n    ) public initializer {\\n        require(address(_underlying) != address(0), \\\"underlying-is-null\\\");\\n        require(address(_controller) != address(0), \\\"controller-address-is-zero\\\");\\n        require(_collateralizationRatio <= 1e18, \\\"collaterization-ratio-gt-100%\\\");\\n\\n        __Manageable_init();\\n\\n        controller = _controller;\\n        name = \\\"Tokenized deposit position\\\";\\n        symbol = _symbol;\\n        underlying = _underlying;\\n        minDepositTime = 0;\\n        isActive = true;\\n        decimals = _decimals;\\n        collateralizationRatio = _collateralizationRatio;\\n        maxTotalSupplyInUsd = _maxTotalSupplyInUsd;\\n    }\\n\\n    function approve(address spender, uint256 _amount) external override returns (bool) {\\n        _approve(_msgSender(), spender, _amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        _approve(_msgSender(), spender, allowance[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        uint256 currentAllowance = allowance[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"decreased-allowance-below-zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) private updateRewardsBeforeTransfer(_sender, _recipient) {\\n        require(_sender != address(0), \\\"transfer-from-the-zero-address\\\");\\n        require(_recipient != address(0), \\\"transfer-to-the-zero-address\\\");\\n\\n        uint256 _senderBalance = balanceOf[_sender];\\n        require(_senderBalance >= _amount, \\\"transfer-amount-exceeds-balance\\\");\\n        unchecked {\\n            balanceOf[_sender] = _senderBalance - _amount;\\n        }\\n        balanceOf[_recipient] += _amount;\\n\\n        emit Transfer(_sender, _recipient, _amount);\\n\\n        _addToDepositTokensOfRecipientIfNeeded(_recipient, balanceOf[_recipient] - _amount);\\n        _removeFromDepositTokensOfSenderIfNeeded(_sender, balanceOf[_sender]);\\n    }\\n\\n    function _mint(address _account, uint256 _amount)\\n        private\\n        onlyIfDepositTokenIsActive\\n        updateRewardsBeforeMintOrBurn(_account)\\n    {\\n        require(_account != address(0), \\\"mint-to-the-zero-address\\\");\\n\\n        uint256 _newTotalSupplyInUsd = controller.masterOracle().convertToUsd(this, totalSupply + _amount);\\n        require(_newTotalSupplyInUsd <= maxTotalSupplyInUsd, \\\"surpass-max-total-supply\\\");\\n        lastDepositOf[_account] = block.timestamp;\\n\\n        totalSupply += _amount;\\n        balanceOf[_account] += _amount;\\n        emit Transfer(address(0), _account, _amount);\\n\\n        _addToDepositTokensOfRecipientIfNeeded(_account, balanceOf[_account] - _amount);\\n    }\\n\\n    function _burn(address _account, uint256 _amount) private updateRewardsBeforeMintOrBurn(_account) {\\n        require(_account != address(0), \\\"burn-from-the-zero-address\\\");\\n\\n        uint256 _accountBalance = balanceOf[_account];\\n        require(_accountBalance >= _amount, \\\"burn-amount-exceeds-balance\\\");\\n        unchecked {\\n            balanceOf[_account] = _accountBalance - _amount;\\n        }\\n        totalSupply -= _amount;\\n\\n        emit Transfer(_account, address(0), _amount);\\n\\n        _removeFromDepositTokensOfSenderIfNeeded(_account, balanceOf[_account]);\\n    }\\n\\n    function _approve(\\n        address _owner,\\n        address _spender,\\n        uint256 _amount\\n    ) private {\\n        require(_owner != address(0), \\\"approve-from-the-zero-address\\\");\\n        require(_spender != address(0), \\\"approve-to-the-zero-address\\\");\\n\\n        allowance[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    function _addToDepositTokensOfRecipientIfNeeded(address _recipient, uint256 _recipientBalanceBefore) private {\\n        if (_recipientBalanceBefore == 0) {\\n            controller.addToDepositTokensOfAccount(_recipient);\\n        }\\n    }\\n\\n    function _removeFromDepositTokensOfSenderIfNeeded(address _sender, uint256 _senderBalanceAfter) private {\\n        if (_senderBalanceAfter == 0) {\\n            controller.removeFromDepositTokensOfAccount(_sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit colleteral and mint vsdTOKEN (tokenized deposit position)\\n     * @param _amount The amount of collateral tokens to deposit\\n     * @param _onBehalfOf The account to deposit to\\n     */\\n    function deposit(uint256 _amount, address _onBehalfOf)\\n        external\\n        override\\n        whenNotPaused\\n        nonReentrant\\n        onlyIfDepositTokenIsActive\\n        onlyIfDepositTokenExists\\n    {\\n        require(_amount > 0, \\\"amount-is-zero\\\");\\n\\n        address _sender = _msgSender();\\n        ITreasury _treasury = controller.treasury();\\n\\n        uint256 _balanceBefore = underlying.balanceOf(address(_treasury));\\n\\n        underlying.safeTransferFrom(_sender, address(_treasury), _amount);\\n\\n        _amount = underlying.balanceOf(address(_treasury)) - _balanceBefore;\\n\\n        uint256 _depositFee = controller.depositFee();\\n        uint256 _amountToDeposit = _amount;\\n        uint256 _feeAmount;\\n        if (_depositFee > 0) {\\n            _feeAmount = _amount.wadMul(_depositFee);\\n            _mint(address(_treasury), _feeAmount);\\n            _amountToDeposit -= _feeAmount;\\n        }\\n\\n        _mint(_onBehalfOf, _amountToDeposit);\\n\\n        emit CollateralDeposited(_sender, _onBehalfOf, _amount, _feeAmount);\\n    }\\n\\n    /**\\n     * @notice Burn vsdTOKEN and withdraw collateral\\n     * @param _amount The amount of collateral to withdraw\\n     * @param _to The account that will receive withdrawn collateral\\n     */\\n    function withdraw(uint256 _amount, address _to)\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfDepositTokenExists\\n    {\\n        require(_amount > 0, \\\"amount-is-zero\\\");\\n\\n        address _account = _msgSender();\\n\\n        require(_amount <= unlockedBalanceOf(_account), \\\"amount-gt-unlocked\\\");\\n\\n        ITreasury _treasury = controller.treasury();\\n\\n        uint256 _withdrawFee = controller.withdrawFee();\\n        uint256 _amountToWithdraw = _amount;\\n        uint256 _feeAmount;\\n        if (_withdrawFee > 0) {\\n            _feeAmount = _amount.wadMul(_withdrawFee);\\n            _transfer(_account, address(_treasury), _feeAmount);\\n            _amountToWithdraw -= _feeAmount;\\n        }\\n\\n        _burnForWithdraw(_account, _amountToWithdraw);\\n        _treasury.pull(_to, _amountToWithdraw);\\n\\n        emit CollateralWithdrawn(_account, _to, _amount, _feeAmount);\\n    }\\n\\n    /**\\n     * @notice Mint deposit token when an account deposits collateral\\n     * @param _to The account to mint to\\n     * @param _amount The amount to mint\\n     */\\n    function mint(address _to, uint256 _amount) external override onlyController {\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn deposit token as part of withdraw process\\n     * @param _from The account to burn from\\n     * @param _amount The amount to burn\\n     */\\n    function _burnForWithdraw(address _from, uint256 _amount)\\n        private\\n        onlyIfNotLocked(_from, _amount)\\n        onlyIfMinDepositTimePassed(_from)\\n    {\\n        _burn(_from, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn deposit tokens\\n     * @param _from The account to burn from\\n     * @param _amount The amount to burn\\n     */\\n    function burn(address _from, uint256 _amount) external override onlyController {\\n        _burn(_from, _amount);\\n    }\\n\\n    /**\\n     * @notice Transfer tokens if checks pass\\n     * @param _sender The account to transfer from\\n     * @param _recipient The account to transfer to\\n     * @param _amount The amount to transfer\\n     */\\n    function _transferWithChecks(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) private onlyIfNotLocked(_sender, _amount) onlyIfMinDepositTimePassed(_sender) {\\n        _transfer(_sender, _recipient, _amount);\\n    }\\n\\n    function transfer(address _to, uint256 _amount) external override returns (bool) {\\n        _transferWithChecks(_msgSender(), _to, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external override nonReentrant returns (bool) {\\n        _transferWithChecks(_sender, _recipient, _amount);\\n\\n        uint256 currentAllowance = allowance[_sender][_msgSender()];\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= _amount, \\\"amount-exceeds-allowance\\\");\\n            unchecked {\\n                _approve(_sender, _msgSender(), currentAllowance - _amount);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the unlocked balance (i.e. transfarable, withdrawable)\\n     * @param _account The account to check\\n     * @return _unlockedBalance The amount that user can transfer or withdraw\\n     */\\n    function unlockedBalanceOf(address _account) public view override returns (uint256 _unlockedBalance) {\\n        (, , , , uint256 _issuableInUsd) = controller.debtPositionOf(_account);\\n\\n        if (_issuableInUsd > 0) {\\n            uint256 _unlockedInUsd = _issuableInUsd.wadDiv(collateralizationRatio);\\n            _unlockedBalance = Math.min(\\n                balanceOf[_account],\\n                controller.masterOracle().convertFromUsd(this, _unlockedInUsd)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the locked balance\\n     * @param _account The account to check\\n     * @return _lockedBalance The locked amount\\n     */\\n    function lockedBalanceOf(address _account) external view override returns (uint256 _lockedBalance) {\\n        unchecked {\\n            return balanceOf[_account] - unlockedBalanceOf(_account);\\n        }\\n    }\\n\\n    /**\\n     * @notice Seize tokens\\n     * @dev Same as _transfer\\n     * @param _from The account to seize from\\n     * @param _to The beneficiary account\\n     * @param _amount The amount to seize\\n     */\\n    function seize(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external override onlyController {\\n        _transfer(_from, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Update collateralization ratio\\n     * @param _newCollateralizationRatio The new CR value\\n     */\\n    function updateCollateralizationRatio(uint128 _newCollateralizationRatio) external override onlyGovernor {\\n        require(_newCollateralizationRatio <= 1e18, \\\"collaterization-ratio-gt-100%\\\");\\n        uint256 _currentCollateralizationRatio = collateralizationRatio;\\n        require(_newCollateralizationRatio != _currentCollateralizationRatio, \\\"new-same-as-current\\\");\\n        emit CollateralizationRatioUpdated(_currentCollateralizationRatio, _newCollateralizationRatio);\\n        collateralizationRatio = _newCollateralizationRatio;\\n    }\\n\\n    /**\\n     * @notice Update minimum deposit time\\n     */\\n    function updateMinDepositTime(uint256 _newMinDepositTime) external onlyGovernor {\\n        uint256 _currentMinDepositTime = minDepositTime;\\n        require(_newMinDepositTime != _currentMinDepositTime, \\\"new-same-as-current\\\");\\n        emit MinDepositTimeUpdated(_currentMinDepositTime, _newMinDepositTime);\\n        minDepositTime = _newMinDepositTime;\\n    }\\n\\n    /**\\n     * @notice Update max total supply\\n     * @param _newMaxTotalSupplyInUsd The new max total supply\\n     */\\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupplyInUsd) external override onlyGovernor {\\n        uint256 _currentMaxTotalSupplyInUsd = maxTotalSupplyInUsd;\\n        require(_newMaxTotalSupplyInUsd != _currentMaxTotalSupplyInUsd, \\\"new-same-as-current\\\");\\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupplyInUsd, _newMaxTotalSupplyInUsd);\\n        maxTotalSupplyInUsd = _newMaxTotalSupplyInUsd;\\n    }\\n\\n    /**\\n     * @notice Enable/Disable the Deposit Token\\n     */\\n    function toggleIsActive() external override onlyGovernor {\\n        bool _isActive = isActive;\\n        emit DepositTokenActiveUpdated(_isActive, !_isActive);\\n        isActive = !_isActive;\\n    }\\n}\\n\",\"keccak256\":\"0x41bb6a20ef58d2bdc0c6a8e9dd95ea427a4b01425d1d52a661b1ca26d3ab4eb9\",\"license\":\"MIT\"},\"contracts/access/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interface/IGovernable.sol\\\";\\nimport \\\"../interface/IController.sol\\\";\\n\\n/**\\n * @title Reusable contract that handles accesses\\n */\\nabstract contract Manageable is Context, Initializable {\\n    /**\\n     * @notice Controller contract\\n     */\\n    IController public controller;\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Manageable_init() internal initializer {}\\n\\n    /**\\n     * @notice Requires that the caller is the Controller contract\\n     */\\n    modifier onlyController() {\\n        require(_msgSender() == address(controller), \\\"not-controller\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Requires that the caller is the Controller contract\\n     */\\n    modifier onlyGovernor() {\\n        require(_msgSender() == governor(), \\\"not-governor\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!controller.paused(), \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotShutdown() {\\n        require(!controller.everythingStopped(), \\\"not-shutdown\\\");\\n        _;\\n    }\\n\\n    function governor() public view returns (address _governor) {\\n        _governor = IGovernable(address(controller)).governor();\\n    }\\n\\n    /**\\n     * @notice Update Controller contract\\n     * @param _controller The new Controller contract\\n     */\\n    function setController(IController _controller) external onlyGovernor {\\n        require(address(_controller) != address(0), \\\"new-controller-address-is-zero\\\");\\n        controller = _controller;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb66f48821b117f5d0db93d91219cdd6d2352a3b9086749dcf81f75f43fe8646e\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xc790f8419ee2c68721d6203ed1b5f81e89eb7e1dca19be3a9f54cb5de44491f1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"contracts/interface/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./oracle/IMasterOracle.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\n\\n/**\\n * @notice Controller interface\\n */\\ninterface IController is IPausable {\\n    function debtFloorInUsd() external returns (uint256);\\n\\n    function depositFee() external returns (uint256);\\n\\n    function issueFee() external returns (uint256);\\n\\n    function withdrawFee() external returns (uint256);\\n\\n    function repayFee() external returns (uint256);\\n\\n    function isSyntheticTokenExists(ISyntheticToken _syntheticToken) external view returns (bool);\\n\\n    function isDepositTokenExists(IDepositToken _depositToken) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 _underlying) external view returns (IDepositToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getSyntheticTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (IRewardsDistributor[] memory);\\n\\n    function debtOf(address _account) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address _account) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(address _account)\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function addSyntheticToken(address _synthetic) external;\\n\\n    function removeSyntheticToken(ISyntheticToken _synthetic) external;\\n\\n    function addDepositToken(address _depositToken) external;\\n\\n    function removeDepositToken(IDepositToken _depositToken) external;\\n\\n    function liquidate(\\n        ISyntheticToken _syntheticToken,\\n        address _account,\\n        uint256 _amountToRepay,\\n        IDepositToken _depositToken\\n    ) external;\\n\\n    function swap(\\n        ISyntheticToken _syntheticTokenIn,\\n        ISyntheticToken _syntheticTokenOut,\\n        uint256 _amountIn\\n    ) external returns (uint256 _amountOut);\\n\\n    function updateMasterOracle(IMasterOracle _newOracle) external;\\n\\n    function updateDebtFloor(uint256 _newDebtFloorInUsd) external;\\n\\n    function updateDepositFee(uint256 _newDepositFee) external;\\n\\n    function updateIssueFee(uint256 _newIssueFee) external;\\n\\n    function updateWithdrawFee(uint256 _newWithdrawFee) external;\\n\\n    function updateRepayFee(uint256 _newRepayFee) external;\\n\\n    function updateSwapFee(uint256 _newSwapFee) external;\\n\\n    function updateLiquidatorLiquidationFee(uint256 _newLiquidatorLiquidationFee) external;\\n\\n    function updateProtocolLiquidationFee(uint256 _newProtocolLiquidationFee) external;\\n\\n    function updateMaxLiquidable(uint256 _newMaxLiquidable) external;\\n\\n    function updateTreasury(ITreasury _newTreasury, bool _withMigration) external;\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function addToDepositTokensOfAccount(address _account) external;\\n\\n    function removeFromDepositTokensOfAccount(address _account) external;\\n\\n    function addToDebtTokensOfAccount(address _account) external;\\n\\n    function removeFromDebtTokensOfAccount(address _account) external;\\n\\n    function getDepositTokensOfAccount(address _account) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address _account) external view returns (address[] memory);\\n\\n    function addRewardsDistributor(IRewardsDistributor _distributor) external;\\n}\\n\",\"keccak256\":\"0x312e1166c4aea80d5c402933d1828167bff1abd4836b70375a79956c4ef771dd\",\"license\":\"MIT\"},\"contracts/interface/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20, IERC20Metadata {\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external returns (uint256 _interestAmountAccrued);\\n\\n    function debtIndex() external returns (uint256 _debtIndex);\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2111cf8f9e4cc629a067d56f91c14b3acc2e348aef3bc6d589452790ee326efa\",\"license\":\"MIT\"},\"contracts/interface/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20, IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralizationRatio() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address _account) external view returns (uint256);\\n\\n    function lockedBalanceOf(address _account) external view returns (uint256);\\n\\n    function minDepositTime() external view returns (uint256);\\n\\n    function lastDepositOf(address _account) external view returns (uint256);\\n\\n    function deposit(uint256 _amount, address _onBehalfOf) external;\\n\\n    function withdraw(uint256 _amount, address _to) external;\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function seize(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function updateCollateralizationRatio(uint128 _newCollateralizationRatio) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupplyInUsd() external view returns (uint256);\\n\\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupplyInUsd) external;\\n}\\n\",\"keccak256\":\"0x7550b99c838a43c41eb43278ee75cc35249340f18250d3c2cc566f430f5f3f6d\",\"license\":\"MIT\"},\"contracts/interface/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interface/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPausable {\\n    function paused() external returns (bool);\\n\\n    function everythingStopped() external returns (bool);\\n}\\n\",\"keccak256\":\"0x08d873c08ae95c72f876f933478433bc30eb733925944e04969083ce12fce855\",\"license\":\"MIT\"},\"contracts/interface/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 _token) external view returns (uint256);\\n\\n    function tokensAccruedOf(address _account) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 _token, address _account) external;\\n\\n    function updateBeforeTransfer(\\n        IERC20 _token,\\n        address _from,\\n        address _to\\n    ) external;\\n\\n    function claimRewards(address _account) external;\\n\\n    function claimRewards(address _account, IERC20[] memory _tokens) external;\\n\\n    function claimRewards(address[] memory _accounts, IERC20[] memory _tokens) external;\\n}\\n\",\"keccak256\":\"0xb1ad7edcd032d5b05cf84e6ee716b819690dcb5fea7750fca1b3c6cf1e49c376\",\"license\":\"MIT\"},\"contracts/interface/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\ninterface ISyntheticToken is IERC20, IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function maxTotalSupplyInUsd() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerBlock() external view returns (uint256);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function mint(address _to, uint256 amount) external;\\n\\n    function burn(address _from, uint256 amount) external;\\n\\n    function updateMaxTotalSupplyInUsd(uint256 _newMaxTotalSupply) external;\\n\\n    function toggleIsActive() external;\\n\\n    function updateInterestRate(uint256 _newInterestRate) external;\\n\\n    function issue(uint256 _amount, address _to) external;\\n\\n    function repay(address _onBehalfOf, uint256 _amount) external;\\n\\n    function accrueInterest() external;\\n}\\n\",\"keccak256\":\"0xb5f2e36822b7e7cf485d5364cf6f34fe252a36f79f1ba7231b1b49067a2adeb4\",\"license\":\"MIT\"},\"contracts/interface/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITreasury {\\n    function pull(address _to, uint256 _amount) external;\\n\\n    function migrateTo(address _newTreasury) external;\\n}\\n\",\"keccak256\":\"0x8f03ef41b892f14c3cd140c2bb3d83d78d488aba71330c341aff47baf6934d44\",\"license\":\"MIT\"},\"contracts/interface/oracle/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IPriceProvider.sol\\\";\\n\\ninterface IMasterOracle {\\n    function convertToUsd(IERC20 _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function convertFromUsd(IERC20 _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function convert(\\n        IERC20 _assetIn,\\n        IERC20 _assetOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x4a8d2418b6c1f6bacde194b7a77f101688c8a10313ac974bc055824fbc51bdc8\",\"license\":\"MIT\"},\"contracts/interface/oracle/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPriceProvider {\\n    function update(bytes calldata _assetData) external;\\n\\n    function getPriceInUsd(bytes calldata _assetData)\\n        external\\n        view\\n        returns (uint256 _priceInUsd, uint256 _lastUpdatedAt);\\n}\\n\",\"keccak256\":\"0xb9a85340ae4de861a6f0a8c591d28272176e44198c03e214b0f41db7dab4a4ff\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     */\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_RAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     */\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * RAY + b / 2) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     */\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        return ((WAD_RAY_RATIO / 2) + a) / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     */\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a * WAD_RAY_RATIO;\\n    }\\n}\\n\",\"keccak256\":\"0x632349235c346fd5752f05d711e6673565790dbb66347ba007a19c3476d37f7c\",\"license\":\"MIT\"},\"contracts/storage/DepositTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interface/IDepositToken.sol\\\";\\n\\nabstract contract DepositTokenStorageV1 is IDepositToken {\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    uint256 public totalSupply;\\n    uint256 public maxTotalSupplyInUsd;\\n\\n    /**\\n     * @notice Deposit underlying asset (e.g. MET)\\n     */\\n    IERC20 public underlying;\\n\\n    /**\\n     * @notice Collaterization ration for the deposit token\\n     * @dev Use 18 decimals (e.g. 0.66e18 = 66%)\\n     */\\n    uint256 public collateralizationRatio;\\n\\n    /**\\n     * @notice The min amount of time that an account should wait after deposit collateral before be able to withdraw\\n     */\\n    uint256 public minDepositTime;\\n\\n    /**\\n     * @notice Stores de timestamp of last deposit event of each account. It's used combined with `minDepositTime`.\\n     */\\n    mapping(address => uint256) public lastDepositOf;\\n\\n    /**\\n     * @notice If a collateral isn't active, it disables minting new tokens\\n     */\\n    bool public isActive;\\n}\\n\",\"keccak256\":\"0x8f2a1f0d0766af087b4c6b3f5653344dbb12924d0dd2dff59c1e70640f383e9b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613042806100206000396000f3fe608060405234801561001057600080fd5b50600436106101ba5760003560e01c806384955c88116100fa578063c2d275ba1161009d578063c2d275ba1461039e578063d2593329146103b1578063dcaf9c44146103b9578063dd62ed3e146103c2578063ea180f27146103ed578063f46c3c5114610400578063f77c479114610420578063f9bd04e414610433578063ffa1ad741461044657600080fd5b806384955c881461031b57806392eefe9b1461032e578063934472f51461034157806395d89b411461034a5780639dc29fac14610352578063a457c2d714610365578063a9059cbb14610378578063b2a02ff11461038b57600080fd5b80633950935111610162578063395093511461028057806340c10f19146102935780634dac5650146102a657806359355736146102af5780635af52016146102c25780636e553f65146102d55780636f307dc3146102e857806370a08231146102fb57600080fd5b8062f714ce146101bf57806306fdde03146101d4578063095ea7b3146101f25780630c340a241461021557806318160ddd1461022a57806322f3e2d41461024157806323b872dd1461024e578063313ce56714610261575b600080fd5b6101d26101cd366004612897565b61046a565b005b6101dc61085c565b6040516101e991906128f3565b60405180910390f35b610205610200366004612926565b6108ea565b60405190151581526020016101e9565b61021d610901565b6040516101e99190612952565b61023360395481565b6040519081526020016101e9565b603f546102059060ff1681565b61020561025c366004612966565b610983565b60385461026e9060ff1681565b60405160ff90911681526020016101e9565b61020561028e366004612926565b610a4b565b6101d26102a1366004612926565b610a87565b610233603a5481565b6102336102bd3660046129a7565b610ac8565b6101d26102d03660046129c4565b610af6565b6101d26102e3366004612897565b610b90565b603b5461021d906001600160a01b031681565b6102336103093660046129a7565b60346020526000908152604090205481565b6102336103293660046129a7565b611029565b6101d261033c3660046129a7565b6111f4565b610233603d5481565b6101dc6112a4565b6101d2610360366004612926565b6112b1565b610205610373366004612926565b6112ee565b610205610386366004612926565b611379565b6101d2610399366004612966565b611386565b6101d26103ac3660046129f9565b6113c9565b6101d26114ae565b610233603c5481565b6102336103d0366004612a14565b603560209081526000928352604080842090915290825290205481565b6101d26103fb366004612a53565b61153b565b61023361040e3660046129a7565b603e6020526000908152604090205481565b60025461021d906001600160a01b031681565b6101d26104413660046129c4565b611745565b6101dc604051806040016040528060058152602001640312e302e360dc1b81525081565b600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f29190612b26565b156105335760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b9b43aba3237bbb760a11b60448201526064015b60405180910390fd5b600260015414156105565760405162461bcd60e51b815260040161052a90612b41565b6002600181905554604051633af5be4760e01b81526001600160a01b0390911690633af5be479061058b903090600401612952565b60206040518083038186803b1580156105a357600080fd5b505afa1580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db9190612b26565b6105f75760405162461bcd60e51b815260040161052a90612b78565b600082116106175760405162461bcd60e51b815260040161052a90612ba7565b3361062181611029565b8311156106655760405162461bcd60e51b8152602060048201526012602482015271185b5bdd5b9d0b59dd0b5d5b9b1bd8dad95960721b604482015260640161052a565b600254604080516361d027b360e01b815290516000926001600160a01b0316916361d027b3916004808301926020929190829003018186803b1580156106aa57600080fd5b505afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190612bcf565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663e941fa786040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561073657600080fd5b505af115801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e9190612bec565b9050846000821561079d5761078387846117df565b9050610790858583611832565b61079a8183612c1b565b91505b6107a78583611b4c565b60405163f2d5d56b60e01b81526001600160a01b0385169063f2d5d56b906107d59089908690600401612c32565b600060405180830381600087803b1580156107ef57600080fd5b505af1158015610803573d6000803e3d6000fd5b5050604080518a8152602081018590526001600160a01b03808b169450891692507f4700a5c58c58ea6536703185e43dae38bfd4158ee5330c70988f02a65562a36e910160405180910390a35050600180555050505050565b6036805461086990612c4b565b80601f016020809104026020016040519081016040528092919081815260200182805461089590612c4b565b80156108e25780601f106108b7576101008083540402835291602001916108e2565b820191906000526020600020905b8154815290600101906020018083116108c557829003601f168201915b505050505081565b60006108f7338484611bd3565b5060015b92915050565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e9190612bcf565b905090565b6000600260015414156109a85760405162461bcd60e51b815260040161052a90612b41565b60026001556109b8848484611ce0565b6001600160a01b03841660009081526035602090815260408083203384529091529020546000198114610a3d5782811015610a305760405162461bcd60e51b8152602060048201526018602482015277616d6f756e742d657863656564732d616c6c6f77616e636560401b604482015260640161052a565b610a3d8533858403611bd3565b505060018080559392505050565b3360008181526035602090815260408083206001600160a01b038716845290915281205490916108f7918590610a82908690612c80565b611bd3565b6002546001600160a01b0316336001600160a01b031614610aba5760405162461bcd60e51b815260040161052a90612c98565b610ac48282611d69565b5050565b6000610ad382611029565b6001600160a01b0390921660009081526034602052604090205491909103919050565b610afe610901565b6001600160a01b0316336001600160a01b031614610b2e5760405162461bcd60e51b815260040161052a90612cc0565b603d5481811415610b515760405162461bcd60e51b815260040161052a90612ce6565b60408051828152602081018490527f13a5338cedaf884869364b517145af7d6887a75a5f17c4ff3981cee30b7b68e5910160405180910390a150603d55565b600260009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610be057600080fd5b505af1158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c189190612b26565b15610c4e5760405162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b604482015260640161052a565b60026001541415610c715760405162461bcd60e51b815260040161052a90612b41565b6002600155603f5460ff16610c985760405162461bcd60e51b815260040161052a90612d13565b600254604051633af5be4760e01b81526001600160a01b0390911690633af5be4790610cc8903090600401612952565b60206040518083038186803b158015610ce057600080fd5b505afa158015610cf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d189190612b26565b610d345760405162461bcd60e51b815260040161052a90612b78565b60008211610d545760405162461bcd60e51b815260040161052a90612ba7565b600254604080516361d027b360e01b8152905133926000926001600160a01b03909116916361d027b391600480820192602092909190829003018186803b158015610d9e57600080fd5b505afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd69190612bcf565b603b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610e0c908590600401612952565b60206040518083038186803b158015610e2457600080fd5b505afa158015610e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5c9190612bec565b603b54909150610e77906001600160a01b031684848861211e565b603b546040516370a0823160e01b815282916001600160a01b0316906370a0823190610ea7908690600401612952565b60206040518083038186803b158015610ebf57600080fd5b505afa158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef79190612bec565b610f019190612c1b565b94506000600260009054906101000a90046001600160a01b03166001600160a01b03166367a527936040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f5557600080fd5b505af1158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d9190612bec565b90508560008215610fbb57610fa288846117df565b9050610fae8582611d69565b610fb88183612c1b565b91505b610fc58783611d69565b866001600160a01b0316866001600160a01b03167f95d16db8c4932fcf5d6de67364791e7178ec505c7d3829a8b34d18959c01552c8a84604051611013929190918252602082015260400190565b60405180910390a3505060018055505050505050565b60025460405163dde3ab9560e01b815260009182916001600160a01b039091169063dde3ab959061105e908690600401612952565b60a06040518083038186803b15801561107657600080fd5b505afa15801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae9190612d46565b94505050505060008111156111ee5760006110d4603c548361217e90919063ffffffff16565b6001600160a01b03808616600090815260346020908152604091829020546002548351637556d1c160e11b815293519596506111ea959194169263eaada382926004808301939192829003018186803b15801561113057600080fd5b505afa158015611144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111689190612bcf565b6001600160a01b03166357f1915d30856040518363ffffffff1660e01b8152600401611195929190612c32565b60206040518083038186803b1580156111ad57600080fd5b505afa1580156111c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e59190612bec565b61219e565b9250505b50919050565b6111fc610901565b6001600160a01b0316336001600160a01b03161461122c5760405162461bcd60e51b815260040161052a90612cc0565b6001600160a01b0381166112825760405162461bcd60e51b815260206004820152601e60248201527f6e65772d636f6e74726f6c6c65722d616464726573732d69732d7a65726f0000604482015260640161052a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6037805461086990612c4b565b6002546001600160a01b0316336001600160a01b0316146112e45760405162461bcd60e51b815260040161052a90612c98565b610ac482826121b4565b3360009081526035602090815260408083206001600160a01b0386168452909152812054828110156113625760405162461bcd60e51b815260206004820152601e60248201527f6465637265617365642d616c6c6f77616e63652d62656c6f772d7a65726f0000604482015260640161052a565b61136f3385858403611bd3565b5060019392505050565b60006108f7338484611ce0565b6002546001600160a01b0316336001600160a01b0316146113b95760405162461bcd60e51b815260040161052a90612c98565b6113c4838383611832565b505050565b6113d1610901565b6001600160a01b0316336001600160a01b0316146114015760405162461bcd60e51b815260040161052a90612cc0565b670de0b6b3a7640000816001600160801b031611156114325760405162461bcd60e51b815260040161052a90612d8d565b603c546001600160801b03821681141561145e5760405162461bcd60e51b815260040161052a90612ce6565b604080518281526001600160801b03841660208201527ff84d4544cfaedc7b1b8b7fa92b1f758aea3e3e69dfb321343825e4dd86f8147a910160405180910390a1506001600160801b0316603c55565b6114b6610901565b6001600160a01b0316336001600160a01b0316146114e65760405162461bcd60e51b815260040161052a90612cc0565b603f546040805160ff9092168015801584526020840152917fe922a12e8e36a37e6ad78a6c8aa4c2d6dec08b3a104e133ada714b606c87ca2e910160405180910390a1603f805460ff19169115919091179055565b600054610100900460ff1680611554575060005460ff16155b6115705760405162461bcd60e51b815260040161052a90612dc4565b600054610100900460ff16158015611592576000805461ffff19166101011790555b6001600160a01b0388166115dd5760405162461bcd60e51b81526020600482015260126024820152711d5b99195c9b1e5a5b99cb5a5ccb5b9d5b1b60721b604482015260640161052a565b6001600160a01b0387166116335760405162461bcd60e51b815260206004820152601a60248201527f636f6e74726f6c6c65722d616464726573732d69732d7a65726f000000000000604482015260640161052a565b670de0b6b3a7640000836001600160801b031611156116645760405162461bcd60e51b815260040161052a90612d8d565b61166c612427565b600280546001600160a01b0319166001600160a01b03891617905560408051808201909152601a8082527f546f6b656e697a6564206465706f73697420706f736974696f6e00000000000060209092019182526116cb91603691612775565b506116d8603787876127f9565b50603b80546001600160a01b0319166001600160a01b038a161790556000603d55603f805460ff199081166001179091556038805490911660ff86161790556001600160801b038316603c55603a829055801561173b576000805461ff00191690555b5050505050505050565b61174d610901565b6001600160a01b0316336001600160a01b03161461177d5760405162461bcd60e51b815260040161052a90612cc0565b603a54818114156117a05760405162461bcd60e51b815260040161052a90612ce6565b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603a55565b60008215806117ec575081155b156117f9575060006108fb565b670de0b6b3a764000061180d600282612e12565b6118178486612e34565b6118219190612c80565b61182b9190612e12565b9392505050565b82826000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561188457600080fd5b505afa158015611898573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118c09190810190612e74565b805190915060005b8181101561196a578281815181106118e2576118e2612f39565b602090810291909101015160405163058bd91d60e51b81523060048201526001600160a01b03878116602483015286811660448301529091169063b17b23a090606401600060405180830381600087803b15801561193f57600080fd5b505af1158015611953573d6000803e3d6000fd5b50505050808061196290612f4f565b9150506118c8565b506001600160a01b0387166119c15760405162461bcd60e51b815260206004820152601e60248201527f7472616e736665722d66726f6d2d7468652d7a65726f2d616464726573730000604482015260640161052a565b6001600160a01b038616611a175760405162461bcd60e51b815260206004820152601c60248201527f7472616e736665722d746f2d7468652d7a65726f2d6164647265737300000000604482015260640161052a565b6001600160a01b03871660009081526034602052604090205485811015611a805760405162461bcd60e51b815260206004820152601f60248201527f7472616e736665722d616d6f756e742d657863656564732d62616c616e636500604482015260640161052a565b6001600160a01b03808916600090815260346020526040808220898503905591891681529081208054889290611ab7908490612c80565b92505081905550866001600160a01b0316886001600160a01b0316600080516020612fed83398151915288604051611af191815260200190565b60405180910390a36001600160a01b038716600090815260346020526040902054611b28908890611b23908990612c1b565b612493565b6001600160a01b03881660009081526034602052604090205461173b9089906124f6565b81816000611b5983611029565b905081811015611b7b5760405162461bcd60e51b815260040161052a90612f6a565b603d546001600160a01b0386166000908152603e60205260409020548691611ba291612c80565b421015611bc15760405162461bcd60e51b815260040161052a90612f9b565b611bcb86866121b4565b505050505050565b6001600160a01b038316611c295760405162461bcd60e51b815260206004820152601d60248201527f617070726f76652d66726f6d2d7468652d7a65726f2d61646472657373000000604482015260640161052a565b6001600160a01b038216611c7f5760405162461bcd60e51b815260206004820152601b60248201527f617070726f76652d746f2d7468652d7a65726f2d616464726573730000000000604482015260640161052a565b6001600160a01b0383811660008181526035602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b82816000611ced83611029565b905081811015611d0f5760405162461bcd60e51b815260040161052a90612f6a565b603d546001600160a01b0387166000908152603e60205260409020548791611d3691612c80565b421015611d555760405162461bcd60e51b815260040161052a90612f9b565b611d60878787611832565b50505050505050565b603f5460ff16611d8b5760405162461bcd60e51b815260040161052a90612d13565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611ddc57600080fd5b505afa158015611df0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e189190810190612e74565b905060005b8151811015611eb757818181518110611e3857611e38612f39565b6020908102919091010151604051626cc3c360e61b81523060048201526001600160a01b03858116602483015290911690631b30f0c090604401600060405180830381600087803b158015611e8c57600080fd5b505af1158015611ea0573d6000803e3d6000fd5b505050508080611eaf90612f4f565b915050611e1d565b506001600160a01b038416611f095760405162461bcd60e51b81526020600482015260186024820152776d696e742d746f2d7468652d7a65726f2d6164647265737360401b604482015260640161052a565b60025460408051637556d1c160e11b815290516000926001600160a01b03169163eaada382916004808301926020929190829003018186803b158015611f4e57600080fd5b505afa158015611f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f869190612bcf565b6001600160a01b031663ee9579963086603954611fa39190612c80565b6040518363ffffffff1660e01b8152600401611fc0929190612c32565b60206040518083038186803b158015611fd857600080fd5b505afa158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120109190612bec565b9050603a5481111561205f5760405162461bcd60e51b8152602060048201526018602482015277737572706173732d6d61782d746f74616c2d737570706c7960401b604482015260640161052a565b6001600160a01b0385166000908152603e602052604081204290556039805486929061208c908490612c80565b90915550506001600160a01b038516600090815260346020526040812080548692906120b9908490612c80565b90915550506040518481526001600160a01b03861690600090600080516020612fed8339815191529060200160405180910390a36001600160a01b038516600090815260346020526040902054612117908690611b23908790612c1b565b5050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261217890859061252b565b50505050565b60008161218c600282612e12565b611817670de0b6b3a764000086612e34565b60008183106121ad578161182b565b5090919050565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561220557600080fd5b505afa158015612219573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122419190810190612e74565b905060005b81518110156122e05781818151811061226157612261612f39565b6020908102919091010151604051626cc3c360e61b81523060048201526001600160a01b03858116602483015290911690631b30f0c090604401600060405180830381600087803b1580156122b557600080fd5b505af11580156122c9573d6000803e3d6000fd5b5050505080806122d890612f4f565b915050612246565b506001600160a01b0384166123375760405162461bcd60e51b815260206004820152601a60248201527f6275726e2d66726f6d2d7468652d7a65726f2d61646472657373000000000000604482015260640161052a565b6001600160a01b038416600090815260346020526040902054838110156123a05760405162461bcd60e51b815260206004820152601b60248201527f6275726e2d616d6f756e742d657863656564732d62616c616e63650000000000604482015260640161052a565b6001600160a01b03851660009081526034602052604081208583039055603980548692906123cf908490612c1b565b90915550506040518481526000906001600160a01b03871690600080516020612fed8339815191529060200160405180910390a36001600160a01b0385166000908152603460205260409020546121179086906124f6565b600054610100900460ff1680612440575060005460ff16155b61245c5760405162461bcd60e51b815260040161052a90612dc4565b600054610100900460ff1615801561247e576000805461ffff19166101011790555b8015612490576000805461ff00191690555b50565b80610ac457600254604051633f5fc13160e01b81526001600160a01b0390911690633f5fc131906124c8908590600401612952565b600060405180830381600087803b1580156124e257600080fd5b505af1158015611bcb573d6000803e3d6000fd5b80610ac457600254604051630275038d60e41b81526001600160a01b039091169063275038d0906124c8908590600401612952565b6000612580826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125fd9092919063ffffffff16565b8051909150156113c4578080602001905181019061259e9190612b26565b6113c45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161052a565b606061260c8484600085612614565b949350505050565b6060824710156126755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161052a565b843b6126c35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161052a565b600080866001600160a01b031685876040516126df9190612fd0565b60006040518083038185875af1925050503d806000811461271c576040519150601f19603f3d011682016040523d82523d6000602084013e612721565b606091505b509150915061273182828661273c565b979650505050505050565b6060831561274b57508161182b565b82511561275b5782518084602001fd5b8160405162461bcd60e51b815260040161052a91906128f3565b82805461278190612c4b565b90600052602060002090601f0160209004810192826127a357600085556127e9565b82601f106127bc57805160ff19168380011785556127e9565b828001600101855582156127e9579182015b828111156127e95782518255916020019190600101906127ce565b506127f592915061286d565b5090565b82805461280590612c4b565b90600052602060002090601f01602090048101928261282757600085556127e9565b82601f106128405782800160ff198235161785556127e9565b828001600101855582156127e9579182015b828111156127e9578235825591602001919060010190612852565b5b808211156127f5576000815560010161286e565b6001600160a01b038116811461249057600080fd5b600080604083850312156128aa57600080fd5b8235915060208301356128bc81612882565b809150509250929050565b60005b838110156128e25781810151838201526020016128ca565b838111156121785750506000910152565b60208152600082518060208401526129128160408501602087016128c7565b601f01601f19169190910160400192915050565b6000806040838503121561293957600080fd5b823561294481612882565b946020939093013593505050565b6001600160a01b0391909116815260200190565b60008060006060848603121561297b57600080fd5b833561298681612882565b9250602084013561299681612882565b929592945050506040919091013590565b6000602082840312156129b957600080fd5b813561182b81612882565b6000602082840312156129d657600080fd5b5035919050565b80356001600160801b03811681146129f457600080fd5b919050565b600060208284031215612a0b57600080fd5b61182b826129dd565b60008060408385031215612a2757600080fd5b8235612a3281612882565b915060208301356128bc81612882565b803560ff811681146129f457600080fd5b600080600080600080600060c0888a031215612a6e57600080fd5b8735612a7981612882565b96506020880135612a8981612882565b9550604088013567ffffffffffffffff80821115612aa657600080fd5b818a0191508a601f830112612aba57600080fd5b813581811115612ac957600080fd5b8b6020828501011115612adb57600080fd5b602083019750809650505050612af360608901612a42565b9250612b01608089016129dd565b915060a0880135905092959891949750929550565b805180151581146129f457600080fd5b600060208284031215612b3857600080fd5b61182b82612b16565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526015908201527418dbdb1b185d195c985b0b5a5b995e1a5cdd195b9d605a1b604082015260600190565b6020808252600e908201526d616d6f756e742d69732d7a65726f60901b604082015260600190565b600060208284031215612be157600080fd5b815161182b81612882565b600060208284031215612bfe57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015612c2d57612c2d612c05565b500390565b6001600160a01b03929092168252602082015260400190565b600181811c90821680612c5f57607f821691505b602082108114156111ee57634e487b7160e01b600052602260045260246000fd5b60008219821115612c9357612c93612c05565b500190565b6020808252600e908201526d3737ba16b1b7b73a3937b63632b960911b604082015260600190565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b6020808252601390820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b604082015260600190565b6020808252601990820152786465706f7369742d746f6b656e2d69732d696e61637469766560381b604082015260600190565b600080600080600060a08688031215612d5e57600080fd5b612d6786612b16565b602087015160408801516060890151608090990151929a91995097965090945092505050565b6020808252601d908201527f636f6c6c61746572697a6174696f6e2d726174696f2d67742d31303025000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082612e2f57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612e4e57612e4e612c05565b500290565b634e487b7160e01b600052604160045260246000fd5b80516129f481612882565b60006020808385031215612e8757600080fd5b825167ffffffffffffffff80821115612e9f57600080fd5b818501915085601f830112612eb357600080fd5b815181811115612ec557612ec5612e53565b8060051b604051601f19603f83011681018181108582111715612eea57612eea612e53565b604052918252848201925083810185019188831115612f0857600080fd5b938501935b82851015612f2d57612f1e85612e69565b84529385019392850192612f0d565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612f6357612f63612c05565b5060010190565b6020808252601790820152766e6f742d656e6f7567682d667265652d62616c616e636560481b604082015260600190565b6020808252818101527f6d696e2d6465706f7369742d74696d652d686176652d6e6f742d706173736564604082015260600190565b60008251612fe28184602087016128c7565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122065057226d0ab857fde2cf168bb2cec80d8c6867fc26518ab613732cff0adf63b64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ba5760003560e01c806384955c88116100fa578063c2d275ba1161009d578063c2d275ba1461039e578063d2593329146103b1578063dcaf9c44146103b9578063dd62ed3e146103c2578063ea180f27146103ed578063f46c3c5114610400578063f77c479114610420578063f9bd04e414610433578063ffa1ad741461044657600080fd5b806384955c881461031b57806392eefe9b1461032e578063934472f51461034157806395d89b411461034a5780639dc29fac14610352578063a457c2d714610365578063a9059cbb14610378578063b2a02ff11461038b57600080fd5b80633950935111610162578063395093511461028057806340c10f19146102935780634dac5650146102a657806359355736146102af5780635af52016146102c25780636e553f65146102d55780636f307dc3146102e857806370a08231146102fb57600080fd5b8062f714ce146101bf57806306fdde03146101d4578063095ea7b3146101f25780630c340a241461021557806318160ddd1461022a57806322f3e2d41461024157806323b872dd1461024e578063313ce56714610261575b600080fd5b6101d26101cd366004612897565b61046a565b005b6101dc61085c565b6040516101e991906128f3565b60405180910390f35b610205610200366004612926565b6108ea565b60405190151581526020016101e9565b61021d610901565b6040516101e99190612952565b61023360395481565b6040519081526020016101e9565b603f546102059060ff1681565b61020561025c366004612966565b610983565b60385461026e9060ff1681565b60405160ff90911681526020016101e9565b61020561028e366004612926565b610a4b565b6101d26102a1366004612926565b610a87565b610233603a5481565b6102336102bd3660046129a7565b610ac8565b6101d26102d03660046129c4565b610af6565b6101d26102e3366004612897565b610b90565b603b5461021d906001600160a01b031681565b6102336103093660046129a7565b60346020526000908152604090205481565b6102336103293660046129a7565b611029565b6101d261033c3660046129a7565b6111f4565b610233603d5481565b6101dc6112a4565b6101d2610360366004612926565b6112b1565b610205610373366004612926565b6112ee565b610205610386366004612926565b611379565b6101d2610399366004612966565b611386565b6101d26103ac3660046129f9565b6113c9565b6101d26114ae565b610233603c5481565b6102336103d0366004612a14565b603560209081526000928352604080842090915290825290205481565b6101d26103fb366004612a53565b61153b565b61023361040e3660046129a7565b603e6020526000908152604090205481565b60025461021d906001600160a01b031681565b6101d26104413660046129c4565b611745565b6101dc604051806040016040528060058152602001640312e302e360dc1b81525081565b600260009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f29190612b26565b156105335760405162461bcd60e51b815260206004820152600c60248201526b3737ba16b9b43aba3237bbb760a11b60448201526064015b60405180910390fd5b600260015414156105565760405162461bcd60e51b815260040161052a90612b41565b6002600181905554604051633af5be4760e01b81526001600160a01b0390911690633af5be479061058b903090600401612952565b60206040518083038186803b1580156105a357600080fd5b505afa1580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db9190612b26565b6105f75760405162461bcd60e51b815260040161052a90612b78565b600082116106175760405162461bcd60e51b815260040161052a90612ba7565b3361062181611029565b8311156106655760405162461bcd60e51b8152602060048201526012602482015271185b5bdd5b9d0b59dd0b5d5b9b1bd8dad95960721b604482015260640161052a565b600254604080516361d027b360e01b815290516000926001600160a01b0316916361d027b3916004808301926020929190829003018186803b1580156106aa57600080fd5b505afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190612bcf565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663e941fa786040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561073657600080fd5b505af115801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e9190612bec565b9050846000821561079d5761078387846117df565b9050610790858583611832565b61079a8183612c1b565b91505b6107a78583611b4c565b60405163f2d5d56b60e01b81526001600160a01b0385169063f2d5d56b906107d59089908690600401612c32565b600060405180830381600087803b1580156107ef57600080fd5b505af1158015610803573d6000803e3d6000fd5b5050604080518a8152602081018590526001600160a01b03808b169450891692507f4700a5c58c58ea6536703185e43dae38bfd4158ee5330c70988f02a65562a36e910160405180910390a35050600180555050505050565b6036805461086990612c4b565b80601f016020809104026020016040519081016040528092919081815260200182805461089590612c4b565b80156108e25780601f106108b7576101008083540402835291602001916108e2565b820191906000526020600020905b8154815290600101906020018083116108c557829003601f168201915b505050505081565b60006108f7338484611bd3565b5060015b92915050565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e9190612bcf565b905090565b6000600260015414156109a85760405162461bcd60e51b815260040161052a90612b41565b60026001556109b8848484611ce0565b6001600160a01b03841660009081526035602090815260408083203384529091529020546000198114610a3d5782811015610a305760405162461bcd60e51b8152602060048201526018602482015277616d6f756e742d657863656564732d616c6c6f77616e636560401b604482015260640161052a565b610a3d8533858403611bd3565b505060018080559392505050565b3360008181526035602090815260408083206001600160a01b038716845290915281205490916108f7918590610a82908690612c80565b611bd3565b6002546001600160a01b0316336001600160a01b031614610aba5760405162461bcd60e51b815260040161052a90612c98565b610ac48282611d69565b5050565b6000610ad382611029565b6001600160a01b0390921660009081526034602052604090205491909103919050565b610afe610901565b6001600160a01b0316336001600160a01b031614610b2e5760405162461bcd60e51b815260040161052a90612cc0565b603d5481811415610b515760405162461bcd60e51b815260040161052a90612ce6565b60408051828152602081018490527f13a5338cedaf884869364b517145af7d6887a75a5f17c4ff3981cee30b7b68e5910160405180910390a150603d55565b600260009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610be057600080fd5b505af1158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c189190612b26565b15610c4e5760405162461bcd60e51b81526020600482015260066024820152651c185d5cd95960d21b604482015260640161052a565b60026001541415610c715760405162461bcd60e51b815260040161052a90612b41565b6002600155603f5460ff16610c985760405162461bcd60e51b815260040161052a90612d13565b600254604051633af5be4760e01b81526001600160a01b0390911690633af5be4790610cc8903090600401612952565b60206040518083038186803b158015610ce057600080fd5b505afa158015610cf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d189190612b26565b610d345760405162461bcd60e51b815260040161052a90612b78565b60008211610d545760405162461bcd60e51b815260040161052a90612ba7565b600254604080516361d027b360e01b8152905133926000926001600160a01b03909116916361d027b391600480820192602092909190829003018186803b158015610d9e57600080fd5b505afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd69190612bcf565b603b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610e0c908590600401612952565b60206040518083038186803b158015610e2457600080fd5b505afa158015610e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5c9190612bec565b603b54909150610e77906001600160a01b031684848861211e565b603b546040516370a0823160e01b815282916001600160a01b0316906370a0823190610ea7908690600401612952565b60206040518083038186803b158015610ebf57600080fd5b505afa158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef79190612bec565b610f019190612c1b565b94506000600260009054906101000a90046001600160a01b03166001600160a01b03166367a527936040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610f5557600080fd5b505af1158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d9190612bec565b90508560008215610fbb57610fa288846117df565b9050610fae8582611d69565b610fb88183612c1b565b91505b610fc58783611d69565b866001600160a01b0316866001600160a01b03167f95d16db8c4932fcf5d6de67364791e7178ec505c7d3829a8b34d18959c01552c8a84604051611013929190918252602082015260400190565b60405180910390a3505060018055505050505050565b60025460405163dde3ab9560e01b815260009182916001600160a01b039091169063dde3ab959061105e908690600401612952565b60a06040518083038186803b15801561107657600080fd5b505afa15801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae9190612d46565b94505050505060008111156111ee5760006110d4603c548361217e90919063ffffffff16565b6001600160a01b03808616600090815260346020908152604091829020546002548351637556d1c160e11b815293519596506111ea959194169263eaada382926004808301939192829003018186803b15801561113057600080fd5b505afa158015611144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111689190612bcf565b6001600160a01b03166357f1915d30856040518363ffffffff1660e01b8152600401611195929190612c32565b60206040518083038186803b1580156111ad57600080fd5b505afa1580156111c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e59190612bec565b61219e565b9250505b50919050565b6111fc610901565b6001600160a01b0316336001600160a01b03161461122c5760405162461bcd60e51b815260040161052a90612cc0565b6001600160a01b0381166112825760405162461bcd60e51b815260206004820152601e60248201527f6e65772d636f6e74726f6c6c65722d616464726573732d69732d7a65726f0000604482015260640161052a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6037805461086990612c4b565b6002546001600160a01b0316336001600160a01b0316146112e45760405162461bcd60e51b815260040161052a90612c98565b610ac482826121b4565b3360009081526035602090815260408083206001600160a01b0386168452909152812054828110156113625760405162461bcd60e51b815260206004820152601e60248201527f6465637265617365642d616c6c6f77616e63652d62656c6f772d7a65726f0000604482015260640161052a565b61136f3385858403611bd3565b5060019392505050565b60006108f7338484611ce0565b6002546001600160a01b0316336001600160a01b0316146113b95760405162461bcd60e51b815260040161052a90612c98565b6113c4838383611832565b505050565b6113d1610901565b6001600160a01b0316336001600160a01b0316146114015760405162461bcd60e51b815260040161052a90612cc0565b670de0b6b3a7640000816001600160801b031611156114325760405162461bcd60e51b815260040161052a90612d8d565b603c546001600160801b03821681141561145e5760405162461bcd60e51b815260040161052a90612ce6565b604080518281526001600160801b03841660208201527ff84d4544cfaedc7b1b8b7fa92b1f758aea3e3e69dfb321343825e4dd86f8147a910160405180910390a1506001600160801b0316603c55565b6114b6610901565b6001600160a01b0316336001600160a01b0316146114e65760405162461bcd60e51b815260040161052a90612cc0565b603f546040805160ff9092168015801584526020840152917fe922a12e8e36a37e6ad78a6c8aa4c2d6dec08b3a104e133ada714b606c87ca2e910160405180910390a1603f805460ff19169115919091179055565b600054610100900460ff1680611554575060005460ff16155b6115705760405162461bcd60e51b815260040161052a90612dc4565b600054610100900460ff16158015611592576000805461ffff19166101011790555b6001600160a01b0388166115dd5760405162461bcd60e51b81526020600482015260126024820152711d5b99195c9b1e5a5b99cb5a5ccb5b9d5b1b60721b604482015260640161052a565b6001600160a01b0387166116335760405162461bcd60e51b815260206004820152601a60248201527f636f6e74726f6c6c65722d616464726573732d69732d7a65726f000000000000604482015260640161052a565b670de0b6b3a7640000836001600160801b031611156116645760405162461bcd60e51b815260040161052a90612d8d565b61166c612427565b600280546001600160a01b0319166001600160a01b03891617905560408051808201909152601a8082527f546f6b656e697a6564206465706f73697420706f736974696f6e00000000000060209092019182526116cb91603691612775565b506116d8603787876127f9565b50603b80546001600160a01b0319166001600160a01b038a161790556000603d55603f805460ff199081166001179091556038805490911660ff86161790556001600160801b038316603c55603a829055801561173b576000805461ff00191690555b5050505050505050565b61174d610901565b6001600160a01b0316336001600160a01b03161461177d5760405162461bcd60e51b815260040161052a90612cc0565b603a54818114156117a05760405162461bcd60e51b815260040161052a90612ce6565b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150603a55565b60008215806117ec575081155b156117f9575060006108fb565b670de0b6b3a764000061180d600282612e12565b6118178486612e34565b6118219190612c80565b61182b9190612e12565b9392505050565b82826000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561188457600080fd5b505afa158015611898573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118c09190810190612e74565b805190915060005b8181101561196a578281815181106118e2576118e2612f39565b602090810291909101015160405163058bd91d60e51b81523060048201526001600160a01b03878116602483015286811660448301529091169063b17b23a090606401600060405180830381600087803b15801561193f57600080fd5b505af1158015611953573d6000803e3d6000fd5b50505050808061196290612f4f565b9150506118c8565b506001600160a01b0387166119c15760405162461bcd60e51b815260206004820152601e60248201527f7472616e736665722d66726f6d2d7468652d7a65726f2d616464726573730000604482015260640161052a565b6001600160a01b038616611a175760405162461bcd60e51b815260206004820152601c60248201527f7472616e736665722d746f2d7468652d7a65726f2d6164647265737300000000604482015260640161052a565b6001600160a01b03871660009081526034602052604090205485811015611a805760405162461bcd60e51b815260206004820152601f60248201527f7472616e736665722d616d6f756e742d657863656564732d62616c616e636500604482015260640161052a565b6001600160a01b03808916600090815260346020526040808220898503905591891681529081208054889290611ab7908490612c80565b92505081905550866001600160a01b0316886001600160a01b0316600080516020612fed83398151915288604051611af191815260200190565b60405180910390a36001600160a01b038716600090815260346020526040902054611b28908890611b23908990612c1b565b612493565b6001600160a01b03881660009081526034602052604090205461173b9089906124f6565b81816000611b5983611029565b905081811015611b7b5760405162461bcd60e51b815260040161052a90612f6a565b603d546001600160a01b0386166000908152603e60205260409020548691611ba291612c80565b421015611bc15760405162461bcd60e51b815260040161052a90612f9b565b611bcb86866121b4565b505050505050565b6001600160a01b038316611c295760405162461bcd60e51b815260206004820152601d60248201527f617070726f76652d66726f6d2d7468652d7a65726f2d61646472657373000000604482015260640161052a565b6001600160a01b038216611c7f5760405162461bcd60e51b815260206004820152601b60248201527f617070726f76652d746f2d7468652d7a65726f2d616464726573730000000000604482015260640161052a565b6001600160a01b0383811660008181526035602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b82816000611ced83611029565b905081811015611d0f5760405162461bcd60e51b815260040161052a90612f6a565b603d546001600160a01b0387166000908152603e60205260409020548791611d3691612c80565b421015611d555760405162461bcd60e51b815260040161052a90612f9b565b611d60878787611832565b50505050505050565b603f5460ff16611d8b5760405162461bcd60e51b815260040161052a90612d13565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015611ddc57600080fd5b505afa158015611df0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e189190810190612e74565b905060005b8151811015611eb757818181518110611e3857611e38612f39565b6020908102919091010151604051626cc3c360e61b81523060048201526001600160a01b03858116602483015290911690631b30f0c090604401600060405180830381600087803b158015611e8c57600080fd5b505af1158015611ea0573d6000803e3d6000fd5b505050508080611eaf90612f4f565b915050611e1d565b506001600160a01b038416611f095760405162461bcd60e51b81526020600482015260186024820152776d696e742d746f2d7468652d7a65726f2d6164647265737360401b604482015260640161052a565b60025460408051637556d1c160e11b815290516000926001600160a01b03169163eaada382916004808301926020929190829003018186803b158015611f4e57600080fd5b505afa158015611f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f869190612bcf565b6001600160a01b031663ee9579963086603954611fa39190612c80565b6040518363ffffffff1660e01b8152600401611fc0929190612c32565b60206040518083038186803b158015611fd857600080fd5b505afa158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120109190612bec565b9050603a5481111561205f5760405162461bcd60e51b8152602060048201526018602482015277737572706173732d6d61782d746f74616c2d737570706c7960401b604482015260640161052a565b6001600160a01b0385166000908152603e602052604081204290556039805486929061208c908490612c80565b90915550506001600160a01b038516600090815260346020526040812080548692906120b9908490612c80565b90915550506040518481526001600160a01b03861690600090600080516020612fed8339815191529060200160405180910390a36001600160a01b038516600090815260346020526040902054612117908690611b23908790612c1b565b5050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261217890859061252b565b50505050565b60008161218c600282612e12565b611817670de0b6b3a764000086612e34565b60008183106121ad578161182b565b5090919050565b816000600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561220557600080fd5b505afa158015612219573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122419190810190612e74565b905060005b81518110156122e05781818151811061226157612261612f39565b6020908102919091010151604051626cc3c360e61b81523060048201526001600160a01b03858116602483015290911690631b30f0c090604401600060405180830381600087803b1580156122b557600080fd5b505af11580156122c9573d6000803e3d6000fd5b5050505080806122d890612f4f565b915050612246565b506001600160a01b0384166123375760405162461bcd60e51b815260206004820152601a60248201527f6275726e2d66726f6d2d7468652d7a65726f2d61646472657373000000000000604482015260640161052a565b6001600160a01b038416600090815260346020526040902054838110156123a05760405162461bcd60e51b815260206004820152601b60248201527f6275726e2d616d6f756e742d657863656564732d62616c616e63650000000000604482015260640161052a565b6001600160a01b03851660009081526034602052604081208583039055603980548692906123cf908490612c1b565b90915550506040518481526000906001600160a01b03871690600080516020612fed8339815191529060200160405180910390a36001600160a01b0385166000908152603460205260409020546121179086906124f6565b600054610100900460ff1680612440575060005460ff16155b61245c5760405162461bcd60e51b815260040161052a90612dc4565b600054610100900460ff1615801561247e576000805461ffff19166101011790555b8015612490576000805461ff00191690555b50565b80610ac457600254604051633f5fc13160e01b81526001600160a01b0390911690633f5fc131906124c8908590600401612952565b600060405180830381600087803b1580156124e257600080fd5b505af1158015611bcb573d6000803e3d6000fd5b80610ac457600254604051630275038d60e41b81526001600160a01b039091169063275038d0906124c8908590600401612952565b6000612580826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125fd9092919063ffffffff16565b8051909150156113c4578080602001905181019061259e9190612b26565b6113c45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161052a565b606061260c8484600085612614565b949350505050565b6060824710156126755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161052a565b843b6126c35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161052a565b600080866001600160a01b031685876040516126df9190612fd0565b60006040518083038185875af1925050503d806000811461271c576040519150601f19603f3d011682016040523d82523d6000602084013e612721565b606091505b509150915061273182828661273c565b979650505050505050565b6060831561274b57508161182b565b82511561275b5782518084602001fd5b8160405162461bcd60e51b815260040161052a91906128f3565b82805461278190612c4b565b90600052602060002090601f0160209004810192826127a357600085556127e9565b82601f106127bc57805160ff19168380011785556127e9565b828001600101855582156127e9579182015b828111156127e95782518255916020019190600101906127ce565b506127f592915061286d565b5090565b82805461280590612c4b565b90600052602060002090601f01602090048101928261282757600085556127e9565b82601f106128405782800160ff198235161785556127e9565b828001600101855582156127e9579182015b828111156127e9578235825591602001919060010190612852565b5b808211156127f5576000815560010161286e565b6001600160a01b038116811461249057600080fd5b600080604083850312156128aa57600080fd5b8235915060208301356128bc81612882565b809150509250929050565b60005b838110156128e25781810151838201526020016128ca565b838111156121785750506000910152565b60208152600082518060208401526129128160408501602087016128c7565b601f01601f19169190910160400192915050565b6000806040838503121561293957600080fd5b823561294481612882565b946020939093013593505050565b6001600160a01b0391909116815260200190565b60008060006060848603121561297b57600080fd5b833561298681612882565b9250602084013561299681612882565b929592945050506040919091013590565b6000602082840312156129b957600080fd5b813561182b81612882565b6000602082840312156129d657600080fd5b5035919050565b80356001600160801b03811681146129f457600080fd5b919050565b600060208284031215612a0b57600080fd5b61182b826129dd565b60008060408385031215612a2757600080fd5b8235612a3281612882565b915060208301356128bc81612882565b803560ff811681146129f457600080fd5b600080600080600080600060c0888a031215612a6e57600080fd5b8735612a7981612882565b96506020880135612a8981612882565b9550604088013567ffffffffffffffff80821115612aa657600080fd5b818a0191508a601f830112612aba57600080fd5b813581811115612ac957600080fd5b8b6020828501011115612adb57600080fd5b602083019750809650505050612af360608901612a42565b9250612b01608089016129dd565b915060a0880135905092959891949750929550565b805180151581146129f457600080fd5b600060208284031215612b3857600080fd5b61182b82612b16565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526015908201527418dbdb1b185d195c985b0b5a5b995e1a5cdd195b9d605a1b604082015260600190565b6020808252600e908201526d616d6f756e742d69732d7a65726f60901b604082015260600190565b600060208284031215612be157600080fd5b815161182b81612882565b600060208284031215612bfe57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015612c2d57612c2d612c05565b500390565b6001600160a01b03929092168252602082015260400190565b600181811c90821680612c5f57607f821691505b602082108114156111ee57634e487b7160e01b600052602260045260246000fd5b60008219821115612c9357612c93612c05565b500190565b6020808252600e908201526d3737ba16b1b7b73a3937b63632b960911b604082015260600190565b6020808252600c908201526b3737ba16b3b7bb32b93737b960a11b604082015260600190565b6020808252601390820152721b995dcb5cd85b594b585ccb58dd5c9c995b9d606a1b604082015260600190565b6020808252601990820152786465706f7369742d746f6b656e2d69732d696e61637469766560381b604082015260600190565b600080600080600060a08688031215612d5e57600080fd5b612d6786612b16565b602087015160408801516060890151608090990151929a91995097965090945092505050565b6020808252601d908201527f636f6c6c61746572697a6174696f6e2d726174696f2d67742d31303025000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082612e2f57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612e4e57612e4e612c05565b500290565b634e487b7160e01b600052604160045260246000fd5b80516129f481612882565b60006020808385031215612e8757600080fd5b825167ffffffffffffffff80821115612e9f57600080fd5b818501915085601f830112612eb357600080fd5b815181811115612ec557612ec5612e53565b8060051b604051601f19603f83011681018181108582111715612eea57612eea612e53565b604052918252848201925083810185019188831115612f0857600080fd5b938501935b82851015612f2d57612f1e85612e69565b84529385019392850192612f0d565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415612f6357612f63612c05565b5060010190565b6020808252601790820152766e6f742d656e6f7567682d667265652d62616c616e636560481b604082015260600190565b6020808252818101527f6d696e2d6465706f7369742d74696d652d686176652d6e6f742d706173736564604082015260600190565b60008251612fe28184602087016128c7565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122065057226d0ab857fde2cf168bb2cec80d8c6867fc26518ab613732cff0adf63b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(address,uint256)": {
        "params": {
          "_amount": "The amount to burn",
          "_from": "The account to burn from"
        }
      },
      "deposit(uint256,address)": {
        "params": {
          "_amount": "The amount of collateral tokens to deposit",
          "_onBehalfOf": "The account to deposit to"
        }
      },
      "lockedBalanceOf(address)": {
        "params": {
          "_account": "The account to check"
        },
        "returns": {
          "_lockedBalance": "The locked amount"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "The amount to mint",
          "_to": "The account to mint to"
        }
      },
      "seize(address,address,uint256)": {
        "details": "Same as _transfer",
        "params": {
          "_amount": "The amount to seize",
          "_from": "The account to seize from",
          "_to": "The beneficiary account"
        }
      },
      "setController(address)": {
        "params": {
          "_controller": "The new Controller contract"
        }
      },
      "unlockedBalanceOf(address)": {
        "params": {
          "_account": "The account to check"
        },
        "returns": {
          "_unlockedBalance": "The amount that user can transfer or withdraw"
        }
      },
      "updateCollateralizationRatio(uint128)": {
        "params": {
          "_newCollateralizationRatio": "The new CR value"
        }
      },
      "updateMaxTotalSupplyInUsd(uint256)": {
        "params": {
          "_newMaxTotalSupplyInUsd": "The new max total supply"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "_amount": "The amount of collateral to withdraw",
          "_to": "The account that will receive withdrawn collateral"
        }
      }
    },
    "title": "Represents the users' deposits",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CollateralDeposited(address,address,uint256,uint256)": {
        "notice": "Emitted when collateral is deposited"
      },
      "CollateralWithdrawn(address,address,uint256,uint256)": {
        "notice": "Emitted when collateral is withdrawn"
      },
      "CollateralizationRatioUpdated(uint256,uint256)": {
        "notice": "Emitted when CR is updated"
      },
      "DepositTokenActiveUpdated(bool,bool)": {
        "notice": "Emitted when active flag is updated"
      },
      "MaxTotalSupplyUpdated(uint256,uint256)": {
        "notice": "Emitted when max total supply is updated"
      },
      "MinDepositTimeUpdated(uint256,uint256)": {
        "notice": "Emitted when minimum deposit time is updated"
      }
    },
    "kind": "user",
    "methods": {
      "burn(address,uint256)": {
        "notice": "Burn deposit tokens"
      },
      "collateralizationRatio()": {
        "notice": "Collaterization ration for the deposit token"
      },
      "controller()": {
        "notice": "Controller contract"
      },
      "deposit(uint256,address)": {
        "notice": "Deposit colleteral and mint vsdTOKEN (tokenized deposit position)"
      },
      "isActive()": {
        "notice": "If a collateral isn't active, it disables minting new tokens"
      },
      "lastDepositOf(address)": {
        "notice": "Stores de timestamp of last deposit event of each account. It's used combined with `minDepositTime`."
      },
      "lockedBalanceOf(address)": {
        "notice": "Get the locked balance"
      },
      "minDepositTime()": {
        "notice": "The min amount of time that an account should wait after deposit collateral before be able to withdraw"
      },
      "mint(address,uint256)": {
        "notice": "Mint deposit token when an account deposits collateral"
      },
      "seize(address,address,uint256)": {
        "notice": "Seize tokens"
      },
      "setController(address)": {
        "notice": "Update Controller contract"
      },
      "toggleIsActive()": {
        "notice": "Enable/Disable the Deposit Token"
      },
      "underlying()": {
        "notice": "Deposit underlying asset (e.g. MET)"
      },
      "unlockedBalanceOf(address)": {
        "notice": "Get the unlocked balance (i.e. transfarable, withdrawable)"
      },
      "updateCollateralizationRatio(uint128)": {
        "notice": "Update collateralization ratio"
      },
      "updateMaxTotalSupplyInUsd(uint256)": {
        "notice": "Update max total supply"
      },
      "updateMinDepositTime(uint256)": {
        "notice": "Update minimum deposit time"
      },
      "withdraw(uint256,address)": {
        "notice": "Burn vsdTOKEN and withdraw collateral"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7181,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7184,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7235,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6152,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "controller",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IController)10865"
      },
      {
        "astId": 6260,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14822,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "balanceOf",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14828,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "allowance",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14830,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 14832,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 14834,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "decimals",
        "offset": 0,
        "slot": "56",
        "type": "t_uint8"
      },
      {
        "astId": 14836,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 14838,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "maxTotalSupplyInUsd",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 14842,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "underlying",
        "offset": 0,
        "slot": "59",
        "type": "t_contract(IERC20)7890"
      },
      {
        "astId": 14845,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "collateralizationRatio",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 14848,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "minDepositTime",
        "offset": 0,
        "slot": "61",
        "type": "t_uint256"
      },
      {
        "astId": 14853,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "lastDepositOf",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14856,
        "contract": "contracts/DepositToken.sol:DepositToken",
        "label": "isActive",
        "offset": 0,
        "slot": "63",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IController)10865": {
        "encoding": "inplace",
        "label": "contract IController",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)7890": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}