{
  "address": "0x119B9ce7b2087153d02c8aA8F7dc914BB7E5FB5F",
  "abi": [
    {
      "inputs": [],
      "name": "ArraysLengthDoNotMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DistributorDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolAddressIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReachedMaxRewardTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardTokenIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotGovernor",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint224",
          "name": "newIndex",
          "type": "uint224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newTimestamp",
          "type": "uint32"
        }
      ],
      "name": "TokenIndexUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSpeed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpeed",
          "type": "uint256"
        }
      ],
      "name": "TokenSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supplyIndex",
          "type": "uint256"
        }
      ],
      "name": "TokensAccruedUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INITIAL_INDEX",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_REWARD_TOKENS",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens_",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts_",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens_",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_claimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_claimable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "rewardToken_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenSpeeds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenStates",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensAccruedOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "updateBeforeMintOrBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        }
      ],
      "name": "updateBeforeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newSpeed_",
          "type": "uint256"
        }
      ],
      "name": "updateTokenSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "speeds_",
          "type": "uint256[]"
        }
      ],
      "name": "updateTokenSpeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xef49e467519749585b5b8fd7c7d0fcc90ebbd8b3f6fd6738261b47f95f4d2f0a",
  "receipt": {
    "to": null,
    "from": "0x7EEeF54Df0596633dbf6Fa3C88dEB1E3eA85ECE8",
    "contractAddress": "0x119B9ce7b2087153d02c8aA8F7dc914BB7E5FB5F",
    "transactionIndex": 0,
    "gasUsed": "1763971",
    "logsBloom": "0x
    "blockHash": "0x5d1082ce578cc22665d5f86077500cacb2e21814a8729dea927d086051385d98",
    "transactionHash": "0xef49e467519749585b5b8fd7c7d0fcc90ebbd8b3f6fd6738261b47f95f4d2f0a",
    "logs": [],
    "blockNumber": 101053569,
    "cumulativeGasUsed": "1763971",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "39157ddb13861b2afdd6feacda57f5f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ArraysLengthDoNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributorDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReachedMaxRewardTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardTokenIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint224\",\"name\":\"newIndex\",\"type\":\"uint224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newTimestamp\",\"type\":\"uint32\"}],\"name\":\"TokenIndexUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSpeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"TokenSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplyIndex\",\"type\":\"uint256\"}],\"name\":\"TokensAccruedUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INITIAL_INDEX\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARD_TOKENS\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens_\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts_\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens_\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStates\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensAccruedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"updateBeforeMintOrBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"updateBeforeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newSpeed_\",\"type\":\"uint256\"}],\"name\":\"updateTokenSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"speeds_\",\"type\":\"uint256[]\"}],\"name\":\"updateTokenSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"governor()\":{\"returns\":{\"_governor\":\"The governor\"}},\"updateBeforeMintOrBurn(address,address)\":{\"details\":\"Called by DepositToken and DebtToken contracts This function also may be called by anyone to update stored indexes\"},\"updateBeforeTransfer(address,address,address)\":{\"details\":\"Called by DepositToken and DebtToken contracts\"}},\"title\":\"RewardsDistributor contract\",\"version\":1},\"userdoc\":{\"events\":{\"RewardClaimed(address,uint256)\":{\"notice\":\"Emitted when reward is claimed\"},\"TokenIndexUpdated(uint224,uint32)\":{\"notice\":\"Emitted when updating token index\"},\"TokenSpeedUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when updating token speed\"},\"TokensAccruedUpdated(address,address,uint256,uint256)\":{\"notice\":\"Emitted when updating accrued token\"}},\"kind\":\"user\",\"methods\":{\"INITIAL_INDEX()\":{\"notice\":\"The initial index\"},\"MAX_REWARD_TOKENS()\":{\"notice\":\"Max reward tokens to avoid DoS scenario\"},\"accountIndexOf(address,address)\":{\"notice\":\"The supply index for each token for each account as of the last time they accrued token\"},\"claimRewards(address)\":{\"notice\":\"Claim tokens accrued by account in all tokens\"},\"claimRewards(address,address[])\":{\"notice\":\"Claim tokens accrued by account in the specified tokens\"},\"claimRewards(address[],address[])\":{\"notice\":\"Claim tokens accrued by the accounts in the specified tokens\"},\"claimable(address)\":{\"notice\":\"Returns claimable amount consider all tokens\"},\"claimable(address,address)\":{\"notice\":\"Returns updated claimable amount for given token\"},\"governor()\":{\"notice\":\"Get the governor\"},\"pool()\":{\"notice\":\"Pool contract\"},\"rewardToken()\":{\"notice\":\"The token to reward\"},\"tokenSpeeds(address)\":{\"notice\":\"The amount of token distributed for each token per second\"},\"tokenStates(address)\":{\"notice\":\"The reward state for each token\"},\"tokens(uint256)\":{\"notice\":\"Track tokens for reward\"},\"tokensAccruedOf(address)\":{\"notice\":\"The token accrued but not yet transferred to each user\"},\"updateBeforeMintOrBurn(address,address)\":{\"notice\":\"Update indexes on pre-mint and pre-burn\"},\"updateBeforeTransfer(address,address,address)\":{\"notice\":\"Update indexes on pre-transfer\"},\"updateTokenSpeed(address,uint256)\":{\"notice\":\"Update speed for a single deposit token\"},\"updateTokenSpeeds(address[],uint256[])\":{\"notice\":\"Update token speeds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardsDistributor.sol\":\"RewardsDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/utils/math/SafeCast.sol\\\";\\nimport \\\"./dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./dependencies/openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IDebtToken.sol\\\";\\nimport \\\"./interfaces/IDepositToken.sol\\\";\\nimport \\\"./access/Manageable.sol\\\";\\nimport \\\"./storage/RewardsDistributorStorage.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\n\\nerror DistributorDoesNotExist();\\nerror InvalidToken();\\nerror RewardTokenIsNull();\\nerror ReachedMaxRewardTokens();\\nerror ArraysLengthDoNotMatch();\\n\\n/**\\n * @title RewardsDistributor contract\\n */\\ncontract RewardsDistributor is ReentrancyGuard, Manageable, RewardsDistributorStorageV1 {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.2.0\\\";\\n\\n    /// @notice The initial index\\n    uint224 public constant INITIAL_INDEX = 1e18;\\n\\n    /// @notice Max reward tokens to avoid DoS scenario\\n    uint224 public constant MAX_REWARD_TOKENS = 20;\\n\\n    /// @notice Emitted when reward is claimed\\n    event RewardClaimed(address indexed account, uint256 amount);\\n\\n    /// @notice Emitted when updating accrued token\\n    event TokensAccruedUpdated(IERC20 indexed token, address indexed account, uint256 tokensDelta, uint256 supplyIndex);\\n\\n    /// @notice Emitted when updating token speed\\n    event TokenSpeedUpdated(IERC20 indexed token, uint256 oldSpeed, uint256 newSpeed);\\n\\n    /// @notice Emitted when updating token index\\n    event TokenIndexUpdated(uint224 newIndex, uint32 newTimestamp);\\n\\n    /**\\n     * @dev Throws if this contract isn't registered on pool\\n     */\\n    modifier onlyIfDistributorExists() {\\n        bool _distributorAdded = false;\\n        address[] memory _rewardsDistributors = pool.getRewardsDistributors();\\n        uint256 _length = _rewardsDistributors.length;\\n        for (uint256 i; i < _length; ++i) {\\n            if (_rewardsDistributors[i] == address(this)) {\\n                _distributorAdded = true;\\n                break;\\n            }\\n        }\\n        if (!_distributorAdded) revert DistributorDoesNotExist();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if token doesn't exist\\n     * @dev Should be a DepositToken (suppliers) or DebtToken (borrowers)\\n     */\\n    modifier onlyIfTokenExists(address token_) {\\n        IPool _pool = pool;\\n        if (!_pool.doesDebtTokenExist(IDebtToken(token_)) && !_pool.doesDepositTokenExist(IDepositToken(token_))) {\\n            revert InvalidToken();\\n        }\\n        _;\\n    }\\n\\n    function initialize(IPool pool_, IERC20 rewardToken_) external initializer {\\n        if (address(rewardToken_) == address(0)) revert RewardTokenIsNull();\\n\\n        __ReentrancyGuard_init();\\n        __Manageable_init(pool_);\\n\\n        rewardToken = rewardToken_;\\n    }\\n\\n    /**\\n     * @notice Returns claimable amount consider all tokens\\n     */\\n    function claimable(address account_) external view override returns (uint256 _claimable) {\\n        for (uint256 i; i < tokens.length; ++i) {\\n            _claimable += claimable(account_, tokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns updated claimable amount for given token\\n     */\\n    function claimable(address account_, IERC20 token_) public view override returns (uint256 _claimable) {\\n        TokenState memory _tokenState = tokenStates[token_];\\n        (uint224 _newIndex, uint32 _newTimestamp) = _calculateTokenIndex(_tokenState, token_);\\n        if (_newIndex > 0 && _newTimestamp > 0) {\\n            _tokenState = TokenState({index: _newIndex, timestamp: _newTimestamp});\\n        } else if (_newTimestamp > 0) {\\n            _tokenState.timestamp = _newTimestamp;\\n        }\\n        (, , _claimable) = _calculateTokensAccruedOf(_tokenState, token_, account_);\\n    }\\n\\n    /**\\n     * @notice Claim tokens accrued by account in all tokens\\n     */\\n    function claimRewards(address account_) external override {\\n        claimRewards(account_, tokens);\\n    }\\n\\n    /**\\n     * @notice Claim tokens accrued by account in the specified tokens\\n     */\\n    function claimRewards(address account_, IERC20[] memory tokens_) public override {\\n        address[] memory _accounts = new address[](1);\\n        _accounts[0] = account_;\\n        claimRewards(_accounts, tokens_);\\n    }\\n\\n    /**\\n     * @notice Claim tokens accrued by the accounts in the specified tokens\\n     */\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) public override nonReentrant {\\n        uint256 _accountsLength = accounts_.length;\\n        uint256 _tokensLength = tokens_.length;\\n        for (uint256 i; i < _tokensLength; ++i) {\\n            IERC20 _token = tokens_[i];\\n\\n            if (tokenStates[_token].index > 0) {\\n                _updateTokenIndex(_token);\\n                for (uint256 j; j < _accountsLength; j++) {\\n                    _updateTokensAccruedOf(_token, accounts_[j]);\\n                }\\n            }\\n        }\\n\\n        for (uint256 j; j < _accountsLength; j++) {\\n            address _account = accounts_[j];\\n            _transferRewardIfEnoughTokens(_account, tokensAccruedOf[_account]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update indexes on pre-mint and pre-burn\\n     * @dev Called by DepositToken and DebtToken contracts\\n     * This function also may be called by anyone to update stored indexes\\n     */\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external override {\\n        if (tokenStates[token_].index > 0) {\\n            _updateTokenIndex(token_);\\n            _updateTokensAccruedOf(token_, account_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update indexes on pre-transfer\\n     * @dev Called by DepositToken and DebtToken contracts\\n     */\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external override {\\n        if (tokenStates[token_].index > 0) {\\n            _updateTokenIndex(token_);\\n            _updateTokensAccruedOf(token_, from_);\\n            _updateTokensAccruedOf(token_, to_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate updated token index values\\n     */\\n    function _calculateTokenIndex(\\n        TokenState memory _supplyState,\\n        IERC20 token_\\n    ) private view returns (uint224 _newIndex, uint32 _newTimestamp) {\\n        uint256 _speed = tokenSpeeds[token_];\\n        uint256 _deltaTimestamps = block.timestamp - uint256(_supplyState.timestamp);\\n        if (_deltaTimestamps > 0 && _speed > 0) {\\n            uint256 _totalSupply = token_.totalSupply();\\n            uint256 _tokensAccrued = _deltaTimestamps * _speed;\\n            uint256 _ratio = _totalSupply > 0 ? _tokensAccrued.wadDiv(_totalSupply) : 0;\\n            _newIndex = (_supplyState.index + _ratio).toUint224();\\n            _newTimestamp = block.timestamp.toUint32();\\n        } else if (_deltaTimestamps > 0 && _supplyState.index > 0) {\\n            _newTimestamp = block.timestamp.toUint32();\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate updated account index and claimable values\\n     */\\n    function _calculateTokensAccruedOf(\\n        TokenState memory _tokenState,\\n        IERC20 token_,\\n        address account_\\n    ) private view returns (uint256 _tokenIndex, uint256 _tokensDelta, uint256 _tokensAccruedOf) {\\n        _tokenIndex = _tokenState.index;\\n        uint256 _accountIndex = accountIndexOf[token_][account_];\\n\\n        if (_accountIndex == 0 && _tokenIndex > INITIAL_INDEX) {\\n            _accountIndex = INITIAL_INDEX;\\n        }\\n\\n        uint256 _deltaIndex = _tokenIndex - _accountIndex;\\n        _tokensDelta = token_.balanceOf(account_).wadMul(_deltaIndex);\\n        _tokensAccruedOf = tokensAccruedOf[account_] + _tokensDelta;\\n    }\\n\\n    /**\\n     * @notice Transfer tokens to the user\\n     * @dev If there is not enough tokens, we do not perform the transfer\\n     */\\n    function _transferRewardIfEnoughTokens(address account_, uint256 amount_) private {\\n        IERC20 _rewardToken = rewardToken;\\n        uint256 _balance = _rewardToken.balanceOf(address(this));\\n        if (amount_ > 0 && amount_ <= _balance) {\\n            tokensAccruedOf[account_] = 0;\\n            _rewardToken.safeTransfer(account_, amount_);\\n            emit RewardClaimed(account_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate tokens accrued by an account\\n     */\\n    function _updateTokensAccruedOf(IERC20 token_, address account_) private {\\n        (uint256 _tokenIndex, uint256 _tokensDelta, uint256 _tokensAccruedOf) = _calculateTokensAccruedOf(\\n            tokenStates[token_],\\n            token_,\\n            account_\\n        );\\n        accountIndexOf[token_][account_] = _tokenIndex;\\n        tokensAccruedOf[account_] = _tokensAccruedOf;\\n        emit TokensAccruedUpdated(token_, account_, _tokensDelta, _tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Accrue reward token by updating the index\\n     */\\n    function _updateTokenIndex(IERC20 token_) private {\\n        TokenState storage _supplyState = tokenStates[token_];\\n        (uint224 _newIndex, uint32 _newTimestamp) = _calculateTokenIndex(_supplyState, token_);\\n        if (_newIndex > 0 && _newTimestamp > 0) {\\n            _supplyState.index = _newIndex;\\n            _supplyState.timestamp = _newTimestamp;\\n            emit TokenIndexUpdated(_newIndex, _newTimestamp);\\n        } else if (_newTimestamp > 0) {\\n            _supplyState.timestamp = _newTimestamp;\\n            emit TokenIndexUpdated(_supplyState.index, _newTimestamp);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update the speed for token\\n     */\\n    function _updateTokenSpeed(\\n        IERC20 token_,\\n        uint256 newSpeed_\\n    ) private onlyIfDistributorExists onlyIfTokenExists(address(token_)) {\\n        uint256 _currentSpeed = tokenSpeeds[token_];\\n        if (_currentSpeed > 0) {\\n            _updateTokenIndex(token_);\\n        } else if (newSpeed_ > 0) {\\n            // Add token to the list\\n            if (tokenStates[token_].index == 0) {\\n                if (tokens.length == MAX_REWARD_TOKENS) revert ReachedMaxRewardTokens();\\n                tokenStates[token_] = TokenState({index: INITIAL_INDEX, timestamp: block.timestamp.toUint32()});\\n                tokens.push(token_);\\n            } else {\\n                // Update timestamp to ensure extra interest is not accrued during the prior period\\n                tokenStates[token_].timestamp = block.timestamp.toUint32();\\n            }\\n        }\\n\\n        if (_currentSpeed != newSpeed_) {\\n            tokenSpeeds[token_] = newSpeed_;\\n            emit TokenSpeedUpdated(token_, _currentSpeed, newSpeed_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update speed for a single deposit token\\n     */\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external override onlyGovernor {\\n        _updateTokenSpeed(token_, newSpeed_);\\n    }\\n\\n    /**\\n     * @notice Update token speeds\\n     */\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external override onlyGovernor {\\n        uint256 _tokensLength = tokens_.length;\\n        if (_tokensLength != speeds_.length) revert ArraysLengthDoNotMatch();\\n\\n        for (uint256 i; i < _tokensLength; ++i) {\\n            _updateTokenSpeed(tokens_[i], speeds_[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fcb70697dc2de4f71693f204f6fe647e54ba57110d435d2cb061c37eec056e1\",\"license\":\"MIT\"},\"contracts/access/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\nimport \\\"../interfaces/IManageable.sol\\\";\\n\\nerror SenderIsNotPool();\\nerror SenderIsNotGovernor();\\nerror IsPaused();\\nerror IsShutdown();\\nerror PoolAddressIsNull();\\n\\n/**\\n * @title Reusable contract that handles accesses\\n */\\nabstract contract Manageable is IManageable, Initializable {\\n    /**\\n     * @notice Pool contract\\n     */\\n    IPool public pool;\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't the pool\\n     */\\n    modifier onlyPool() {\\n        if (msg.sender != address(pool)) revert SenderIsNotPool();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't the governor\\n     */\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor()) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is paused\\n     */\\n    modifier whenNotPaused() {\\n        if (pool.paused()) revert IsPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is shutdown\\n     */\\n    modifier whenNotShutdown() {\\n        if (pool.everythingStopped()) revert IsShutdown();\\n        _;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Manageable_init(IPool pool_) internal initializer {\\n        if (address(pool_) == address(0)) revert PoolAddressIsNull();\\n        pool = pool_;\\n    }\\n\\n    /**\\n     * @notice Get the governor\\n     * @return _governor The governor\\n     */\\n    function governor() public view returns (address _governor) {\\n        _governor = IGovernable(address(pool)).governor();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad9f85c5237d8b26e61b9d0d012ff8ff29950b423214404a0557e8db5c1a20aa\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xc790f8419ee2c68721d6203ed1b5f81e89eb7e1dca19be3a9f54cb5de44491f1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address borrower_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xfeaa19f62620f67e7189e863f96de757c9a17b1b737acedeffd98aaf1df1a0e1\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralFactor() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function flashWithdraw(address account_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\\n\\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\\n\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0xf6fa0d670b28445a461bb93d4bbbe8a6101289dc418c61475d52f8693280d255\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3b132b42090c167b2c0aef6d78d833c669c43b9e55593a7a21a96ed5d3082700\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\",\"keccak256\":\"0xac88e0997a26942cb9cbda1a7dd9756e28ba2025813e5b07e55939fbf8538ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IFeeProvider.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function feeProvider() external view returns (IFeeProvider);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    ) external returns (uint256 _withdrawn, uint256 _repaid);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\\n\\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(\\n        address account_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    ) external returns (uint256 _deposited, uint256 _issued);\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeized_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _maxAmountToRepay);\\n\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view returns (uint256 _amountIn, uint256 _fee);\\n\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _fee);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _fee);\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function isSwapActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb6ccb04bbde8597025b2243b7734de51466bc5f6a6c5229484f20b881f4915c8\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateMasterOracle(IMasterOracle newOracle_) external;\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function updateNativeTokenGateway(address newGateway_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd4f5f60c3943b5fa9ffb34ef1909d5a8ef4ca62fd35ea0567cd0402c15d6ee2a\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external;\\n\\n    function claimable(address account_) external view returns (uint256 _claimable);\\n\\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\\n\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\\n\\n    function tokens(uint256) external view returns (IERC20);\\n\\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\\n\\n    function accountIndexOf(IERC20, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f527eeae61b6a5bff7d3b48037234ef718ae7f71dc452e8cab3b60581f0d810\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2bb34cd1201403e756bf1e49ab9318024e3d6e26b61c114721f9d4da57c0fa3d\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x2f080adc5880151dc4446ef43b54abab8e3711c5f2e526917ef39a05e3c16a00\",\"license\":\"MIT\"},\"contracts/interfaces/external/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x75f04b225d0c310be7e0a09ee4c1aa6eeeb8d94e02fc0e4160a9597ce2d8d446\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/RewardsDistributorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IRewardsDistributor.sol\\\";\\n\\nabstract contract RewardsDistributorStorageV1 is IRewardsDistributor {\\n    struct TokenState {\\n        uint224 index; // The last updated index\\n        uint32 timestamp; // The timestamp of the latest index update\\n    }\\n\\n    /**\\n     * @notice The token to reward\\n     */\\n    IERC20 public override rewardToken;\\n\\n    /**\\n     * @notice Track tokens for reward\\n     */\\n    IERC20[] public override tokens;\\n\\n    /**\\n     * @notice The amount of token distributed for each token per second\\n     */\\n    mapping(IERC20 => uint256) public override tokenSpeeds;\\n\\n    /**\\n     * @notice The reward state for each token\\n     */\\n    mapping(IERC20 => TokenState) public override tokenStates;\\n\\n    /**\\n     * @notice The supply index for each token for each account as of the last time they accrued token\\n     */\\n    mapping(IERC20 => mapping(address => uint256)) public override accountIndexOf;\\n\\n    /**\\n     * @notice The token accrued but not yet transferred to each user\\n     */\\n    mapping(address => uint256) public override tokensAccruedOf;\\n}\\n\",\"keccak256\":\"0x37ce8b2fee963a9cb3abb19e51be4f2ad4ca7f3c70e23cf0f9be8572c9fcd45c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ef3806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80635d0cde97116100b8578063b17b23a01161007c578063b17b23a0146102e9578063b9afda2d146102fc578063d4570c1c1461030f578063ef5cfb8c14610322578063f7c618c114610335578063ffa1ad741461034857600080fd5b80635d0cde971461024857806389cb096a14610250578063a0cfa0dd14610296578063a428d9c8146102b6578063aa629975146102c957600080fd5b80631b30f0c0116100ff5780631b30f0c0146101e95780632026ffa3146101fc578063402914f51461020f578063485cc955146102225780634f64b2be1461023557600080fd5b8063013bc51c1461013c57806301bc3acb1461017a5780630c340a241461018f578063160c3a03146101af57806316f0115b146101d6575b600080fd5b61016761014a3660046118b2565b603860209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61018d610188366004611937565b610379565b005b61019761043e565b6040516001600160a01b039091168152602001610171565b6101be670de0b6b3a764000081565b6040516001600160e01b039091168152602001610171565b600254610197906001600160a01b031681565b61018d6101f73660046118b2565b6104c0565b61018d61020a366004611a82565b6104fe565b61016761021d366004611ad2565b610563565b61018d6102303660046118b2565b6105c4565b610197610243366004611aef565b61068d565b6101be601481565b61028861025e366004611ad2565b6037602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604051610171929190611b08565b6101676102a4366004611ad2565b60366020526000908152604090205481565b61018d6102c4366004611b27565b6106b7565b6101676102d7366004611ad2565b60396020526000908152604090205481565b61018d6102f7366004611bdf565b61083c565b61018d61030a366004611c2a565b610880565b61016761031d3660046118b2565b6108c3565b61018d610330366004611ad2565b610996565b603454610197906001600160a01b031681565b61036c604051806040016040528060058152602001640312e322e360dc1b81525081565b6040516101719190611c82565b61038161043e565b6001600160a01b0316336001600160a01b0316146103b257604051634b98449160e11b815260040160405180910390fd5b828181146103d357604051631dc1520760e31b815260040160405180910390fd5b60005b81811015610436576104268686838181106103f3576103f3611cb5565b90506020020160208101906104089190611ad2565b85858481811061041a5761041a611cb5565b905060200201356109fd565b61042f81611ce1565b90506103d6565b505050505050565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b15801561048357600080fd5b505afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb9190611cfc565b905090565b6001600160a01b0382166000908152603760205260409020546001600160e01b0316156104fa576104f082610e05565b6104fa8282610f49565b5050565b60408051600180825281830190925260009160208083019080368337019050509050828160008151811061053457610534611cb5565b60200260200101906001600160a01b031690816001600160a01b03168152505061055e81836106b7565b505050565b6000805b6035548110156105be576105a2836035838154811061058857610588611cb5565b6000918252602090912001546001600160a01b03166108c3565b6105ac9083611d19565b91506105b781611ce1565b9050610567565b50919050565b600054610100900460ff16806105dd575060005460ff16155b6106025760405162461bcd60e51b81526004016105f990611d31565b60405180910390fd5b600054610100900460ff16158015610624576000805461ffff19166101011790555b6001600160a01b03821661064b57604051636d4b163760e11b815260040160405180910390fd5b61065361101b565b61065c8361108a565b603480546001600160a01b0319166001600160a01b038416179055801561055e576000805461ff0019169055505050565b6035818154811061069d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6002600154141561070a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105f9565b60026001558151815160005b818110156107c557600084828151811061073257610732611cb5565b6020908102919091018101516001600160a01b038116600090815260379092526040909120549091506001600160e01b0316156107b45761077281610e05565b60005b848110156107b2576107a08288838151811061079357610793611cb5565b6020026020010151610f49565b806107aa81611ce1565b915050610775565b505b506107be81611ce1565b9050610716565b5060005b828110156108315760008582815181106107e5576107e5611cb5565b6020026020010151905061081e8160396000846001600160a01b03166001600160a01b0316815260200190815260200160002054611138565b508061082981611ce1565b9150506107c9565b505060018055505050565b6001600160a01b0383166000908152603760205260409020546001600160e01b03161561055e5761086c83610e05565b6108768383610f49565b61055e8382610f49565b61088861043e565b6001600160a01b0316336001600160a01b0316146108b957604051634b98449160e11b815260040160405180910390fd5b6104fa82826109fd565b6001600160a01b03811660009081526037602090815260408083208151808301909252546001600160e01b0381168252600160e01b900463ffffffff16918101919091528180610913838661123f565b915091506000826001600160e01b0316118015610936575060008163ffffffff16115b15610966576040518060400160405280836001600160e01b031681526020018263ffffffff16815250925061097f565b63ffffffff81161561097f5763ffffffff811660208401525b61098a838688611392565b98975050505050505050565b6109fa8160358054806020026020016040519081016040528092919081815260200182805480156109f057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109d2575b50505050506104fe565b50565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610a4e57600080fd5b505afa158015610a62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a8a9190810190611d7f565b805190915060005b81811015610ae657306001600160a01b0316838281518110610ab657610ab6611cb5565b60200260200101516001600160a01b03161415610ad65760019350610ae6565b610adf81611ce1565b9050610a92565b5082610b0557604051634757a01f60e01b815260040160405180910390fd5b6002546040516308a00b1f60e31b81526001600160a01b03808816600483015287921690819063450058f89060240160206040518083038186803b158015610b4c57600080fd5b505afa158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b849190611e0e565b158015610c075750604051633e25dee160e21b81526001600160a01b03838116600483015282169063f8977b849060240160206040518083038186803b158015610bcd57600080fd5b505afa158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c059190611e0e565b155b15610c255760405163c1ab6dc160e01b815260040160405180910390fd5b6001600160a01b0387166000908152603660205260409020548015610c5257610c4d88610e05565b610d9e565b8615610d9e576001600160a01b0388166000908152603760205260409020546001600160e01b0316610d5a5760355460141415610ca257604051639e8b4a2160e01b815260040160405180910390fd5b6040518060400160405280670de0b6b3a76400006001600160e01b03168152602001610ccd426114b8565b63ffffffff9081169091526001600160a01b038a166000818152603760209081526040822085519590910151909316600160e01b026001600160e01b03909416939093179091556035805460018101825592527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d90910180546001600160a01b0319169091179055610d9e565b610d63426114b8565b6001600160a01b0389166000908152603760205260409020805463ffffffff92909216600160e01b026001600160e01b039092169190911790555b868114610dfb576001600160a01b0388166000818152603660209081526040918290208a905581518481529081018a90527f07295410ddc875d5ff9b778ece2c279c9b91abeefd296803662b28cf6ad33c08910160405180910390a25b5050505050505050565b6001600160a01b0381166000908152603760209081526040808320815180830190925280546001600160e01b0381168352600160e01b900463ffffffff16928201929092529091908190610e59908561123f565b915091506000826001600160e01b0316118015610e7c575060008163ffffffff16115b15610eda5763ffffffff8116600160e01b026001600160e01b0383161783556040517f883d8b44a1f0e651bb0d11a8e962de03c77a351328bbeb12b702e5632288ee6f90610ecd9084908490611b08565b60405180910390a1610f43565b63ffffffff811615610f4357825463ffffffff8216600160e01b026001600160e01b0391821681811786556040517f883d8b44a1f0e651bb0d11a8e962de03c77a351328bbeb12b702e5632288ee6f93610f3a9316909117908490611b08565b60405180910390a15b50505050565b6001600160a01b03821660009081526037602090815260408083208151808301909252546001600160e01b0381168252600160e01b900463ffffffff169181019190915281908190610f9c908686611392565b6001600160a01b038881166000818152603860209081526040808320948c16808452948252808320889055603982529182902085905581518681529081018790529598509396509194509290917f49abdf3748a8d465b0d3d5d126dab076f5109ea80b761c4c1c45b2710165087b910160405180910390a35050505050565b600054610100900460ff1680611034575060005460ff16155b6110505760405162461bcd60e51b81526004016105f990611d31565b600054610100900460ff16158015611072576000805461ffff19166101011790555b6001805580156109fa576000805461ff001916905550565b600054610100900460ff16806110a3575060005460ff16155b6110bf5760405162461bcd60e51b81526004016105f990611d31565b600054610100900460ff161580156110e1576000805461ffff19166101011790555b6001600160a01b0382166111085760405163724f500960e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b03841617905580156104fa576000805461ff00191690555050565b6034546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a082319060240160206040518083038186803b15801561118057600080fd5b505afa158015611194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b89190611e30565b90506000831180156111ca5750808311155b15610f43576001600160a01b038085166000908152603960205260408120556111f69083168585611521565b836001600160a01b03167f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72418460405161123191815260200190565b60405180910390a250505050565b6001600160a01b03811660009081526036602090815260408220549084015182919082906112739063ffffffff1642611e49565b90506000811180156112855750600082115b1561135f576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c557600080fd5b505afa1580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd9190611e30565b9050600061130b8484611e60565b9050600080831161131d576000611327565b6113278284611573565b905061134a818a600001516001600160e01b03166113459190611d19565b6115b0565b9650611355426114b8565b9550505050611389565b600081118015611378575085516001600160e01b031615155b1561138957611386426114b8565b92505b50509250929050565b82516001600160a01b0380841660009081526038602090815260408083209386168352929052908120546001600160e01b03909216918190801580156113df5750670de0b6b3a764000084115b156113ef5750670de0b6b3a76400005b60006113fb8286611e49565b6040516370a0823160e01b81526001600160a01b038881166004830152919250611484918391908a16906370a082319060240160206040518083038186803b15801561144657600080fd5b505afa15801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e9190611e30565b90611619565b6001600160a01b0387166000908152603960205260409020549094506114ab908590611d19565b9250505093509350939050565b600063ffffffff82111561151d5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016105f9565b5090565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261055e908490611651565b600081611581600282611e7f565b611593670de0b6b3a764000086611e60565b61159d9190611d19565b6115a79190611e7f565b90505b92915050565b60006001600160e01b0382111561151d5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016105f9565b6000821580611626575081155b15611633575060006115aa565b670de0b6b3a7640000611647600282611e7f565b6115938486611e60565b60006116a6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117239092919063ffffffff16565b80519091501561055e57808060200190518101906116c49190611e0e565b61055e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105f9565b6060611732848460008561173c565b90505b9392505050565b60608247101561179d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105f9565b843b6117eb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105f9565b600080866001600160a01b031685876040516118079190611ea1565b60006040518083038185875af1925050503d8060008114611844576040519150601f19603f3d011682016040523d82523d6000602084013e611849565b606091505b5091509150611859828286611864565b979650505050505050565b60608315611873575081611735565b8251156118835782518084602001fd5b8160405162461bcd60e51b81526004016105f99190611c82565b6001600160a01b03811681146109fa57600080fd5b600080604083850312156118c557600080fd5b82356118d08161189d565b915060208301356118e08161189d565b809150509250929050565b60008083601f8401126118fd57600080fd5b50813567ffffffffffffffff81111561191557600080fd5b6020830191508360208260051b850101111561193057600080fd5b9250929050565b6000806000806040858703121561194d57600080fd5b843567ffffffffffffffff8082111561196557600080fd5b611971888389016118eb565b9096509450602087013591508082111561198a57600080fd5b50611997878288016118eb565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119e2576119e26119a3565b604052919050565b600067ffffffffffffffff821115611a0457611a046119a3565b5060051b60200190565b600082601f830112611a1f57600080fd5b81356020611a34611a2f836119ea565b6119b9565b82815260059290921b84018101918181019086841115611a5357600080fd5b8286015b84811015611a77578035611a6a8161189d565b8352918301918301611a57565b509695505050505050565b60008060408385031215611a9557600080fd5b8235611aa08161189d565b9150602083013567ffffffffffffffff811115611abc57600080fd5b611ac885828601611a0e565b9150509250929050565b600060208284031215611ae457600080fd5b81356117358161189d565b600060208284031215611b0157600080fd5b5035919050565b6001600160e01b0392909216825263ffffffff16602082015260400190565b60008060408385031215611b3a57600080fd5b823567ffffffffffffffff80821115611b5257600080fd5b818501915085601f830112611b6657600080fd5b81356020611b76611a2f836119ea565b82815260059290921b84018101918181019089841115611b9557600080fd5b948201945b83861015611bbc578535611bad8161189d565b82529482019490820190611b9a565b96505086013592505080821115611bd257600080fd5b50611ac885828601611a0e565b600080600060608486031215611bf457600080fd5b8335611bff8161189d565b92506020840135611c0f8161189d565b91506040840135611c1f8161189d565b809150509250925092565b60008060408385031215611c3d57600080fd5b8235611c488161189d565b946020939093013593505050565b60005b83811015611c71578181015183820152602001611c59565b83811115610f435750506000910152565b6020815260008251806020840152611ca1816040850160208701611c56565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611cf557611cf5611ccb565b5060010190565b600060208284031215611d0e57600080fd5b81516117358161189d565b60008219821115611d2c57611d2c611ccb565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020808385031215611d9257600080fd5b825167ffffffffffffffff811115611da957600080fd5b8301601f81018513611dba57600080fd5b8051611dc8611a2f826119ea565b81815260059190911b82018301908381019087831115611de757600080fd5b928401925b82841015611859578351611dff8161189d565b82529284019290840190611dec565b600060208284031215611e2057600080fd5b8151801515811461173557600080fd5b600060208284031215611e4257600080fd5b5051919050565b600082821015611e5b57611e5b611ccb565b500390565b6000816000190483118215151615611e7a57611e7a611ccb565b500290565b600082611e9c57634e487b7160e01b600052601260045260246000fd5b500490565b60008251611eb3818460208701611c56565b919091019291505056fea264697066735822122075df41d13735d1fa72795712e82291a38bb4a89c2b8353229530e426d512bca264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80635d0cde97116100b8578063b17b23a01161007c578063b17b23a0146102e9578063b9afda2d146102fc578063d4570c1c1461030f578063ef5cfb8c14610322578063f7c618c114610335578063ffa1ad741461034857600080fd5b80635d0cde971461024857806389cb096a14610250578063a0cfa0dd14610296578063a428d9c8146102b6578063aa629975146102c957600080fd5b80631b30f0c0116100ff5780631b30f0c0146101e95780632026ffa3146101fc578063402914f51461020f578063485cc955146102225780634f64b2be1461023557600080fd5b8063013bc51c1461013c57806301bc3acb1461017a5780630c340a241461018f578063160c3a03146101af57806316f0115b146101d6575b600080fd5b61016761014a3660046118b2565b603860209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61018d610188366004611937565b610379565b005b61019761043e565b6040516001600160a01b039091168152602001610171565b6101be670de0b6b3a764000081565b6040516001600160e01b039091168152602001610171565b600254610197906001600160a01b031681565b61018d6101f73660046118b2565b6104c0565b61018d61020a366004611a82565b6104fe565b61016761021d366004611ad2565b610563565b61018d6102303660046118b2565b6105c4565b610197610243366004611aef565b61068d565b6101be601481565b61028861025e366004611ad2565b6037602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b604051610171929190611b08565b6101676102a4366004611ad2565b60366020526000908152604090205481565b61018d6102c4366004611b27565b6106b7565b6101676102d7366004611ad2565b60396020526000908152604090205481565b61018d6102f7366004611bdf565b61083c565b61018d61030a366004611c2a565b610880565b61016761031d3660046118b2565b6108c3565b61018d610330366004611ad2565b610996565b603454610197906001600160a01b031681565b61036c604051806040016040528060058152602001640312e322e360dc1b81525081565b6040516101719190611c82565b61038161043e565b6001600160a01b0316336001600160a01b0316146103b257604051634b98449160e11b815260040160405180910390fd5b828181146103d357604051631dc1520760e31b815260040160405180910390fd5b60005b81811015610436576104268686838181106103f3576103f3611cb5565b90506020020160208101906104089190611ad2565b85858481811061041a5761041a611cb5565b905060200201356109fd565b61042f81611ce1565b90506103d6565b505050505050565b6002546040805163030d028960e21b815290516000926001600160a01b031691630c340a24916004808301926020929190829003018186803b15801561048357600080fd5b505afa158015610497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bb9190611cfc565b905090565b6001600160a01b0382166000908152603760205260409020546001600160e01b0316156104fa576104f082610e05565b6104fa8282610f49565b5050565b60408051600180825281830190925260009160208083019080368337019050509050828160008151811061053457610534611cb5565b60200260200101906001600160a01b031690816001600160a01b03168152505061055e81836106b7565b505050565b6000805b6035548110156105be576105a2836035838154811061058857610588611cb5565b6000918252602090912001546001600160a01b03166108c3565b6105ac9083611d19565b91506105b781611ce1565b9050610567565b50919050565b600054610100900460ff16806105dd575060005460ff16155b6106025760405162461bcd60e51b81526004016105f990611d31565b60405180910390fd5b600054610100900460ff16158015610624576000805461ffff19166101011790555b6001600160a01b03821661064b57604051636d4b163760e11b815260040160405180910390fd5b61065361101b565b61065c8361108a565b603480546001600160a01b0319166001600160a01b038416179055801561055e576000805461ff0019169055505050565b6035818154811061069d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6002600154141561070a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105f9565b60026001558151815160005b818110156107c557600084828151811061073257610732611cb5565b6020908102919091018101516001600160a01b038116600090815260379092526040909120549091506001600160e01b0316156107b45761077281610e05565b60005b848110156107b2576107a08288838151811061079357610793611cb5565b6020026020010151610f49565b806107aa81611ce1565b915050610775565b505b506107be81611ce1565b9050610716565b5060005b828110156108315760008582815181106107e5576107e5611cb5565b6020026020010151905061081e8160396000846001600160a01b03166001600160a01b0316815260200190815260200160002054611138565b508061082981611ce1565b9150506107c9565b505060018055505050565b6001600160a01b0383166000908152603760205260409020546001600160e01b03161561055e5761086c83610e05565b6108768383610f49565b61055e8382610f49565b61088861043e565b6001600160a01b0316336001600160a01b0316146108b957604051634b98449160e11b815260040160405180910390fd5b6104fa82826109fd565b6001600160a01b03811660009081526037602090815260408083208151808301909252546001600160e01b0381168252600160e01b900463ffffffff16918101919091528180610913838661123f565b915091506000826001600160e01b0316118015610936575060008163ffffffff16115b15610966576040518060400160405280836001600160e01b031681526020018263ffffffff16815250925061097f565b63ffffffff81161561097f5763ffffffff811660208401525b61098a838688611392565b98975050505050505050565b6109fa8160358054806020026020016040519081016040528092919081815260200182805480156109f057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109d2575b50505050506104fe565b50565b600080600260009054906101000a90046001600160a01b03166001600160a01b0316633605b51b6040518163ffffffff1660e01b815260040160006040518083038186803b158015610a4e57600080fd5b505afa158015610a62573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a8a9190810190611d7f565b805190915060005b81811015610ae657306001600160a01b0316838281518110610ab657610ab6611cb5565b60200260200101516001600160a01b03161415610ad65760019350610ae6565b610adf81611ce1565b9050610a92565b5082610b0557604051634757a01f60e01b815260040160405180910390fd5b6002546040516308a00b1f60e31b81526001600160a01b03808816600483015287921690819063450058f89060240160206040518083038186803b158015610b4c57600080fd5b505afa158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b849190611e0e565b158015610c075750604051633e25dee160e21b81526001600160a01b03838116600483015282169063f8977b849060240160206040518083038186803b158015610bcd57600080fd5b505afa158015610be1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c059190611e0e565b155b15610c255760405163c1ab6dc160e01b815260040160405180910390fd5b6001600160a01b0387166000908152603660205260409020548015610c5257610c4d88610e05565b610d9e565b8615610d9e576001600160a01b0388166000908152603760205260409020546001600160e01b0316610d5a5760355460141415610ca257604051639e8b4a2160e01b815260040160405180910390fd5b6040518060400160405280670de0b6b3a76400006001600160e01b03168152602001610ccd426114b8565b63ffffffff9081169091526001600160a01b038a166000818152603760209081526040822085519590910151909316600160e01b026001600160e01b03909416939093179091556035805460018101825592527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d90910180546001600160a01b0319169091179055610d9e565b610d63426114b8565b6001600160a01b0389166000908152603760205260409020805463ffffffff92909216600160e01b026001600160e01b039092169190911790555b868114610dfb576001600160a01b0388166000818152603660209081526040918290208a905581518481529081018a90527f07295410ddc875d5ff9b778ece2c279c9b91abeefd296803662b28cf6ad33c08910160405180910390a25b5050505050505050565b6001600160a01b0381166000908152603760209081526040808320815180830190925280546001600160e01b0381168352600160e01b900463ffffffff16928201929092529091908190610e59908561123f565b915091506000826001600160e01b0316118015610e7c575060008163ffffffff16115b15610eda5763ffffffff8116600160e01b026001600160e01b0383161783556040517f883d8b44a1f0e651bb0d11a8e962de03c77a351328bbeb12b702e5632288ee6f90610ecd9084908490611b08565b60405180910390a1610f43565b63ffffffff811615610f4357825463ffffffff8216600160e01b026001600160e01b0391821681811786556040517f883d8b44a1f0e651bb0d11a8e962de03c77a351328bbeb12b702e5632288ee6f93610f3a9316909117908490611b08565b60405180910390a15b50505050565b6001600160a01b03821660009081526037602090815260408083208151808301909252546001600160e01b0381168252600160e01b900463ffffffff169181019190915281908190610f9c908686611392565b6001600160a01b038881166000818152603860209081526040808320948c16808452948252808320889055603982529182902085905581518681529081018790529598509396509194509290917f49abdf3748a8d465b0d3d5d126dab076f5109ea80b761c4c1c45b2710165087b910160405180910390a35050505050565b600054610100900460ff1680611034575060005460ff16155b6110505760405162461bcd60e51b81526004016105f990611d31565b600054610100900460ff16158015611072576000805461ffff19166101011790555b6001805580156109fa576000805461ff001916905550565b600054610100900460ff16806110a3575060005460ff16155b6110bf5760405162461bcd60e51b81526004016105f990611d31565b600054610100900460ff161580156110e1576000805461ffff19166101011790555b6001600160a01b0382166111085760405163724f500960e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b03841617905580156104fa576000805461ff00191690555050565b6034546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a082319060240160206040518083038186803b15801561118057600080fd5b505afa158015611194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b89190611e30565b90506000831180156111ca5750808311155b15610f43576001600160a01b038085166000908152603960205260408120556111f69083168585611521565b836001600160a01b03167f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f72418460405161123191815260200190565b60405180910390a250505050565b6001600160a01b03811660009081526036602090815260408220549084015182919082906112739063ffffffff1642611e49565b90506000811180156112855750600082115b1561135f576000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c557600080fd5b505afa1580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd9190611e30565b9050600061130b8484611e60565b9050600080831161131d576000611327565b6113278284611573565b905061134a818a600001516001600160e01b03166113459190611d19565b6115b0565b9650611355426114b8565b9550505050611389565b600081118015611378575085516001600160e01b031615155b1561138957611386426114b8565b92505b50509250929050565b82516001600160a01b0380841660009081526038602090815260408083209386168352929052908120546001600160e01b03909216918190801580156113df5750670de0b6b3a764000084115b156113ef5750670de0b6b3a76400005b60006113fb8286611e49565b6040516370a0823160e01b81526001600160a01b038881166004830152919250611484918391908a16906370a082319060240160206040518083038186803b15801561144657600080fd5b505afa15801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e9190611e30565b90611619565b6001600160a01b0387166000908152603960205260409020549094506114ab908590611d19565b9250505093509350939050565b600063ffffffff82111561151d5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016105f9565b5090565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261055e908490611651565b600081611581600282611e7f565b611593670de0b6b3a764000086611e60565b61159d9190611d19565b6115a79190611e7f565b90505b92915050565b60006001600160e01b0382111561151d5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016105f9565b6000821580611626575081155b15611633575060006115aa565b670de0b6b3a7640000611647600282611e7f565b6115938486611e60565b60006116a6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117239092919063ffffffff16565b80519091501561055e57808060200190518101906116c49190611e0e565b61055e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105f9565b6060611732848460008561173c565b90505b9392505050565b60608247101561179d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105f9565b843b6117eb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105f9565b600080866001600160a01b031685876040516118079190611ea1565b60006040518083038185875af1925050503d8060008114611844576040519150601f19603f3d011682016040523d82523d6000602084013e611849565b606091505b5091509150611859828286611864565b979650505050505050565b60608315611873575081611735565b8251156118835782518084602001fd5b8160405162461bcd60e51b81526004016105f99190611c82565b6001600160a01b03811681146109fa57600080fd5b600080604083850312156118c557600080fd5b82356118d08161189d565b915060208301356118e08161189d565b809150509250929050565b60008083601f8401126118fd57600080fd5b50813567ffffffffffffffff81111561191557600080fd5b6020830191508360208260051b850101111561193057600080fd5b9250929050565b6000806000806040858703121561194d57600080fd5b843567ffffffffffffffff8082111561196557600080fd5b611971888389016118eb565b9096509450602087013591508082111561198a57600080fd5b50611997878288016118eb565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119e2576119e26119a3565b604052919050565b600067ffffffffffffffff821115611a0457611a046119a3565b5060051b60200190565b600082601f830112611a1f57600080fd5b81356020611a34611a2f836119ea565b6119b9565b82815260059290921b84018101918181019086841115611a5357600080fd5b8286015b84811015611a77578035611a6a8161189d565b8352918301918301611a57565b509695505050505050565b60008060408385031215611a9557600080fd5b8235611aa08161189d565b9150602083013567ffffffffffffffff811115611abc57600080fd5b611ac885828601611a0e565b9150509250929050565b600060208284031215611ae457600080fd5b81356117358161189d565b600060208284031215611b0157600080fd5b5035919050565b6001600160e01b0392909216825263ffffffff16602082015260400190565b60008060408385031215611b3a57600080fd5b823567ffffffffffffffff80821115611b5257600080fd5b818501915085601f830112611b6657600080fd5b81356020611b76611a2f836119ea565b82815260059290921b84018101918181019089841115611b9557600080fd5b948201945b83861015611bbc578535611bad8161189d565b82529482019490820190611b9a565b96505086013592505080821115611bd257600080fd5b50611ac885828601611a0e565b600080600060608486031215611bf457600080fd5b8335611bff8161189d565b92506020840135611c0f8161189d565b91506040840135611c1f8161189d565b809150509250925092565b60008060408385031215611c3d57600080fd5b8235611c488161189d565b946020939093013593505050565b60005b83811015611c71578181015183820152602001611c59565b83811115610f435750506000910152565b6020815260008251806020840152611ca1816040850160208701611c56565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611cf557611cf5611ccb565b5060010190565b600060208284031215611d0e57600080fd5b81516117358161189d565b60008219821115611d2c57611d2c611ccb565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020808385031215611d9257600080fd5b825167ffffffffffffffff811115611da957600080fd5b8301601f81018513611dba57600080fd5b8051611dc8611a2f826119ea565b81815260059190911b82018301908381019087831115611de757600080fd5b928401925b82841015611859578351611dff8161189d565b82529284019290840190611dec565b600060208284031215611e2057600080fd5b8151801515811461173557600080fd5b600060208284031215611e4257600080fd5b5051919050565b600082821015611e5b57611e5b611ccb565b500390565b6000816000190483118215151615611e7a57611e7a611ccb565b500290565b600082611e9c57634e487b7160e01b600052601260045260246000fd5b500490565b60008251611eb3818460208701611c56565b919091019291505056fea264697066735822122075df41d13735d1fa72795712e82291a38bb4a89c2b8353229530e426d512bca264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "governor()": {
        "returns": {
          "_governor": "The governor"
        }
      },
      "updateBeforeMintOrBurn(address,address)": {
        "details": "Called by DepositToken and DebtToken contracts This function also may be called by anyone to update stored indexes"
      },
      "updateBeforeTransfer(address,address,address)": {
        "details": "Called by DepositToken and DebtToken contracts"
      }
    },
    "title": "RewardsDistributor contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RewardClaimed(address,uint256)": {
        "notice": "Emitted when reward is claimed"
      },
      "TokenIndexUpdated(uint224,uint32)": {
        "notice": "Emitted when updating token index"
      },
      "TokenSpeedUpdated(address,uint256,uint256)": {
        "notice": "Emitted when updating token speed"
      },
      "TokensAccruedUpdated(address,address,uint256,uint256)": {
        "notice": "Emitted when updating accrued token"
      }
    },
    "kind": "user",
    "methods": {
      "INITIAL_INDEX()": {
        "notice": "The initial index"
      },
      "MAX_REWARD_TOKENS()": {
        "notice": "Max reward tokens to avoid DoS scenario"
      },
      "accountIndexOf(address,address)": {
        "notice": "The supply index for each token for each account as of the last time they accrued token"
      },
      "claimRewards(address)": {
        "notice": "Claim tokens accrued by account in all tokens"
      },
      "claimRewards(address,address[])": {
        "notice": "Claim tokens accrued by account in the specified tokens"
      },
      "claimRewards(address[],address[])": {
        "notice": "Claim tokens accrued by the accounts in the specified tokens"
      },
      "claimable(address)": {
        "notice": "Returns claimable amount consider all tokens"
      },
      "claimable(address,address)": {
        "notice": "Returns updated claimable amount for given token"
      },
      "governor()": {
        "notice": "Get the governor"
      },
      "pool()": {
        "notice": "Pool contract"
      },
      "rewardToken()": {
        "notice": "The token to reward"
      },
      "tokenSpeeds(address)": {
        "notice": "The amount of token distributed for each token per second"
      },
      "tokenStates(address)": {
        "notice": "The reward state for each token"
      },
      "tokens(uint256)": {
        "notice": "Track tokens for reward"
      },
      "tokensAccruedOf(address)": {
        "notice": "The token accrued but not yet transferred to each user"
      },
      "updateBeforeMintOrBurn(address,address)": {
        "notice": "Update indexes on pre-mint and pre-burn"
      },
      "updateBeforeTransfer(address,address,address)": {
        "notice": "Update indexes on pre-transfer"
      },
      "updateTokenSpeed(address,uint256)": {
        "notice": "Update speed for a single deposit token"
      },
      "updateTokenSpeeds(address[],uint256[])": {
        "notice": "Update token speeds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9979,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9982,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10033,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9002,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPool)13119"
      },
      {
        "astId": 9104,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15664,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "rewardToken",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IERC20)10688"
      },
      {
        "astId": 15670,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokens",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_contract(IERC20)10688)dyn_storage"
      },
      {
        "astId": 15677,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokenSpeeds",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_contract(IERC20)10688,t_uint256)"
      },
      {
        "astId": 15685,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokenStates",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_contract(IERC20)10688,t_struct(TokenState)15659_storage)"
      },
      {
        "astId": 15694,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "accountIndexOf",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_contract(IERC20)10688,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 15700,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokensAccruedOf",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)10688)dyn_storage": {
        "base": "t_contract(IERC20)10688",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)10688": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)13119": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)10688,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)10688",
        "label": "mapping(contract IERC20 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)10688,t_struct(TokenState)15659_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)10688",
        "label": "mapping(contract IERC20 => struct RewardsDistributorStorageV1.TokenState)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenState)15659_storage"
      },
      "t_mapping(t_contract(IERC20)10688,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)10688",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TokenState)15659_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributorStorageV1.TokenState",
        "members": [
          {
            "astId": 15656,
            "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 15658,
            "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
            "label": "timestamp",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}