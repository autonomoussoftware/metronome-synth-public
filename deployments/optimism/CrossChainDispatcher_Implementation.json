{
  "address": "0x275468d5fE0e128868AfC0b60723751D821e8815",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeTokenNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgingIsPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DestinationChainNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFromAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMsgSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOperationType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSlippageParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewValueIsSameAsCurrent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotGovernor",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newIsActive",
          "type": "bool"
        }
      ],
      "name": "BridgingIsActiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldCrossChainDispatcher",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCrossChainDispatcher",
          "type": "address"
        }
      ],
      "name": "CrossChainDispatcherUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newIsSupported",
          "type": "bool"
        }
      ],
      "name": "DestinationChainIsSupportedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldCallbackTxGasLimit",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newCallbackTxGasLimit",
          "type": "uint64"
        }
      ],
      "name": "FlashRepayCallbackTxGasLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldSwapTxGasLimit",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newSwapTxGasLimit",
          "type": "uint64"
        }
      ],
      "name": "FlashRepaySwapTxGasLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldCallbackTxGasLimit",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newCallbackTxGasLimit",
          "type": "uint64"
        }
      ],
      "name": "LeverageCallbackTxGasLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldSwapTxGasLimit",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newSwapTxGasLimit",
          "type": "uint64"
        }
      ],
      "name": "LeverageSwapTxGasLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLzBaseGasLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLzBaseGasLimit",
          "type": "uint256"
        }
      ],
      "name": "LzBaseGasLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IStargateComposer",
          "name": "oldStargateComposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IStargateComposer",
          "name": "newStargateComposer",
          "type": "address"
        }
      ],
      "name": "StargateComposerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPoolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPoolId",
          "type": "uint256"
        }
      ],
      "name": "StargatePoolIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldStargateSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStargateSlippage",
          "type": "uint256"
        }
      ],
      "name": "StargateSlippageUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "crossChainDispatcherOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "extraCallbackTxNativeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashRepayCallbackTxGasLimit",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashRepaySwapTxGasLimit",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "poolRegistry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sgeth_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isBridgingActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "isDestinationChainSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverageCallbackTxGasLimit",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverageSwapTxGasLimit",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzBaseGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId_",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "from_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload_",
          "type": "bytes"
        }
      ],
      "name": "onOFTReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRegistry",
      "outputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId_",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "srcAddress_",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "nonce_",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "newAmountOutMin_",
          "type": "uint256"
        }
      ],
      "name": "retrySwapAndTriggerFlashRepayCallback",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId_",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "srcAddress_",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "nonce_",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "newAmountOutMin_",
          "type": "uint256"
        }
      ],
      "name": "retrySwapAndTriggerLeverageCallback",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "srcChainId_",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "srcAddress_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountLD_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload_",
          "type": "bytes"
        }
      ],
      "name": "sgReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sgeth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateComposer",
      "outputs": [
        {
          "internalType": "contract IStargateComposer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stargatePoolIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swapAmountOutMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleBridgingIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId_",
          "type": "uint16"
        }
      ],
      "name": "toggleDestinationChainIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId_",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "lzArgs_",
          "type": "bytes"
        }
      ],
      "name": "triggerFlashRepaySwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId_",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "lzArgs_",
          "type": "bytes"
        }
      ],
      "name": "triggerLeverageSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId_",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "crossChainDispatcher_",
          "type": "address"
        }
      ],
      "name": "updateCrossChainDispatcherOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newFlashRepayCallbackTxGasLimit_",
          "type": "uint64"
        }
      ],
      "name": "updateFlashRepayCallbackTxGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newFlashRepaySwapTxGasLimit_",
          "type": "uint64"
        }
      ],
      "name": "updateFlashRepaySwapTxGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newLeverageCallbackTxGasLimit_",
          "type": "uint64"
        }
      ],
      "name": "updateLeverageCallbackTxGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newLeverageSwapTxGasLimit_",
          "type": "uint64"
        }
      ],
      "name": "updateLeverageSwapTxGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLzBaseGasLimit_",
          "type": "uint256"
        }
      ],
      "name": "updateLzBaseGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStargateComposer",
          "name": "newStargateComposer_",
          "type": "address"
        }
      ],
      "name": "updateStargateComposer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newPoolId_",
          "type": "uint256"
        }
      ],
      "name": "updateStargatePoolIdOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStargateSlippage_",
          "type": "uint256"
        }
      ],
      "name": "updateStargateSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x744d4ed65e084702f5a6718977d88bd2e906ea2b006b73d01b32d2e4b0d9da23",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x275468d5fE0e128868AfC0b60723751D821e8815",
    "transactionIndex": 3,
    "gasUsed": "4196280",
    "logsBloom": "0x
    "blockHash": "0xf265a93c4b78eff8d107d74e033cb0f39ca5f49e3777fc9d2b2d7572d0ea5d10",
    "transactionHash": "0x744d4ed65e084702f5a6718977d88bd2e906ea2b006b73d01b32d2e4b0d9da23",
    "logs": [],
    "blockNumber": 111896989,
    "cumulativeGasUsed": "14233004",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "210845288ae75ad5da12a755a9f52e1f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeTokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgingIsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DestinationChainNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFromAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperationType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlippageParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewValueIsSameAsCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newIsActive\",\"type\":\"bool\"}],\"name\":\"BridgingIsActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCrossChainDispatcher\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCrossChainDispatcher\",\"type\":\"address\"}],\"name\":\"CrossChainDispatcherUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newIsSupported\",\"type\":\"bool\"}],\"name\":\"DestinationChainIsSupportedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldCallbackTxGasLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newCallbackTxGasLimit\",\"type\":\"uint64\"}],\"name\":\"FlashRepayCallbackTxGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldSwapTxGasLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newSwapTxGasLimit\",\"type\":\"uint64\"}],\"name\":\"FlashRepaySwapTxGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldCallbackTxGasLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newCallbackTxGasLimit\",\"type\":\"uint64\"}],\"name\":\"LeverageCallbackTxGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldSwapTxGasLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newSwapTxGasLimit\",\"type\":\"uint64\"}],\"name\":\"LeverageSwapTxGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLzBaseGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLzBaseGasLimit\",\"type\":\"uint256\"}],\"name\":\"LzBaseGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IStargateComposer\",\"name\":\"oldStargateComposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStargateComposer\",\"name\":\"newStargateComposer\",\"type\":\"address\"}],\"name\":\"StargateComposerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPoolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPoolId\",\"type\":\"uint256\"}],\"name\":\"StargatePoolIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStargateSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStargateSlippage\",\"type\":\"uint256\"}],\"name\":\"StargateSlippageUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"crossChainDispatcherOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraCallbackTxNativeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashRepayCallbackTxGasLimit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashRepaySwapTxGasLimit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"poolRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sgeth_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBridgingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"isDestinationChainSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageCallbackTxGasLimit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageSwapTxGasLimit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzBaseGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"from_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"}],\"name\":\"onOFTReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce_\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"newAmountOutMin_\",\"type\":\"uint256\"}],\"name\":\"retrySwapAndTriggerFlashRepayCallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce_\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"newAmountOutMin_\",\"type\":\"uint256\"}],\"name\":\"retrySwapAndTriggerLeverageCallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sgeth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateComposer\",\"outputs\":[{\"internalType\":\"contract IStargateComposer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stargatePoolIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBridgingIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"}],\"name\":\"toggleDestinationChainIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId_\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"lzArgs_\",\"type\":\"bytes\"}],\"name\":\"triggerFlashRepaySwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId_\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"lzArgs_\",\"type\":\"bytes\"}],\"name\":\"triggerLeverageSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"crossChainDispatcher_\",\"type\":\"address\"}],\"name\":\"updateCrossChainDispatcherOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newFlashRepayCallbackTxGasLimit_\",\"type\":\"uint64\"}],\"name\":\"updateFlashRepayCallbackTxGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newFlashRepaySwapTxGasLimit_\",\"type\":\"uint64\"}],\"name\":\"updateFlashRepaySwapTxGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newLeverageCallbackTxGasLimit_\",\"type\":\"uint64\"}],\"name\":\"updateLeverageCallbackTxGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newLeverageSwapTxGasLimit_\",\"type\":\"uint64\"}],\"name\":\"updateLeverageSwapTxGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLzBaseGasLimit_\",\"type\":\"uint256\"}],\"name\":\"updateLzBaseGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStargateComposer\",\"name\":\"newStargateComposer_\",\"type\":\"address\"}],\"name\":\"updateStargateComposer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPoolId_\",\"type\":\"uint256\"}],\"name\":\"updateStargatePoolIdOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStargateSlippage_\",\"type\":\"uint256\"}],\"name\":\"updateStargateSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onOFTReceived(uint16,bytes,uint64,bytes,uint256,bytes)\":{\"details\":\"Token received are swapped to another token\",\"params\":{\"amount_\":\"The amount of tokens to transfer.\",\"from_\":\"The address of the account who calls the sendAndCall() on the source chain.\",\"payload_\":\"Additional data with no specified format.\",\"srcChainId_\":\"The chain id of the source chain.\"}},\"retrySwapAndTriggerFlashRepayCallback(uint16,bytes,uint64,address,uint256,bytes,uint256)\":{\"params\":{\"amount_\":\"The amountIn of failed tx\",\"newAmountOutMin_\":\"If swap failed due to slippage, caller may set lower newAmountOutMin_\",\"nonce_\":\"The nonce of failed tx\",\"payload_\":\"The payload of failed tx\",\"srcAddress_\":\"The source path of failed tx\",\"srcChainId_\":\"The source chain of failed tx\",\"token_\":\"The token of failed tx\"}},\"retrySwapAndTriggerLeverageCallback(uint16,bytes,uint64,uint256,bytes,uint256)\":{\"params\":{\"amount_\":\"The amountIn of failed tx\",\"newAmountOutMin_\":\"If swap failed due to slippage, caller may set lower newAmountOutMin_\",\"nonce_\":\"The nonce of failed tx\",\"payload_\":\"The payload of failed tx\",\"srcAddress_\":\"The source path of failed tx\",\"srcChainId_\":\"The source chain of failed tx\"}},\"sgReceive(uint16,bytes,uint256,address,uint256,bytes)\":{\"params\":{\"amountLD_\":\"The qty of local _token contract tokens\",\"payload_\":\"The payload\",\"srcAddress_\":\"The remote Bridge address\",\"srcChainId_\":\"The chain id of the source chain.\",\"token_\":\"The token contract on the local chain\"}},\"toggleDestinationChainIsActive(uint16)\":{\"details\":\"Use LZ chain id\"},\"updateStargatePoolIdOf(address,uint256)\":{\"details\":\"Use LZ ids (https://stargateprotocol.gitbook.io/stargate/developers/pool-ids)\"}},\"stateVariables\":{\"LZ_ADAPTER_PARAMS_VERSION\":{\"details\":\"LayerZero adapter param version See more: https://layerzero.gitbook.io/docs/evm-guides/advanced/relayer-adapter-parameters\"}},\"title\":\"Cross-chain dispatcher\",\"version\":1},\"userdoc\":{\"events\":{\"BridgingIsActiveUpdated(bool)\":{\"notice\":\"Emitted when flag for pause bridge transfer is toggled\"},\"CrossChainDispatcherUpdated(uint16,address,address)\":{\"notice\":\"Emitted when a Cross-chain dispatcher mapping is updated\"},\"DestinationChainIsSupportedUpdated(uint16,bool)\":{\"notice\":\"Emitted when flag for support chain is toggled\"},\"FlashRepayCallbackTxGasLimitUpdated(uint64,uint64)\":{\"notice\":\"Emitted when flash repay callback gas limit is updated\"},\"FlashRepaySwapTxGasLimitUpdated(uint64,uint64)\":{\"notice\":\"Emitted when underlying->synth L1 swap gas limit is updated\"},\"LeverageCallbackTxGasLimitUpdated(uint64,uint64)\":{\"notice\":\"Emitted when leverage callback gas limit is updated\"},\"LeverageSwapTxGasLimitUpdated(uint64,uint64)\":{\"notice\":\"Emitted when synth->underlying L1 swap gas limit is updated\"},\"LzBaseGasLimitUpdated(uint256,uint256)\":{\"notice\":\"Emitted when Lz base gas limit updated\"},\"StargateComposerUpdated(address,address)\":{\"notice\":\"Emitted when Stargate composer is updated\"},\"StargatePoolIdUpdated(address,uint256,uint256)\":{\"notice\":\"Emitted when Stargate pool id is updated\"},\"StargateSlippageUpdated(uint256,uint256)\":{\"notice\":\"Emitted when Stargate slippage is updated\"}},\"kind\":\"user\",\"methods\":{\"crossChainDispatcherOf(uint16)\":{\"notice\":\"Maps other chains `CrossChainDispatcher` contracts\"},\"extraCallbackTxNativeFee(uint256)\":{\"notice\":\"Store extra amount sent when retrying a failed tx due to low native fee\"},\"flashRepayCallbackTxGasLimit()\":{\"notice\":\"The gas limit to cover `_crossChainFlashRepayCallback()` call\"},\"flashRepaySwapTxGasLimit()\":{\"notice\":\"The gas limit to cover `_swapAndTriggerFlashRepayCallback()` call\"},\"isBridgingActive()\":{\"notice\":\"Flag that pause/unpause all cross-chain activities\"},\"isDestinationChainSupported(uint16)\":{\"notice\":\"Maps supported cross-chain routes (i.e. which chains are allowed to be used as source of liquidity)\"},\"leverageCallbackTxGasLimit()\":{\"notice\":\"The gas limit to cover `_crossChainLeverageCallback()` call\"},\"leverageSwapTxGasLimit()\":{\"notice\":\"The gas limit to cover `_swapAndTriggerLeverageCallback()` call\"},\"lzBaseGasLimit()\":{\"notice\":\"The base gas to pay for cross-chain calls\"},\"onOFTReceived(uint16,bytes,uint64,bytes,uint256,bytes)\":{\"notice\":\"Called by the OFT contract when tokens are received from source chain.\"},\"poolRegistry()\":{\"notice\":\"The pool registry contract\"},\"retrySwapAndTriggerFlashRepayCallback(uint16,bytes,uint64,address,uint256,bytes,uint256)\":{\"notice\":\"Retry swap underlying and trigger callback.\"},\"retrySwapAndTriggerLeverageCallback(uint16,bytes,uint64,uint256,bytes,uint256)\":{\"notice\":\"Retry swap and trigger callback.\"},\"sgReceive(uint16,bytes,uint256,address,uint256,bytes)\":{\"notice\":\"Receive token and payload from Stargate\"},\"sgeth()\":{\"notice\":\"SGETH contract\"},\"stargateComposer()\":{\"notice\":\"The Stargate Router contract\"},\"stargatePoolIdOf(address)\":{\"notice\":\"Maps Stargate's token pools\"},\"stargateSlippage()\":{\"notice\":\"The slippage we're willing to accept for SG like:like transfers\"},\"swapAmountOutMin(uint256)\":{\"notice\":\"Overwritten swap slippage params\"},\"toggleBridgingIsActive()\":{\"notice\":\"Pause/Unpause bridge transfers\"},\"toggleDestinationChainIsActive(uint16)\":{\"notice\":\"Allow/Disallow destination chain\"},\"updateCrossChainDispatcherOf(uint16,address)\":{\"notice\":\"Update Cross-chain dispatcher mapping\"},\"updateFlashRepayCallbackTxGasLimit(uint64)\":{\"notice\":\"Update flash repay callback tx gas limit\"},\"updateFlashRepaySwapTxGasLimit(uint64)\":{\"notice\":\"Update flash repay swap tx gas limit\"},\"updateLeverageCallbackTxGasLimit(uint64)\":{\"notice\":\"Update leverage callback tx gas limit\"},\"updateLeverageSwapTxGasLimit(uint64)\":{\"notice\":\"Update leverage swap tx gas limit\"},\"updateLzBaseGasLimit(uint256)\":{\"notice\":\"Update Lz base gas limit\"},\"updateStargateComposer(address)\":{\"notice\":\"Update StargateComposer\"},\"updateStargatePoolIdOf(address,uint256)\":{\"notice\":\"Update Stargate pool id of token.\"},\"updateStargateSlippage(uint256)\":{\"notice\":\"Update Stargate slippage\"},\"weth()\":{\"notice\":\"WETH contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrossChainDispatcher.sol\":\"CrossChainDispatcher\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CrossChainDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./dependencies/@layerzerolabs/solidity-examples/util/BytesLib.sol\\\";\\nimport \\\"./dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/external/IStargateComposerWithRetry.sol\\\";\\nimport \\\"./interfaces/external/IWETH.sol\\\";\\nimport \\\"./interfaces/external/IStargatePool.sol\\\";\\nimport \\\"./interfaces/external/IStargateFactory.sol\\\";\\nimport \\\"./storage/CrossChainDispatcherStorage.sol\\\";\\nimport \\\"./interfaces/IProxyOFT.sol\\\";\\nimport \\\"./interfaces/ISmartFarmingManager.sol\\\";\\nimport \\\"./interfaces/ISyntheticToken.sol\\\";\\nimport \\\"./interfaces/external/ISwapper.sol\\\";\\nimport \\\"./lib/CrossChainLib.sol\\\";\\n\\nerror AddressIsNull();\\nerror InvalidMsgSender();\\nerror BridgingIsPaused();\\nerror InvalidFromAddress();\\nerror InvalidToAddress();\\nerror NewValueIsSameAsCurrent();\\nerror SenderIsNotGovernor();\\nerror DestinationChainNotAllowed();\\nerror InvalidOperationType();\\nerror BridgeTokenNotSupported();\\nerror InvalidSlippageParam();\\nerror InvalidPayload();\\n\\n// Note: The `IPool` wasn't updated to avoid changing interface\\n// Refs: https://github.com/autonomoussoftware/metronome-synth/issues/877\\ninterface IPoolV4 is IPool {\\n    function isBridgingActive() external view returns (bool);\\n}\\n\\n/**\\n * @title Cross-chain dispatcher\\n */\\ncontract CrossChainDispatcher is ReentrancyGuard, CrossChainDispatcherStorageV2 {\\n    using SafeERC20 for IERC20;\\n    using BytesLib for bytes;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    /**\\n     * @dev LayerZero adapter param version\\n     * See more: https://layerzero.gitbook.io/docs/evm-guides/advanced/relayer-adapter-parameters\\n     */\\n    uint16 private constant LZ_ADAPTER_PARAMS_VERSION = 2;\\n\\n    uint256 private constant MAX_BPS = 100_00;\\n\\n    struct LayerZeroParams {\\n        address tokenIn;\\n        uint16 dstChainId;\\n        uint256 amountIn;\\n        uint256 nativeFee;\\n        bytes payload;\\n        address refundAddress;\\n        uint64 dstGasForCall;\\n        uint256 dstNativeAmount;\\n    }\\n\\n    /// @notice Emitted when Lz base gas limit updated\\n    event LzBaseGasLimitUpdated(uint256 oldLzBaseGasLimit, uint256 newLzBaseGasLimit);\\n\\n    /// @notice Emitted when Stargate composer is updated\\n    event StargateComposerUpdated(IStargateComposer oldStargateComposer, IStargateComposer newStargateComposer);\\n\\n    /// @notice Emitted when Stargate pool id is updated\\n    event StargatePoolIdUpdated(address indexed token, uint256 oldPoolId, uint256 newPoolId);\\n\\n    /// @notice Emitted when Stargate slippage is updated\\n    event StargateSlippageUpdated(uint256 oldStargateSlippage, uint256 newStargateSlippage);\\n\\n    /// @notice Emitted when synth->underlying L1 swap gas limit is updated\\n    event LeverageSwapTxGasLimitUpdated(uint64 oldSwapTxGasLimit, uint64 newSwapTxGasLimit);\\n\\n    /// @notice Emitted when leverage callback gas limit is updated\\n    event LeverageCallbackTxGasLimitUpdated(uint64 oldCallbackTxGasLimit, uint64 newCallbackTxGasLimit);\\n\\n    /// @notice Emitted when underlying->synth L1 swap gas limit is updated\\n    event FlashRepaySwapTxGasLimitUpdated(uint64 oldSwapTxGasLimit, uint64 newSwapTxGasLimit);\\n\\n    /// @notice Emitted when flash repay callback gas limit is updated\\n    event FlashRepayCallbackTxGasLimitUpdated(uint64 oldCallbackTxGasLimit, uint64 newCallbackTxGasLimit);\\n\\n    /// @notice Emitted when flag for pause bridge transfer is toggled\\n    event BridgingIsActiveUpdated(bool newIsActive);\\n\\n    /// @notice Emitted when a Cross-chain dispatcher mapping is updated\\n    event CrossChainDispatcherUpdated(uint16 chainId, address oldCrossChainDispatcher, address newCrossChainDispatcher);\\n\\n    /// @notice Emitted when flag for support chain is toggled\\n    event DestinationChainIsSupportedUpdated(uint16 chainId, bool newIsSupported);\\n\\n    modifier onlyGovernor() {\\n        if (msg.sender != poolRegistry.governor()) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    modifier onlyIfBridgingIsNotPaused() {\\n        if (!isBridgingActive || !IPoolV4(address(IManageable(msg.sender).pool())).isBridgingActive())\\n            revert BridgingIsPaused();\\n        _;\\n    }\\n\\n    modifier onlyIfSmartFarmingManager() {\\n        IPool _pool = IManageable(msg.sender).pool();\\n        if (!poolRegistry.isPoolRegistered(address(_pool))) revert InvalidMsgSender();\\n        if (msg.sender != address(_pool.smartFarmingManager())) revert InvalidMsgSender();\\n        _;\\n    }\\n\\n    modifier onlyIfStargateComposer() {\\n        if (msg.sender != address(stargateComposer)) revert InvalidMsgSender();\\n        _;\\n    }\\n\\n    modifier onlyIfProxyOFT() {\\n        if (!_isValidProxyOFT(msg.sender)) revert InvalidMsgSender();\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    receive() external payable {}\\n\\n    function initialize(IPoolRegistry poolRegistry_, address weth_, address sgeth_) external initializer {\\n        if (address(poolRegistry_) == address(0)) revert AddressIsNull();\\n\\n        __ReentrancyGuard_init();\\n\\n        poolRegistry = poolRegistry_;\\n        stargateSlippage = 50; // 0.5%\\n        lzBaseGasLimit = 200_000;\\n        flashRepayCallbackTxGasLimit = 750_000;\\n        flashRepaySwapTxGasLimit = 500_000;\\n        leverageCallbackTxGasLimit = 750_000;\\n        leverageSwapTxGasLimit = 750_000;\\n        weth = weth_;\\n        sgeth = sgeth_;\\n    }\\n\\n    /**\\n     * @notice Called by the OFT contract when tokens are received from source chain.\\n     * @dev Token received are swapped to another token\\n     * @param srcChainId_ The chain id of the source chain.\\n     * @param from_ The address of the account who calls the sendAndCall() on the source chain.\\n     * @param amount_ The amount of tokens to transfer.\\n     * @param payload_ Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 srcChainId_,\\n        bytes calldata /*srcAddress_*/,\\n        uint64 /*nonce_*/,\\n        bytes calldata from_,\\n        uint amount_,\\n        bytes calldata payload_\\n    ) external override onlyIfProxyOFT {\\n        address _from = from_.toAddress(0);\\n        if (_from == address(0) || _from != crossChainDispatcherOf[srcChainId_]) revert InvalidFromAddress();\\n\\n        uint8 _op = CrossChainLib.getOperationType(payload_);\\n\\n        if (_op == CrossChainLib.FLASH_REPAY) {\\n            _crossChainFlashRepayCallback(amount_, payload_);\\n        } else if (_op == CrossChainLib.LEVERAGE) {\\n            _swapAndTriggerLeverageCallback(srcChainId_, amount_, payload_);\\n        } else {\\n            revert InvalidOperationType();\\n        }\\n    }\\n\\n    /**\\n     * @dev Finalize cross-chain flash repay process. The callback may fail due to slippage.\\n     */\\n    function _crossChainFlashRepayCallback(uint amount_, bytes calldata payload_) private {\\n        (address proxyOFT_, address _smartFarmingManager, uint256 _requestId) = CrossChainLib\\n            .decodeFlashRepayCallbackPayload(payload_);\\n\\n        IERC20 _syntheticToken = IERC20(IProxyOFT(proxyOFT_).token());\\n        _syntheticToken.safeApprove(_smartFarmingManager, 0);\\n        _syntheticToken.safeApprove(_smartFarmingManager, amount_);\\n        ISmartFarmingManager(_smartFarmingManager).crossChainFlashRepayCallback(_requestId, amount_);\\n    }\\n\\n    /**\\n     * @dev Swap synthetic token for underlying and trigger callback call\\n     */\\n    function _swapAndTriggerLeverageCallback(uint16 srcChainId_, uint amountIn_, bytes calldata payload_) private {\\n        // 1. Swap\\n        (\\n            address _srcSmartFarmingManager,\\n            address _dstProxyOFT,\\n            uint256 _requestId,\\n            uint256 _sgPoolId,\\n            address _account,\\n            uint256 _amountOutMin,\\n            uint256 _callbackTxNativeFee\\n        ) = CrossChainLib.decodeLeverageSwapPayload(payload_);\\n\\n        address _bridgeToken = IStargatePool(IStargateFactory(stargateComposer.factory()).getPool(_sgPoolId)).token();\\n\\n        if (_bridgeToken == sgeth) _bridgeToken = weth;\\n\\n        amountIn_ = _swap({\\n            requestId_: _requestId,\\n            tokenIn_: IProxyOFT(_dstProxyOFT).token(),\\n            tokenOut_: _bridgeToken,\\n            amountIn_: amountIn_,\\n            amountOutMin_: _amountOutMin\\n        });\\n\\n        // 2. Transfer underlying to source chain\\n        uint16 _srcChainId = srcChainId_;\\n\\n        _sendUsingStargate(\\n            LayerZeroParams({\\n                tokenIn: _bridgeToken,\\n                dstChainId: _srcChainId,\\n                amountIn: amountIn_,\\n                nativeFee: _callbackTxNativeFee + extraCallbackTxNativeFee[_requestId],\\n                payload: CrossChainLib.encodeLeverageCallbackPayload(_srcSmartFarmingManager, _requestId),\\n                refundAddress: _account,\\n                dstGasForCall: leverageCallbackTxGasLimit,\\n                dstNativeAmount: 0\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @notice Receive token and payload from Stargate\\n     * @param srcChainId_ The chain id of the source chain.\\n     * @param srcAddress_ The remote Bridge address\\n     * @param token_ The token contract on the local chain\\n     * @param amountLD_ The qty of local _token contract tokens\\n     * @param payload_ The payload\\n     */\\n    function sgReceive(\\n        uint16 srcChainId_,\\n        bytes memory srcAddress_,\\n        uint256 /*nonce_*/,\\n        address token_,\\n        uint256 amountLD_,\\n        bytes memory payload_\\n    ) external override onlyIfStargateComposer {\\n        // Note: Stargate uses SGETH as `token_` when receiving native ETH\\n        if (token_ == sgeth) {\\n            IWETH(weth).deposit{value: amountLD_}();\\n            token_ = weth;\\n        }\\n\\n        address _srcAddress = srcAddress_.toAddress(0);\\n\\n        if (_srcAddress == address(0) || _srcAddress != crossChainDispatcherOf[srcChainId_])\\n            revert InvalidFromAddress();\\n\\n        uint8 _op = CrossChainLib.getOperationType(payload_);\\n\\n        if (_op == CrossChainLib.LEVERAGE) {\\n            _crossChainLeverageCallback(token_, amountLD_, payload_);\\n        } else if (_op == CrossChainLib.FLASH_REPAY) {\\n            _swapAndTriggerFlashRepayCallback(srcChainId_, token_, amountLD_, payload_);\\n        } else {\\n            revert InvalidOperationType();\\n        }\\n    }\\n\\n    /**\\n     * @dev Finalize cross-chain leverage process. The callback may fail due to slippage.\\n     */\\n    function _crossChainLeverageCallback(address bridgeToken_, uint256 amount_, bytes memory payload_) private {\\n        (address _smartFarmingManager, uint256 _requestId) = CrossChainLib.decodeLeverageCallbackPayload(payload_);\\n        IERC20(bridgeToken_).safeApprove(_smartFarmingManager, 0);\\n        IERC20(bridgeToken_).safeApprove(_smartFarmingManager, amount_);\\n        ISmartFarmingManager(_smartFarmingManager).crossChainLeverageCallback(_requestId, amount_);\\n    }\\n\\n    /**\\n     * @dev Send synthetic token cross-chain\\n     */\\n    function _sendUsingLayerZero(LayerZeroParams memory params_) private {\\n        address _to = crossChainDispatcherOf[params_.dstChainId];\\n        if (_to == address(0)) revert AddressIsNull();\\n\\n        bytes memory _adapterParams = abi.encodePacked(\\n            LZ_ADAPTER_PARAMS_VERSION,\\n            uint256(lzBaseGasLimit + params_.dstGasForCall),\\n            params_.dstNativeAmount,\\n            (params_.dstNativeAmount > 0) ? _to : address(0)\\n        );\\n\\n        ISyntheticToken(params_.tokenIn).proxyOFT().sendAndCall{value: params_.nativeFee}({\\n            _from: address(this),\\n            _dstChainId: params_.dstChainId,\\n            _toAddress: abi.encodePacked(_to),\\n            _amount: params_.amountIn,\\n            _payload: params_.payload,\\n            _dstGasForCall: params_.dstGasForCall,\\n            _refundAddress: payable(params_.refundAddress),\\n            _zroPaymentAddress: address(0),\\n            _adapterParams: _adapterParams\\n        });\\n    }\\n\\n    /**\\n     * @dev Swap underlying for synthetic token and trigger callback call\\n     */\\n    function _swapAndTriggerFlashRepayCallback(\\n        uint16 srcChainId_,\\n        address token_,\\n        uint256 amount_,\\n        bytes memory payload_\\n    ) private {\\n        // 1. Swap\\n        (\\n            address _srcSmartFarmingManager,\\n            address _dstProxyOFT,\\n            uint256 _requestId,\\n            address _account,\\n            uint256 _amountOutMin,\\n            uint256 _callbackTxNativeFee\\n        ) = CrossChainLib.decodeFlashRepaySwapPayload(payload_);\\n\\n        address _syntheticToken = IProxyOFT(_dstProxyOFT).token();\\n        amount_ = _swap({\\n            requestId_: _requestId,\\n            tokenIn_: token_,\\n            tokenOut_: _syntheticToken,\\n            amountIn_: amount_,\\n            amountOutMin_: _amountOutMin\\n        });\\n\\n        // 2. Transfer synthetic token to source chain\\n        uint16 _srcChainId = srcChainId_;\\n        address _srcProxyOFT = IProxyOFT(_dstProxyOFT).getProxyOFTOf(_srcChainId);\\n\\n        _sendUsingLayerZero(\\n            LayerZeroParams({\\n                tokenIn: _syntheticToken,\\n                dstChainId: _srcChainId,\\n                amountIn: amount_,\\n                payload: CrossChainLib.encodeFlashRepayCallbackPayload(\\n                    _srcProxyOFT,\\n                    _srcSmartFarmingManager,\\n                    _requestId\\n                ),\\n                refundAddress: _account,\\n                dstGasForCall: flashRepayCallbackTxGasLimit,\\n                dstNativeAmount: 0,\\n                nativeFee: _callbackTxNativeFee + extraCallbackTxNativeFee[_requestId]\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @notice Retry swap underlying and trigger callback.\\n     * @param srcChainId_ The source chain of failed tx\\n     * @param srcAddress_ The source path of failed tx\\n     * @param nonce_ The nonce of failed tx\\n     * @param token_ The token of failed tx\\n     * @param amount_ The amountIn of failed tx\\n     * @param payload_ The payload of failed tx\\n     * @param newAmountOutMin_ If swap failed due to slippage, caller may set lower newAmountOutMin_\\n     */\\n    function retrySwapAndTriggerFlashRepayCallback(\\n        uint16 srcChainId_,\\n        bytes calldata srcAddress_,\\n        uint64 nonce_,\\n        address token_,\\n        uint256 amount_,\\n        bytes calldata payload_,\\n        uint256 newAmountOutMin_\\n    ) external payable nonReentrant {\\n        IStargateComposerWithRetry _stargateComposer = IStargateComposerWithRetry(address(stargateComposer));\\n\\n        bytes memory _sgReceiveCallData = abi.encodeWithSelector(\\n            IStargateReceiver.sgReceive.selector,\\n            srcChainId_,\\n            abi.encodePacked(crossChainDispatcherOf[srcChainId_]),\\n            nonce_,\\n            token_,\\n            amount_,\\n            payload_\\n        );\\n\\n        (, , uint256 _requestId, address _account, , ) = CrossChainLib.decodeFlashRepaySwapPayload(payload_);\\n\\n        if (msg.value > 0) {\\n            extraCallbackTxNativeFee[_requestId] += msg.value;\\n        }\\n\\n        if (msg.sender == _account) {\\n            // Note: If `swapAmountOutMin[_requestId]` is `0` (default value), swap function will use payload's slippage param\\n            if (newAmountOutMin_ == 0) revert InvalidSlippageParam();\\n            swapAmountOutMin[_requestId] = newAmountOutMin_;\\n        }\\n\\n        // Note: `clearCachedSwap()` has checks to ensure that the args are consistent\\n        _stargateComposer.clearCachedSwap(srcChainId_, srcAddress_, nonce_, address(this), _sgReceiveCallData);\\n    }\\n\\n    /**\\n     * @notice Retry swap and trigger callback.\\n     * @param srcChainId_ The source chain of failed tx\\n     * @param srcAddress_ The source path of failed tx\\n     * @param nonce_ The nonce of failed tx\\n     * @param amount_ The amountIn of failed tx\\n     * @param payload_ The payload of failed tx\\n     * @param newAmountOutMin_ If swap failed due to slippage, caller may set lower newAmountOutMin_\\n     */\\n    function retrySwapAndTriggerLeverageCallback(\\n        uint16 srcChainId_,\\n        bytes calldata srcAddress_,\\n        uint64 nonce_,\\n        uint256 amount_,\\n        bytes calldata payload_,\\n        uint256 newAmountOutMin_\\n    ) external payable nonReentrant {\\n        (, address _dstProxyOFT, uint256 _requestId, , address _account, , ) = CrossChainLib.decodeLeverageSwapPayload(\\n            payload_\\n        );\\n\\n        if (!_isValidProxyOFT(_dstProxyOFT)) revert InvalidPayload();\\n\\n        if (msg.value > 0) {\\n            extraCallbackTxNativeFee[_requestId] += msg.value;\\n        }\\n\\n        if (msg.sender == _account) {\\n            // Note: If `swapAmountOutMin[_requestId]` is `0` (default value), swap function will use payload's slippage param\\n            if (newAmountOutMin_ == 0) revert InvalidSlippageParam();\\n            swapAmountOutMin[_requestId] = newAmountOutMin_;\\n        }\\n\\n        // Note: `retryOFTReceived()` has checks to ensure that the args are consistent\\n        bytes memory _from = abi.encodePacked(crossChainDispatcherOf[srcChainId_]);\\n        IProxyOFT(_dstProxyOFT).retryOFTReceived(\\n            srcChainId_,\\n            srcAddress_,\\n            nonce_,\\n            _from,\\n            address(this),\\n            amount_,\\n            payload_\\n        );\\n    }\\n\\n    /***\\n     * @notice Trigger swap using Stargate for flashRepay.\\n     * @param requestId_ Request id.\\n     * @param account_ User address and also refund address\\n     * @param tokenIn_ tokenIn\\n     * @param tokenOut_ tokenOut\\n     * @param amountIn_ amountIn_\\n     * @param amountOutMin_ amountOutMin_\\n     * @param lzArgs_ LayerZero method argument\\n     */\\n    function triggerFlashRepaySwap(\\n        uint256 requestId_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable override nonReentrant onlyIfSmartFarmingManager onlyIfBridgingIsNotPaused {\\n        address _account = account_; // stack too deep\\n\\n        (uint16 _dstChainId, uint256 callbackTxNativeFee_, uint64 flashRepaySwapTxGasLimit_) = CrossChainLib\\n            .decodeLzArgs(lzArgs_);\\n\\n        bytes memory _payload;\\n        {\\n            address _dstProxyOFT = ISyntheticToken(tokenOut_).proxyOFT().getProxyOFTOf(_dstChainId);\\n\\n            if (_dstProxyOFT == address(0)) revert AddressIsNull();\\n            if (!isDestinationChainSupported[_dstChainId]) revert DestinationChainNotAllowed();\\n\\n            uint256 _requestId = requestId_; // stack too deep\\n\\n            _payload = CrossChainLib.encodeFlashRepaySwapPayload({\\n                srcSmartFarmingManager_: msg.sender,\\n                dstProxyOFT_: _dstProxyOFT,\\n                requestId_: _requestId,\\n                account_: _account,\\n                amountOutMin_: amountOutMin_,\\n                callbackTxNativeFee_: callbackTxNativeFee_\\n            });\\n        }\\n\\n        _sendUsingStargate(\\n            LayerZeroParams({\\n                tokenIn: tokenIn_,\\n                dstChainId: _dstChainId,\\n                amountIn: amountIn_,\\n                nativeFee: msg.value,\\n                payload: _payload,\\n                refundAddress: _account,\\n                dstGasForCall: flashRepaySwapTxGasLimit_,\\n                dstNativeAmount: callbackTxNativeFee_\\n            })\\n        );\\n    }\\n\\n    /***\\n     * @notice Send synthetic token and trigger swap at destination chain\\n     * @dev Not checking if bridging is pause because `ProxyOFT._debitFrom()` does it\\n     * @param requestId_ Request id.\\n     * @param account_ User address and also refund address\\n     * @param tokenOut_ tokenOut\\n     * @param amountIn_ amountIn\\n     * @param amountOutMin_ amountOutMin\\n     * @param lzArgs_ LayerZero method argument\\n     */\\n    function triggerLeverageSwap(\\n        uint256 requestId_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable override nonReentrant onlyIfSmartFarmingManager onlyIfBridgingIsNotPaused {\\n        address _account = account_; // stack too deep\\n\\n        (uint16 _dstChainId, uint256 _callbackTxNativeFee, uint64 _leverageSwapTxGasLimit) = CrossChainLib.decodeLzArgs(\\n            lzArgs_\\n        );\\n\\n        bytes memory _payload;\\n        {\\n            address _tokenOut = tokenOut_; // stack too deep\\n            uint256 _requestId = requestId_; // stack too deep\\n            uint256 _amountOutMin = amountOutMin_; // stack too deep\\n\\n            address _dstProxyOFT = ISyntheticToken(tokenIn_).proxyOFT().getProxyOFTOf(_dstChainId);\\n            uint256 _sgPoolId = stargatePoolIdOf[_tokenOut];\\n\\n            if (_dstProxyOFT == address(0)) revert AddressIsNull();\\n            if (!isDestinationChainSupported[_dstChainId]) revert DestinationChainNotAllowed();\\n            if (_sgPoolId == 0) revert BridgeTokenNotSupported();\\n\\n            _payload = CrossChainLib.encodeLeverageSwapPayload({\\n                srcSmartFarmingManager_: msg.sender,\\n                dstProxyOFT_: _dstProxyOFT,\\n                requestId_: _requestId,\\n                sgPoolId_: _sgPoolId,\\n                account_: _account,\\n                amountOutMin_: _amountOutMin,\\n                callbackTxNativeFee_: _callbackTxNativeFee\\n            });\\n        }\\n\\n        _sendUsingLayerZero(\\n            LayerZeroParams({\\n                tokenIn: tokenIn_,\\n                dstChainId: _dstChainId,\\n                amountIn: amountIn_,\\n                payload: _payload,\\n                refundAddress: _account,\\n                dstGasForCall: _leverageSwapTxGasLimit,\\n                dstNativeAmount: _callbackTxNativeFee,\\n                nativeFee: msg.value\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @dev Check wether an address is a proxyOFT or not\\n     */\\n    function _isValidProxyOFT(address proxyOFT_) private view returns (bool) {\\n        ISyntheticToken _syntheticToken = ISyntheticToken(IProxyOFT(proxyOFT_).token());\\n        if (!poolRegistry.doesSyntheticTokenExist(_syntheticToken)) return false;\\n        if (proxyOFT_ != address(_syntheticToken.proxyOFT())) return false;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Send underlying token cross-chain\\n     */\\n    function _sendUsingStargate(LayerZeroParams memory params_) private {\\n        IStargateRouter.lzTxObj memory _lzTxParams;\\n        bytes memory _to = abi.encodePacked(crossChainDispatcherOf[params_.dstChainId]);\\n        {\\n            if (_to.toAddress(0) == address(0)) revert AddressIsNull();\\n\\n            _lzTxParams = IStargateRouter.lzTxObj({\\n                dstGasForCall: params_.dstGasForCall,\\n                dstNativeAmount: params_.dstNativeAmount,\\n                dstNativeAddr: (params_.dstNativeAmount > 0) ? _to : abi.encode(0)\\n            });\\n        }\\n\\n        uint256 _poolId = stargatePoolIdOf[params_.tokenIn];\\n        if (_poolId == 0) revert BridgeTokenNotSupported();\\n        uint256 _amountOutMin = (params_.amountIn * (MAX_BPS - stargateSlippage)) / MAX_BPS;\\n        bytes memory _payload = params_.payload;\\n\\n        IStargateComposer _stargateComposer = stargateComposer;\\n\\n        // Note: StargateComposer only accepts native for ETH pool\\n        if (params_.tokenIn == weth) {\\n            IWETH(weth).withdraw(params_.amountIn);\\n            params_.nativeFee += params_.amountIn;\\n        } else {\\n            IERC20(params_.tokenIn).safeApprove(address(_stargateComposer), 0);\\n            IERC20(params_.tokenIn).safeApprove(address(_stargateComposer), params_.amountIn);\\n        }\\n\\n        _stargateComposer.swap{value: params_.nativeFee}({\\n            _dstChainId: params_.dstChainId,\\n            _srcPoolId: _poolId,\\n            _dstPoolId: _poolId,\\n            _refundAddress: payable(params_.refundAddress),\\n            _amountLD: params_.amountIn,\\n            _minAmountLD: _amountOutMin,\\n            _lzTxParams: _lzTxParams,\\n            _to: _to,\\n            _payload: _payload\\n        });\\n    }\\n\\n    /**\\n     * @dev Perform a swap considering slippage param from user\\n     */\\n    function _swap(\\n        uint256 requestId_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_\\n    ) private returns (uint256 _amountOut) {\\n        // 1. Use updated slippage if exist\\n        uint256 _storedAmountOutMin = swapAmountOutMin[requestId_];\\n        if (_storedAmountOutMin > 0) {\\n            // Use stored slippage and clear it\\n            amountOutMin_ = _storedAmountOutMin;\\n            delete swapAmountOutMin[requestId_];\\n        }\\n\\n        // 2. Perform swap\\n        ISwapper _swapper = poolRegistry.swapper();\\n        IERC20(tokenIn_).safeApprove(address(_swapper), 0);\\n        IERC20(tokenIn_).safeApprove(address(_swapper), amountIn_);\\n        _amountOut = _swapper.swapExactInput({\\n            tokenIn_: tokenIn_,\\n            tokenOut_: tokenOut_,\\n            amountIn_: amountIn_,\\n            amountOutMin_: amountOutMin_,\\n            receiver_: address(this)\\n        });\\n    }\\n\\n    /**\\n     * @notice Update flash repay callback tx gas limit\\n     */\\n    function updateFlashRepayCallbackTxGasLimit(uint64 newFlashRepayCallbackTxGasLimit_) external onlyGovernor {\\n        uint64 _currentFlashRepayCallbackTxGasLimit = flashRepayCallbackTxGasLimit;\\n        if (newFlashRepayCallbackTxGasLimit_ == _currentFlashRepayCallbackTxGasLimit) revert NewValueIsSameAsCurrent();\\n        emit FlashRepayCallbackTxGasLimitUpdated(\\n            _currentFlashRepayCallbackTxGasLimit,\\n            newFlashRepayCallbackTxGasLimit_\\n        );\\n        flashRepayCallbackTxGasLimit = newFlashRepayCallbackTxGasLimit_;\\n    }\\n\\n    /**\\n     * @notice Update flash repay swap tx gas limit\\n     */\\n    function updateFlashRepaySwapTxGasLimit(uint64 newFlashRepaySwapTxGasLimit_) external onlyGovernor {\\n        uint64 _currentFlashRepaySwapTxGasLimit = flashRepaySwapTxGasLimit;\\n        if (newFlashRepaySwapTxGasLimit_ == _currentFlashRepaySwapTxGasLimit) revert NewValueIsSameAsCurrent();\\n        emit FlashRepaySwapTxGasLimitUpdated(_currentFlashRepaySwapTxGasLimit, newFlashRepaySwapTxGasLimit_);\\n        flashRepaySwapTxGasLimit = newFlashRepaySwapTxGasLimit_;\\n    }\\n\\n    /**\\n     * @notice Update leverage callback tx gas limit\\n     */\\n    function updateLeverageCallbackTxGasLimit(uint64 newLeverageCallbackTxGasLimit_) external onlyGovernor {\\n        uint64 _currentLeverageCallbackTxGasLimit = leverageCallbackTxGasLimit;\\n        if (newLeverageCallbackTxGasLimit_ == _currentLeverageCallbackTxGasLimit) revert NewValueIsSameAsCurrent();\\n        emit LeverageCallbackTxGasLimitUpdated(_currentLeverageCallbackTxGasLimit, newLeverageCallbackTxGasLimit_);\\n        leverageCallbackTxGasLimit = newLeverageCallbackTxGasLimit_;\\n    }\\n\\n    /**\\n     * @notice Update leverage swap tx gas limit\\n     */\\n    function updateLeverageSwapTxGasLimit(uint64 newLeverageSwapTxGasLimit_) external onlyGovernor {\\n        uint64 _currentSwapTxGasLimit = leverageSwapTxGasLimit;\\n        if (newLeverageSwapTxGasLimit_ == _currentSwapTxGasLimit) revert NewValueIsSameAsCurrent();\\n        emit LeverageSwapTxGasLimitUpdated(_currentSwapTxGasLimit, newLeverageSwapTxGasLimit_);\\n        leverageSwapTxGasLimit = newLeverageSwapTxGasLimit_;\\n    }\\n\\n    /**\\n     * @notice Update Lz base gas limit\\n     */\\n    function updateLzBaseGasLimit(uint256 newLzBaseGasLimit_) external onlyGovernor {\\n        uint256 _currentBaseGasLimit = lzBaseGasLimit;\\n        if (newLzBaseGasLimit_ == _currentBaseGasLimit) revert NewValueIsSameAsCurrent();\\n        emit LzBaseGasLimitUpdated(_currentBaseGasLimit, newLzBaseGasLimit_);\\n        lzBaseGasLimit = newLzBaseGasLimit_;\\n    }\\n\\n    /**\\n     * @notice Update Stargate pool id of token.\\n     * @dev Use LZ ids (https://stargateprotocol.gitbook.io/stargate/developers/pool-ids)\\n     */\\n    function updateStargatePoolIdOf(address token_, uint256 newPoolId_) external onlyGovernor {\\n        uint256 _currentPoolId = stargatePoolIdOf[token_];\\n        if (newPoolId_ == _currentPoolId) revert NewValueIsSameAsCurrent();\\n        emit StargatePoolIdUpdated(token_, _currentPoolId, newPoolId_);\\n        stargatePoolIdOf[token_] = newPoolId_;\\n    }\\n\\n    /**\\n     * @notice Update Stargate slippage\\n     */\\n    function updateStargateSlippage(uint256 newStargateSlippage_) external onlyGovernor {\\n        uint256 _currentStargateSlippage = stargateSlippage;\\n        if (newStargateSlippage_ == _currentStargateSlippage) revert NewValueIsSameAsCurrent();\\n        emit StargateSlippageUpdated(_currentStargateSlippage, newStargateSlippage_);\\n        stargateSlippage = newStargateSlippage_;\\n    }\\n\\n    /**\\n     * @notice Update StargateComposer\\n     */\\n    function updateStargateComposer(IStargateComposer newStargateComposer_) external onlyGovernor {\\n        IStargateComposer _currentStargateComposer = stargateComposer;\\n        if (newStargateComposer_ == _currentStargateComposer) revert NewValueIsSameAsCurrent();\\n        emit StargateComposerUpdated(_currentStargateComposer, newStargateComposer_);\\n        stargateComposer = newStargateComposer_;\\n    }\\n\\n    /**\\n     * @notice Pause/Unpause bridge transfers\\n     */\\n    function toggleBridgingIsActive() external onlyGovernor {\\n        bool _newIsBridgingActive = !isBridgingActive;\\n        emit BridgingIsActiveUpdated(_newIsBridgingActive);\\n        isBridgingActive = _newIsBridgingActive;\\n    }\\n\\n    /**\\n     * @notice Update Cross-chain dispatcher mapping\\n     */\\n    function updateCrossChainDispatcherOf(uint16 chainId_, address crossChainDispatcher_) external onlyGovernor {\\n        address _current = crossChainDispatcherOf[chainId_];\\n        if (crossChainDispatcher_ == _current) revert NewValueIsSameAsCurrent();\\n        emit CrossChainDispatcherUpdated(chainId_, _current, crossChainDispatcher_);\\n        crossChainDispatcherOf[chainId_] = crossChainDispatcher_;\\n    }\\n\\n    /**\\n     * @notice Allow/Disallow destination chain\\n     * @dev Use LZ chain id\\n     */\\n    function toggleDestinationChainIsActive(uint16 chainId_) external onlyGovernor {\\n        bool _isDestinationChainSupported = !isDestinationChainSupported[chainId_];\\n        emit BridgingIsActiveUpdated(_isDestinationChainSupported);\\n        isDestinationChainSupported[chainId_] = _isDestinationChainSupported;\\n    }\\n}\\n\",\"keccak256\":\"0xab9f4678c2e440c9c5e991761ef3daf1d8bbee39746027b7b632e0c3ef146c60\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/IOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../../../../openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCoreUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"keccak256\":\"0x22651924296f8308db8195d7a86a6781023241c53905418f2d3925e3f693f530\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../IOFTCoreUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the composable OFT core standard\\n */\\ninterface IComposableOFTCoreUpgradeable is IOFTCoreUpgradeable {\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function retryOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n\\n    event CallOFTReceivedFailure(\\n        uint16 indexed _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _from,\\n        address indexed _to,\\n        uint _amount,\\n        bytes _payload,\\n        bytes _reason\\n    );\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event RetryOFTReceivedSuccess(bytes32 _messageHash);\\n\\n    event NonContractAddress(address _address);\\n}\\n\",\"keccak256\":\"0x769b9356ad6019bdabdcfc11762f28d15eb9a4e262efc96835725f6862c5d9e9\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverUpgradeable {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x287036c704c57e34a6fc3f7e67c8dfaaade6eb3667b570576bc491c0f1f89a5b\",\"license\":\"MIT\"},\"contracts/dependencies/@layerzerolabs/solidity-examples/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xaa1c57864bd8483bb17f2fa96a0cbebb39006ca7aab1a28ff85e52e487437c4c\",\"license\":\"Unlicense\"},\"contracts/dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStargateRouter.sol\\\";\\n\\ninterface IStargateComposer {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function factory() external view returns (address);\\n\\n    function stargateBridge() external view returns (address);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function peers(uint16 _chainId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdfdd1690bf176ac05803534a60227be90cc435b4bdd8fce2348f1a9417a9f63a\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe4d6bf9fa422e5e43dc1b6880f951d06611a4ed12c2dd7dd8c0b6a5d9e06ad0d\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/stargate-protocol/interfaces/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function clearCachedSwap(uint16 _srcChainId, bytes calldata _srcAddress, uint256 _nonce) external;\\n\\n    function factory() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function cachedSwapLookup(\\n        uint16 _chainId_,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (address token, uint256 amountLD, address to, bytes memory payload);\\n}\\n\",\"keccak256\":\"0x92126df8e682b2c5647c7b22e7387da69f9e72480af86948ce5ed17dc2c9e0a7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICrossChainDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateRouter.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface ICrossChainDispatcher is IStargateReceiver, IOFTReceiverUpgradeable {\\n    function crossChainDispatcherOf(uint16 chainId_) external view returns (address);\\n\\n    function triggerFlashRepaySwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function triggerLeverageSwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function isBridgingActive() external view returns (bool);\\n\\n    function flashRepayCallbackTxGasLimit() external view returns (uint64);\\n\\n    function flashRepaySwapTxGasLimit() external view returns (uint64);\\n\\n    function leverageCallbackTxGasLimit() external view returns (uint64);\\n\\n    function leverageSwapTxGasLimit() external view returns (uint64);\\n\\n    function lzBaseGasLimit() external view returns (uint256);\\n\\n    function stargateComposer() external view returns (IStargateComposer);\\n\\n    function stargateSlippage() external view returns (uint256);\\n\\n    function stargatePoolIdOf(address token_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcaf05e625588dcfaa5706acc78a35fa46d50baeb2d28f689036963695a4e39cb\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address to_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xd2f04aa1bee06d6991b10aaf7c03c3ee09d85f8e48ba92feac595ad855881380\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralFactor() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function flashWithdraw(address account_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\\n\\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\\n\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function withdrawFrom(address from_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n}\\n\",\"keccak256\":\"0xb27092f9450d9c48c1a215925007ca9c7282cfe6cf257b34ab3dbe6e745b6bd1\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3b132b42090c167b2c0aef6d78d833c669c43b9e55593a7a21a96ed5d3082700\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\",\"keccak256\":\"0xac88e0997a26942cb9cbda1a7dd9756e28ba2025813e5b07e55939fbf8538ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IFeeProvider.sol\\\";\\nimport \\\"./ISmartFarmingManager.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function feeProvider() external view returns (IFeeProvider);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\\n\\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(\\n        address account_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeized_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _maxAmountToRepay);\\n\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view returns (uint256 _amountIn, uint256 _fee);\\n\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _fee);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _fee);\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function isSwapActive() external view returns (bool);\\n\\n    function smartFarmingManager() external view returns (ISmartFarmingManager);\\n}\\n\",\"keccak256\":\"0x0f0a869451cca858ba52b56970db167360fe161f2450557a053c4da938558816\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"./IQuoter.sol\\\";\\nimport \\\"./ICrossChainDispatcher.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function feeCollector() external view returns (address);\\n\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function quoter() external view returns (IQuoter);\\n\\n    function crossChainDispatcher() external view returns (ICrossChainDispatcher);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool _exists);\\n}\\n\",\"keccak256\":\"0x9ffa9e5fd39a48ac2bda561af7fb4fc9df5f8ffb7a602ef1d4da8c068019e723\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\\\";\\n\\ninterface IProxyOFT is IComposableOFTCoreUpgradeable {\\n    function getProxyOFTOf(uint16 chainId_) external view returns (address _proxyOFT);\\n}\\n\",\"keccak256\":\"0x4041a90eb60de460c9e1631aaedfbf2bff2275b3f91964800b1c774546931cd5\",\"license\":\"MIT\"},\"contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface IQuoter {\\n    function quoteCrossChainFlashRepayNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteCrossChainLeverageNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteLeverageCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function quoteFlashRepayCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function getFlashRepaySwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n\\n    function getLeverageSwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n}\\n\",\"keccak256\":\"0x1e4d2dd779a09dc8ea6b6c244b167deddca3a48e71b73bf940da04113b40c752\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external;\\n\\n    function claimable(address account_) external view returns (uint256 _claimable);\\n\\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\\n\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\\n\\n    function tokens(uint256) external view returns (IERC20);\\n\\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\\n\\n    function accountIndexOf(IERC20, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f527eeae61b6a5bff7d3b48037234ef718ae7f71dc452e8cab3b60581f0d810\",\"license\":\"MIT\"},\"contracts/interfaces/ISmartFarmingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IManageable.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\n/**\\n * @notice SmartFarmingManager interface\\n */\\ninterface ISmartFarmingManager {\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    ) external returns (uint256 _withdrawn, uint256 _repaid);\\n\\n    function crossChainFlashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        IERC20 bridgeToken_,\\n        uint256 bridgeTokenAmountMin_,\\n        uint256 swapAmountOutMin_,\\n        uint256 repayAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 swapAmountOutMin_,\\n        uint256 depositAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverageCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _deposited);\\n\\n    function crossChainFlashRepayCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _repaid);\\n\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    ) external returns (uint256 _deposited, uint256 _issued);\\n}\\n\",\"keccak256\":\"0x7544a9d308a49e24d6984c3cfcfe2c1cfb7d9ce4655408438e1c12f37175a3b0\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/IProxyOFT.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateProxyOFT(IProxyOFT newProxyOFT_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function proxyOFT() external view returns (IProxyOFT);\\n}\\n\",\"keccak256\":\"0xfaeb24d1067e85493a5c8818d6de06fc6dbc72c37e85f82811990d0120f8a0cf\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x2f080adc5880151dc4446ef43b54abab8e3711c5f2e526917ef39a05e3c16a00\",\"license\":\"MIT\"},\"contracts/interfaces/external/IStargateComposerWithRetry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\n\\n// Note: Extending interface instead of adding those function to avoid triggering upgrade for other contracts\\n// We may move functions to `IStargateComposer` on the next major upgrade\\n// Refs: https://github.com/autonomoussoftware/metronome-synth/issues/877\\ninterface IStargateComposerWithRetry is IStargateComposer {\\n    function payloadHashes(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    function clearCachedSwap(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        address _receiver,\\n        bytes calldata _sgReceiveCallData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x92a0df931fd4ffb78085bf1526c0a5b53c78d9ea9a8a9f9b57d7178b14b80508\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/external/IStargateFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateFactory {\\n    function getPool(uint256 _id) external view returns (address _pool);\\n}\\n\",\"keccak256\":\"0x2ab62b49b277ee038b0da54659a1347969300f754ec9a5e47a982d9afdf7f495\",\"license\":\"MIT\"},\"contracts/interfaces/external/IStargatePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargatePool {\\n    function token() external view returns (address _token);\\n}\\n\",\"keccak256\":\"0xb1991884813f17988846955930b45d7e77edef53063f088e4b9b7ba08d98d27c\",\"license\":\"MIT\"},\"contracts/interfaces/external/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x75f04b225d0c310be7e0a09ee4c1aa6eeeb8d94e02fc0e4160a9597ce2d8d446\",\"license\":\"MIT\"},\"contracts/interfaces/external/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x35c8fcbe75a63e851c5c213fd9cdf40dc119fd2fd88e8583ce64d424c093edfd\",\"license\":\"MIT\"},\"contracts/lib/CrossChainLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary CrossChainLib {\\n    /**\\n     * @notice Supported cross-chain operations\\n     */\\n    uint8 public constant LEVERAGE = 1;\\n    uint8 public constant FLASH_REPAY = 2;\\n\\n    function getOperationType(bytes memory payload_) internal pure returns (uint8 _op) {\\n        (_op, ) = abi.decode(payload_, (uint8, bytes));\\n    }\\n\\n    function encodeLeverageCallbackPayload(\\n        address srcSmartFarmingManager_,\\n        uint256 requestId_\\n    ) internal pure returns (bytes memory _payload) {\\n        return abi.encode(LEVERAGE, abi.encode(srcSmartFarmingManager_, requestId_));\\n    }\\n\\n    function decodeLeverageCallbackPayload(\\n        bytes memory payload_\\n    ) internal pure returns (address _srcSmartFarmingManager, uint256 _requestId) {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, uint256));\\n    }\\n\\n    function encodeFlashRepayCallbackPayload(\\n        address srcProxyOFT_,\\n        address srcSmartFarmingManager_,\\n        uint256 requestId_\\n    ) internal pure returns (bytes memory _payload) {\\n        return abi.encode(FLASH_REPAY, abi.encode(srcProxyOFT_, srcSmartFarmingManager_, requestId_));\\n    }\\n\\n    function decodeFlashRepayCallbackPayload(\\n        bytes memory payload_\\n    ) internal pure returns (address srcProxyOFT_, address _srcSmartFarmingManager, uint256 _requestId) {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, address, uint256));\\n    }\\n\\n    function encodeFlashRepaySwapPayload(\\n        address srcSmartFarmingManager_,\\n        address dstProxyOFT_,\\n        uint256 requestId_,\\n        address account_,\\n        uint256 amountOutMin_,\\n        uint256 callbackTxNativeFee_\\n    ) internal pure returns (bytes memory _payload) {\\n        return\\n            abi.encode(\\n                FLASH_REPAY,\\n                abi.encode(\\n                    srcSmartFarmingManager_,\\n                    dstProxyOFT_,\\n                    requestId_,\\n                    account_,\\n                    amountOutMin_,\\n                    callbackTxNativeFee_\\n                )\\n            );\\n    }\\n\\n    function decodeFlashRepaySwapPayload(\\n        bytes memory payload_\\n    )\\n        internal\\n        pure\\n        returns (\\n            address _srcSmartFarmingManager,\\n            address _dstProxyOFT,\\n            uint256 _requestId,\\n            address _account,\\n            uint256 _amountOutMin,\\n            uint256 _callbackTxNativeFee\\n        )\\n    {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, address, uint256, address, uint256, uint256));\\n    }\\n\\n    function encodeLeverageSwapPayload(\\n        address srcSmartFarmingManager_,\\n        address dstProxyOFT_,\\n        uint256 requestId_,\\n        uint256 sgPoolId_,\\n        address account_,\\n        uint256 amountOutMin_,\\n        uint256 callbackTxNativeFee_\\n    ) internal pure returns (bytes memory _payload) {\\n        return\\n            abi.encode(\\n                LEVERAGE,\\n                abi.encode(\\n                    srcSmartFarmingManager_,\\n                    dstProxyOFT_,\\n                    requestId_,\\n                    sgPoolId_,\\n                    account_,\\n                    amountOutMin_,\\n                    callbackTxNativeFee_\\n                )\\n            );\\n    }\\n\\n    function decodeLeverageSwapPayload(\\n        bytes memory payload_\\n    )\\n        internal\\n        pure\\n        returns (\\n            address _srcSmartFarmingManager,\\n            address _dstProxyOFT,\\n            uint256 _requestId,\\n            uint256 _sgPoolId,\\n            address _account,\\n            uint256 _amountOutMin,\\n            uint256 _callbackTxNativeFee\\n        )\\n    {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, address, uint256, uint256, address, uint256, uint256));\\n    }\\n\\n    function encodeLzArgs(\\n        uint16 dstChainId_,\\n        uint256 callbackNativeFee_,\\n        uint64 swapTxGasLimit_\\n    ) internal pure returns (bytes memory _lzArgs) {\\n        return abi.encode(dstChainId_, callbackNativeFee_, swapTxGasLimit_);\\n    }\\n\\n    function decodeLzArgs(\\n        bytes memory lzArgs_\\n    ) internal pure returns (uint16 _dstChainId, uint256 _callbackNativeFee, uint64 _swapTxGasLimit) {\\n        return abi.decode(lzArgs_, (uint16, uint256, uint64));\\n    }\\n}\\n\",\"keccak256\":\"0x15b84cfe132b4641c5b8a6f04eed6a5a88fbbb0bd89ad7c167d98ad653ff1043\",\"license\":\"MIT\"},\"contracts/storage/CrossChainDispatcherStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/ICrossChainDispatcher.sol\\\";\\nimport \\\"../interfaces/IPoolRegistry.sol\\\";\\n\\nabstract contract CrossChainDispatcherStorageV1 is ICrossChainDispatcher {\\n    /**\\n     * @notice The pool registry contract\\n     */\\n    IPoolRegistry public poolRegistry;\\n\\n    /**\\n     * @notice Overwritten swap slippage params\\n     * @dev Used by retry functions in case of swap failure due to slippage (See: `_swap()`)\\n     */\\n    mapping(uint256 => uint256) public swapAmountOutMin;\\n\\n    /**\\n     * @notice Maps other chains `CrossChainDispatcher` contracts\\n     */\\n    mapping(uint16 => address) public crossChainDispatcherOf;\\n\\n    /**\\n     * @notice The base gas to pay for cross-chain calls\\n     * @dev This limit covers basic token transfer LZ cost\\n     */\\n    uint256 public lzBaseGasLimit;\\n\\n    /**\\n     * @notice The slippage we're willing to accept for SG like:like transfers\\n     */\\n    uint256 public stargateSlippage;\\n\\n    /**\\n     * @notice The gas limit to cover `_crossChainFlashRepayCallback()` call\\n     */\\n    uint64 public flashRepayCallbackTxGasLimit;\\n\\n    /**\\n     * @notice The gas limit to cover `_swapAndTriggerFlashRepayCallback()` call\\n     */\\n    uint64 public flashRepaySwapTxGasLimit;\\n\\n    /**\\n     * @notice The gas limit to cover `_crossChainLeverageCallback()` call\\n     */\\n    uint64 public leverageCallbackTxGasLimit;\\n\\n    /**\\n     * @notice The gas limit to cover `_swapAndTriggerLeverageCallback()` call\\n     */\\n    uint64 public leverageSwapTxGasLimit;\\n\\n    /**\\n     * @notice Flag that pause/unpause all cross-chain activities\\n     */\\n    bool public isBridgingActive;\\n\\n    /**\\n     * @notice The Stargate Router contract\\n     */\\n    IStargateComposer public stargateComposer;\\n\\n    /**\\n     * @notice Maps Stargate's token pools\\n     */\\n    mapping(address => uint256) public stargatePoolIdOf;\\n\\n    /**\\n     * @notice Maps supported cross-chain routes (i.e. which chains are allowed to be used as source of liquidity)\\n     */\\n    mapping(uint16 => bool) public isDestinationChainSupported;\\n\\n    /**\\n     * @notice WETH contract\\n     */\\n    address public weth;\\n\\n    /**\\n     * @notice SGETH contract\\n     */\\n    address public sgeth;\\n}\\n\\nabstract contract CrossChainDispatcherStorageV2 is CrossChainDispatcherStorageV1 {\\n    /**\\n     * @notice Store extra amount sent when retrying a failed tx due to low native fee\\n     */\\n    mapping(uint256 => uint256) public extraCallbackTxNativeFee;\\n}\\n\",\"keccak256\":\"0x3daaf2d3400d3c09bfd05165296c4f5328d8b4e0530493f5e36b52993102a481\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x3bf3c3de5a638ca101f25dfcaec5268e9c8a1c29a9a278d70be4459768fb41fe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b62000152565b6200002e60ff62000031565b50565b60008054610100900460ff1615620000ca578160ff1660011480156200006a575062000068306200014360201b620026e41760201c565b155b620000c25760405162461bcd60e51b815260206004820152602e602482015260008051602062004bd683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001295760405162461bcd60e51b815260206004820152602e602482015260008051602062004bd683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000b9565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b614a7480620001626000396000f3fe6080604052600436106102075760003560e01c80638a9cadaf11610118578063b71b42ec116100a0578063dfda255f1161006f578063dfda255f14610602578063e3499aa414610638578063e3d47ece14610668578063e7f4c16b1461068f578063ffa1ad74146106b657600080fd5b8063b71b42ec14610582578063b9d81720146105a2578063c0c53b8b146105b5578063d89921cb146105d557600080fd5b8063ab4193e2116100e7578063ab4193e2146104d5578063ab8236f314610502578063ac18fce614610522578063afcff50f14610542578063b2d083c11461056257600080fd5b80638a9cadaf146104555780638ece685714610468578063a6bd364614610488578063a761f5f0146104b557600080fd5b80633413f1c11161019b5780636a46aa381161016a5780636a46aa38146103ca5780636c77d24f146103ea5780636e406753146104005780637b7305d314610420578063833667df1461044057600080fd5b80633413f1c11461035357806339f648bf146103775780633fc8cef31461038a57806362491b35146103aa57600080fd5b80631e492d56116101d75780631e492d56146102ac5780632b80cc52146102cc5780632e369cf2146102f65780633352b6081461031657600080fd5b8062bc9db9146102135780630b211f0f14610228578063147a7d711461026c5780631a607f9a1461028c57600080fd5b3661020e57005b600080fd5b610226610221366004613de0565b6106f4565b005b34801561023457600080fd5b5060075461024f90600160801b90046001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b34801561027857600080fd5b50610226610287366004613e9c565b610c10565b34801561029857600080fd5b506102266102a7366004613f68565b610d6e565b3480156102b857600080fd5b506102266102c7366004613f81565b610e88565b3480156102d857600080fd5b506008546102e69060ff1681565b6040519015158152602001610263565b34801561030257600080fd5b50610226610311366004613f9e565b610fe3565b34801561032257600080fd5b5060085461033b9061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610263565b34801561035f57600080fd5b5061036960065481565b604051908152602001610263565b610226610385366004613de0565b61113c565b34801561039657600080fd5b50600b5461033b906001600160a01b031681565b3480156103b657600080fd5b5060075461024f906001600160401b031681565b3480156103d657600080fd5b506102266103e5366004613f68565b61167e565b3480156103f657600080fd5b5061036960055481565b34801561040c57600080fd5b5061022661041b366004613f81565b611798565b34801561042c57600080fd5b5061022661043b366004613fbb565b6118f8565b34801561044c57600080fd5b50610226611a4a565b610226610463366004613fe7565b611b51565b34801561047457600080fd5b506102266104833660046140a3565b611d4e565b34801561049457600080fd5b506103696104a3366004613f68565b600d6020526000908152604090205481565b3480156104c157600080fd5b50600c5461033b906001600160a01b031681565b3480156104e157600080fd5b506103696104f0366004613f68565b60036020526000908152604090205481565b34801561050e57600080fd5b5061022661051d36600461419f565b611ec9565b34801561052e57600080fd5b5061022661053d366004613f81565b612033565b34801561054e57600080fd5b5060025461033b906001600160a01b031681565b34801561056e57600080fd5b5061022661057d36600461423b565b612182565b34801561058e57600080fd5b5061022661059d366004613f81565b6122ae565b6102266105b0366004614258565b612413565b3480156105c157600080fd5b506102266105d03660046142ff565b6125dd565b3480156105e157600080fd5b506103696105f0366004613f9e565b60096020526000908152604090205481565b34801561060e57600080fd5b5061033b61061d36600461423b565b6004602052600090815260409020546001600160a01b031681565b34801561064457600080fd5b506102e661065336600461423b565b600a6020526000908152604090205460ff1681565b34801561067457600080fd5b5060075461024f90600160c01b90046001600160401b031681565b34801561069b57600080fd5b5060075461024f90600160401b90046001600160401b031681565b3480156106c257600080fd5b506106e7604051806040016040528060058152602001640312e332e360dc1b81525081565b60405161026391906143a2565b600260015414156107205760405162461bcd60e51b8152600401610717906143b5565b60405180910390fd5b60026001819055506000336001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b91906143ec565b60025460405163c673bdaf60e01b81526001600160a01b03808416600483015292935091169063c673bdaf9060240160206040518083038186803b1580156107e257600080fd5b505afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190614409565b61083757604051633bfe162b60e01b815260040160405180910390fd5b806001600160a01b03166396aaccfe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087057600080fd5b505afa158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a891906143ec565b6001600160a01b0316336001600160a01b0316146108d957604051633bfe162b60e01b815260040160405180910390fd5b60085460ff1615806109c95750336001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561091f57600080fd5b505afa158015610933573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095791906143ec565b6001600160a01b0316632b80cc526040518163ffffffff1660e01b815260040160206040518083038186803b15801561098f57600080fd5b505afa1580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c79190614409565b155b156109e757604051635621fccf60e01b815260040160405180910390fd5b60008890506000806000610a3087878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506126f392505050565b925092509250606060008b6001600160a01b0316636d1bb8f76040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7357600080fd5b505afa158015610a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aab91906143ec565b6040516001627dd58f60e11b0319815261ffff871660048201526001600160a01b03919091169063ff0454e29060240160206040518083038186803b158015610af357600080fd5b505afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b91906143ec565b90506001600160a01b038116610b545760405163fb7566d760e01b815260040160405180910390fd5b61ffff85166000908152600a602052604090205460ff16610b885760405163334dc1fd60e01b815260040160405180910390fd5b8e610b973383838a8f8a612719565b92505050610bfc6040518061010001604052808e6001600160a01b031681526020018661ffff1681526020018c8152602001348152602001838152602001876001600160a01b03168152602001846001600160401b0316815260200185815250612791565b505060018055505050505050505050505050565b610c1933612a61565b610c3657604051633bfe162b60e01b815260040160405180910390fd5b6000610c7c600087878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293925050612bfc9050565b90506001600160a01b0381161580610cb3575061ffff8a166000908152600460205260409020546001600160a01b03828116911614155b15610cd157604051637ab628f960e01b815260040160405180910390fd5b6000610d1284848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c6192505050565b905060ff811660021415610d3057610d2b858585612c7e565b610d61565b60ff811660011415610d4857610d2b8b868686612de7565b604051630ead561960e11b815260040160405180910390fd5b5050505050505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610dbc57600080fd5b505afa158015610dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df491906143ec565b6001600160a01b0316336001600160a01b031614610e2557604051634b98449160e11b815260040160405180910390fd5b60065481811415610e4957604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f5cac1093ddd8c1e9cbcd89b2f36fa1889e966cc257753af2d160888564fd9818910160405180910390a150600655565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed657600080fd5b505afa158015610eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0e91906143ec565b6001600160a01b0316336001600160a01b031614610f3f57604051634b98449160e11b815260040160405180910390fd5b6007546001600160401b03600160c01b9091048116908216811415610f7757604051630333a68160e41b815260040160405180910390fd5b604080516001600160401b038084168252841660208201527f7dd9d7c71da5859a7d6e34c00f4889cb529dbbc009a358db124855baa125a4dc910160405180910390a150600780546001600160401b03909216600160c01b026001600160c01b03909216919091179055565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561103157600080fd5b505afa158015611045573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106991906143ec565b6001600160a01b0316336001600160a01b03161461109a57604051634b98449160e11b815260040160405180910390fd5b6008546001600160a01b0361010090910481169082168114156110d057604051630333a68160e41b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527f398baf83f237e7e1e1ce6637c69193c52e8b6382036ceb3c6eba08401e327667910160405180910390a150600880546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6002600154141561115f5760405162461bcd60e51b8152600401610717906143b5565b60026001819055506000336001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a257600080fd5b505afa1580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da91906143ec565b60025460405163c673bdaf60e01b81526001600160a01b03808416600483015292935091169063c673bdaf9060240160206040518083038186803b15801561122157600080fd5b505afa158015611235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112599190614409565b61127657604051633bfe162b60e01b815260040160405180910390fd5b806001600160a01b03166396aaccfe6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112af57600080fd5b505afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e791906143ec565b6001600160a01b0316336001600160a01b03161461131857604051633bfe162b60e01b815260040160405180910390fd5b60085460ff1615806114085750336001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561135e57600080fd5b505afa158015611372573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139691906143ec565b6001600160a01b0316632b80cc526040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ce57600080fd5b505afa1580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114069190614409565b155b1561142657604051635621fccf60e01b815260040160405180910390fd5b6000889050600080600061146f87878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506126f392505050565b925092509250606060008b905060008f905060008b905060008f6001600160a01b0316636d1bb8f76040518163ffffffff1660e01b815260040160206040518083038186803b1580156114c157600080fd5b505afa1580156114d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f991906143ec565b6040516001627dd58f60e11b0319815261ffff8a1660048201526001600160a01b03919091169063ff0454e29060240160206040518083038186803b15801561154157600080fd5b505afa158015611555573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157991906143ec565b6001600160a01b0380861660009081526009602052604090205491925082166115b55760405163fb7566d760e01b815260040160405180910390fd5b61ffff89166000908152600a602052604090205460ff166115e95760405163334dc1fd60e01b815260040160405180910390fd5b806116075760405163029c545360e41b815260040160405180910390fd5b611616338386848e888e613100565b95505050505050610bfc6040518061010001604052808e6001600160a01b031681526020018661ffff1681526020018c8152602001348152602001838152602001876001600160a01b03168152602001846001600160401b0316815260200185815250613181565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156116cc57600080fd5b505afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170491906143ec565b6001600160a01b0316336001600160a01b03161461173557604051634b98449160e11b815260040160405180910390fd5b6005548181141561175957604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f83c9ee8eed7101992146d1c75610cc54c1db740210cde12e135fa657a7850854910160405180910390a150600555565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e657600080fd5b505afa1580156117fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181e91906143ec565b6001600160a01b0316336001600160a01b03161461184f57604051634b98449160e11b815260040160405180910390fd5b6007546001600160401b03600160801b909104811690821681141561188757604051630333a68160e41b815260040160405180910390fd5b604080516001600160401b038084168252841660208201527fce0317145f704f138aad728eeb9d95c91260950871930acca6e659f1b0883364910160405180910390a150600780546001600160401b03909216600160801b0267ffffffffffffffff60801b19909216919091179055565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561194657600080fd5b505afa15801561195a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197e91906143ec565b6001600160a01b0316336001600160a01b0316146119af57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038216600090815260096020526040902054818114156119e957604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490526001600160a01b038516917ffa622ae921e227a42afec644139331c019f4157c54e93c82dd5f811ba210ac15910160405180910390a2506001600160a01b03909116600090815260096020526040902055565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611a9857600080fd5b505afa158015611aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad091906143ec565b6001600160a01b0316336001600160a01b031614611b0157604051634b98449160e11b815260040160405180910390fd5b60085460405160ff90911615808252907f0269774d3426d7e61b04b7d5129948b9f4edf9b937bb0c657fbb32a94a7996ec9060200160405180910390a16008805460ff1916911515919091179055565b60026001541415611b745760405162461bcd60e51b8152600401610717906143b5565b600260015560085461ffff8a1660009081526004602090815260408083205490516001600160a01b0361010090950485169463ab8236f360e01b938f93611bbe939216910161442b565b60408051601f1981840301815290829052611be692918c908c908c908c908c90602401614471565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050600080611c5d87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061336192505050565b50509350935050506000341115611c92576000828152600d602052604081208054349290611c8c9084906144ea565b90915550505b336001600160a01b0382161415611cd35784611cc157604051634c3ce71f60e11b815260040160405180910390fd5b60008281526003602052604090208590555b836001600160a01b031663c0e6ac6c8e8e8e8e30896040518763ffffffff1660e01b8152600401611d0996959493929190614502565b600060405180830381600087803b158015611d2357600080fd5b505af1158015611d37573d6000803e3d6000fd5b505060018055505050505050505050505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611d9c57600080fd5b505afa158015611db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd491906143ec565b6001600160a01b0316336001600160a01b031614611e0557604051634b98449160e11b815260040160405180910390fd5b61ffff82166000908152600460205260409020546001600160a01b03908116908216811415611e4757604051630333a68160e41b815260040160405180910390fd5b6040805161ffff851681526001600160a01b03838116602083015284168183015290517fa0670378b7d4511893529175129417ed82867197a3ea18eb2743483bd4f00c2a9181900360600190a15061ffff91909116600090815260046020526040902080546001600160a01b0319166001600160a01b03909216919091179055565b60085461010090046001600160a01b03163314611ef957604051633bfe162b60e01b815260040160405180910390fd5b600c546001600160a01b0384811691161415611f8757600b60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015611f5f57600080fd5b505af1158015611f73573d6000803e3d6000fd5b5050600b546001600160a01b031695505050505b6000611f938682612bfc565b90506001600160a01b0381161580611fca575061ffff87166000908152600460205260409020546001600160a01b03828116911614155b15611fe857604051637ab628f960e01b815260040160405180910390fd5b6000611ff383612c61565b905060ff8116600114156120115761200c8585856133ab565b612029565b60ff811660021415610d485761200c8886868661346e565b5050505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561208157600080fd5b505afa158015612095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b991906143ec565b6001600160a01b0316336001600160a01b0316146120ea57604051634b98449160e11b815260040160405180910390fd5b6007546001600160401b0390811690821681141561211b57604051630333a68160e41b815260040160405180910390fd5b604080516001600160401b038084168252841660208201527f1701885e1db4da3ff923033aa465855dde857275866d4f132af5384aa880554f910160405180910390a1506007805467ffffffffffffffff19166001600160401b0392909216919091179055565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156121d057600080fd5b505afa1580156121e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220891906143ec565b6001600160a01b0316336001600160a01b03161461223957604051634b98449160e11b815260040160405180910390fd5b61ffff81166000908152600a602090815260409182902054915160ff90921615808352917f0269774d3426d7e61b04b7d5129948b9f4edf9b937bb0c657fbb32a94a7996ec910160405180910390a161ffff919091166000908152600a60205260409020805460ff1916911515919091179055565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156122fc57600080fd5b505afa158015612310573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233491906143ec565b6001600160a01b0316336001600160a01b03161461236557604051634b98449160e11b815260040160405180910390fd5b6007546001600160401b03600160401b909104811690821681141561239d57604051630333a68160e41b815260040160405180910390fd5b604080516001600160401b038084168252841660208201527f8dbd2ecaaca80db9e2e655edc0f1b4df2c87f441eaedf46e0b7b00358d97ad30910160405180910390a150600780546001600160401b03909216600160401b026fffffffffffffffff000000000000000019909216919091179055565b600260015414156124365760405162461bcd60e51b8152600401610717906143b5565b6002600181905550600080600061248286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061362292505050565b5050945050935093505061249583612a61565b6124b257604051637c6953f960e01b815260040160405180910390fd5b34156124dc576000828152600d6020526040812080543492906124d69084906144ea565b90915550505b336001600160a01b038216141561251d578361250b57604051634c3ce71f60e11b815260040160405180910390fd5b60008281526003602052604090208490555b61ffff8b16600090815260046020908152604080832054905161254c926001600160a01b03909216910161442b565b6040516020818303038152906040529050836001600160a01b031663cfd6528e8d8d8d8d86308f8f8f6040518a63ffffffff1660e01b81526004016125999998979695949392919061455d565b600060405180830381600087803b1580156125b357600080fd5b505af11580156125c7573d6000803e3d6000fd5b5050600180555050505050505050505050505050565b60006125e96001613671565b90508015612601576000805461ff0019166101001790555b6001600160a01b0384166126285760405163fb7566d760e01b815260040160405180910390fd5b6126306136f9565b600280546001600160a01b038087166001600160a01b031992831617909255603260065562030d406005557a0b71b000000000000b71b0000000000007a12000000000000b71b0600755600b8054868416908316179055600c80549285169290911691909117905580156126de576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b03163b151590565b60008060008380602001905181019061270c91906145d7565b9250925092509193909250565b604080516001600160a01b038881166020830152878116828401526060808301889052908616608083015260a0820185905260c08083018590528351808403909101815260e083019093529161277691600291906101000161460f565b60405160208183030381529060405290509695505050505050565b6127b560405180606001604052806000815260200160008152602001606081525090565b60208083015161ffff16600090815260048252604080822054905191926127e8926001600160a01b03909216910161442b565b60408051601f19818403018152919052905060006128068282612bfc565b6001600160a01b0316141561282e5760405163fb7566d760e01b815260040160405180910390fd5b60405180606001604052808460c001516001600160401b031681526020018460e00151815260200160008560e001511161288257604080516000602082015201604051602081830303815290604052612884565b825b905283516001600160a01b0316600090815260096020526040902054909250806128c15760405163029c545360e41b815260040160405180910390fd5b60006127106006546127106128d6919061462b565b86604001516128e59190614642565b6128ef9190614661565b6080860151600854600b54885193945091926001600160a01b03610100909204821692908216911614156129a457600b546040808901519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d916129549160040190815260200190565b600060405180830381600087803b15801561296e57600080fd5b505af1158015612982573d6000803e3d6000fd5b5050505086604001518760600181815161299c91906144ea565b9052506129d9565b86516129bb906001600160a01b031682600061372a565b604087015187516129d9916001600160a01b0390911690839061372a565b806001600160a01b0316639fbf10fc8860600151896020015187888c60a001518d604001518a8e8e8c6040518b63ffffffff1660e01b8152600401612a2699989796959493929190614683565b6000604051808303818588803b158015612a3f57600080fd5b505af1158015612a53573d6000803e3d6000fd5b505050505050505050505050565b600080826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a9d57600080fd5b505afa158015612ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad591906143ec565b600254604051631a0dd00b60e01b81526001600160a01b038084166004830152929350911690631a0dd00b9060240160206040518083038186803b158015612b1c57600080fd5b505afa158015612b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b549190614409565b612b615750600092915050565b806001600160a01b0316636d1bb8f76040518163ffffffff1660e01b815260040160206040518083038186803b158015612b9a57600080fd5b505afa158015612bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd291906143ec565b6001600160a01b0316836001600160a01b031614612bf35750600092915050565b50600192915050565b6000612c098260146144ea565b83511015612c515760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610717565b500160200151600160601b900490565b600081806020019051810190612c779190614711565b5092915050565b6000806000612cc285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061387592505050565b9250925092506000836001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d0357600080fd5b505afa158015612d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3b91906143ec565b9050612d526001600160a01b03821684600061372a565b612d666001600160a01b038216848961372a565b604051636455bf6f60e01b815260048101839052602481018890526001600160a01b03841690636455bf6f90604401602060405180830381600087803b158015612daf57600080fd5b505af1158015612dc3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202991906147a3565b6000806000806000806000612e3189898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061362292505050565b96509650965096509650965096506000600860019054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015612e8f57600080fd5b505afa158015612ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec791906143ec565b6001600160a01b031663068bcd8d866040518263ffffffff1660e01b8152600401612ef491815260200190565b60206040518083038186803b158015612f0c57600080fd5b505afa158015612f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4491906143ec565b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f7c57600080fd5b505afa158015612f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb491906143ec565b600c549091506001600160a01b0380831691161415612fdb5750600b546001600160a01b03165b61305886886001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561301857600080fd5b505afa15801561302c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305091906143ec565b838e876138a7565b9a5060008c90506130f1604051806101000160405280846001600160a01b031681526020018361ffff1681526020018e8152602001600d60008b815260200190815260200160002054866130ac91906144ea565b81526020016130bb8c8b613a1a565b81526001600160a01b0388166020820152600754600160801b90046001600160401b031660408201526000606090910152612791565b50505050505050505050505050565b604080516001600160a01b0389811660208301528881168284015260608083018990526080830188905290861660a083015260c0820185905260e08083018590528351808403909101815261010083019093529161316591600191906101200161460f565b6040516020818303038152906040529050979650505050505050565b60208082015161ffff166000908152600490915260409020546001600160a01b0316806131c15760405163fb7566d760e01b815260040160405180910390fd5b600060028360c001516001600160401b03166005546131e091906144ea565b60e0850151806131f15760006131f3565b845b60405160200161323d949392919060f09490941b6001600160f01b03191684526002840192909252602283015260601b6bffffffffffffffffffffffff1916604282015260560190565b604051602081830303815290604052905082600001516001600160a01b0316636d1bb8f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561328b57600080fd5b505afa15801561329f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c391906143ec565b6001600160a01b031663e7f0c59f8460600151308660200151866040516020016132ed919061442b565b60408051601f19818403018152828252908a015160808b015160c08c015160a08d01516001600160e01b031960e08b901b1686526133349796956000908d906004016147bc565b6000604051808303818588803b15801561334d57600080fd5b505af1158015612029573d6000803e3d6000fd5b6000806000806000808680602001905181019061337e9190614711565b805190985061339791508801602090810190890161483a565b949c939b5091995097509550909350915050565b6000806133b783613a6b565b90925090506133d16001600160a01b03861683600061372a565b6133e56001600160a01b038616838661372a565b6040516320159ddd60e21b815260048101829052602481018590526001600160a01b03831690638056777490604401602060405180830381600087803b15801561342e57600080fd5b505af1158015613442573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061346691906147a3565b505050505050565b60008060008060008061348087613361565b9550955095509550955095506000856001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156134c757600080fd5b505afa1580156134db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ff91906143ec565b905061350e858b838c876138a7565b6040516001627dd58f60e11b0319815261ffff8d1660048201529099508b906000906001600160a01b0389169063ff0454e29060240160206040518083038186803b15801561355c57600080fd5b505afa158015613570573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359491906143ec565b90506130f1604051806101000160405280856001600160a01b031681526020018461ffff1681526020018d8152602001600d60008b815260200190815260200160002054876135e391906144ea565b81526020016135f3848d8c613aa4565b81526001600160a01b03891660208201526007546001600160401b031660408201526000606090910152613181565b6000806000806000806000878060200190518101906136419190614711565b805190995061365a915089016020908101908a016148a3565b959e949d50929b5090995097509550909350915050565b60008054610100900460ff16156136b8578160ff1660011480156136945750303b155b6136b05760405162461bcd60e51b815260040161071790614918565b506000919050565b60005460ff8084169116106136df5760405162461bcd60e51b815260040161071790614918565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166137205760405162461bcd60e51b815260040161071790614966565b613728613b00565b565b8015806137b35750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561377957600080fd5b505afa15801561378d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137b191906147a3565b155b61381e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610717565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052613870908490613b2d565b505050565b60008060008380602001905181019061388e9190614711565b805190955061270c9150850160209081019086016149b1565b60008581526003602052604081205480156138cf576000878152600360205260408120559150815b60025460408051632b3297f960e01b815290516000926001600160a01b031691632b3297f9916004808301926020929190829003018186803b15801561391457600080fd5b505afa158015613928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394c91906143ec565b90506139636001600160a01b03881682600061372a565b6139776001600160a01b038816828761372a565b604051636ccb2b0160e01b81526001600160a01b03888116600483015287811660248301526044820187905260648201869052306084830152821690636ccb2b019060a401602060405180830381600087803b1580156139d657600080fd5b505af11580156139ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0e91906147a3565b98975050505050505050565b604080516001600160a01b03841660208201528082018390528151808203830181526060808301909352613a54916001919060800161460f565b604051602081830303815290604052905092915050565b60008082806020019051810190613a829190614711565b8051909450613a9b9150840160209081019085016149f4565b91509150915091565b604080516001600160a01b03858116602083015284168183015260608082018490528251808303820181526080830190935291613ae7916002919060a00161460f565b60405160208183030381529060405290505b9392505050565b600054610100900460ff16613b275760405162461bcd60e51b815260040161071790614966565b60018055565b6000613b82826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613bff9092919063ffffffff16565b8051909150156138705780806020019051810190613ba09190614409565b6138705760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610717565b6060613c0e8484600085613c16565b949350505050565b606082471015613c775760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610717565b6001600160a01b0385163b613cce5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610717565b600080866001600160a01b03168587604051613cea9190614a22565b60006040518083038185875af1925050503d8060008114613d27576040519150601f19603f3d011682016040523d82523d6000602084013e613d2c565b606091505b5091509150613d3c828286613d47565b979650505050505050565b60608315613d56575081613af9565b825115613d665782518084602001fd5b8160405162461bcd60e51b815260040161071791906143a2565b6001600160a01b0381168114613d9557600080fd5b50565b60008083601f840112613daa57600080fd5b5081356001600160401b03811115613dc157600080fd5b602083019150836020828501011115613dd957600080fd5b9250929050565b60008060008060008060008060e0898b031215613dfc57600080fd5b883597506020890135613e0e81613d80565b96506040890135613e1e81613d80565b95506060890135613e2e81613d80565b94506080890135935060a0890135925060c08901356001600160401b03811115613e5757600080fd5b613e638b828c01613d98565b999c989b5096995094979396929594505050565b61ffff81168114613d9557600080fd5b6001600160401b0381168114613d9557600080fd5b600080600080600080600080600060c08a8c031215613eba57600080fd5b8935613ec581613e77565b985060208a01356001600160401b0380821115613ee157600080fd5b613eed8d838e01613d98565b909a50985060408c01359150613f0282613e87565b90965060608b01359080821115613f1857600080fd5b613f248d838e01613d98565b909750955060808c0135945060a08c0135915080821115613f4457600080fd5b50613f518c828d01613d98565b915080935050809150509295985092959850929598565b600060208284031215613f7a57600080fd5b5035919050565b600060208284031215613f9357600080fd5b8135613af981613e87565b600060208284031215613fb057600080fd5b8135613af981613d80565b60008060408385031215613fce57600080fd5b8235613fd981613d80565b946020939093013593505050565b600080600080600080600080600060e08a8c03121561400557600080fd5b893561401081613e77565b985060208a01356001600160401b038082111561402c57600080fd5b6140388d838e01613d98565b909a50985060408c0135915061404d82613e87565b90965060608b01359061405f82613d80565b90955060808b0135945060a08b0135908082111561407c57600080fd5b506140898c828d01613d98565b9a9d999c50979a9699959894979660c00135949350505050565b600080604083850312156140b657600080fd5b82356140c181613e77565b915060208301356140d181613d80565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561411a5761411a6140dc565b604052919050565b60006001600160401b0382111561413b5761413b6140dc565b50601f01601f191660200190565b600082601f83011261415a57600080fd5b813561416d61416882614122565b6140f2565b81815284602083860101111561418257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c087890312156141b857600080fd5b86356141c381613e77565b955060208701356001600160401b03808211156141df57600080fd5b6141eb8a838b01614149565b9650604089013595506060890135915061420482613d80565b9093506080880135925060a0880135908082111561422157600080fd5b5061422e89828a01614149565b9150509295509295509295565b60006020828403121561424d57600080fd5b8135613af981613e77565b60008060008060008060008060c0898b03121561427457600080fd5b883561427f81613e77565b975060208901356001600160401b038082111561429b57600080fd5b6142a78c838d01613d98565b909950975060408b013591506142bc82613e87565b90955060608a0135945060808a013590808211156142d957600080fd5b506142e68b828c01613d98565b999c989b50969995989497949560a00135949350505050565b60008060006060848603121561431457600080fd5b833561431f81613d80565b9250602084013561432f81613d80565b9150604084013561433f81613d80565b809150509250925092565b60005b8381101561436557818101518382015260200161434d565b838111156126de5750506000910152565b6000815180845261438e81602086016020860161434a565b601f01601f19169290920160200192915050565b602081526000613af96020830184614376565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156143fe57600080fd5b8151613af981613d80565b60006020828403121561441b57600080fd5b81518015158114613af957600080fd5b60609190911b6bffffffffffffffffffffffff1916815260140190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff8816815260c06020820152600061448e60c0830189614376565b6001600160401b03881660408401526001600160a01b03871660608401526080830186905282810360a08401526144c6818587614448565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156144fd576144fd6144d4565b500190565b61ffff8716815260a06020820152600061452060a083018789614448565b6001600160401b03861660408401526001600160a01b038516606084015282810360808401526145508185614376565b9998505050505050505050565b61ffff8a16815260e06020820152600061457b60e083018a8c614448565b6001600160401b0389166040840152828103606084015261459c8189614376565b6001600160a01b038816608085015260a0840187905283810360c085015290506145c7818587614448565b9c9b505050505050505050505050565b6000806000606084860312156145ec57600080fd5b83516145f781613e77565b60208501516040860151919450925061433f81613e87565b60ff83168152604060208201526000613c0e6040830184614376565b60008282101561463d5761463d6144d4565b500390565b600081600019048311821515161561465c5761465c6144d4565b500290565b60008261467e57634e487b7160e01b600052601260045260246000fd5b500490565b600061012061ffff8c1683528a602084015289604084015260018060a01b03891660608401528760808401528660a08401528060c0840152855181840152506020850151610140830152604085015160606101608401526146e8610180840182614376565b905082810360e08401526146fc8186614376565b90508281036101008401526145c78185614376565b6000806040838503121561472457600080fd5b825160ff8116811461473557600080fd5b60208401519092506001600160401b0381111561475157600080fd5b8301601f8101851361476257600080fd5b805161477061416882614122565b81815286602083850101111561478557600080fd5b61479682602083016020860161434a565b8093505050509250929050565b6000602082840312156147b557600080fd5b5051919050565b6001600160a01b038a8116825261ffff8a166020830152610120604083018190526000916147ec8483018c614376565b91508960608501528382036080850152614806828a614376565b6001600160401b03891660a086015287821660c086015290861660e085015283810361010085015290506145c78185614376565b60008060008060008060c0878903121561485357600080fd5b865161485e81613d80565b602088015190965061486f81613d80565b60408801516060890151919650945061488781613d80565b809350506080870151915060a087015190509295509295509295565b600080600080600080600060e0888a0312156148be57600080fd5b87516148c981613d80565b60208901519097506148da81613d80565b80965050604088015194506060880151935060808801516148fa81613d80565b8093505060a0880151915060c0880151905092959891949750929550565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000806000606084860312156149c657600080fd5b83516149d181613d80565b60208501519093506149e281613d80565b80925050604084015190509250925092565b60008060408385031215614a0757600080fd5b8251614a1281613d80565b6020939093015192949293505050565b60008251614a3481846020870161434a565b919091019291505056fea2646970667358221220046653a5ba87dfd7d7659ec799417395545c9a8c022207679388dbea325b0e6564736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x6080604052600436106102075760003560e01c80638a9cadaf11610118578063b71b42ec116100a0578063dfda255f1161006f578063dfda255f14610602578063e3499aa414610638578063e3d47ece14610668578063e7f4c16b1461068f578063ffa1ad74146106b657600080fd5b8063b71b42ec14610582578063b9d81720146105a2578063c0c53b8b146105b5578063d89921cb146105d557600080fd5b8063ab4193e2116100e7578063ab4193e2146104d5578063ab8236f314610502578063ac18fce614610522578063afcff50f14610542578063b2d083c11461056257600080fd5b80638a9cadaf146104555780638ece685714610468578063a6bd364614610488578063a761f5f0146104b557600080fd5b80633413f1c11161019b5780636a46aa381161016a5780636a46aa38146103ca5780636c77d24f146103ea5780636e406753146104005780637b7305d314610420578063833667df1461044057600080fd5b80633413f1c11461035357806339f648bf146103775780633fc8cef31461038a57806362491b35146103aa57600080fd5b80631e492d56116101d75780631e492d56146102ac5780632b80cc52146102cc5780632e369cf2146102f65780633352b6081461031657600080fd5b8062bc9db9146102135780630b211f0f14610228578063147a7d711461026c5780631a607f9a1461028c57600080fd5b3661020e57005b600080fd5b610226610221366004613de0565b6106f4565b005b34801561023457600080fd5b5060075461024f90600160801b90046001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b34801561027857600080fd5b50610226610287366004613e9c565b610c10565b34801561029857600080fd5b506102266102a7366004613f68565b610d6e565b3480156102b857600080fd5b506102266102c7366004613f81565b610e88565b3480156102d857600080fd5b506008546102e69060ff1681565b6040519015158152602001610263565b34801561030257600080fd5b50610226610311366004613f9e565b610fe3565b34801561032257600080fd5b5060085461033b9061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610263565b34801561035f57600080fd5b5061036960065481565b604051908152602001610263565b610226610385366004613de0565b61113c565b34801561039657600080fd5b50600b5461033b906001600160a01b031681565b3480156103b657600080fd5b5060075461024f906001600160401b031681565b3480156103d657600080fd5b506102266103e5366004613f68565b61167e565b3480156103f657600080fd5b5061036960055481565b34801561040c57600080fd5b5061022661041b366004613f81565b611798565b34801561042c57600080fd5b5061022661043b366004613fbb565b6118f8565b34801561044c57600080fd5b50610226611a4a565b610226610463366004613fe7565b611b51565b34801561047457600080fd5b506102266104833660046140a3565b611d4e565b34801561049457600080fd5b506103696104a3366004613f68565b600d6020526000908152604090205481565b3480156104c157600080fd5b50600c5461033b906001600160a01b031681565b3480156104e157600080fd5b506103696104f0366004613f68565b60036020526000908152604090205481565b34801561050e57600080fd5b5061022661051d36600461419f565b611ec9565b34801561052e57600080fd5b5061022661053d366004613f81565b612033565b34801561054e57600080fd5b5060025461033b906001600160a01b031681565b34801561056e57600080fd5b5061022661057d36600461423b565b612182565b34801561058e57600080fd5b5061022661059d366004613f81565b6122ae565b6102266105b0366004614258565b612413565b3480156105c157600080fd5b506102266105d03660046142ff565b6125dd565b3480156105e157600080fd5b506103696105f0366004613f9e565b60096020526000908152604090205481565b34801561060e57600080fd5b5061033b61061d36600461423b565b6004602052600090815260409020546001600160a01b031681565b34801561064457600080fd5b506102e661065336600461423b565b600a6020526000908152604090205460ff1681565b34801561067457600080fd5b5060075461024f90600160c01b90046001600160401b031681565b34801561069b57600080fd5b5060075461024f90600160401b90046001600160401b031681565b3480156106c257600080fd5b506106e7604051806040016040528060058152602001640312e332e360dc1b81525081565b60405161026391906143a2565b600260015414156107205760405162461bcd60e51b8152600401610717906143b5565b60405180910390fd5b60026001819055506000336001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b91906143ec565b60025460405163c673bdaf60e01b81526001600160a01b03808416600483015292935091169063c673bdaf9060240160206040518083038186803b1580156107e257600080fd5b505afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190614409565b61083757604051633bfe162b60e01b815260040160405180910390fd5b806001600160a01b03166396aaccfe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561087057600080fd5b505afa158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a891906143ec565b6001600160a01b0316336001600160a01b0316146108d957604051633bfe162b60e01b815260040160405180910390fd5b60085460ff1615806109c95750336001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561091f57600080fd5b505afa158015610933573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095791906143ec565b6001600160a01b0316632b80cc526040518163ffffffff1660e01b815260040160206040518083038186803b15801561098f57600080fd5b505afa1580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c79190614409565b155b156109e757604051635621fccf60e01b815260040160405180910390fd5b60008890506000806000610a3087878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506126f392505050565b925092509250606060008b6001600160a01b0316636d1bb8f76040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7357600080fd5b505afa158015610a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aab91906143ec565b6040516001627dd58f60e11b0319815261ffff871660048201526001600160a01b03919091169063ff0454e29060240160206040518083038186803b158015610af357600080fd5b505afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b91906143ec565b90506001600160a01b038116610b545760405163fb7566d760e01b815260040160405180910390fd5b61ffff85166000908152600a602052604090205460ff16610b885760405163334dc1fd60e01b815260040160405180910390fd5b8e610b973383838a8f8a612719565b92505050610bfc6040518061010001604052808e6001600160a01b031681526020018661ffff1681526020018c8152602001348152602001838152602001876001600160a01b03168152602001846001600160401b0316815260200185815250612791565b505060018055505050505050505050505050565b610c1933612a61565b610c3657604051633bfe162b60e01b815260040160405180910390fd5b6000610c7c600087878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293925050612bfc9050565b90506001600160a01b0381161580610cb3575061ffff8a166000908152600460205260409020546001600160a01b03828116911614155b15610cd157604051637ab628f960e01b815260040160405180910390fd5b6000610d1284848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612c6192505050565b905060ff811660021415610d3057610d2b858585612c7e565b610d61565b60ff811660011415610d4857610d2b8b868686612de7565b604051630ead561960e11b815260040160405180910390fd5b5050505050505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610dbc57600080fd5b505afa158015610dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df491906143ec565b6001600160a01b0316336001600160a01b031614610e2557604051634b98449160e11b815260040160405180910390fd5b60065481811415610e4957604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f5cac1093ddd8c1e9cbcd89b2f36fa1889e966cc257753af2d160888564fd9818910160405180910390a150600655565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed657600080fd5b505afa158015610eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0e91906143ec565b6001600160a01b0316336001600160a01b031614610f3f57604051634b98449160e11b815260040160405180910390fd5b6007546001600160401b03600160c01b9091048116908216811415610f7757604051630333a68160e41b815260040160405180910390fd5b604080516001600160401b038084168252841660208201527f7dd9d7c71da5859a7d6e34c00f4889cb529dbbc009a358db124855baa125a4dc910160405180910390a150600780546001600160401b03909216600160c01b026001600160c01b03909216919091179055565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561103157600080fd5b505afa158015611045573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106991906143ec565b6001600160a01b0316336001600160a01b03161461109a57604051634b98449160e11b815260040160405180910390fd5b6008546001600160a01b0361010090910481169082168114156110d057604051630333a68160e41b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527f398baf83f237e7e1e1ce6637c69193c52e8b6382036ceb3c6eba08401e327667910160405180910390a150600880546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6002600154141561115f5760405162461bcd60e51b8152600401610717906143b5565b60026001819055506000336001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a257600080fd5b505afa1580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da91906143ec565b60025460405163c673bdaf60e01b81526001600160a01b03808416600483015292935091169063c673bdaf9060240160206040518083038186803b15801561122157600080fd5b505afa158015611235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112599190614409565b61127657604051633bfe162b60e01b815260040160405180910390fd5b806001600160a01b03166396aaccfe6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112af57600080fd5b505afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e791906143ec565b6001600160a01b0316336001600160a01b03161461131857604051633bfe162b60e01b815260040160405180910390fd5b60085460ff1615806114085750336001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561135e57600080fd5b505afa158015611372573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139691906143ec565b6001600160a01b0316632b80cc526040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ce57600080fd5b505afa1580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114069190614409565b155b1561142657604051635621fccf60e01b815260040160405180910390fd5b6000889050600080600061146f87878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506126f392505050565b925092509250606060008b905060008f905060008b905060008f6001600160a01b0316636d1bb8f76040518163ffffffff1660e01b815260040160206040518083038186803b1580156114c157600080fd5b505afa1580156114d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f991906143ec565b6040516001627dd58f60e11b0319815261ffff8a1660048201526001600160a01b03919091169063ff0454e29060240160206040518083038186803b15801561154157600080fd5b505afa158015611555573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157991906143ec565b6001600160a01b0380861660009081526009602052604090205491925082166115b55760405163fb7566d760e01b815260040160405180910390fd5b61ffff89166000908152600a602052604090205460ff166115e95760405163334dc1fd60e01b815260040160405180910390fd5b806116075760405163029c545360e41b815260040160405180910390fd5b611616338386848e888e613100565b95505050505050610bfc6040518061010001604052808e6001600160a01b031681526020018661ffff1681526020018c8152602001348152602001838152602001876001600160a01b03168152602001846001600160401b0316815260200185815250613181565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156116cc57600080fd5b505afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170491906143ec565b6001600160a01b0316336001600160a01b03161461173557604051634b98449160e11b815260040160405180910390fd5b6005548181141561175957604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f83c9ee8eed7101992146d1c75610cc54c1db740210cde12e135fa657a7850854910160405180910390a150600555565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e657600080fd5b505afa1580156117fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181e91906143ec565b6001600160a01b0316336001600160a01b03161461184f57604051634b98449160e11b815260040160405180910390fd5b6007546001600160401b03600160801b909104811690821681141561188757604051630333a68160e41b815260040160405180910390fd5b604080516001600160401b038084168252841660208201527fce0317145f704f138aad728eeb9d95c91260950871930acca6e659f1b0883364910160405180910390a150600780546001600160401b03909216600160801b0267ffffffffffffffff60801b19909216919091179055565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561194657600080fd5b505afa15801561195a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197e91906143ec565b6001600160a01b0316336001600160a01b0316146119af57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038216600090815260096020526040902054818114156119e957604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490526001600160a01b038516917ffa622ae921e227a42afec644139331c019f4157c54e93c82dd5f811ba210ac15910160405180910390a2506001600160a01b03909116600090815260096020526040902055565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611a9857600080fd5b505afa158015611aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad091906143ec565b6001600160a01b0316336001600160a01b031614611b0157604051634b98449160e11b815260040160405180910390fd5b60085460405160ff90911615808252907f0269774d3426d7e61b04b7d5129948b9f4edf9b937bb0c657fbb32a94a7996ec9060200160405180910390a16008805460ff1916911515919091179055565b60026001541415611b745760405162461bcd60e51b8152600401610717906143b5565b600260015560085461ffff8a1660009081526004602090815260408083205490516001600160a01b0361010090950485169463ab8236f360e01b938f93611bbe939216910161442b565b60408051601f1981840301815290829052611be692918c908c908c908c908c90602401614471565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050600080611c5d87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061336192505050565b50509350935050506000341115611c92576000828152600d602052604081208054349290611c8c9084906144ea565b90915550505b336001600160a01b0382161415611cd35784611cc157604051634c3ce71f60e11b815260040160405180910390fd5b60008281526003602052604090208590555b836001600160a01b031663c0e6ac6c8e8e8e8e30896040518763ffffffff1660e01b8152600401611d0996959493929190614502565b600060405180830381600087803b158015611d2357600080fd5b505af1158015611d37573d6000803e3d6000fd5b505060018055505050505050505050505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611d9c57600080fd5b505afa158015611db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd491906143ec565b6001600160a01b0316336001600160a01b031614611e0557604051634b98449160e11b815260040160405180910390fd5b61ffff82166000908152600460205260409020546001600160a01b03908116908216811415611e4757604051630333a68160e41b815260040160405180910390fd5b6040805161ffff851681526001600160a01b03838116602083015284168183015290517fa0670378b7d4511893529175129417ed82867197a3ea18eb2743483bd4f00c2a9181900360600190a15061ffff91909116600090815260046020526040902080546001600160a01b0319166001600160a01b03909216919091179055565b60085461010090046001600160a01b03163314611ef957604051633bfe162b60e01b815260040160405180910390fd5b600c546001600160a01b0384811691161415611f8757600b60009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015611f5f57600080fd5b505af1158015611f73573d6000803e3d6000fd5b5050600b546001600160a01b031695505050505b6000611f938682612bfc565b90506001600160a01b0381161580611fca575061ffff87166000908152600460205260409020546001600160a01b03828116911614155b15611fe857604051637ab628f960e01b815260040160405180910390fd5b6000611ff383612c61565b905060ff8116600114156120115761200c8585856133ab565b612029565b60ff811660021415610d485761200c8886868661346e565b5050505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561208157600080fd5b505afa158015612095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b991906143ec565b6001600160a01b0316336001600160a01b0316146120ea57604051634b98449160e11b815260040160405180910390fd5b6007546001600160401b0390811690821681141561211b57604051630333a68160e41b815260040160405180910390fd5b604080516001600160401b038084168252841660208201527f1701885e1db4da3ff923033aa465855dde857275866d4f132af5384aa880554f910160405180910390a1506007805467ffffffffffffffff19166001600160401b0392909216919091179055565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156121d057600080fd5b505afa1580156121e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220891906143ec565b6001600160a01b0316336001600160a01b03161461223957604051634b98449160e11b815260040160405180910390fd5b61ffff81166000908152600a602090815260409182902054915160ff90921615808352917f0269774d3426d7e61b04b7d5129948b9f4edf9b937bb0c657fbb32a94a7996ec910160405180910390a161ffff919091166000908152600a60205260409020805460ff1916911515919091179055565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156122fc57600080fd5b505afa158015612310573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233491906143ec565b6001600160a01b0316336001600160a01b03161461236557604051634b98449160e11b815260040160405180910390fd5b6007546001600160401b03600160401b909104811690821681141561239d57604051630333a68160e41b815260040160405180910390fd5b604080516001600160401b038084168252841660208201527f8dbd2ecaaca80db9e2e655edc0f1b4df2c87f441eaedf46e0b7b00358d97ad30910160405180910390a150600780546001600160401b03909216600160401b026fffffffffffffffff000000000000000019909216919091179055565b600260015414156124365760405162461bcd60e51b8152600401610717906143b5565b6002600181905550600080600061248286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061362292505050565b5050945050935093505061249583612a61565b6124b257604051637c6953f960e01b815260040160405180910390fd5b34156124dc576000828152600d6020526040812080543492906124d69084906144ea565b90915550505b336001600160a01b038216141561251d578361250b57604051634c3ce71f60e11b815260040160405180910390fd5b60008281526003602052604090208490555b61ffff8b16600090815260046020908152604080832054905161254c926001600160a01b03909216910161442b565b6040516020818303038152906040529050836001600160a01b031663cfd6528e8d8d8d8d86308f8f8f6040518a63ffffffff1660e01b81526004016125999998979695949392919061455d565b600060405180830381600087803b1580156125b357600080fd5b505af11580156125c7573d6000803e3d6000fd5b5050600180555050505050505050505050505050565b60006125e96001613671565b90508015612601576000805461ff0019166101001790555b6001600160a01b0384166126285760405163fb7566d760e01b815260040160405180910390fd5b6126306136f9565b600280546001600160a01b038087166001600160a01b031992831617909255603260065562030d406005557a0b71b000000000000b71b0000000000007a12000000000000b71b0600755600b8054868416908316179055600c80549285169290911691909117905580156126de576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b03163b151590565b60008060008380602001905181019061270c91906145d7565b9250925092509193909250565b604080516001600160a01b038881166020830152878116828401526060808301889052908616608083015260a0820185905260c08083018590528351808403909101815260e083019093529161277691600291906101000161460f565b60405160208183030381529060405290509695505050505050565b6127b560405180606001604052806000815260200160008152602001606081525090565b60208083015161ffff16600090815260048252604080822054905191926127e8926001600160a01b03909216910161442b565b60408051601f19818403018152919052905060006128068282612bfc565b6001600160a01b0316141561282e5760405163fb7566d760e01b815260040160405180910390fd5b60405180606001604052808460c001516001600160401b031681526020018460e00151815260200160008560e001511161288257604080516000602082015201604051602081830303815290604052612884565b825b905283516001600160a01b0316600090815260096020526040902054909250806128c15760405163029c545360e41b815260040160405180910390fd5b60006127106006546127106128d6919061462b565b86604001516128e59190614642565b6128ef9190614661565b6080860151600854600b54885193945091926001600160a01b03610100909204821692908216911614156129a457600b546040808901519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d916129549160040190815260200190565b600060405180830381600087803b15801561296e57600080fd5b505af1158015612982573d6000803e3d6000fd5b5050505086604001518760600181815161299c91906144ea565b9052506129d9565b86516129bb906001600160a01b031682600061372a565b604087015187516129d9916001600160a01b0390911690839061372a565b806001600160a01b0316639fbf10fc8860600151896020015187888c60a001518d604001518a8e8e8c6040518b63ffffffff1660e01b8152600401612a2699989796959493929190614683565b6000604051808303818588803b158015612a3f57600080fd5b505af1158015612a53573d6000803e3d6000fd5b505050505050505050505050565b600080826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a9d57600080fd5b505afa158015612ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad591906143ec565b600254604051631a0dd00b60e01b81526001600160a01b038084166004830152929350911690631a0dd00b9060240160206040518083038186803b158015612b1c57600080fd5b505afa158015612b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b549190614409565b612b615750600092915050565b806001600160a01b0316636d1bb8f76040518163ffffffff1660e01b815260040160206040518083038186803b158015612b9a57600080fd5b505afa158015612bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd291906143ec565b6001600160a01b0316836001600160a01b031614612bf35750600092915050565b50600192915050565b6000612c098260146144ea565b83511015612c515760405162461bcd60e51b8152602060048201526015602482015274746f416464726573735f6f75744f66426f756e647360581b6044820152606401610717565b500160200151600160601b900490565b600081806020019051810190612c779190614711565b5092915050565b6000806000612cc285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061387592505050565b9250925092506000836001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d0357600080fd5b505afa158015612d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3b91906143ec565b9050612d526001600160a01b03821684600061372a565b612d666001600160a01b038216848961372a565b604051636455bf6f60e01b815260048101839052602481018890526001600160a01b03841690636455bf6f90604401602060405180830381600087803b158015612daf57600080fd5b505af1158015612dc3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202991906147a3565b6000806000806000806000612e3189898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061362292505050565b96509650965096509650965096506000600860019054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015612e8f57600080fd5b505afa158015612ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec791906143ec565b6001600160a01b031663068bcd8d866040518263ffffffff1660e01b8152600401612ef491815260200190565b60206040518083038186803b158015612f0c57600080fd5b505afa158015612f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4491906143ec565b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f7c57600080fd5b505afa158015612f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb491906143ec565b600c549091506001600160a01b0380831691161415612fdb5750600b546001600160a01b03165b61305886886001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561301857600080fd5b505afa15801561302c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305091906143ec565b838e876138a7565b9a5060008c90506130f1604051806101000160405280846001600160a01b031681526020018361ffff1681526020018e8152602001600d60008b815260200190815260200160002054866130ac91906144ea565b81526020016130bb8c8b613a1a565b81526001600160a01b0388166020820152600754600160801b90046001600160401b031660408201526000606090910152612791565b50505050505050505050505050565b604080516001600160a01b0389811660208301528881168284015260608083018990526080830188905290861660a083015260c0820185905260e08083018590528351808403909101815261010083019093529161316591600191906101200161460f565b6040516020818303038152906040529050979650505050505050565b60208082015161ffff166000908152600490915260409020546001600160a01b0316806131c15760405163fb7566d760e01b815260040160405180910390fd5b600060028360c001516001600160401b03166005546131e091906144ea565b60e0850151806131f15760006131f3565b845b60405160200161323d949392919060f09490941b6001600160f01b03191684526002840192909252602283015260601b6bffffffffffffffffffffffff1916604282015260560190565b604051602081830303815290604052905082600001516001600160a01b0316636d1bb8f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561328b57600080fd5b505afa15801561329f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c391906143ec565b6001600160a01b031663e7f0c59f8460600151308660200151866040516020016132ed919061442b565b60408051601f19818403018152828252908a015160808b015160c08c015160a08d01516001600160e01b031960e08b901b1686526133349796956000908d906004016147bc565b6000604051808303818588803b15801561334d57600080fd5b505af1158015612029573d6000803e3d6000fd5b6000806000806000808680602001905181019061337e9190614711565b805190985061339791508801602090810190890161483a565b949c939b5091995097509550909350915050565b6000806133b783613a6b565b90925090506133d16001600160a01b03861683600061372a565b6133e56001600160a01b038616838661372a565b6040516320159ddd60e21b815260048101829052602481018590526001600160a01b03831690638056777490604401602060405180830381600087803b15801561342e57600080fd5b505af1158015613442573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061346691906147a3565b505050505050565b60008060008060008061348087613361565b9550955095509550955095506000856001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156134c757600080fd5b505afa1580156134db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ff91906143ec565b905061350e858b838c876138a7565b6040516001627dd58f60e11b0319815261ffff8d1660048201529099508b906000906001600160a01b0389169063ff0454e29060240160206040518083038186803b15801561355c57600080fd5b505afa158015613570573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359491906143ec565b90506130f1604051806101000160405280856001600160a01b031681526020018461ffff1681526020018d8152602001600d60008b815260200190815260200160002054876135e391906144ea565b81526020016135f3848d8c613aa4565b81526001600160a01b03891660208201526007546001600160401b031660408201526000606090910152613181565b6000806000806000806000878060200190518101906136419190614711565b805190995061365a915089016020908101908a016148a3565b959e949d50929b5090995097509550909350915050565b60008054610100900460ff16156136b8578160ff1660011480156136945750303b155b6136b05760405162461bcd60e51b815260040161071790614918565b506000919050565b60005460ff8084169116106136df5760405162461bcd60e51b815260040161071790614918565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166137205760405162461bcd60e51b815260040161071790614966565b613728613b00565b565b8015806137b35750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561377957600080fd5b505afa15801561378d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137b191906147a3565b155b61381e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610717565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052613870908490613b2d565b505050565b60008060008380602001905181019061388e9190614711565b805190955061270c9150850160209081019086016149b1565b60008581526003602052604081205480156138cf576000878152600360205260408120559150815b60025460408051632b3297f960e01b815290516000926001600160a01b031691632b3297f9916004808301926020929190829003018186803b15801561391457600080fd5b505afa158015613928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394c91906143ec565b90506139636001600160a01b03881682600061372a565b6139776001600160a01b038816828761372a565b604051636ccb2b0160e01b81526001600160a01b03888116600483015287811660248301526044820187905260648201869052306084830152821690636ccb2b019060a401602060405180830381600087803b1580156139d657600080fd5b505af11580156139ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0e91906147a3565b98975050505050505050565b604080516001600160a01b03841660208201528082018390528151808203830181526060808301909352613a54916001919060800161460f565b604051602081830303815290604052905092915050565b60008082806020019051810190613a829190614711565b8051909450613a9b9150840160209081019085016149f4565b91509150915091565b604080516001600160a01b03858116602083015284168183015260608082018490528251808303820181526080830190935291613ae7916002919060a00161460f565b60405160208183030381529060405290505b9392505050565b600054610100900460ff16613b275760405162461bcd60e51b815260040161071790614966565b60018055565b6000613b82826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613bff9092919063ffffffff16565b8051909150156138705780806020019051810190613ba09190614409565b6138705760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610717565b6060613c0e8484600085613c16565b949350505050565b606082471015613c775760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610717565b6001600160a01b0385163b613cce5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610717565b600080866001600160a01b03168587604051613cea9190614a22565b60006040518083038185875af1925050503d8060008114613d27576040519150601f19603f3d011682016040523d82523d6000602084013e613d2c565b606091505b5091509150613d3c828286613d47565b979650505050505050565b60608315613d56575081613af9565b825115613d665782518084602001fd5b8160405162461bcd60e51b815260040161071791906143a2565b6001600160a01b0381168114613d9557600080fd5b50565b60008083601f840112613daa57600080fd5b5081356001600160401b03811115613dc157600080fd5b602083019150836020828501011115613dd957600080fd5b9250929050565b60008060008060008060008060e0898b031215613dfc57600080fd5b883597506020890135613e0e81613d80565b96506040890135613e1e81613d80565b95506060890135613e2e81613d80565b94506080890135935060a0890135925060c08901356001600160401b03811115613e5757600080fd5b613e638b828c01613d98565b999c989b5096995094979396929594505050565b61ffff81168114613d9557600080fd5b6001600160401b0381168114613d9557600080fd5b600080600080600080600080600060c08a8c031215613eba57600080fd5b8935613ec581613e77565b985060208a01356001600160401b0380821115613ee157600080fd5b613eed8d838e01613d98565b909a50985060408c01359150613f0282613e87565b90965060608b01359080821115613f1857600080fd5b613f248d838e01613d98565b909750955060808c0135945060a08c0135915080821115613f4457600080fd5b50613f518c828d01613d98565b915080935050809150509295985092959850929598565b600060208284031215613f7a57600080fd5b5035919050565b600060208284031215613f9357600080fd5b8135613af981613e87565b600060208284031215613fb057600080fd5b8135613af981613d80565b60008060408385031215613fce57600080fd5b8235613fd981613d80565b946020939093013593505050565b600080600080600080600080600060e08a8c03121561400557600080fd5b893561401081613e77565b985060208a01356001600160401b038082111561402c57600080fd5b6140388d838e01613d98565b909a50985060408c0135915061404d82613e87565b90965060608b01359061405f82613d80565b90955060808b0135945060a08b0135908082111561407c57600080fd5b506140898c828d01613d98565b9a9d999c50979a9699959894979660c00135949350505050565b600080604083850312156140b657600080fd5b82356140c181613e77565b915060208301356140d181613d80565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561411a5761411a6140dc565b604052919050565b60006001600160401b0382111561413b5761413b6140dc565b50601f01601f191660200190565b600082601f83011261415a57600080fd5b813561416d61416882614122565b6140f2565b81815284602083860101111561418257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c087890312156141b857600080fd5b86356141c381613e77565b955060208701356001600160401b03808211156141df57600080fd5b6141eb8a838b01614149565b9650604089013595506060890135915061420482613d80565b9093506080880135925060a0880135908082111561422157600080fd5b5061422e89828a01614149565b9150509295509295509295565b60006020828403121561424d57600080fd5b8135613af981613e77565b60008060008060008060008060c0898b03121561427457600080fd5b883561427f81613e77565b975060208901356001600160401b038082111561429b57600080fd5b6142a78c838d01613d98565b909950975060408b013591506142bc82613e87565b90955060608a0135945060808a013590808211156142d957600080fd5b506142e68b828c01613d98565b999c989b50969995989497949560a00135949350505050565b60008060006060848603121561431457600080fd5b833561431f81613d80565b9250602084013561432f81613d80565b9150604084013561433f81613d80565b809150509250925092565b60005b8381101561436557818101518382015260200161434d565b838111156126de5750506000910152565b6000815180845261438e81602086016020860161434a565b601f01601f19169290920160200192915050565b602081526000613af96020830184614376565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156143fe57600080fd5b8151613af981613d80565b60006020828403121561441b57600080fd5b81518015158114613af957600080fd5b60609190911b6bffffffffffffffffffffffff1916815260140190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff8816815260c06020820152600061448e60c0830189614376565b6001600160401b03881660408401526001600160a01b03871660608401526080830186905282810360a08401526144c6818587614448565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156144fd576144fd6144d4565b500190565b61ffff8716815260a06020820152600061452060a083018789614448565b6001600160401b03861660408401526001600160a01b038516606084015282810360808401526145508185614376565b9998505050505050505050565b61ffff8a16815260e06020820152600061457b60e083018a8c614448565b6001600160401b0389166040840152828103606084015261459c8189614376565b6001600160a01b038816608085015260a0840187905283810360c085015290506145c7818587614448565b9c9b505050505050505050505050565b6000806000606084860312156145ec57600080fd5b83516145f781613e77565b60208501516040860151919450925061433f81613e87565b60ff83168152604060208201526000613c0e6040830184614376565b60008282101561463d5761463d6144d4565b500390565b600081600019048311821515161561465c5761465c6144d4565b500290565b60008261467e57634e487b7160e01b600052601260045260246000fd5b500490565b600061012061ffff8c1683528a602084015289604084015260018060a01b03891660608401528760808401528660a08401528060c0840152855181840152506020850151610140830152604085015160606101608401526146e8610180840182614376565b905082810360e08401526146fc8186614376565b90508281036101008401526145c78185614376565b6000806040838503121561472457600080fd5b825160ff8116811461473557600080fd5b60208401519092506001600160401b0381111561475157600080fd5b8301601f8101851361476257600080fd5b805161477061416882614122565b81815286602083850101111561478557600080fd5b61479682602083016020860161434a565b8093505050509250929050565b6000602082840312156147b557600080fd5b5051919050565b6001600160a01b038a8116825261ffff8a166020830152610120604083018190526000916147ec8483018c614376565b91508960608501528382036080850152614806828a614376565b6001600160401b03891660a086015287821660c086015290861660e085015283810361010085015290506145c78185614376565b60008060008060008060c0878903121561485357600080fd5b865161485e81613d80565b602088015190965061486f81613d80565b60408801516060890151919650945061488781613d80565b809350506080870151915060a087015190509295509295509295565b600080600080600080600060e0888a0312156148be57600080fd5b87516148c981613d80565b60208901519097506148da81613d80565b80965050604088015194506060880151935060808801516148fa81613d80565b8093505060a0880151915060c0880151905092959891949750929550565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000806000606084860312156149c657600080fd5b83516149d181613d80565b60208501519093506149e281613d80565b80925050604084015190509250925092565b60008060408385031215614a0757600080fd5b8251614a1281613d80565b6020939093015192949293505050565b60008251614a3481846020870161434a565b919091019291505056fea2646970667358221220046653a5ba87dfd7d7659ec799417395545c9a8c022207679388dbea325b0e6564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onOFTReceived(uint16,bytes,uint64,bytes,uint256,bytes)": {
        "details": "Token received are swapped to another token",
        "params": {
          "amount_": "The amount of tokens to transfer.",
          "from_": "The address of the account who calls the sendAndCall() on the source chain.",
          "payload_": "Additional data with no specified format.",
          "srcChainId_": "The chain id of the source chain."
        }
      },
      "retrySwapAndTriggerFlashRepayCallback(uint16,bytes,uint64,address,uint256,bytes,uint256)": {
        "params": {
          "amount_": "The amountIn of failed tx",
          "newAmountOutMin_": "If swap failed due to slippage, caller may set lower newAmountOutMin_",
          "nonce_": "The nonce of failed tx",
          "payload_": "The payload of failed tx",
          "srcAddress_": "The source path of failed tx",
          "srcChainId_": "The source chain of failed tx",
          "token_": "The token of failed tx"
        }
      },
      "retrySwapAndTriggerLeverageCallback(uint16,bytes,uint64,uint256,bytes,uint256)": {
        "params": {
          "amount_": "The amountIn of failed tx",
          "newAmountOutMin_": "If swap failed due to slippage, caller may set lower newAmountOutMin_",
          "nonce_": "The nonce of failed tx",
          "payload_": "The payload of failed tx",
          "srcAddress_": "The source path of failed tx",
          "srcChainId_": "The source chain of failed tx"
        }
      },
      "sgReceive(uint16,bytes,uint256,address,uint256,bytes)": {
        "params": {
          "amountLD_": "The qty of local _token contract tokens",
          "payload_": "The payload",
          "srcAddress_": "The remote Bridge address",
          "srcChainId_": "The chain id of the source chain.",
          "token_": "The token contract on the local chain"
        }
      },
      "toggleDestinationChainIsActive(uint16)": {
        "details": "Use LZ chain id"
      },
      "updateStargatePoolIdOf(address,uint256)": {
        "details": "Use LZ ids (https://stargateprotocol.gitbook.io/stargate/developers/pool-ids)"
      }
    },
    "stateVariables": {
      "LZ_ADAPTER_PARAMS_VERSION": {
        "details": "LayerZero adapter param version See more: https://layerzero.gitbook.io/docs/evm-guides/advanced/relayer-adapter-parameters"
      }
    },
    "title": "Cross-chain dispatcher",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BridgingIsActiveUpdated(bool)": {
        "notice": "Emitted when flag for pause bridge transfer is toggled"
      },
      "CrossChainDispatcherUpdated(uint16,address,address)": {
        "notice": "Emitted when a Cross-chain dispatcher mapping is updated"
      },
      "DestinationChainIsSupportedUpdated(uint16,bool)": {
        "notice": "Emitted when flag for support chain is toggled"
      },
      "FlashRepayCallbackTxGasLimitUpdated(uint64,uint64)": {
        "notice": "Emitted when flash repay callback gas limit is updated"
      },
      "FlashRepaySwapTxGasLimitUpdated(uint64,uint64)": {
        "notice": "Emitted when underlying->synth L1 swap gas limit is updated"
      },
      "LeverageCallbackTxGasLimitUpdated(uint64,uint64)": {
        "notice": "Emitted when leverage callback gas limit is updated"
      },
      "LeverageSwapTxGasLimitUpdated(uint64,uint64)": {
        "notice": "Emitted when synth->underlying L1 swap gas limit is updated"
      },
      "LzBaseGasLimitUpdated(uint256,uint256)": {
        "notice": "Emitted when Lz base gas limit updated"
      },
      "StargateComposerUpdated(address,address)": {
        "notice": "Emitted when Stargate composer is updated"
      },
      "StargatePoolIdUpdated(address,uint256,uint256)": {
        "notice": "Emitted when Stargate pool id is updated"
      },
      "StargateSlippageUpdated(uint256,uint256)": {
        "notice": "Emitted when Stargate slippage is updated"
      }
    },
    "kind": "user",
    "methods": {
      "crossChainDispatcherOf(uint16)": {
        "notice": "Maps other chains `CrossChainDispatcher` contracts"
      },
      "extraCallbackTxNativeFee(uint256)": {
        "notice": "Store extra amount sent when retrying a failed tx due to low native fee"
      },
      "flashRepayCallbackTxGasLimit()": {
        "notice": "The gas limit to cover `_crossChainFlashRepayCallback()` call"
      },
      "flashRepaySwapTxGasLimit()": {
        "notice": "The gas limit to cover `_swapAndTriggerFlashRepayCallback()` call"
      },
      "isBridgingActive()": {
        "notice": "Flag that pause/unpause all cross-chain activities"
      },
      "isDestinationChainSupported(uint16)": {
        "notice": "Maps supported cross-chain routes (i.e. which chains are allowed to be used as source of liquidity)"
      },
      "leverageCallbackTxGasLimit()": {
        "notice": "The gas limit to cover `_crossChainLeverageCallback()` call"
      },
      "leverageSwapTxGasLimit()": {
        "notice": "The gas limit to cover `_swapAndTriggerLeverageCallback()` call"
      },
      "lzBaseGasLimit()": {
        "notice": "The base gas to pay for cross-chain calls"
      },
      "onOFTReceived(uint16,bytes,uint64,bytes,uint256,bytes)": {
        "notice": "Called by the OFT contract when tokens are received from source chain."
      },
      "poolRegistry()": {
        "notice": "The pool registry contract"
      },
      "retrySwapAndTriggerFlashRepayCallback(uint16,bytes,uint64,address,uint256,bytes,uint256)": {
        "notice": "Retry swap underlying and trigger callback."
      },
      "retrySwapAndTriggerLeverageCallback(uint16,bytes,uint64,uint256,bytes,uint256)": {
        "notice": "Retry swap and trigger callback."
      },
      "sgReceive(uint16,bytes,uint256,address,uint256,bytes)": {
        "notice": "Receive token and payload from Stargate"
      },
      "sgeth()": {
        "notice": "SGETH contract"
      },
      "stargateComposer()": {
        "notice": "The Stargate Router contract"
      },
      "stargatePoolIdOf(address)": {
        "notice": "Maps Stargate's token pools"
      },
      "stargateSlippage()": {
        "notice": "The slippage we're willing to accept for SG like:like transfers"
      },
      "swapAmountOutMin(uint256)": {
        "notice": "Overwritten swap slippage params"
      },
      "toggleBridgingIsActive()": {
        "notice": "Pause/Unpause bridge transfers"
      },
      "toggleDestinationChainIsActive(uint16)": {
        "notice": "Allow/Disallow destination chain"
      },
      "updateCrossChainDispatcherOf(uint16,address)": {
        "notice": "Update Cross-chain dispatcher mapping"
      },
      "updateFlashRepayCallbackTxGasLimit(uint64)": {
        "notice": "Update flash repay callback tx gas limit"
      },
      "updateFlashRepaySwapTxGasLimit(uint64)": {
        "notice": "Update flash repay swap tx gas limit"
      },
      "updateLeverageCallbackTxGasLimit(uint64)": {
        "notice": "Update leverage callback tx gas limit"
      },
      "updateLeverageSwapTxGasLimit(uint64)": {
        "notice": "Update leverage swap tx gas limit"
      },
      "updateLzBaseGasLimit(uint256)": {
        "notice": "Update Lz base gas limit"
      },
      "updateStargateComposer(address)": {
        "notice": "Update StargateComposer"
      },
      "updateStargatePoolIdOf(address,uint256)": {
        "notice": "Update Stargate pool id of token."
      },
      "updateStargateSlippage(uint256)": {
        "notice": "Update Stargate slippage"
      },
      "weth()": {
        "notice": "WETH contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19848,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 19851,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 33742,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 30933,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "poolRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPoolRegistry)28094"
      },
      {
        "astId": 30938,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "swapAmountOutMin",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 30943,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "crossChainDispatcherOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 30946,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "lzBaseGasLimit",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 30949,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "stargateSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 30952,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "flashRepayCallbackTxGasLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint64"
      },
      {
        "astId": 30955,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "flashRepaySwapTxGasLimit",
        "offset": 8,
        "slot": "7",
        "type": "t_uint64"
      },
      {
        "astId": 30958,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "leverageCallbackTxGasLimit",
        "offset": 16,
        "slot": "7",
        "type": "t_uint64"
      },
      {
        "astId": 30961,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "leverageSwapTxGasLimit",
        "offset": 24,
        "slot": "7",
        "type": "t_uint64"
      },
      {
        "astId": 30964,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "isBridgingActive",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 30968,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "stargateComposer",
        "offset": 1,
        "slot": "8",
        "type": "t_contract(IStargateComposer)26995"
      },
      {
        "astId": 30973,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "stargatePoolIdOf",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 30978,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "isDestinationChainSupported",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint16,t_bool)"
      },
      {
        "astId": 30981,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "weth",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 30984,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "sgeth",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 30992,
        "contract": "contracts/CrossChainDispatcher.sol:CrossChainDispatcher",
        "label": "extraCallbackTxNativeFee",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPoolRegistry)28094": {
        "encoding": "inplace",
        "label": "contract IPoolRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IStargateComposer)26995": {
        "encoding": "inplace",
        "label": "contract IStargateComposer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}