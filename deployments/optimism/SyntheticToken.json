{
  "address": "0xF538F18c3cC1cDB70aa054cc3d0C2C2262Ba95E6",
  "abi": [
    {
      "inputs": [],
      "name": "AmountExceedsAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveFromTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnFromTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DecimalsIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DecreasedAllowanceBelowZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NameIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewValueIsSameAsCurrent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolRegistryIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderCanNotBurn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderCanNotMint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderCanNotSeize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SurpassMaxSynthSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SymbolIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SyntheticIsInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToTheZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newActive",
          "type": "bool"
        }
      ],
      "name": "SyntheticTokenActiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue_",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue_",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        },
        {
          "internalType": "contract IPoolRegistry",
          "name": "poolRegistry_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRegistry",
      "outputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleIsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxTotalSupply_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6547c64555ee1d430fc17d3d03ca675c3109f66d9384f53f6c22339dd5d1af5",
  "receipt": {
    "to": null,
    "from": "0x7EEeF54Df0596633dbf6Fa3C88dEB1E3eA85ECE8",
    "contractAddress": "0xF538F18c3cC1cDB70aa054cc3d0C2C2262Ba95E6",
    "transactionIndex": 0,
    "gasUsed": "1135957",
    "logsBloom": "0x
    "blockHash": "0x5254c793ecccb35883fbea6a496ddbb0899d1242cb0a8140fc68799c1ad53fc7",
    "transactionHash": "0xf6547c64555ee1d430fc17d3d03ca675c3109f66d9384f53f6c22339dd5d1af5",
    "logs": [],
    "blockNumber": 101051733,
    "cumulativeGasUsed": "1135957",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "39157ddb13861b2afdd6feacda57f5f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AmountExceedsAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecimalsIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecreasedAllowanceBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewValueIsSameAsCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolRegistryIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderCanNotBurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderCanNotMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderCanNotSeize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SurpassMaxSynthSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SymbolIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticIsInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToTheZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newActive\",\"type\":\"bool\"}],\"name\":\"SyntheticTokenActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"contract IPoolRegistry\",\"name\":\"poolRegistry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTotalSupply_\",\"type\":\"uint256\"}],\"name\":\"updateMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(address,uint256)\":{\"params\":{\"amount_\":\"The amount to burn\",\"from_\":\"The account to burn from\"}},\"mint(address,uint256)\":{\"params\":{\"amount_\":\"The amount to mint\",\"to_\":\"The account to mint to\"}},\"seize(address,address,uint256)\":{\"details\":\"Same as _transfer\",\"params\":{\"amount_\":\"The amount to seize\",\"to_\":\"The beneficiary account\"}},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"updateMaxTotalSupply(uint256)\":{\"params\":{\"newMaxTotalSupply_\":\"The new max total supply\"}}},\"title\":\"Synthetic Token contract\",\"version\":1},\"userdoc\":{\"events\":{\"MaxTotalSupplyUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max total supply is updated\"},\"SyntheticTokenActiveUpdated(bool)\":{\"notice\":\"Emitted when active flag is updated\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Set `amount` as the allowance of `spender` over the caller's tokens\"},\"burn(address,uint256)\":{\"notice\":\"Burn synthetic token\"},\"decimals()\":{\"notice\":\"The decimals of the token\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Atomically decrease the allowance granted to `spender` by the caller\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Atomically increase the allowance granted to `spender` by the caller\"},\"isActive()\":{\"notice\":\"If true, disables msAsset minting globally\"},\"maxTotalSupply()\":{\"notice\":\"The supply cap\"},\"mint(address,uint256)\":{\"notice\":\"Mint synthetic token\"},\"name()\":{\"notice\":\"The name of the token\"},\"seize(address,address,uint256)\":{\"notice\":\"Seize synthetic tokens\"},\"symbol()\":{\"notice\":\"The symbol of the token\"},\"toggleIsActive()\":{\"notice\":\"Enable/Disable Synthetic Token\"},\"updateMaxTotalSupply(uint256)\":{\"notice\":\"Update max total supply\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SyntheticToken.sol\":\"SyntheticToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IManageable.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./storage/SyntheticTokenStorage.sol\\\";\\n\\nerror SenderIsNotGovernor();\\nerror SenderCanNotBurn();\\nerror SenderCanNotMint();\\nerror SenderCanNotSeize();\\nerror SyntheticIsInactive();\\nerror NameIsNull();\\nerror SymbolIsNull();\\nerror DecimalsIsNull();\\nerror PoolRegistryIsNull();\\nerror DecreasedAllowanceBelowZero();\\nerror AmountExceedsAllowance();\\nerror ApproveFromTheZeroAddress();\\nerror ApproveToTheZeroAddress();\\nerror BurnFromTheZeroAddress();\\nerror BurnAmountExceedsBalance();\\nerror MintToTheZeroAddress();\\nerror SurpassMaxSynthSupply();\\nerror TransferFromTheZeroAddress();\\nerror TransferToTheZeroAddress();\\nerror TransferAmountExceedsBalance();\\nerror NewValueIsSameAsCurrent();\\n\\n/**\\n * @title Synthetic Token contract\\n */\\ncontract SyntheticToken is Initializable, SyntheticTokenStorageV1 {\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.2.0\\\";\\n\\n    /// @notice Emitted when active flag is updated\\n    event SyntheticTokenActiveUpdated(bool newActive);\\n\\n    /// @notice Emitted when max total supply is updated\\n    event MaxTotalSupplyUpdated(uint256 oldMaxTotalSupply, uint256 newMaxTotalSupply);\\n\\n    /**\\n     * @notice Throws if caller isn't the governor\\n     */\\n    modifier onlyGovernor() {\\n        if (msg.sender != poolRegistry.governor()) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if sender can't burn\\n     */\\n    modifier onlyIfCanBurn() {\\n        if (!_isMsgSenderPool() && !_isMsgSenderDebtToken()) revert SenderCanNotBurn();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if sender can't mint\\n     */\\n    modifier onlyIfCanMint() {\\n        if (!_isMsgSenderPool() && !_isMsgSenderDebtToken()) revert SenderCanNotMint();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if sender can't seize\\n     */\\n    modifier onlyIfCanSeize() {\\n        if (!_isMsgSenderPool() && !_isMsgSenderDebtToken()) revert SenderCanNotSeize();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token isn't enabled\\n     */\\n    modifier onlyIfSyntheticTokenIsActive() {\\n        if (!isActive) revert SyntheticIsInactive();\\n        _;\\n    }\\n\\n    function initialize(\\n        string calldata name_,\\n        string calldata symbol_,\\n        uint8 decimals_,\\n        IPoolRegistry poolRegistry_\\n    ) external initializer {\\n        if (bytes(name_).length == 0) revert NameIsNull();\\n        if (bytes(symbol_).length == 0) revert SymbolIsNull();\\n        if (decimals_ == 0) revert DecimalsIsNull();\\n        if (address(poolRegistry_) == address(0)) revert PoolRegistryIsNull();\\n\\n        poolRegistry = poolRegistry_;\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n        isActive = true;\\n        maxTotalSupply = type(uint256).max;\\n    }\\n\\n    /**\\n     * @notice Set `amount` as the allowance of `spender` over the caller's tokens\\n     */\\n    function approve(address spender_, uint256 amount_) external override returns (bool) {\\n        _approve(msg.sender, spender_, amount_);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Burn synthetic token\\n     * @param from_ The account to burn from\\n     * @param amount_ The amount to burn\\n     */\\n    function burn(address from_, uint256 amount_) external override onlyIfCanBurn {\\n        _burn(from_, amount_);\\n    }\\n\\n    /**\\n     * @notice Atomically decrease the allowance granted to `spender` by the caller\\n     */\\n    function decreaseAllowance(address spender_, uint256 subtractedValue_) external returns (bool) {\\n        uint256 _currentAllowance = allowance[msg.sender][spender_];\\n        if (_currentAllowance < subtractedValue_) revert DecreasedAllowanceBelowZero();\\n        unchecked {\\n            _approve(msg.sender, spender_, _currentAllowance - subtractedValue_);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Atomically increase the allowance granted to `spender` by the caller\\n     */\\n    function increaseAllowance(address spender_, uint256 addedValue_) external returns (bool) {\\n        _approve(msg.sender, spender_, allowance[msg.sender][spender_] + addedValue_);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mint synthetic token\\n     * @param to_ The account to mint to\\n     * @param amount_ The amount to mint\\n     */\\n    function mint(address to_, uint256 amount_) external override onlyIfCanMint {\\n        _mint(to_, amount_);\\n    }\\n\\n    /**\\n     * @notice Seize synthetic tokens\\n     * @dev Same as _transfer\\n     * @param to_ The account to seize from\\n     * @param to_ The beneficiary account\\n     * @param amount_ The amount to seize\\n     */\\n    function seize(address from_, address to_, uint256 amount_) external override onlyIfCanSeize {\\n        _transfer(from_, to_, amount_);\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transfer(address recipient_, uint256 amount_) external override returns (bool) {\\n        _transfer(msg.sender, recipient_, amount_);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transferFrom(address sender_, address recipient_, uint256 amount_) external override returns (bool) {\\n        uint256 _currentAllowance = allowance[sender_][msg.sender];\\n        if (_currentAllowance != type(uint256).max) {\\n            if (_currentAllowance < amount_) revert AmountExceedsAllowance();\\n            unchecked {\\n                _approve(sender_, msg.sender, _currentAllowance - amount_);\\n            }\\n        }\\n\\n        _transfer(sender_, recipient_, amount_);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Set `amount` as the allowance of `spender` over the `owner` s tokens\\n     */\\n    function _approve(address owner_, address spender_, uint256 amount_) private {\\n        if (owner_ == address(0)) revert ApproveFromTheZeroAddress();\\n        if (spender_ == address(0)) revert ApproveToTheZeroAddress();\\n\\n        allowance[owner_][spender_] = amount_;\\n        emit Approval(owner_, spender_, amount_);\\n    }\\n\\n    /**\\n     * @notice Destroy `amount` tokens from `account`, reducing the\\n     * total supply\\n     */\\n    function _burn(address account_, uint256 amount_) private {\\n        if (account_ == address(0)) revert BurnFromTheZeroAddress();\\n\\n        uint256 _currentBalance = balanceOf[account_];\\n        if (_currentBalance < amount_) revert BurnAmountExceedsBalance();\\n        unchecked {\\n            balanceOf[account_] = _currentBalance - amount_;\\n            totalSupply -= amount_;\\n        }\\n\\n        emit Transfer(account_, address(0), amount_);\\n    }\\n\\n    /**\\n     * @notice Check if the sender is a valid DebtToken contract\\n     */\\n    function _isMsgSenderDebtToken() private view returns (bool) {\\n        IPool _pool = IManageable(msg.sender).pool();\\n\\n        return\\n            poolRegistry.isPoolRegistered(address(_pool)) &&\\n            _pool.doesDebtTokenExist(IDebtToken(msg.sender)) &&\\n            IDebtToken(msg.sender).syntheticToken() == this;\\n    }\\n\\n    /**\\n     * @notice Check if the sender is a valid Pool contract\\n     */\\n    function _isMsgSenderPool() private view returns (bool) {\\n        return poolRegistry.isPoolRegistered(msg.sender) && IPool(msg.sender).doesSyntheticTokenExist(this);\\n    }\\n\\n    /**\\n     * @notice Create `amount` tokens and assigns them to `account`, increasing\\n     * the total supply\\n     */\\n    function _mint(address account_, uint256 amount_) private onlyIfSyntheticTokenIsActive {\\n        if (account_ == address(0)) revert MintToTheZeroAddress();\\n\\n        totalSupply += amount_;\\n        if (totalSupply > maxTotalSupply) revert SurpassMaxSynthSupply();\\n        balanceOf[account_] += amount_;\\n        emit Transfer(address(0), account_, amount_);\\n    }\\n\\n    /**\\n     * @notice Move `amount` of tokens from `sender` to `recipient`\\n     */\\n    function _transfer(address sender_, address recipient_, uint256 amount_) private {\\n        if (sender_ == address(0)) revert TransferFromTheZeroAddress();\\n        if (recipient_ == address(0)) revert TransferToTheZeroAddress();\\n\\n        uint256 senderBalance = balanceOf[sender_];\\n        if (senderBalance < amount_) revert TransferAmountExceedsBalance();\\n        unchecked {\\n            balanceOf[sender_] = senderBalance - amount_;\\n            balanceOf[recipient_] += amount_;\\n        }\\n\\n        emit Transfer(sender_, recipient_, amount_);\\n    }\\n\\n    /**\\n     * @notice Enable/Disable Synthetic Token\\n     */\\n    function toggleIsActive() external override onlyGovernor {\\n        bool _newIsActive = !isActive;\\n        emit SyntheticTokenActiveUpdated(_newIsActive);\\n        isActive = _newIsActive;\\n    }\\n\\n    /**\\n     * @notice Update max total supply\\n     * @param newMaxTotalSupply_ The new max total supply\\n     */\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external override onlyGovernor {\\n        uint256 _currentMaxTotalSupply = maxTotalSupply;\\n        if (newMaxTotalSupply_ == _currentMaxTotalSupply) revert NewValueIsSameAsCurrent();\\n        emit MaxTotalSupplyUpdated(_currentMaxTotalSupply, newMaxTotalSupply_);\\n        maxTotalSupply = newMaxTotalSupply_;\\n    }\\n}\\n\",\"keccak256\":\"0x75e103b3edcbbdf0f1672fad75c976a0b3d5214d2be757b2272381309746b8cf\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address borrower_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xfeaa19f62620f67e7189e863f96de757c9a17b1b737acedeffd98aaf1df1a0e1\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralFactor() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function flashWithdraw(address account_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\\n\\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\\n\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0xf6fa0d670b28445a461bb93d4bbbe8a6101289dc418c61475d52f8693280d255\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3b132b42090c167b2c0aef6d78d833c669c43b9e55593a7a21a96ed5d3082700\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IManageable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\",\"keccak256\":\"0xac88e0997a26942cb9cbda1a7dd9756e28ba2025813e5b07e55939fbf8538ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IFeeProvider.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function feeProvider() external view returns (IFeeProvider);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    ) external returns (uint256 _withdrawn, uint256 _repaid);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\\n\\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(\\n        address account_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    ) external returns (uint256 _deposited, uint256 _issued);\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeized_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _maxAmountToRepay);\\n\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view returns (uint256 _amountIn, uint256 _fee);\\n\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _fee);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _fee);\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function isSwapActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb6ccb04bbde8597025b2243b7734de51466bc5f6a6c5229484f20b881f4915c8\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateMasterOracle(IMasterOracle newOracle_) external;\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function updateNativeTokenGateway(address newGateway_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd4f5f60c3943b5fa9ffb34ef1909d5a8ef4ca62fd35ea0567cd0402c15d6ee2a\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external;\\n\\n    function claimable(address account_) external view returns (uint256 _claimable);\\n\\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\\n\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\\n\\n    function tokens(uint256) external view returns (IERC20);\\n\\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\\n\\n    function accountIndexOf(IERC20, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f527eeae61b6a5bff7d3b48037234ef718ae7f71dc452e8cab3b60581f0d810\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2bb34cd1201403e756bf1e49ab9318024e3d6e26b61c114721f9d4da57c0fa3d\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x2f080adc5880151dc4446ef43b54abab8e3711c5f2e526917ef39a05e3c16a00\",\"license\":\"MIT\"},\"contracts/interfaces/external/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x75f04b225d0c310be7e0a09ee4c1aa6eeeb8d94e02fc0e4160a9597ce2d8d446\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/SyntheticTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/ISyntheticToken.sol\\\";\\n\\nabstract contract SyntheticTokenStorageV1 is ISyntheticToken {\\n    /**\\n     * @notice The name of the token\\n     */\\n    string public override name;\\n\\n    /**\\n     * @notice The symbol of the token\\n     */\\n    string public override symbol;\\n\\n    /**\\n     * @dev The amount of tokens owned by `account`\\n     */\\n    mapping(address => uint256) public override balanceOf;\\n\\n    /**\\n     * @dev The remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}\\n     */\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    /**\\n     * @dev Amount of tokens in existence\\n     */\\n    uint256 public override totalSupply;\\n\\n    /**\\n     * @notice The supply cap\\n     */\\n    uint256 public override maxTotalSupply;\\n\\n    /**\\n     * @dev The Pool Registry\\n     */\\n    IPoolRegistry public override poolRegistry;\\n\\n    /**\\n     * @notice If true, disables msAsset minting globally\\n     */\\n    bool public override isActive;\\n\\n    /**\\n     * @notice The decimals of the token\\n     */\\n    uint8 public override decimals;\\n}\\n\",\"keccak256\":\"0xbc6f8cd33013fc80960c1c60d073aacda1ed01a835e8708a020e13fc7740af16\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611395806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806370a08231116100b8578063afcff50f1161007c578063afcff50f14610286578063b2a02ff1146102b1578063d2593329146102c4578063dd62ed3e146102cc578063de7ea79d146102f7578063ffa1ad741461030a57600080fd5b806370a082311461022557806395d89b41146102455780639dc29fac1461024d578063a457c2d714610260578063a9059cbb1461027357600080fd5b806323b872dd116100ff57806323b872dd146101bd5780632ab4d052146101d0578063313ce567146101d957806339509351146101ff57806340c10f191461021257600080fd5b806306fdde031461013c578063095ea7b31461015a578063172f50a41461017d57806318160ddd1461019257806322f3e2d4146101a9575b600080fd5b61014461032e565b604051610151919061108b565b60405180910390f35b61016d6101683660046110f8565b6103bc565b6040519015158152602001610151565b61019061018b366004611124565b6103d2565b005b61019b60055481565b604051908152602001610151565b60075461016d90600160a01b900460ff1681565b61016d6101cb36600461113d565b6104ec565b61019b60065481565b6007546101ed90600160a81b900460ff1681565b60405160ff9091168152602001610151565b61016d61020d3660046110f8565b61055d565b6101906102203660046110f8565b610599565b61019b61023336600461117e565b60036020526000908152604090205481565b6101446105df565b61019061025b3660046110f8565b6105ec565b61016d61026e3660046110f8565b61062e565b61016d6102813660046110f8565b61068a565b600754610299906001600160a01b031681565b6040516001600160a01b039091168152602001610151565b6101906102bf36600461113d565b610697565b6101906106de565b61019b6102da3660046111a2565b600460209081526000928352604080842090915290825290205481565b610190610305366004611224565b6107f6565b610144604051806040016040528060058152602001640312e322e360dc1b81525081565b6001805461033b906112bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610367906112bf565b80156103b45780601f10610389576101008083540402835291602001916103b4565b820191906000526020600020905b81548152906001019060200180831161039757829003601f168201915b505050505081565b60006103c933848461099a565b50600192915050565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561042057600080fd5b505afa158015610434573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045891906112fa565b6001600160a01b0316336001600160a01b03161461048957604051634b98449160e11b815260040160405180910390fd5b600654818114156104ad57604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527fc58cd6132bb46df23d468939c03dd023b74b509aaa6b04c39d5a6461c65963bd910160405180910390a150600655565b6001600160a01b03831660009081526004602090815260408083203384529091528120546000198114610547578281101561053a576040516303814af160e61b815260040160405180910390fd5b610547853385840361099a565b610552858585610a4a565b506001949350505050565b3360008181526004602090815260408083206001600160a01b038716845290915281205490916103c9918590610594908690611317565b61099a565b6105a1610b40565b1580156105b357506105b1610c36565b155b156105d15760405163168504c160e21b815260040160405180910390fd5b6105db8282610e3a565b5050565b6002805461033b906112bf565b6105f4610b40565b1580156106065750610604610c36565b155b156106245760405163848003b560e01b815260040160405180910390fd5b6105db8282610f39565b3360009081526004602090815260408083206001600160a01b0386168452909152812054828110156106735760405163189dd6af60e31b815260040160405180910390fd5b610680338585840361099a565b5060019392505050565b60006103c9338484610a4a565b61069f610b40565b1580156106b157506106af610c36565b155b156106ce576040516249987f60e01b815260040160405180910390fd5b6106d9838383610a4a565b505050565b600760009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561072c57600080fd5b505afa158015610740573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076491906112fa565b6001600160a01b0316336001600160a01b03161461079557604051634b98449160e11b815260040160405180910390fd5b600754604051600160a01b90910460ff1615808252907f79e35d0afb37464963b458a448d257d695a4dc4406dc45df01e4c7b38e2732cb9060200160405180910390a160078054911515600160a01b0260ff60a01b19909216919091179055565b600054610100900460ff168061080f575060005460ff16155b6108765760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015610898576000805461ffff19166101011790555b856108b657604051636e83f50760e01b815260040160405180910390fd5b836108d4576040516330507cff60e11b815260040160405180910390fd5b60ff83166108f557604051634dc4784160e11b815260040160405180910390fd5b6001600160a01b03821661091c57604051637cb62f2b60e11b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b03841617905561094360018888610ff2565b5061095060028686610ff2565b506007805460ff60a01b1960ff8616600160a81b021661ffff60a01b1990911617600160a01b1790556000196006558015610991576000805461ff00191690555b50505050505050565b6001600160a01b0383166109c1576040516356fdae6560e11b815260040160405180910390fd5b6001600160a01b0382166109e85760405163b2fa1ef360e01b815260040160405180910390fd5b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610a7157604051630240531760e41b815260040160405180910390fd5b6001600160a01b038216610a985760405163671d1add60e11b815260040160405180910390fd5b6001600160a01b03831660009081526003602052604090205481811015610ad257604051635dd58b8b60e01b815260040160405180910390fd5b6001600160a01b0380851660008181526003602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610b329086815260200190565b60405180910390a350505050565b60075460405163c673bdaf60e01b81523360048201526000916001600160a01b03169063c673bdaf9060240160206040518083038186803b158015610b8457600080fd5b505afa158015610b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbc919061133d565b8015610c315750604051631a0dd00b60e01b81523060048201523390631a0dd00b9060240160206040518083038186803b158015610bf957600080fd5b505afa158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c31919061133d565b905090565b600080336001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7257600080fd5b505afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa91906112fa565b60075460405163c673bdaf60e01b81526001600160a01b03808416600483015292935091169063c673bdaf9060240160206040518083038186803b158015610cf157600080fd5b505afa158015610d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d29919061133d565b8015610da757506040516308a00b1f60e31b81523360048201526001600160a01b0382169063450058f89060240160206040518083038186803b158015610d6f57600080fd5b505afa158015610d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da7919061133d565b8015610e345750306001600160a01b0316336001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b158015610df157600080fd5b505afa158015610e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2991906112fa565b6001600160a01b0316145b91505090565b600754600160a01b900460ff16610e64576040516303127d9160e31b815260040160405180910390fd5b6001600160a01b038216610e8b5760405163c96c2a0b60e01b815260040160405180910390fd5b8060056000828254610e9d9190611317565b90915550506006546005541115610ec7576040516309e0f0fd60e31b815260040160405180910390fd5b6001600160a01b03821660009081526003602052604081208054839290610eef908490611317565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610f60576040516304fca6bd60e41b815260040160405180910390fd5b6001600160a01b03821660009081526003602052604090205481811015610f9a57604051630bba337f60e11b815260040160405180910390fd5b6001600160a01b03831660008181526003602090815260408083208686039055600580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610a3d565b828054610ffe906112bf565b90600052602060002090601f0160209004810192826110205760008555611066565b82601f106110395782800160ff19823516178555611066565b82800160010185558215611066579182015b8281111561106657823582559160200191906001019061104b565b50611072929150611076565b5090565b5b808211156110725760008155600101611077565b600060208083528351808285015260005b818110156110b85785810183015185820160400152820161109c565b818111156110ca576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146110f557600080fd5b50565b6000806040838503121561110b57600080fd5b8235611116816110e0565b946020939093013593505050565b60006020828403121561113657600080fd5b5035919050565b60008060006060848603121561115257600080fd5b833561115d816110e0565b9250602084013561116d816110e0565b929592945050506040919091013590565b60006020828403121561119057600080fd5b813561119b816110e0565b9392505050565b600080604083850312156111b557600080fd5b82356111c0816110e0565b915060208301356111d0816110e0565b809150509250929050565b60008083601f8401126111ed57600080fd5b50813567ffffffffffffffff81111561120557600080fd5b60208301915083602082850101111561121d57600080fd5b9250929050565b6000806000806000806080878903121561123d57600080fd5b863567ffffffffffffffff8082111561125557600080fd5b6112618a838b016111db565b9098509650602089013591508082111561127a57600080fd5b5061128789828a016111db565b909550935050604087013560ff811681146112a157600080fd5b915060608701356112b1816110e0565b809150509295509295509295565b600181811c908216806112d357607f821691505b602082108114156112f457634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561130c57600080fd5b815161119b816110e0565b6000821982111561133857634e487b7160e01b600052601160045260246000fd5b500190565b60006020828403121561134f57600080fd5b8151801515811461119b57600080fdfea264697066735822122007dd622a8e0f7f213a1791cd0b4e57167f1737f6efdfbaeb68a0f1943bc5a70964736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burn(address,uint256)": {
        "params": {
          "amount_": "The amount to burn",
          "from_": "The account to burn from"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "amount_": "The amount to mint",
          "to_": "The account to mint to"
        }
      },
      "seize(address,address,uint256)": {
        "details": "Same as _transfer",
        "params": {
          "amount_": "The amount to seize",
          "to_": "The beneficiary account"
        }
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "updateMaxTotalSupply(uint256)": {
        "params": {
          "newMaxTotalSupply_": "The new max total supply"
        }
      }
    },
    "title": "Synthetic Token contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MaxTotalSupplyUpdated(uint256,uint256)": {
        "notice": "Emitted when max total supply is updated"
      },
      "SyntheticTokenActiveUpdated(bool)": {
        "notice": "Emitted when active flag is updated"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Set `amount` as the allowance of `spender` over the caller's tokens"
      },
      "burn(address,uint256)": {
        "notice": "Burn synthetic token"
      },
      "decimals()": {
        "notice": "The decimals of the token"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Atomically decrease the allowance granted to `spender` by the caller"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Atomically increase the allowance granted to `spender` by the caller"
      },
      "isActive()": {
        "notice": "If true, disables msAsset minting globally"
      },
      "maxTotalSupply()": {
        "notice": "The supply cap"
      },
      "mint(address,uint256)": {
        "notice": "Mint synthetic token"
      },
      "name()": {
        "notice": "The name of the token"
      },
      "seize(address,address,uint256)": {
        "notice": "Seize synthetic tokens"
      },
      "symbol()": {
        "notice": "The symbol of the token"
      },
      "toggleIsActive()": {
        "notice": "Enable/Disable Synthetic Token"
      },
      "updateMaxTotalSupply(uint256)": {
        "notice": "Update max total supply"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9979,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9982,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15710,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 15714,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 15720,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15728,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 15732,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 15736,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "maxTotalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15741,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "poolRegistry",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IPoolRegistry)13197"
      },
      {
        "astId": 15745,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "isActive",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 15749,
        "contract": "contracts/SyntheticToken.sol:SyntheticToken",
        "label": "decimals",
        "offset": 21,
        "slot": "7",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPoolRegistry)13197": {
        "encoding": "inplace",
        "label": "contract IPoolRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}