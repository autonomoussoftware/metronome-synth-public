{
  "address": "0x0557B0a016166FA113CC090869C3d98bBFE911Fa",
  "abi": [
    {
      "inputs": [],
      "name": "AddressIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountGreaterThanMaxLiquidable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountInIsInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountIsTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanNotLiquidateOwnPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollateralDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DebtTokenAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DebtTokenDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositTokenAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositTokenDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackIsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FlashRepaySlippageTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsNotPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsNotShutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsShutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LeverageSlippageTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LeverageTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LeverageTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxLiquidableTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewValueIsSameAsCurrent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolRegistryIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PositionIsHealthy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PositionIsNotHealthy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedGovernorIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReachedMaxDepositTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReceiveIsNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RemainingDebtIsLowerThanTheFloor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributorAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDistributorDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotDebtToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotDepositToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotTheProposedGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SwapFeatureIsInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SyntheticDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SyntheticIsInUse",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SyntheticIsNull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TotalSupplyIsNotZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnderlyingAssetInUse",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserReachedMaxTokens",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDebtFloorInUsd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebtFloorInUsd",
          "type": "uint256"
        }
      ],
      "name": "DebtFloorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IDebtToken",
          "name": "debtToken",
          "type": "address"
        }
      ],
      "name": "DebtTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IDebtToken",
          "name": "debtToken",
          "type": "address"
        }
      ],
      "name": "DebtTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositToken",
          "type": "address"
        }
      ],
      "name": "DepositTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IDepositToken",
          "name": "depositToken",
          "type": "address"
        }
      ],
      "name": "DepositTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IFeeProvider",
          "name": "oldFeeProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IFeeProvider",
          "name": "newFeeProvider",
          "type": "address"
        }
      ],
      "name": "FeeProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxLiquidable",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxLiquidable",
          "type": "uint256"
        }
      ],
      "name": "MaxLiquidableUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountRepaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositSeized",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "PositionLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRewardsDistributor",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "RewardsDistributorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IRewardsDistributor",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "RewardsDistributorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Shutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newActive",
          "type": "bool"
        }
      ],
      "name": "SwapActiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISwapper",
          "name": "oldSwapFee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ISwapper",
          "name": "newSwapFee",
          "type": "address"
        }
      ],
      "name": "SwapperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract ISyntheticToken",
          "name": "syntheticTokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract ISyntheticToken",
          "name": "syntheticTokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SyntheticTokenSwapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ITreasury",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract ITreasury",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_PER_USER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDebtToken",
          "name": "debtToken_",
          "type": "address"
        }
      ],
      "name": "addDebtToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositToken_",
          "type": "address"
        }
      ],
      "name": "addDepositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewardsDistributor",
          "name": "distributor_",
          "type": "address"
        }
      ],
      "name": "addRewardsDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "addToDebtTokensOfAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "addToDepositTokensOfAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtFloorInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "debtOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_debtInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "debtPositionOf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isHealthy",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_depositInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_issuableLimitInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_issuableInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtTokenOf",
      "outputs": [
        {
          "internalType": "contract IDebtToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "depositOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_depositInUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_issuableLimitInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositTokenOf",
      "outputs": [
        {
          "internalType": "contract IDepositToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDebtToken",
          "name": "debtToken_",
          "type": "address"
        }
      ],
      "name": "doesDebtTokenExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDepositToken",
          "name": "depositToken_",
          "type": "address"
        }
      ],
      "name": "doesDepositTokenExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken_",
          "type": "address"
        }
      ],
      "name": "doesSyntheticTokenExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "everythingStopped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeProvider",
      "outputs": [
        {
          "internalType": "contract IFeeProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken_",
          "type": "address"
        },
        {
          "internalType": "contract IDepositToken",
          "name": "depositToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repayAmountMin_",
          "type": "uint256"
        }
      ],
      "name": "flashRepay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_repaid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebtTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "getDebtTokensOfAccount",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "getDepositTokensOfAccount",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsDistributors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "poolRegistry_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSwapActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenIn_",
          "type": "address"
        },
        {
          "internalType": "contract IDepositToken",
          "name": "depositToken_",
          "type": "address"
        },
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverage_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositAmountMin_",
          "type": "uint256"
        }
      ],
      "name": "leverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_deposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_issued",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToRepay_",
          "type": "uint256"
        },
        {
          "internalType": "contract IDepositToken",
          "name": "depositToken_",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalSeized",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toLiquidator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterOracle",
      "outputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLiquidable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRegistry",
      "outputs": [
        {
          "internalType": "contract IPoolRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalToSeize_",
          "type": "uint256"
        },
        {
          "internalType": "contract IDepositToken",
          "name": "depositToken_",
          "type": "address"
        }
      ],
      "name": "quoteLiquidateIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountToRepay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toLiquidator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "contract IDepositToken",
          "name": "depositToken_",
          "type": "address"
        }
      ],
      "name": "quoteLiquidateMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maxAmountToRepay",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToRepay_",
          "type": "uint256"
        },
        {
          "internalType": "contract IDepositToken",
          "name": "depositToken_",
          "type": "address"
        }
      ],
      "name": "quoteLiquidateOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalToSeize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toLiquidator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticTokenIn_",
          "type": "address"
        },
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticTokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        }
      ],
      "name": "quoteSwapIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticTokenIn_",
          "type": "address"
        },
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticTokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "quoteSwapOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDebtToken",
          "name": "debtToken_",
          "type": "address"
        }
      ],
      "name": "removeDebtToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDepositToken",
          "name": "depositToken_",
          "type": "address"
        }
      ],
      "name": "removeDepositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "removeFromDebtTokensOfAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "removeFromDepositTokensOfAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewardsDistributor",
          "name": "distributor_",
          "type": "address"
        }
      ],
      "name": "removeRewardsDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticTokenIn_",
          "type": "address"
        },
        {
          "internalType": "contract ISyntheticToken",
          "name": "syntheticTokenOut_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract ISwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleIsSwapActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposedGovernor_",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDebtFloorInUsd_",
          "type": "uint256"
        }
      ],
      "name": "updateDebtFloor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFeeProvider",
          "name": "feeProvider_",
          "type": "address"
        }
      ],
      "name": "updateFeeProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxLiquidable_",
          "type": "uint256"
        }
      ],
      "name": "updateMaxLiquidable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapper",
          "name": "newSwapper_",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITreasury",
          "name": "newTreasury_",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xad7ac8f49e38de304ac52b6d32ca1b97aa9f22b4d040eddd56c27426965f5198",
  "receipt": {
    "to": null,
    "from": "0x7EEeF54Df0596633dbf6Fa3C88dEB1E3eA85ECE8",
    "contractAddress": "0x0557B0a016166FA113CC090869C3d98bBFE911Fa",
    "transactionIndex": 0,
    "gasUsed": "4735450",
    "logsBloom": "0x
    "blockHash": "0x80e4283829a2091eb7588fb848823b6f4d698bcd93693cb063f9b2c4d97a9367",
    "transactionHash": "0xad7ac8f49e38de304ac52b6d32ca1b97aa9f22b4d040eddd56c27426965f5198",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 101389625,
        "transactionHash": "0xad7ac8f49e38de304ac52b6d32ca1b97aa9f22b4d040eddd56c27426965f5198",
        "address": "0x0557B0a016166FA113CC090869C3d98bBFE911Fa",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007eeef54df0596633dbf6fa3c88deb1e3ea85ece8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x80e4283829a2091eb7588fb848823b6f4d698bcd93693cb063f9b2c4d97a9367"
      }
    ],
    "blockNumber": 101389625,
    "cumulativeGasUsed": "4735450",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "1d1eeb3af7f52d90d255aace1e1587c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountGreaterThanMaxLiquidable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountInIsInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotLiquidateOwnPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtTokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtTokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositTokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositTokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashRepaySlippageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsNotShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeverageSlippageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeverageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeverageTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxLiquidableTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewValueIsSameAsCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolRegistryIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionIsHealthy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionIsNotHealthy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedGovernorIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReachedMaxDepositTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceiveIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemainingDebtIsLowerThanTheFloor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributorDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotDebtToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotDepositToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotTheProposedGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeatureIsInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticIsInUse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyIsNotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnderlyingAssetInUse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserReachedMaxTokens\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebtFloorInUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtFloorInUsd\",\"type\":\"uint256\"}],\"name\":\"DebtFloorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"DebtTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"DebtTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"}],\"name\":\"DepositTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken\",\"type\":\"address\"}],\"name\":\"DepositTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IFeeProvider\",\"name\":\"oldFeeProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IFeeProvider\",\"name\":\"newFeeProvider\",\"type\":\"address\"}],\"name\":\"FeeProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxLiquidable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxLiquidable\",\"type\":\"uint256\"}],\"name\":\"MaxLiquidableUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositSeized\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRewardsDistributor\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"RewardsDistributorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IRewardsDistributor\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"RewardsDistributorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newActive\",\"type\":\"bool\"}],\"name\":\"SwapActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISwapper\",\"name\":\"oldSwapFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISwapper\",\"name\":\"newSwapFee\",\"type\":\"address\"}],\"name\":\"SwapperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SyntheticTokenSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITreasury\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ITreasury\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_PER_USER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken_\",\"type\":\"address\"}],\"name\":\"addDebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"addDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsDistributor\",\"name\":\"distributor_\",\"type\":\"address\"}],\"name\":\"addRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"addToDebtTokensOfAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"addToDepositTokensOfAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtFloorInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"debtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"debtPositionOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isHealthy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_depositInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issuableLimitInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issuableInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtTokenOf\",\"outputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"depositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issuableLimitInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositTokenOf\",\"outputs\":[{\"internalType\":\"contract IDepositToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken_\",\"type\":\"address\"}],\"name\":\"doesDebtTokenExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"doesDepositTokenExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"}],\"name\":\"doesSyntheticTokenExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everythingStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeProvider\",\"outputs\":[{\"internalType\":\"contract IFeeProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmountMin_\",\"type\":\"uint256\"}],\"name\":\"flashRepay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"getDebtTokensOfAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"getDepositTokensOfAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsDistributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"poolRegistry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountMin_\",\"type\":\"uint256\"}],\"name\":\"leverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issued\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRepay_\",\"type\":\"uint256\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSeized\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toLiquidator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterOracle\",\"outputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalToSeize_\",\"type\":\"uint256\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"quoteLiquidateIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toLiquidator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"quoteLiquidateMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmountToRepay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRepay_\",\"type\":\"uint256\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"quoteLiquidateOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalToSeize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toLiquidator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenIn_\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"name\":\"quoteSwapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenIn_\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteSwapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken_\",\"type\":\"address\"}],\"name\":\"removeDebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"removeDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"removeFromDebtTokensOfAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"removeFromDepositTokensOfAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsDistributor\",\"name\":\"distributor_\",\"type\":\"address\"}],\"name\":\"removeRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenIn_\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsSwapActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedGovernor_\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDebtFloorInUsd_\",\"type\":\"uint256\"}],\"name\":\"updateDebtFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeProvider\",\"name\":\"feeProvider_\",\"type\":\"address\"}],\"name\":\"updateFeeProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxLiquidable_\",\"type\":\"uint256\"}],\"name\":\"updateMaxLiquidable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"newSwapper_\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"newTreasury_\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addDebtToken(address)\":{\"details\":\"Must keep `debtTokenOf` mapping updated\"},\"addToDebtTokensOfAccount(address)\":{\"details\":\"This function is called from `DebtToken` when user's balance changes from `0`The caller should ensure to not pass `address(0)` as `_account`\",\"params\":{\"account_\":\"The account address\"}},\"addToDepositTokensOfAccount(address)\":{\"details\":\"This function is called from `DepositToken` when user's balance changes from `0`The caller should ensure to not pass `address(0)` as `_account`\",\"params\":{\"account_\":\"The account address\"}},\"debtOf(address)\":{\"params\":{\"account_\":\"The account to check\"},\"returns\":{\"_debtInUsd\":\"The debt value in USD\"}},\"debtPositionOf(address)\":{\"params\":{\"account_\":\"The account to check\"},\"returns\":{\"_debtInUsd\":\"The total debt in USD\",\"_depositInUsd\":\"The total collateral deposited in USD\",\"_isHealthy\":\"Whether the account's position is healthy\",\"_issuableInUsd\":\"The amount of debt (is USD) that is free (i.e. can be used to issue synthetic tokens)\",\"_issuableLimitInUsd\":\"The max amount of debt (is USD) that can be created (considering collateral factors)\"}},\"depositOf(address)\":{\"params\":{\"account_\":\"The account to check\"},\"returns\":{\"_depositInUsd\":\"The total deposit value in USD among all collaterals\",\"_issuableLimitInUsd\":\"The max value in USD that can be used to issue synthetic tokens\"}},\"doesDebtTokenExist(address)\":{\"params\":{\"debtToken_\":\"Asset to check\"},\"returns\":{\"_0\":\"true if exist\"}},\"doesDepositTokenExist(address)\":{\"params\":{\"depositToken_\":\"Asset to check\"},\"returns\":{\"_0\":\"true if exist\"}},\"doesSyntheticTokenExist(address)\":{\"params\":{\"syntheticToken_\":\"Asset to check\"},\"returns\":{\"_0\":\"true if exist\"}},\"flashRepay(address,address,uint256,uint256)\":{\"params\":{\"depositToken_\":\"The collateral to withdraw\",\"repayAmountMin_\":\"The minimum amount to repay (slippage check)\",\"syntheticToken_\":\"The debt token to repay\",\"withdrawAmount_\":\"The amount to withdraw\"}},\"getDebtTokens()\":{\"details\":\"WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees.\"},\"getDebtTokensOfAccount(address)\":{\"details\":\"WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees.\"},\"getDepositTokens()\":{\"details\":\"WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees.\"},\"getDepositTokensOfAccount(address)\":{\"details\":\"WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees.\"},\"leverage(address,address,address,uint256,uint256,uint256)\":{\"params\":{\"amountIn_\":\"The amount to deposit\",\"depositAmountMin_\":\"The min final deposit amount (slippage)\",\"depositToken_\":\"The collateral to deposit\",\"leverage_\":\"The leverage X param (e.g. 1.5e18 for 1.5X)\",\"syntheticToken_\":\"The msAsset to mint\",\"tokenIn_\":\"The token to transfer\"}},\"liquidate(address,address,uint256,address)\":{\"params\":{\"account_\":\"The account with an unhealthy position\",\"amountToRepay_\":\"The amount to repay in synthetic token\",\"depositToken_\":\"The collateral to seize from\",\"syntheticToken_\":\"The msAsset to use for repayment\"},\"returns\":{\"_fee\":\"Share of `_totalSeized` collected as fee\",\"_toLiquidator\":\"Share of `_totalSeized` sent to the liquidator\",\"_totalSeized\":\"Total deposit amount seized from the liquidated account\"}},\"open()\":{\"details\":\"Open contract operations, if contract is in shutdown state\"},\"pause()\":{\"details\":\"Suspend deposit feature, if contract is not paused.\"},\"quoteLiquidateIn(address,uint256,address)\":{\"params\":{\"depositToken_\":\"Collateral's deposit token\",\"syntheticToken_\":\"Synth for repayment\",\"totalToSeize_\":\"Collateral total amount to size\"},\"returns\":{\"_amountToRepay\":\"Synth amount to burn\",\"_fee\":\"The fee amount to collect\",\"_toLiquidator\":\"Seized amount to the liquidator\"}},\"quoteLiquidateMax(address,address,address)\":{\"details\":\"I.e. Considers the min amount between collateral's balance and `maxLiquidable` param\",\"params\":{\"account_\":\"The account to liquidate\",\"depositToken_\":\"Collateral's deposit token\",\"syntheticToken_\":\"Synth for repayment\"},\"returns\":{\"_maxAmountToRepay\":\"Synth amount to burn\"}},\"quoteLiquidateOut(address,uint256,address)\":{\"params\":{\"amountToRepay_\":\"Synth amount to burn\",\"depositToken_\":\"Collateral's deposit token\",\"syntheticToken_\":\"Synth for repayment\"},\"returns\":{\"_fee\":\"The fee amount to collect\",\"_toLiquidator\":\"Seized amount to the liquidator\",\"_totalToSeize\":\"Collateral total amount to size\"}},\"quoteSwapIn(address,address,uint256)\":{\"params\":{\"amountOut_\":\"Amount out\",\"syntheticTokenIn_\":\"Synth in\",\"syntheticTokenOut_\":\"Synth out\"},\"returns\":{\"_amountIn\":\"Amount in\",\"_fee\":\"Fee to charge in `syntheticTokenOut_`\"}},\"quoteSwapOut(address,address,uint256)\":{\"params\":{\"amountIn_\":\"Amount in\",\"syntheticTokenIn_\":\"Synth in\",\"syntheticTokenOut_\":\"Synth out\"},\"returns\":{\"_amountOut\":\"Amount out\",\"_fee\":\"Fee to charge in `syntheticTokenOut_`\"}},\"removeDebtToken(address)\":{\"details\":\"Must keep `debtTokenOf` mapping updated\"},\"removeFromDebtTokensOfAccount(address)\":{\"details\":\"This function is called from `DebtToken` when user's balance changes to `0`The caller should ensure to not pass `address(0)` as `_account`\",\"params\":{\"account_\":\"The account address\"}},\"removeFromDepositTokensOfAccount(address)\":{\"details\":\"This function is called from `DepositToken` when user's balance changes to `0`The caller should ensure to not pass `address(0)` as `_account`\",\"params\":{\"account_\":\"The account address\"}},\"shutdown()\":{\"details\":\"Suspend all features (issue, repay, deposit, withdraw, liquidate and swap), if not already shutdown.\"},\"swap(address,address,uint256)\":{\"params\":{\"amountIn_\":\"Amount to swap\",\"syntheticTokenIn_\":\"Synthetic token to sell\",\"syntheticTokenOut_\":\"Synthetic token to buy\"}},\"sweep(address,address,uint256)\":{\"params\":{\"amount_\":\"The amount to send\",\"to_\":\"The recipient of the transfer\",\"token_\":\"The token to transfer\"}},\"transferGovernorship(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"proposedGovernor_\":\"The new proposed governor\"}},\"unpause()\":{\"details\":\"Unpause contract operations, allow only if contract is paused and not shutdown.\"}},\"title\":\"Pool contract\",\"version\":1},\"userdoc\":{\"events\":{\"DebtFloorUpdated(uint256,uint256)\":{\"notice\":\"Emitted when protocol liquidation fee is updated\"},\"DebtTokenAdded(address)\":{\"notice\":\"Emitted when debt token is enabled\"},\"DebtTokenRemoved(address)\":{\"notice\":\"Emitted when debt token is disabled\"},\"DepositTokenAdded(address)\":{\"notice\":\"Emitted when deposit token is enabled\"},\"DepositTokenRemoved(address)\":{\"notice\":\"Emitted when deposit token is disabled\"},\"FeeProviderUpdated(address,address)\":{\"notice\":\"Emitted when fee provider contract is updated\"},\"MaxLiquidableUpdated(uint256,uint256)\":{\"notice\":\"Emitted when maxLiquidable (liquidation cap) is updated\"},\"Open(address)\":{\"notice\":\"Emitted when contract is turned on\"},\"Paused(address)\":{\"notice\":\"Emitted when contract is paused\"},\"PositionLiquidated(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a position is liquidated\"},\"RewardsDistributorAdded(address)\":{\"notice\":\"Emitted when rewards distributor contract is added\"},\"RewardsDistributorRemoved(address)\":{\"notice\":\"Emitted when rewards distributor contract is removed\"},\"Shutdown(address)\":{\"notice\":\"Emitted when contract is shuted down\"},\"SwapActiveUpdated(bool)\":{\"notice\":\"Emitted when the swap active flag is updated\"},\"SwapperUpdated(address,address)\":{\"notice\":\"Emitted when swapper contract is updated\"},\"SyntheticTokenSwapped(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when synthetic token is swapped\"},\"TreasuryUpdated(address,address)\":{\"notice\":\"Emitted when treasury contract is updated\"},\"Unpaused(address)\":{\"notice\":\"Emitted when contract is unpaused\"}},\"kind\":\"user\",\"methods\":{\"MAX_TOKENS_PER_USER()\":{\"notice\":\"Maximum tokens per pool a user may have\"},\"acceptGovernorship()\":{\"notice\":\"Allows new governor to accept governorship of the contract.\"},\"addDebtToken(address)\":{\"notice\":\"Add debt token to offerings\"},\"addDepositToken(address)\":{\"notice\":\"Add deposit token (i.e. collateral) to Synth\"},\"addRewardsDistributor(address)\":{\"notice\":\"Add a RewardsDistributor contract\"},\"addToDebtTokensOfAccount(address)\":{\"notice\":\"Add a debt token to the per-account list\"},\"addToDepositTokensOfAccount(address)\":{\"notice\":\"Add a deposit token to the per-account list\"},\"debtFloorInUsd()\":{\"notice\":\"The debt floor (in USD) for each synthetic token This parameters is used to keep incentive for liquidators (i.e. cover gas and provide enough profit)\"},\"debtOf(address)\":{\"notice\":\"Get account's debt by querying latest prices from oracles\"},\"debtPositionOf(address)\":{\"notice\":\"Returns whether the debt position from an account is healthy\"},\"debtTokenOf(address)\":{\"notice\":\"Get the debt token's address from given synthetic asset\"},\"depositOf(address)\":{\"notice\":\"Get account's total collateral deposited by querying latest prices from oracles\"},\"depositTokenOf(address)\":{\"notice\":\"Get the deposit token's address from given underlying asset\"},\"doesDebtTokenExist(address)\":{\"notice\":\"Check if token is part of the debt offerings\"},\"doesDepositTokenExist(address)\":{\"notice\":\"Check if collateral is supported\"},\"doesSyntheticTokenExist(address)\":{\"notice\":\"Check if token is part of the synthetic offerings\"},\"everythingStopped()\":{\"notice\":\"Return `true` if contract is shutdown\"},\"feeCollector()\":{\"notice\":\"Returns fee collector address\"},\"feeProvider()\":{\"notice\":\"FeeProvider contract\"},\"flashRepay(address,address,uint256,uint256)\":{\"notice\":\"Flash debt repayment\"},\"getDebtTokens()\":{\"notice\":\"Get all debt tokens\"},\"getDebtTokensOfAccount(address)\":{\"notice\":\"Get all debt tokens\"},\"getDepositTokens()\":{\"notice\":\"Get all deposit tokens\"},\"getDepositTokensOfAccount(address)\":{\"notice\":\"Get deposit tokens of an account\"},\"getRewardsDistributors()\":{\"notice\":\"Get all rewards distributors\"},\"governor()\":{\"notice\":\"The governor\"},\"isSwapActive()\":{\"notice\":\"Swap feature on/off flag\"},\"leverage(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Leverage yield position\"},\"liquidate(address,address,uint256,address)\":{\"notice\":\"Burn synthetic token, unlock deposit token and send liquidator incentive\"},\"masterOracle()\":{\"notice\":\"Get MasterOracle contract\"},\"maxLiquidable()\":{\"notice\":\"The max percent of the debt allowed to liquidate\"},\"paused()\":{\"notice\":\"Return `true` if contract is paused\"},\"poolRegistry()\":{\"notice\":\"PoolRegistry\"},\"proposedGovernor()\":{\"notice\":\"The proposed governor\"},\"quoteLiquidateIn(address,uint256,address)\":{\"notice\":\"Quote synth  `_amountToRepay` in order to seize `totalToSeized_`\"},\"quoteLiquidateMax(address,address,address)\":{\"notice\":\"Quote max allowed synth to repay\"},\"quoteLiquidateOut(address,uint256,address)\":{\"notice\":\"Quote collateral  `totalToSeized_` by repaying `amountToRepay_`\"},\"quoteSwapIn(address,address,uint256)\":{\"notice\":\"Quote `_amountIn` to get `amountOut_`\"},\"quoteSwapOut(address,address,uint256)\":{\"notice\":\"Quote `amountOut_` get from `amountIn_`\"},\"removeDebtToken(address)\":{\"notice\":\"Remove debt token from offerings\"},\"removeDepositToken(address)\":{\"notice\":\"Remove deposit token (i.e. collateral) from Synth\"},\"removeFromDebtTokensOfAccount(address)\":{\"notice\":\"Remove a debt token from the per-account list\"},\"removeFromDepositTokensOfAccount(address)\":{\"notice\":\"Remove a deposit token from the per-account list\"},\"removeRewardsDistributor(address)\":{\"notice\":\"Remove a RewardsDistributor contract\"},\"swap(address,address,uint256)\":{\"notice\":\"Swap synthetic tokens\"},\"swapper()\":{\"notice\":\"Swapper contract\"},\"sweep(address,address,uint256)\":{\"notice\":\"ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\"},\"toggleIsSwapActive()\":{\"notice\":\"Turn swap on/off\"},\"transferGovernorship(address)\":{\"notice\":\"Transfers governorship of the contract to a new account (`proposedGovernor`).\"},\"treasury()\":{\"notice\":\"Treasury contract\"},\"updateDebtFloor(uint256)\":{\"notice\":\"Update debt floor\"},\"updateFeeProvider(address)\":{\"notice\":\"Update FeeProvider contract\"},\"updateMaxLiquidable(uint256)\":{\"notice\":\"Update maxLiquidable (liquidation cap)\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper contract\"},\"updateTreasury(address)\":{\"notice\":\"Update treasury contract - will migrate funds to the new contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool.sol\":\"Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./dependencies/openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"./storage/PoolStorage.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./utils/Pauseable.sol\\\";\\n\\nerror CollateralDoesNotExist();\\nerror SyntheticDoesNotExist();\\nerror SenderIsNotDebtToken();\\nerror SenderIsNotDepositToken();\\nerror UserReachedMaxTokens();\\nerror PoolRegistryIsNull();\\nerror DebtTokenAlreadyExists();\\nerror DepositTokenAlreadyExists();\\nerror FlashRepaySlippageTooHigh();\\nerror LeverageTooLow();\\nerror LeverageTooHigh();\\nerror LeverageSlippageTooHigh();\\nerror PositionIsNotHealthy();\\nerror AmountIsZero();\\nerror CanNotLiquidateOwnPosition();\\nerror PositionIsHealthy();\\nerror AmountGreaterThanMaxLiquidable();\\nerror RemainingDebtIsLowerThanTheFloor();\\nerror AmountIsTooHigh();\\nerror DebtTokenDoesNotExist();\\nerror DepositTokenDoesNotExist();\\nerror SwapFeatureIsInactive();\\nerror AmountInIsInvalid();\\nerror AddressIsNull();\\nerror SyntheticIsNull();\\nerror SyntheticIsInUse();\\nerror UnderlyingAssetInUse();\\nerror ReachedMaxDepositTokens();\\nerror RewardDistributorAlreadyExists();\\nerror RewardDistributorDoesNotExist();\\nerror TotalSupplyIsNotZero();\\nerror NewValueIsSameAsCurrent();\\nerror FeeIsGreaterThanTheMax();\\nerror MaxLiquidableTooHigh();\\n\\n/**\\n * @title Pool contract\\n */\\ncontract Pool is ReentrancyGuard, Pauseable, PoolStorageV2 {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ISyntheticToken;\\n    using WadRayMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using MappedEnumerableSet for MappedEnumerableSet.AddressSet;\\n\\n    string public constant VERSION = \\\"1.2.0\\\";\\n\\n    /**\\n     * @notice Maximum tokens per pool a user may have\\n     */\\n    uint256 public constant MAX_TOKENS_PER_USER = 30;\\n\\n    /// @notice Emitted when protocol liquidation fee is updated\\n    event DebtFloorUpdated(uint256 oldDebtFloorInUsd, uint256 newDebtFloorInUsd);\\n\\n    /// @notice Emitted when debt token is enabled\\n    event DebtTokenAdded(IDebtToken indexed debtToken);\\n\\n    /// @notice Emitted when debt token is disabled\\n    event DebtTokenRemoved(IDebtToken indexed debtToken);\\n\\n    /// @notice Emitted when deposit token is enabled\\n    event DepositTokenAdded(address indexed depositToken);\\n\\n    /// @notice Emitted when deposit token is disabled\\n    event DepositTokenRemoved(IDepositToken indexed depositToken);\\n\\n    /// @notice Emitted when fee provider contract is updated\\n    event FeeProviderUpdated(IFeeProvider indexed oldFeeProvider, IFeeProvider indexed newFeeProvider);\\n\\n    /// @notice Emitted when maxLiquidable (liquidation cap) is updated\\n    event MaxLiquidableUpdated(uint256 oldMaxLiquidable, uint256 newMaxLiquidable);\\n\\n    /// @notice Emitted when a position is liquidated\\n    event PositionLiquidated(\\n        address indexed liquidator,\\n        address indexed account,\\n        ISyntheticToken indexed syntheticToken,\\n        uint256 amountRepaid,\\n        uint256 depositSeized,\\n        uint256 fee\\n    );\\n\\n    /// @notice Emitted when rewards distributor contract is added\\n    event RewardsDistributorAdded(IRewardsDistributor indexed _distributor);\\n\\n    /// @notice Emitted when rewards distributor contract is removed\\n    event RewardsDistributorRemoved(IRewardsDistributor _distributor);\\n\\n    /// @notice Emitted when the swap active flag is updated\\n    event SwapActiveUpdated(bool newActive);\\n\\n    /// @notice Emitted when swapper contract is updated\\n    event SwapperUpdated(ISwapper oldSwapFee, ISwapper newSwapFee);\\n\\n    /// @notice Emitted when synthetic token is swapped\\n    event SyntheticTokenSwapped(\\n        address indexed account,\\n        ISyntheticToken indexed syntheticTokenIn,\\n        ISyntheticToken indexed syntheticTokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 fee\\n    );\\n\\n    /// @notice Emitted when treasury contract is updated\\n    event TreasuryUpdated(ITreasury indexed oldTreasury, ITreasury indexed newTreasury);\\n\\n    /**\\n     * @dev Throws if token addition will reach the `account_`'s max\\n     */\\n    modifier onlyIfAdditionWillNotReachMaxTokens(address account_) {\\n        if (debtTokensOfAccount.length(account_) + depositTokensOfAccount.length(account_) >= MAX_TOKENS_PER_USER) {\\n            revert UserReachedMaxTokens();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if deposit token doesn't exist\\n     */\\n    modifier onlyIfDepositTokenExists(IDepositToken depositToken_) {\\n        if (!doesDepositTokenExist(depositToken_)) revert CollateralDoesNotExist();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token doesn't exist\\n     */\\n    modifier onlyIfSyntheticTokenExists(ISyntheticToken syntheticToken_) {\\n        if (!doesSyntheticTokenExist(syntheticToken_)) revert SyntheticDoesNotExist();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't a debt token\\n     */\\n    modifier onlyIfMsgSenderIsDebtToken() {\\n        if (!doesDebtTokenExist(IDebtToken(msg.sender))) revert SenderIsNotDebtToken();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't a deposit token\\n     */\\n    modifier onlyIfMsgSenderIsDepositToken() {\\n        if (!doesDepositTokenExist(IDepositToken(msg.sender))) revert SenderIsNotDepositToken();\\n        _;\\n    }\\n\\n    function initialize(IPoolRegistry poolRegistry_) public initializer {\\n        if (address(poolRegistry_) == address(0)) revert PoolRegistryIsNull();\\n        __ReentrancyGuard_init();\\n        __Pauseable_init();\\n\\n        poolRegistry = poolRegistry_;\\n        isSwapActive = true;\\n        maxLiquidable = 0.5e18; // 50%\\n    }\\n\\n    /**\\n     * @notice Add a debt token to the per-account list\\n     * @dev This function is called from `DebtToken` when user's balance changes from `0`\\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\\n     * @param account_ The account address\\n     */\\n    function addToDebtTokensOfAccount(\\n        address account_\\n    ) external onlyIfMsgSenderIsDebtToken onlyIfAdditionWillNotReachMaxTokens(account_) {\\n        if (!debtTokensOfAccount.add(account_, msg.sender)) revert DebtTokenAlreadyExists();\\n    }\\n\\n    /**\\n     * @notice Add a deposit token to the per-account list\\n     * @dev This function is called from `DepositToken` when user's balance changes from `0`\\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\\n     * @param account_ The account address\\n     */\\n    function addToDepositTokensOfAccount(\\n        address account_\\n    ) external onlyIfMsgSenderIsDepositToken onlyIfAdditionWillNotReachMaxTokens(account_) {\\n        if (!depositTokensOfAccount.add(account_, msg.sender)) revert DepositTokenAlreadyExists();\\n    }\\n\\n    /**\\n     * @notice Get account's debt by querying latest prices from oracles\\n     * @param account_ The account to check\\n     * @return _debtInUsd The debt value in USD\\n     */\\n    function debtOf(address account_) public view override returns (uint256 _debtInUsd) {\\n        IMasterOracle _masterOracle = masterOracle();\\n        uint256 _length = debtTokensOfAccount.length(account_);\\n        for (uint256 i; i < _length; ++i) {\\n            IDebtToken _debtToken = IDebtToken(debtTokensOfAccount.at(account_, i));\\n            _debtInUsd += _masterOracle.quoteTokenToUsd(\\n                address(_debtToken.syntheticToken()),\\n                _debtToken.balanceOf(account_)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Flash debt repayment\\n     * @param syntheticToken_ The debt token to repay\\n     * @param depositToken_ The collateral to withdraw\\n     * @param withdrawAmount_ The amount to withdraw\\n     * @param repayAmountMin_ The minimum amount to repay (slippage check)\\n     */\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    )\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfDepositTokenExists(depositToken_)\\n        onlyIfSyntheticTokenExists(syntheticToken_)\\n        returns (uint256 _withdrawn, uint256 _repaid)\\n    {\\n        if (withdrawAmount_ > depositToken_.balanceOf(msg.sender)) revert AmountIsTooHigh();\\n        IDebtToken _debtToken = debtTokenOf[syntheticToken_];\\n        if (repayAmountMin_ > _debtToken.balanceOf(msg.sender)) revert AmountIsTooHigh();\\n\\n        // 1. withdraw collateral\\n        (_withdrawn, ) = depositToken_.flashWithdraw(msg.sender, withdrawAmount_);\\n\\n        // 2. swap for synth\\n        uint256 _amountToRepay = _swap(swapper, depositToken_.underlying(), syntheticToken_, _withdrawn, 0);\\n\\n        // 3. repay debt\\n        (_repaid, ) = _debtToken.repay(msg.sender, _amountToRepay);\\n        if (_repaid < repayAmountMin_) revert FlashRepaySlippageTooHigh();\\n\\n        // 4. check the health of the outcome position\\n        (bool _isHealthy, , , , ) = debtPositionOf(msg.sender);\\n        if (!_isHealthy) revert PositionIsNotHealthy();\\n    }\\n\\n    /**\\n     * @notice Returns whether the debt position from an account is healthy\\n     * @param account_ The account to check\\n     * @return _isHealthy Whether the account's position is healthy\\n     * @return _depositInUsd The total collateral deposited in USD\\n     * @return _debtInUsd The total debt in USD\\n     * @return _issuableLimitInUsd The max amount of debt (is USD) that can be created (considering collateral factors)\\n     * @return _issuableInUsd The amount of debt (is USD) that is free (i.e. can be used to issue synthetic tokens)\\n     */\\n    function debtPositionOf(\\n        address account_\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        )\\n    {\\n        _debtInUsd = debtOf(account_);\\n        (_depositInUsd, _issuableLimitInUsd) = depositOf(account_);\\n        _isHealthy = _debtInUsd <= _issuableLimitInUsd;\\n        _issuableInUsd = _debtInUsd < _issuableLimitInUsd ? _issuableLimitInUsd - _debtInUsd : 0;\\n    }\\n\\n    /**\\n     * @notice Get account's total collateral deposited by querying latest prices from oracles\\n     * @param account_ The account to check\\n     * @return _depositInUsd The total deposit value in USD among all collaterals\\n     * @return _issuableLimitInUsd The max value in USD that can be used to issue synthetic tokens\\n     */\\n    function depositOf(\\n        address account_\\n    ) public view override returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd) {\\n        IMasterOracle _masterOracle = masterOracle();\\n        uint256 _length = depositTokensOfAccount.length(account_);\\n        for (uint256 i; i < _length; ++i) {\\n            IDepositToken _depositToken = IDepositToken(depositTokensOfAccount.at(account_, i));\\n            uint256 _amountInUsd = _masterOracle.quoteTokenToUsd(\\n                address(_depositToken.underlying()),\\n                _depositToken.balanceOf(account_)\\n            );\\n            _depositInUsd += _amountInUsd;\\n            _issuableLimitInUsd += _amountInUsd.wadMul(_depositToken.collateralFactor());\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc Pauseable\\n     */\\n    function everythingStopped() public view override(IPauseable, Pauseable) returns (bool) {\\n        return super.everythingStopped() || poolRegistry.everythingStopped();\\n    }\\n\\n    /**\\n     * @notice Returns fee collector address\\n     */\\n    function feeCollector() external view override returns (address) {\\n        return poolRegistry.feeCollector();\\n    }\\n\\n    /**\\n     * @notice Get all debt tokens\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getDebtTokens() external view override returns (address[] memory) {\\n        return debtTokens.values();\\n    }\\n\\n    /**\\n     * @notice Get all debt tokens\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getDebtTokensOfAccount(address account_) external view override returns (address[] memory) {\\n        return debtTokensOfAccount.values(account_);\\n    }\\n\\n    /**\\n     * @notice Get all deposit tokens\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getDepositTokens() external view override returns (address[] memory) {\\n        return depositTokens.values();\\n    }\\n\\n    /**\\n     * @notice Get deposit tokens of an account\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getDepositTokensOfAccount(address account_) external view override returns (address[] memory) {\\n        return depositTokensOfAccount.values(account_);\\n    }\\n\\n    /**\\n     * @notice Get all rewards distributors\\n     */\\n    function getRewardsDistributors() external view override returns (address[] memory) {\\n        return rewardsDistributors.values();\\n    }\\n\\n    /**\\n     * @notice Check if token is part of the debt offerings\\n     * @param debtToken_ Asset to check\\n     * @return true if exist\\n     */\\n    function doesDebtTokenExist(IDebtToken debtToken_) public view override returns (bool) {\\n        return debtTokens.contains(address(debtToken_));\\n    }\\n\\n    /**\\n     * @notice Check if collateral is supported\\n     * @param depositToken_ Asset to check\\n     * @return true if exist\\n     */\\n    function doesDepositTokenExist(IDepositToken depositToken_) public view override returns (bool) {\\n        return depositTokens.contains(address(depositToken_));\\n    }\\n\\n    /**\\n     * @notice Check if token is part of the synthetic offerings\\n     * @param syntheticToken_ Asset to check\\n     * @return true if exist\\n     */\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) public view override returns (bool) {\\n        return address(debtTokenOf[syntheticToken_]) != address(0);\\n    }\\n\\n    /**\\n     * @notice Quote synth  `_amountToRepay` in order to seize `totalToSeized_`\\n     * @param syntheticToken_ Synth for repayment\\n     * @param totalToSeize_ Collateral total amount to size\\n     * @param depositToken_ Collateral's deposit token\\n     * @return _amountToRepay Synth amount to burn\\n     * @return _toLiquidator Seized amount to the liquidator\\n     * @return _fee The fee amount to collect\\n     */\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeize_,\\n        IDepositToken depositToken_\\n    ) public view override returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee) {\\n        (uint128 _liquidatorIncentive, uint128 _protocolFee) = feeProvider.liquidationFees();\\n        uint256 _totalFees = _protocolFee + _liquidatorIncentive;\\n        uint256 _repayAmountInCollateral = totalToSeize_;\\n\\n        if (_totalFees > 0) {\\n            _repayAmountInCollateral = _repayAmountInCollateral.wadDiv(1e18 + _totalFees);\\n        }\\n\\n        _amountToRepay = masterOracle().quote(\\n            address(depositToken_.underlying()),\\n            address(syntheticToken_),\\n            _repayAmountInCollateral\\n        );\\n\\n        if (_protocolFee > 0) {\\n            _fee = _repayAmountInCollateral.wadMul(_protocolFee);\\n        }\\n\\n        if (_liquidatorIncentive > 0) {\\n            _toLiquidator = _repayAmountInCollateral.wadMul(1e18 + _liquidatorIncentive);\\n        }\\n    }\\n\\n    /**\\n     * @notice Quote max allowed synth to repay\\n     * @dev I.e. Considers the min amount between collateral's balance and `maxLiquidable` param\\n     * @param syntheticToken_ Synth for repayment\\n     * @param account_ The account to liquidate\\n     * @param depositToken_ Collateral's deposit token\\n     * @return _maxAmountToRepay Synth amount to burn\\n     */\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view override returns (uint256 _maxAmountToRepay) {\\n        (bool _isHealthy, , , , ) = debtPositionOf(account_);\\n        if (_isHealthy) {\\n            return 0;\\n        }\\n\\n        (uint256 _amountToRepay, , ) = quoteLiquidateIn(\\n            syntheticToken_,\\n            depositToken_.balanceOf(account_),\\n            depositToken_\\n        );\\n\\n        _maxAmountToRepay = debtTokenOf[syntheticToken_].balanceOf(account_).wadMul(maxLiquidable);\\n\\n        if (_amountToRepay < _maxAmountToRepay) {\\n            _maxAmountToRepay = _amountToRepay;\\n        }\\n    }\\n\\n    /**\\n     * @notice Quote collateral  `totalToSeized_` by repaying `amountToRepay_`\\n     * @param syntheticToken_ Synth for repayment\\n     * @param amountToRepay_ Synth amount to burn\\n     * @param depositToken_ Collateral's deposit token\\n     * @return _totalToSeize Collateral total amount to size\\n     * @return _toLiquidator Seized amount to the liquidator\\n     * @return _fee The fee amount to collect\\n     */\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) public view override returns (uint256 _totalToSeize, uint256 _toLiquidator, uint256 _fee) {\\n        _toLiquidator = masterOracle().quote(\\n            address(syntheticToken_),\\n            address(depositToken_.underlying()),\\n            amountToRepay_\\n        );\\n\\n        (uint128 _liquidatorIncentive, uint128 _protocolFee) = feeProvider.liquidationFees();\\n\\n        if (_protocolFee > 0) {\\n            _fee = _toLiquidator.wadMul(_protocolFee);\\n        }\\n        if (_liquidatorIncentive > 0) {\\n            _toLiquidator += _toLiquidator.wadMul(_liquidatorIncentive);\\n        }\\n\\n        _totalToSeize = _fee + _toLiquidator;\\n    }\\n\\n    /**\\n     * @notice Quote `_amountIn` to get `amountOut_`\\n     * @param syntheticTokenIn_ Synth in\\n     * @param syntheticTokenOut_ Synth out\\n     * @param amountOut_ Amount out\\n     * @return _amountIn Amount in\\n     * @return _fee Fee to charge in `syntheticTokenOut_`\\n     */\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view override returns (uint256 _amountIn, uint256 _fee) {\\n        uint256 _swapFee = feeProvider.swapFeeFor(msg.sender);\\n        if (_swapFee > 0) {\\n            amountOut_ = amountOut_.wadDiv(1e18 - _swapFee);\\n            _fee = amountOut_.wadMul(_swapFee);\\n        }\\n\\n        _amountIn = poolRegistry.masterOracle().quote(\\n            address(syntheticTokenOut_),\\n            address(syntheticTokenIn_),\\n            amountOut_\\n        );\\n    }\\n\\n    /**\\n     * @notice Quote `amountOut_` get from `amountIn_`\\n     * @param syntheticTokenIn_ Synth in\\n     * @param syntheticTokenOut_ Synth out\\n     * @param amountIn_ Amount in\\n     * @return _amountOut Amount out\\n     * @return _fee Fee to charge in `syntheticTokenOut_`\\n     */\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) public view override returns (uint256 _amountOut, uint256 _fee) {\\n        _amountOut = poolRegistry.masterOracle().quote(\\n            address(syntheticTokenIn_),\\n            address(syntheticTokenOut_),\\n            amountIn_\\n        );\\n\\n        uint256 _swapFee = feeProvider.swapFeeFor(msg.sender);\\n        if (_swapFee > 0) {\\n            _fee = _amountOut.wadMul(_swapFee);\\n            _amountOut -= _fee;\\n        }\\n    }\\n\\n    /**\\n     * @notice Leverage yield position\\n     * @param tokenIn_ The token to transfer\\n     * @param depositToken_ The collateral to deposit\\n     * @param syntheticToken_ The msAsset to mint\\n     * @param amountIn_ The amount to deposit\\n     * @param leverage_ The leverage X param (e.g. 1.5e18 for 1.5X)\\n     * @param depositAmountMin_ The min final deposit amount (slippage)\\n     */\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    )\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfDepositTokenExists(depositToken_)\\n        onlyIfSyntheticTokenExists(syntheticToken_)\\n        returns (uint256 _deposited, uint256 _issued)\\n    {\\n        if (leverage_ <= 1e18) revert LeverageTooLow();\\n        if (leverage_ > uint256(1e18).wadDiv(1e18 - depositToken_.collateralFactor())) revert LeverageTooHigh();\\n        ISwapper _swapper = swapper;\\n\\n        // 1. transfer collateral\\n        IERC20 _collateral = depositToken_.underlying();\\n        if (address(tokenIn_) == address(0)) tokenIn_ = _collateral;\\n        tokenIn_.safeTransferFrom(msg.sender, address(this), amountIn_);\\n        if (tokenIn_ != _collateral) {\\n            amountIn_ = _swap(_swapper, tokenIn_, _collateral, amountIn_, 0);\\n        }\\n\\n        // 2. mint synth\\n        uint256 _debtAmount = masterOracle().quote(\\n            address(_collateral),\\n            address(syntheticToken_),\\n            (leverage_ - 1e18).wadMul(amountIn_)\\n        );\\n        (_issued, ) = debtTokenOf[syntheticToken_].flashIssue(msg.sender, _debtAmount);\\n\\n        // 3. swap synth for collateral\\n        uint256 _depositAmount = amountIn_ + _swap(_swapper, syntheticToken_, _collateral, _issued, 0);\\n        if (_depositAmount < depositAmountMin_) revert LeverageSlippageTooHigh();\\n\\n        // 4. deposit collateral\\n        _collateral.safeApprove(address(depositToken_), 0);\\n        _collateral.safeApprove(address(depositToken_), _depositAmount);\\n        (_deposited, ) = depositToken_.deposit(_depositAmount, msg.sender);\\n\\n        // 5. check the health of the outcome position\\n        (bool _isHealthy, , , , ) = debtPositionOf(msg.sender);\\n        if (!_isHealthy) revert PositionIsNotHealthy();\\n    }\\n\\n    /**\\n     * @notice Burn synthetic token, unlock deposit token and send liquidator incentive\\n     * @param syntheticToken_ The msAsset to use for repayment\\n     * @param account_ The account with an unhealthy position\\n     * @param amountToRepay_ The amount to repay in synthetic token\\n     * @param depositToken_ The collateral to seize from\\n     * @return _totalSeized Total deposit amount seized from the liquidated account\\n     * @return _toLiquidator Share of `_totalSeized` sent to the liquidator\\n     * @return _fee Share of `_totalSeized` collected as fee\\n     */\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    )\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfSyntheticTokenExists(syntheticToken_)\\n        onlyIfDepositTokenExists(depositToken_)\\n        returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee)\\n    {\\n        if (amountToRepay_ == 0) revert AmountIsZero();\\n        if (msg.sender == account_) revert CanNotLiquidateOwnPosition();\\n\\n        IDebtToken _debtToken = debtTokenOf[syntheticToken_];\\n        _debtToken.accrueInterest();\\n\\n        (bool _isHealthy, , , , ) = debtPositionOf(account_);\\n\\n        if (_isHealthy) {\\n            revert PositionIsHealthy();\\n        }\\n\\n        uint256 _debtTokenBalance = _debtToken.balanceOf(account_);\\n\\n        if (amountToRepay_.wadDiv(_debtTokenBalance) > maxLiquidable) {\\n            revert AmountGreaterThanMaxLiquidable();\\n        }\\n\\n        IMasterOracle _masterOracle = masterOracle();\\n\\n        if (debtFloorInUsd > 0) {\\n            uint256 _newDebtInUsd = _masterOracle.quoteTokenToUsd(\\n                address(syntheticToken_),\\n                _debtTokenBalance - amountToRepay_\\n            );\\n            if (_newDebtInUsd > 0 && _newDebtInUsd < debtFloorInUsd) {\\n                revert RemainingDebtIsLowerThanTheFloor();\\n            }\\n        }\\n\\n        (_totalSeized, _toLiquidator, _fee) = quoteLiquidateOut(syntheticToken_, amountToRepay_, depositToken_);\\n\\n        if (_totalSeized > depositToken_.balanceOf(account_)) {\\n            revert AmountIsTooHigh();\\n        }\\n\\n        syntheticToken_.burn(msg.sender, amountToRepay_);\\n        _debtToken.burn(account_, amountToRepay_);\\n        depositToken_.seize(account_, msg.sender, _toLiquidator);\\n\\n        if (_fee > 0) {\\n            depositToken_.seize(account_, poolRegistry.feeCollector(), _fee);\\n        }\\n\\n        emit PositionLiquidated(msg.sender, account_, syntheticToken_, amountToRepay_, _totalSeized, _fee);\\n    }\\n\\n    /**\\n     * @notice Get MasterOracle contract\\n     */\\n    function masterOracle() public view override returns (IMasterOracle) {\\n        return poolRegistry.masterOracle();\\n    }\\n\\n    /**\\n     * @inheritdoc Pauseable\\n     */\\n    function paused() public view override(IPauseable, Pauseable) returns (bool) {\\n        return super.paused() || poolRegistry.paused();\\n    }\\n\\n    /**\\n     * @notice Remove a debt token from the per-account list\\n     * @dev This function is called from `DebtToken` when user's balance changes to `0`\\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\\n     * @param account_ The account address\\n     */\\n    function removeFromDebtTokensOfAccount(address account_) external onlyIfMsgSenderIsDebtToken {\\n        if (!debtTokensOfAccount.remove(account_, msg.sender)) revert DebtTokenDoesNotExist();\\n    }\\n\\n    /**\\n     * @notice Remove a deposit token from the per-account list\\n     * @dev This function is called from `DepositToken` when user's balance changes to `0`\\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\\n     * @param account_ The account address\\n     */\\n    function removeFromDepositTokensOfAccount(address account_) external onlyIfMsgSenderIsDepositToken {\\n        if (!depositTokensOfAccount.remove(account_, msg.sender)) revert DepositTokenDoesNotExist();\\n    }\\n\\n    /**\\n     * @notice Swap synthetic tokens\\n     * @param syntheticTokenIn_ Synthetic token to sell\\n     * @param syntheticTokenOut_ Synthetic token to buy\\n     * @param amountIn_ Amount to swap\\n     */\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfSyntheticTokenExists(syntheticTokenIn_)\\n        onlyIfSyntheticTokenExists(syntheticTokenOut_)\\n        returns (uint256 _amountOut, uint256 _fee)\\n    {\\n        if (!isSwapActive) revert SwapFeatureIsInactive();\\n        if (amountIn_ == 0 || amountIn_ > syntheticTokenIn_.balanceOf(msg.sender)) revert AmountInIsInvalid();\\n\\n        syntheticTokenIn_.burn(msg.sender, amountIn_);\\n\\n        (_amountOut, _fee) = quoteSwapOut(syntheticTokenIn_, syntheticTokenOut_, amountIn_);\\n\\n        if (_fee > 0) {\\n            syntheticTokenOut_.mint(poolRegistry.feeCollector(), _fee);\\n        }\\n\\n        syntheticTokenOut_.mint(msg.sender, _amountOut);\\n\\n        emit SyntheticTokenSwapped(msg.sender, syntheticTokenIn_, syntheticTokenOut_, amountIn_, _amountOut, _fee);\\n    }\\n\\n    /**\\n     * @notice Swap assets using Swapper contract\\n     * @param swapper_ The Swapper contract\\n     * @param tokenIn_ The token to swap from\\n     * @param tokenOut_ The token to swap to\\n     * @param amountIn_ The amount in\\n     * @param amountOutMin_ The minimum amount out (slippage check)\\n     * @return _amountOut The actual amount out\\n     */\\n    function _swap(\\n        ISwapper swapper_,\\n        IERC20 tokenIn_,\\n        IERC20 tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_\\n    ) private returns (uint256 _amountOut) {\\n        tokenIn_.safeApprove(address(swapper_), 0);\\n        tokenIn_.safeApprove(address(swapper_), amountIn_);\\n        uint256 _tokenOutBefore = tokenOut_.balanceOf(address(this));\\n        swapper_.swapExactInput(address(tokenIn_), address(tokenOut_), amountIn_, amountOutMin_, address(this));\\n        return tokenOut_.balanceOf(address(this)) - _tokenOutBefore;\\n    }\\n\\n    /**\\n     * @notice Add debt token to offerings\\n     * @dev Must keep `debtTokenOf` mapping updated\\n     */\\n    function addDebtToken(IDebtToken debtToken_) external onlyGovernor {\\n        if (address(debtToken_) == address(0)) revert AddressIsNull();\\n        ISyntheticToken _syntheticToken = debtToken_.syntheticToken();\\n        if (address(_syntheticToken) == address(0)) revert SyntheticIsNull();\\n        if (address(debtTokenOf[_syntheticToken]) != address(0)) revert SyntheticIsInUse();\\n\\n        if (!debtTokens.add(address(debtToken_))) revert DebtTokenAlreadyExists();\\n\\n        debtTokenOf[_syntheticToken] = debtToken_;\\n\\n        emit DebtTokenAdded(debtToken_);\\n    }\\n\\n    /**\\n     * @notice Add deposit token (i.e. collateral) to Synth\\n     */\\n    function addDepositToken(address depositToken_) external onlyGovernor {\\n        if (depositToken_ == address(0)) revert AddressIsNull();\\n        IERC20 _underlying = IDepositToken(depositToken_).underlying();\\n        if (address(depositTokenOf[_underlying]) != address(0)) revert UnderlyingAssetInUse();\\n        // Note: Fee collector collects deposit tokens as fee\\n        if (depositTokens.length() >= MAX_TOKENS_PER_USER) revert ReachedMaxDepositTokens();\\n\\n        if (!depositTokens.add(depositToken_)) revert DepositTokenAlreadyExists();\\n\\n        depositTokenOf[_underlying] = IDepositToken(depositToken_);\\n\\n        emit DepositTokenAdded(depositToken_);\\n    }\\n\\n    /**\\n     * @notice Add a RewardsDistributor contract\\n     */\\n    function addRewardsDistributor(IRewardsDistributor distributor_) external onlyGovernor {\\n        if (address(distributor_) == address(0)) revert AddressIsNull();\\n        if (!rewardsDistributors.add(address(distributor_))) revert RewardDistributorAlreadyExists();\\n        emit RewardsDistributorAdded(distributor_);\\n    }\\n\\n    /**\\n     * @notice Remove debt token from offerings\\n     * @dev Must keep `debtTokenOf` mapping updated\\n     */\\n    function removeDebtToken(IDebtToken debtToken_) external onlyGovernor {\\n        if (debtToken_.totalSupply() > 0) revert TotalSupplyIsNotZero();\\n        if (!debtTokens.remove(address(debtToken_))) revert DebtTokenDoesNotExist();\\n\\n        delete debtTokenOf[debtToken_.syntheticToken()];\\n\\n        emit DebtTokenRemoved(debtToken_);\\n    }\\n\\n    /**\\n     * @notice Remove deposit token (i.e. collateral) from Synth\\n     */\\n    function removeDepositToken(IDepositToken depositToken_) external onlyGovernor {\\n        if (depositToken_.totalSupply() > 0) revert TotalSupplyIsNotZero();\\n\\n        if (!depositTokens.remove(address(depositToken_))) revert DepositTokenDoesNotExist();\\n        delete depositTokenOf[depositToken_.underlying()];\\n\\n        emit DepositTokenRemoved(depositToken_);\\n    }\\n\\n    /**\\n     * @notice Remove a RewardsDistributor contract\\n     */\\n    function removeRewardsDistributor(IRewardsDistributor distributor_) external onlyGovernor {\\n        if (address(distributor_) == address(0)) revert AddressIsNull();\\n        if (!rewardsDistributors.remove(address(distributor_))) revert RewardDistributorDoesNotExist();\\n\\n        emit RewardsDistributorRemoved(distributor_);\\n    }\\n\\n    /**\\n     * @notice Turn swap on/off\\n     */\\n    function toggleIsSwapActive() external onlyGovernor {\\n        bool _newIsSwapActive = !isSwapActive;\\n        emit SwapActiveUpdated(_newIsSwapActive);\\n        isSwapActive = _newIsSwapActive;\\n    }\\n\\n    /**\\n     * @notice Update debt floor\\n     */\\n    function updateDebtFloor(uint256 newDebtFloorInUsd_) external onlyGovernor {\\n        uint256 _currentDebtFloorInUsd = debtFloorInUsd;\\n        if (newDebtFloorInUsd_ == _currentDebtFloorInUsd) revert NewValueIsSameAsCurrent();\\n        emit DebtFloorUpdated(_currentDebtFloorInUsd, newDebtFloorInUsd_);\\n        debtFloorInUsd = newDebtFloorInUsd_;\\n    }\\n\\n    /**\\n     * @notice Update maxLiquidable (liquidation cap)\\n     */\\n    function updateMaxLiquidable(uint256 newMaxLiquidable_) external onlyGovernor {\\n        if (newMaxLiquidable_ > 1e18) revert MaxLiquidableTooHigh();\\n        uint256 _currentMaxLiquidable = maxLiquidable;\\n        if (newMaxLiquidable_ == _currentMaxLiquidable) revert NewValueIsSameAsCurrent();\\n        emit MaxLiquidableUpdated(_currentMaxLiquidable, newMaxLiquidable_);\\n        maxLiquidable = newMaxLiquidable_;\\n    }\\n\\n    /**\\n     * @notice Update treasury contract - will migrate funds to the new contract\\n     */\\n    function updateTreasury(ITreasury newTreasury_) external onlyGovernor {\\n        if (address(newTreasury_) == address(0)) revert AddressIsNull();\\n        ITreasury _currentTreasury = treasury;\\n        if (newTreasury_ == _currentTreasury) revert NewValueIsSameAsCurrent();\\n\\n        if (address(_currentTreasury) != address(0)) {\\n            _currentTreasury.migrateTo(address(newTreasury_));\\n        }\\n\\n        emit TreasuryUpdated(_currentTreasury, newTreasury_);\\n        treasury = newTreasury_;\\n    }\\n\\n    /**\\n     * @notice Update FeeProvider contract\\n     */\\n    function updateFeeProvider(IFeeProvider feeProvider_) external onlyGovernor {\\n        if (address(feeProvider_) == address(0)) revert AddressIsNull();\\n        IFeeProvider _current = feeProvider;\\n        if (feeProvider_ == _current) revert NewValueIsSameAsCurrent();\\n        emit FeeProviderUpdated(_current, feeProvider_);\\n        feeProvider = feeProvider_;\\n    }\\n\\n    /**\\n     * @notice Update swapper contract\\n     */\\n    function updateSwapper(ISwapper newSwapper_) external onlyGovernor {\\n        if (address(newSwapper_) == address(0)) revert AddressIsNull();\\n        ISwapper _currentSwapper = swapper;\\n        if (newSwapper_ == _currentSwapper) revert NewValueIsSameAsCurrent();\\n\\n        emit SwapperUpdated(_currentSwapper, newSwapper_);\\n        swapper = newSwapper_;\\n    }\\n}\\n\",\"keccak256\":\"0x72f8328ff9eaafc6e207cbdbafcb394c8050fa1b7164bc9762dfd74cc4bbedba\",\"license\":\"MIT\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/TokenHolder.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\n\\nerror SenderIsNotGovernor();\\nerror ProposedGovernorIsNull();\\nerror SenderIsNotTheProposedGovernor();\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, TokenHolder, Initializable {\\n    /**\\n     * @notice The governor\\n     * @dev By default the contract deployer is the initial governor\\n     */\\n    address public governor;\\n\\n    /**\\n     * @notice The proposed governor\\n     * @dev It will be empty (address(0)) if there isn't a proposed governor\\n     */\\n    address public proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    constructor() {\\n        governor = msg.sender;\\n        emit UpdatedGovernor(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal initializer {\\n        governor = msg.sender;\\n        emit UpdatedGovernor(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        if (governor != msg.sender) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    /// @inheritdoc TokenHolder\\n    // solhint-disable-next-line no-empty-blocks\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    /**\\n     * @notice Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * @dev Can only be called by the current owner.\\n     * @param proposedGovernor_ The new proposed governor\\n     */\\n    function transferGovernorship(address proposedGovernor_) external onlyGovernor {\\n        if (proposedGovernor_ == address(0)) revert ProposedGovernorIsNull();\\n        proposedGovernor = proposedGovernor_;\\n    }\\n\\n    /**\\n     * @notice Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        address _proposedGovernor = proposedGovernor;\\n        if (msg.sender != _proposedGovernor) revert SenderIsNotTheProposedGovernor();\\n        emit UpdatedGovernor(governor, _proposedGovernor);\\n        governor = _proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x129190e9d6ac9258c15ab52e1cc56b265bb4420af8d666609882bff7870a8eb8\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xc790f8419ee2c68721d6203ed1b5f81e89eb7e1dca19be3a9f54cb5de44491f1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address borrower_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\",\"keccak256\":\"0xfeaa19f62620f67e7189e863f96de757c9a17b1b737acedeffd98aaf1df1a0e1\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralFactor() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function flashWithdraw(address account_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\\n\\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\\n\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n}\\n\",\"keccak256\":\"0xf6fa0d670b28445a461bb93d4bbbe8a6101289dc418c61475d52f8693280d255\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3b132b42090c167b2c0aef6d78d833c669c43b9e55593a7a21a96ed5d3082700\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/IPauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa768de9fadad05a8104cb407ae6243354e70ffd6e1a50c3e0bb0a6a1dc49d32a\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IFeeProvider.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function feeProvider() external view returns (IFeeProvider);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    ) external returns (uint256 _withdrawn, uint256 _repaid);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\\n\\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(\\n        address account_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    ) external returns (uint256 _deposited, uint256 _issued);\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeized_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _maxAmountToRepay);\\n\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view returns (uint256 _amountIn, uint256 _fee);\\n\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _fee);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _fee);\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function isSwapActive() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb6ccb04bbde8597025b2243b7734de51466bc5f6a6c5229484f20b881f4915c8\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateMasterOracle(IMasterOracle newOracle_) external;\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function updateNativeTokenGateway(address newGateway_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd4f5f60c3943b5fa9ffb34ef1909d5a8ef4ca62fd35ea0567cd0402c15d6ee2a\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external;\\n\\n    function claimable(address account_) external view returns (uint256 _claimable);\\n\\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\\n\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\\n\\n    function tokens(uint256) external view returns (IERC20);\\n\\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\\n\\n    function accountIndexOf(IERC20, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4f527eeae61b6a5bff7d3b48037234ef718ae7f71dc452e8cab3b60581f0d810\",\"license\":\"MIT\"},\"contracts/interfaces/ISyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2bb34cd1201403e756bf1e49ab9318024e3d6e26b61c114721f9d4da57c0fa3d\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\",\"keccak256\":\"0x9ee0a41cfe7b5bd2ec256441fc7b2ae6407921ed28a65daeaa476cfc9df73c1b\",\"license\":\"MIT\"},\"contracts/interfaces/external/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x2f080adc5880151dc4446ef43b54abab8e3711c5f2e526917ef39a05e3c16a00\",\"license\":\"MIT\"},\"contracts/interfaces/external/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x75f04b225d0c310be7e0a09ee4c1aa6eeeb8d94e02fc0e4160a9597ce2d8d446\",\"license\":\"MIT\"},\"contracts/lib/MappedEnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev EnumerableSet fork to support `address => address[]` mapping\\n * @dev Forked from OZ 4.3.2\\n */\\nlibrary MappedEnumerableSet {\\n    struct Set {\\n        // Storage of set values\\n        address[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(address => uint256) _indexes;\\n    }\\n\\n    struct AddressSet {\\n        mapping(address => Set) _ofAddress;\\n    }\\n\\n    function _add(AddressSet storage set, address _key, address value) private returns (bool) {\\n        if (!_contains(set, _key, value)) {\\n            set._ofAddress[_key]._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._ofAddress[_key]._indexes[value] = set._ofAddress[_key]._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(AddressSet storage set, address _key, address value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._ofAddress[_key]._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._ofAddress[_key]._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                address lastvalue = set._ofAddress[_key]._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._ofAddress[_key]._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._ofAddress[_key]._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._ofAddress[_key]._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._ofAddress[_key]._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _contains(AddressSet storage set, address _key, address value) private view returns (bool) {\\n        return set._ofAddress[_key]._indexes[value] != 0;\\n    }\\n\\n    function _length(AddressSet storage set, address _key) private view returns (uint256) {\\n        return set._ofAddress[_key]._values.length;\\n    }\\n\\n    function _at(AddressSet storage set, address _key, uint256 index) private view returns (address) {\\n        return set._ofAddress[_key]._values[index];\\n    }\\n\\n    function _values(AddressSet storage set, address _key) private view returns (address[] memory) {\\n        return set._ofAddress[_key]._values;\\n    }\\n\\n    function add(AddressSet storage set, address key, address value) internal returns (bool) {\\n        return _add(set, key, value);\\n    }\\n\\n    function remove(AddressSet storage set, address key, address value) internal returns (bool) {\\n        return _remove(set, key, value);\\n    }\\n\\n    function contains(AddressSet storage set, address key, address value) internal view returns (bool) {\\n        return _contains(set, key, value);\\n    }\\n\\n    function length(AddressSet storage set, address key) internal view returns (uint256) {\\n        return _length(set, key);\\n    }\\n\\n    function at(AddressSet storage set, address key, uint256 index) internal view returns (address) {\\n        return _at(set, key, index);\\n    }\\n\\n    function values(AddressSet storage set, address key) internal view returns (address[] memory) {\\n        address[] memory store = _values(set, key);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x73a56244f6f1284bbafb7de23a3422fea10556b4bf54ee768c4768c23fdc03fe\",\"license\":\"MIT\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xd971282b7b02c2121f64a13df8b40f427dbda36a770d0d391a3102947a743071\",\"license\":\"MIT\"},\"contracts/storage/PoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../lib/MappedEnumerableSet.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\n\\n// solhint-disable var-name-mixedcase, max-states-count\\nabstract contract PoolStorageV1 is IPool {\\n    /**\\n     * @notice The debt floor (in USD) for each synthetic token\\n     * This parameters is used to keep incentive for liquidators (i.e. cover gas and provide enough profit)\\n     */\\n    uint256 public override debtFloorInUsd;\\n\\n    uint256 private depositFee__DEPRECATED;\\n\\n    uint256 private issueFee__DEPRECATED;\\n\\n    uint256 private withdrawFee__DEPRECATED;\\n\\n    uint256 private repayFee__DEPRECATED;\\n\\n    uint256 private swapFee__DEPRECATED;\\n\\n    uint256 private liquidationFees__DEPRECATED;\\n\\n    /**\\n     * @notice The max percent of the debt allowed to liquidate\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public override maxLiquidable;\\n\\n    /**\\n     * @notice PoolRegistry\\n     */\\n    IPoolRegistry public override poolRegistry;\\n\\n    /**\\n     * @notice Swap feature on/off flag\\n     */\\n    bool public override isSwapActive;\\n\\n    /**\\n     * @notice Treasury contract\\n     */\\n    ITreasury public override treasury;\\n\\n    /**\\n     * @notice Represents collateral's deposits\\n     */\\n    EnumerableSet.AddressSet internal depositTokens;\\n\\n    /**\\n     * @notice Get the deposit token's address from given underlying asset\\n     */\\n    mapping(IERC20 => IDepositToken) public override depositTokenOf;\\n\\n    /**\\n     * @notice Available debt tokens\\n     */\\n    EnumerableSet.AddressSet internal debtTokens;\\n\\n    /**\\n     * @notice Per-account deposit tokens (i.e. tokens that user has balance > 0)\\n     */\\n    MappedEnumerableSet.AddressSet internal depositTokensOfAccount;\\n\\n    /**\\n     * @notice Per-account debt tokens (i.e. tokens that user has balance > 0)\\n     */\\n    MappedEnumerableSet.AddressSet internal debtTokensOfAccount;\\n\\n    /**\\n     * @notice RewardsDistributor contracts\\n     */\\n    IRewardsDistributor[] internal rewardsDistributors__DEPRECATED;\\n\\n    /**\\n     * @notice Get the debt token's address from given synthetic asset\\n     */\\n    mapping(ISyntheticToken => IDebtToken) public override debtTokenOf;\\n}\\n\\nabstract contract PoolStorageV2 is PoolStorageV1 {\\n    /**\\n     * @notice Swapper contract\\n     */\\n    ISwapper public swapper;\\n\\n    /**\\n     * @notice FeeProvider contract\\n     */\\n    IFeeProvider public override feeProvider;\\n\\n    /**\\n     * @notice RewardsDistributor contracts\\n     */\\n    EnumerableSet.AddressSet internal rewardsDistributors;\\n}\\n\",\"keccak256\":\"0x8ab5cecdb5c7b4aa9abad7603442c877ce85f988d3c30e5373b964dbabf4b5dc\",\"license\":\"MIT\"},\"contracts/utils/Pauseable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IPauseable.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\nerror IsPaused();\\nerror IsShutdown();\\nerror IsNotPaused();\\nerror IsNotShutdown();\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n */\\nabstract contract Pauseable is IPauseable, Governable {\\n    /// @notice Emitted when contract is turned on\\n    event Open(address indexed caller);\\n\\n    /// @notice Emitted when contract is paused\\n    event Paused(address indexed caller);\\n\\n    /// @notice Emitted when contract is shuted down\\n    event Shutdown(address indexed caller);\\n\\n    /// @notice Emitted when contract is unpaused\\n    event Unpaused(address indexed caller);\\n\\n    bool private _paused;\\n    bool private _everythingStopped;\\n\\n    /**\\n     * @dev Throws if contract is paused\\n     */\\n    modifier whenNotPaused() {\\n        if (paused()) revert IsPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is shutdown\\n     */\\n    modifier whenNotShutdown() {\\n        if (everythingStopped()) revert IsShutdown();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is not paused\\n     */\\n    modifier whenPaused() {\\n        if (!paused()) revert IsNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is not shutdown\\n     */\\n    modifier whenShutdown() {\\n        if (!everythingStopped()) revert IsNotShutdown();\\n        _;\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Pauseable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Pauseable_init() internal initializer {\\n        __Governable_init();\\n    }\\n\\n    /**\\n     * @notice Return `true` if contract is shutdown\\n     */\\n    function everythingStopped() public view virtual returns (bool) {\\n        return _everythingStopped;\\n    }\\n\\n    /**\\n     * @notice Return `true` if contract is paused\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Open contract operations, if contract is in shutdown state\\n     */\\n    function open() external virtual whenShutdown onlyGovernor {\\n        _everythingStopped = false;\\n        emit Open(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Suspend deposit feature, if contract is not paused.\\n     */\\n    function pause() external virtual whenNotPaused onlyGovernor {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Suspend all features (issue, repay, deposit, withdraw, liquidate and swap), if not already shutdown.\\n     */\\n    function shutdown() external virtual whenNotShutdown onlyGovernor {\\n        _everythingStopped = true;\\n        _paused = true;\\n        emit Shutdown(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Unpause contract operations, allow only if contract is paused and not shutdown.\\n     */\\n    function unpause() external virtual whenPaused whenNotShutdown onlyGovernor {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x0d31979ff6e3a60270bc1668edf01848349cd33202cd9d10df74207448d8bea5\",\"license\":\"MIT\"},\"contracts/utils/TokenHolder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nerror FallbackIsNotAllowed();\\nerror ReceiveIsNotAllowed();\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert FallbackIsNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert ReceiveIsNotAllowed();\\n    }\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param token_ The token to transfer\\n     * @param to_ The recipient of the transfer\\n     * @param amount_ The amount to send\\n     */\\n    function sweep(IERC20 token_, address to_, uint256 amount_) external {\\n        _requireCanSweep();\\n\\n        if (address(token_) == address(0)) {\\n            Address.sendValue(payable(to_), amount_);\\n        } else {\\n            token_.safeTransfer(to_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     * @dev Usually requires the owner or governor as the caller\\n     */\\n    function _requireCanSweep() internal view virtual;\\n}\\n\",\"keccak256\":\"0x50e56ed45d496b188d90494d08122fe9621d9e6c8f655679ef334447801ea50d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600280546001600160a01b031916339081179091556040516000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a3615442806100606000396000f3fe6080604052600436106103a65760003560e01c806379e40cba116101e7578063d283e75f1161010d578063f0c80d3b116100a0578063fb01600d1161006f578063fb01600d14610b41578063fc0e74d114610b56578063fcfff16f14610b6b578063ffa1ad7414610b80576103c4565b8063f0c80d3b14610ad6578063f3b27bc314610af6578063f609280914610b0b578063f8977b8414610b21576103c4565b8063df791e50116100dc578063df791e5014610a6b578063e35bff9614610a8b578063eaada38214610aac578063ecf3a3f914610ac1576103c4565b8063d283e75f146109c1578063d3033c39146109e1578063dbe466b114610a01578063dde3ab9514610a21576103c4565b80639ab620dd11610185578063c415b95c11610154578063c415b95c1461094c578063c4d66de814610961578063c4d68a1a14610981578063d176e05f146109a1576103c4565b80639ab620dd146108c15780639f8f0fa8146108d6578063afcff50f1461090c578063b6aa515b1461092c576103c4565b80638456cb59116101c15780638456cb591461083657806387cddc861461084b5780638a11a37014610881578063984a68b5146108a1576103c4565b806379e40cba146107d65780637d355163146107f65780637f51bb1f14610816576103c4565b80633f5fc131116102cc57806361d027b31161026a5780636b4f41af116102395780636b4f41af146107565780636c3393671461077657806375c6f8ec14610796578063770b69b4146107b6576103c4565b806361d027b3146106e157806362c067671461070157806363c56d421461072157806369c5dfd814610741576103c4565b80634d7e9a76116102a65780634d7e9a76146106775780634ff9b74a1461069757806356aaee2d146106ac5780635c975abb146106cc576103c4565b80633f5fc131146106175780634066fdea14610637578063450058f814610657576103c4565b80632b3297f911610344578063364fda0011610313578063364fda00146105875780633c2dc254146105a75780633de2f6b2146105e25780633f4ba83a14610602576103c4565b80632b3297f9146105015780632bcb849c146105215780632dd6adb5146105415780633605b51b14610565576103c4565b80631ccfbc4f116103805780631ccfbc4f1461046c57806323e3fbd5146104a1578063275038d0146104c15780632adcb0c6146104e1576103c4565b80630c340a24146103dd5780631a0dd00b1461041a5780631a4660ce1461044a576103c4565b366103c457604051636436c22d60e11b815260040160405180910390fd5b60405163a0152e6360e01b815260040160405180910390fd5b3480156103e957600080fd5b506002546103fd906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561042657600080fd5b5061043a610435366004614ec8565b610bbe565b6040519015158152602001610411565b34801561045657600080fd5b5061046a610465366004614ee5565b610bde565b005b34801561047857600080fd5b5061048c610487366004614efe565b610c6c565b60408051928352602083019190915201610411565b3480156104ad57600080fd5b5061048c6104bc366004614ec8565b610e2f565b3480156104cd57600080fd5b5061046a6104dc366004614ec8565b611080565b3480156104ed57600080fd5b5061048c6104fc366004614efe565b6110d2565b34801561050d57600080fd5b506017546103fd906001600160a01b031681565b34801561052d57600080fd5b5061046a61053c366004614ec8565b611282565b34801561054d57600080fd5b50610557600b5481565b604051908152602001610411565b34801561057157600080fd5b5061057a611368565b6040516104119190614f3f565b34801561059357600080fd5b5061048c6105a2366004614f8c565b611379565b3480156105b357600080fd5b506105c76105c2366004614fd2565b611767565b60408051938452602084019290925290820152606001610411565b3480156105ee57600080fd5b506105c76105fd366004615014565b61198c565b34801561060e57600080fd5b5061046a611fc5565b34801561062357600080fd5b5061046a610632366004614ec8565b612075565b34801561064357600080fd5b506018546103fd906001600160a01b031681565b34801561066357600080fd5b5061043a610672366004614ec8565b612109565b34801561068357600080fd5b5061048c610692366004615067565b61211c565b3480156106a357600080fd5b5061057a6125e4565b3480156106b857600080fd5b5061046a6106c7366004614ec8565b6125f0565b3480156106d857600080fd5b5061043a6126a1565b3480156106ed57600080fd5b50600d546103fd906001600160a01b031681565b34801561070d57600080fd5b5061046a61071c366004614efe565b61273d565b34801561072d57600080fd5b5061046a61073c366004614ec8565b612776565b34801561074d57600080fd5b50610557601e81565b34801561076257600080fd5b5061046a610771366004614ec8565b61282f565b34801561078257600080fd5b506105c7610791366004614fd2565b6129d5565b3480156107a257600080fd5b5061046a6107b1366004614ec8565b612bbf565b3480156107c257600080fd5b5061046a6107d1366004614ec8565b612c0e565b3480156107e257600080fd5b5061046a6107f1366004614ec8565b612c9e565b34801561080257600080fd5b5061057a610811366004614ec8565b612e48565b34801561082257600080fd5b5061046a610831366004614ec8565b612e55565b34801561084257600080fd5b5061046a612fa6565b34801561085757600080fd5b506103fd610866366004614ec8565b6010602052600090815260409020546001600160a01b031681565b34801561088d57600080fd5b506003546103fd906001600160a01b031681565b3480156108ad57600080fd5b506105576108bc3660046150cc565b613037565b3480156108cd57600080fd5b5061046a613192565b3480156108e257600080fd5b506103fd6108f1366004614ec8565b6016602052600090815260409020546001600160a01b031681565b34801561091857600080fd5b50600c546103fd906001600160a01b031681565b34801561093857600080fd5b5061046a610947366004614ec8565b61321e565b34801561095857600080fd5b506103fd613292565b34801561096d57600080fd5b5061046a61097c366004614ec8565b61330f565b34801561098d57600080fd5b5061046a61099c366004614ec8565b6133df565b3480156109ad57600080fd5b5061057a6109bc366004614ec8565b613593565b3480156109cd57600080fd5b506105576109dc366004614ec8565b6135a0565b3480156109ed57600080fd5b5061046a6109fc366004614ec8565b613763565b348015610a0d57600080fd5b5061046a610a1c366004614ec8565b61384c565b348015610a2d57600080fd5b50610a41610a3c366004614ec8565b613a00565b6040805195151586526020860194909452928401919091526060830152608082015260a001610411565b348015610a7757600080fd5b5061048c610a86366004614efe565b613a4a565b348015610a9757600080fd5b50600c5461043a90600160a01b900460ff1681565b348015610ab857600080fd5b506103fd613dd1565b348015610acd57600080fd5b5061043a613e16565b348015610ae257600080fd5b5061046a610af1366004614ee5565b613e7a565b348015610b0257600080fd5b5061046a613f31565b348015610b1757600080fd5b5061055760045481565b348015610b2d57600080fd5b5061043a610b3c366004614ec8565b613fc0565b348015610b4d57600080fd5b5061057a613fcd565b348015610b6257600080fd5b5061046a613fd9565b348015610b7757600080fd5b5061046a61406c565b348015610b8c57600080fd5b50610bb1604051806040016040528060058152602001640312e322e360dc1b81525081565b6040516104119190615138565b6001600160a01b0390811660009081526016602052604090205416151590565b6002546001600160a01b03163314610c0957604051634b98449160e11b815260040160405180910390fd5b60045481811415610c2d57604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f0662703672e57800b9439de3a419c9155283ad25ea7776c139c876bd8b93bb98910160405180910390a150600455565b60185460405163d2d6b5a360e01b8152336004820152600091829182916001600160a01b03169063d2d6b5a39060240160206040518083038186803b158015610cb457600080fd5b505afa158015610cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cec919061516b565b90508015610d1f57610d10610d0982670de0b6b3a764000061519a565b85906140f6565b9350610d1c848261412a565b91505b600c60009054906101000a90046001600160a01b03166001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6d57600080fd5b505afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906151b1565b6001600160a01b031663b64663848688876040518463ffffffff1660e01b8152600401610dd4939291906151ce565b60206040518083038186803b158015610dec57600080fd5b505afa158015610e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e24919061516b565b925050935093915050565b6000806000610e3c613dd1565b90506000610e4b601386614162565b905060005b81811015611078576000610e6660138884614180565b90506000846001600160a01b0316638d0dba00836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb257600080fd5b505afa158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea91906151b1565b6040516370a0823160e01b81526001600160a01b038c811660048301528616906370a082319060240160206040518083038186803b158015610f2b57600080fd5b505afa158015610f3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f63919061516b565b6040518363ffffffff1660e01b8152600401610f809291906151f2565b60206040518083038186803b158015610f9857600080fd5b505afa158015610fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd0919061516b565b9050610fdc818861520b565b9650611059826001600160a01b031663df011c416040518163ffffffff1660e01b815260040160206040518083038186803b15801561101a57600080fd5b505afa15801561102e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611052919061516b565b829061412a565b611063908761520b565b955050508061107190615223565b9050610e50565b505050915091565b61108933613fc0565b6110a6576040516326688ebb60e11b815260040160405180910390fd5b6110b260138233614195565b6110cf5760405163a67d528360e01b815260040160405180910390fd5b50565b600080600c60009054906101000a90046001600160a01b03166001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b15801561112357600080fd5b505afa158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b91906151b1565b6001600160a01b031663b64663848686866040518463ffffffff1660e01b815260040161118a939291906151ce565b60206040518083038186803b1580156111a257600080fd5b505afa1580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da919061516b565b60185460405163d2d6b5a360e01b81523360048201529193506000916001600160a01b039091169063d2d6b5a39060240160206040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b919061516b565b905080156112795761126d838261412a565b9150610e24828461519a565b50935093915050565b6002546001600160a01b031633146112ad57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166112d45760405163fb7566d760e01b815260040160405180910390fd5b6018546001600160a01b0390811690821681141561130557604051630333a68160e41b815260040160405180910390fd5b816001600160a01b0316816001600160a01b03167f66fa9df7ccacf7a0c110fd7dd4591f59c76a798409b4aeaf850002679baca45560405160405180910390a350601880546001600160a01b0319166001600160a01b0392909216919091179055565b606061137460196141a2565b905090565b600080611384613e16565b156113a257604051631b0e923f60e11b815260040160405180910390fd5b600260015414156113ce5760405162461bcd60e51b81526004016113c59061523e565b60405180910390fd5b6002600155846113dd81613fc0565b6113fa57604051630d8b6eb760e01b815260040160405180910390fd5b8661140481610bbe565b6114215760405163a596698b60e01b815260040160405180910390fd5b6040516370a0823160e01b81523360048201526001600160a01b038816906370a082319060240160206040518083038186803b15801561146057600080fd5b505afa158015611474573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611498919061516b565b8611156114b857604051635de1e54160e01b815260040160405180910390fd5b6001600160a01b03888116600090815260166020526040908190205490516370a0823160e01b815233600482015291169081906370a082319060240160206040518083038186803b15801561150c57600080fd5b505afa158015611520573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611544919061516b565b86111561156457604051635de1e54160e01b815260040160405180910390fd5b6040516336e1668760e11b81526001600160a01b03891690636dc2cd0e906115929033908b906004016151f2565b6040805180830381600087803b1580156115ab57600080fd5b505af11580156115bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e39190615275565b5080955050600061167d601760009054906101000a90046001600160a01b03168a6001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561163c57600080fd5b505afa158015611650573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167491906151b1565b8c8960006141af565b604051630450cfaf60e31b81529091506001600160a01b038316906322867d78906116ae90339085906004016151f2565b6040805180830381600087803b1580156116c757600080fd5b505af11580156116db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ff9190615275565b5094508685101561172357604051634394bddf60e11b815260040160405180910390fd5b600061172e33613a00565b505050509050806117525760405163cfd3600360e01b815260040160405180910390fd5b50505050506001808190555094509492505050565b6018546040805163cfc0c69f60e01b8152815160009384938493849384936001600160a01b03169263cfc0c69f9260048082019391829003018186803b1580156117b057600080fd5b505afa1580156117c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e891906152b5565b909250905060006117f983836152e8565b6001600160801b0316905087811561182a5761182761182083670de0b6b3a764000061520b565b82906140f6565b90505b611832613dd1565b6001600160a01b031663b6466384896001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561187957600080fd5b505afa15801561188d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b191906151b1565b8c846040518463ffffffff1660e01b81526004016118d1939291906151ce565b60206040518083038186803b1580156118e957600080fd5b505afa1580156118fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611921919061516b565b96506001600160801b0383161561194857611945816001600160801b03851661412a565b94505b6001600160801b0384161561197f5761197c61196c85670de0b6b3a76400006152e8565b82906001600160801b031661412a565b95505b5050505093509350939050565b6000806000611999613e16565b156119b757604051631b0e923f60e11b815260040160405180910390fd5b600260015414156119da5760405162461bcd60e51b81526004016113c59061523e565b6002600155866119e981610bbe565b611a065760405163a596698b60e01b815260040160405180910390fd5b84611a1081613fc0565b611a2d57604051630d8b6eb760e01b815260040160405180910390fd5b86611a4b576040516310eb483f60e21b815260040160405180910390fd5b336001600160a01b0389161415611a7557604051630ecda8a760e01b815260040160405180910390fd5b6001600160a01b03808a1660009081526016602052604080822054815163a6afed9560e01b81529151931692839263a6afed95926004808201939182900301818387803b158015611ac557600080fd5b505af1158015611ad9573d6000803e3d6000fd5b505050506000611ae88a613a00565b5050505090508015611b0d5760405163202881bd60e11b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b038b81166004830152600091908416906370a082319060240160206040518083038186803b158015611b5257600080fd5b505afa158015611b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8a919061516b565b600b54909150611b9a8b836140f6565b1115611bb95760405163e292f24f60e01b815260040160405180910390fd5b6000611bc3613dd1565b60045490915015611c8a5760006001600160a01b038216638d0dba008f611bea8f8761519a565b6040518363ffffffff1660e01b8152600401611c079291906151f2565b60206040518083038186803b158015611c1f57600080fd5b505afa158015611c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c57919061516b565b9050600081118015611c6a575060045481105b15611c88576040516332b9d47360e01b815260040160405180910390fd5b505b611c958d8c8c6129d5565b6040516370a0823160e01b8152929b5090995097506001600160a01b038b16906370a0823190611cd8908f906004016001600160a01b0391909116815260200190565b60206040518083038186803b158015611cf057600080fd5b505afa158015611d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d28919061516b565b891115611d4857604051635de1e54160e01b815260040160405180910390fd5b604051632770a7eb60e21b81526001600160a01b038e1690639dc29fac90611d769033908f906004016151f2565b600060405180830381600087803b158015611d9057600080fd5b505af1158015611da4573d6000803e3d6000fd5b5050604051632770a7eb60e21b81526001600160a01b0387169250639dc29fac9150611dd6908f908f906004016151f2565b600060405180830381600087803b158015611df057600080fd5b505af1158015611e04573d6000803e3d6000fd5b505060405163b2a02ff160e01b81526001600160a01b038d16925063b2a02ff19150611e38908f9033908d906004016151ce565b600060405180830381600087803b158015611e5257600080fd5b505af1158015611e66573d6000803e3d6000fd5b505050506000871115611f5b57896001600160a01b031663b2a02ff18d600c60009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ed157600080fd5b505afa158015611ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0991906151b1565b8a6040518463ffffffff1660e01b8152600401611f28939291906151ce565b600060405180830381600087803b158015611f4257600080fd5b505af1158015611f56573d6000803e3d6000fd5b505050505b604080518c8152602081018b90529081018890526001600160a01b03808f1691908e169033907fe1c3870e3d7d5199a16d200133088e6e3f7012d28571e442a110b4c83b5e3b949060600160405180910390a4505050505050600180819055509450945094915050565b611fcd6126a1565b611fea5760405163bc871ce560e01b815260040160405180910390fd5b611ff2613e16565b1561201057604051631b0e923f60e11b815260040160405180910390fd5b6002546001600160a01b0316331461203b57604051634b98449160e11b815260040160405180910390fd5b6003805460ff60a01b1916905560405133907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90600090a2565b61207e33613fc0565b61209b576040516326688ebb60e11b815260040160405180910390fd5b80601e6120a9601383614162565b6120b4601484614162565b6120be919061520b565b106120dc576040516306ceeb8360e21b815260040160405180910390fd5b6120e86013833361437d565b6121055760405163dd40dad960e01b815260040160405180910390fd5b5050565b600061211660118361438a565b92915050565b600080612127613e16565b1561214557604051631b0e923f60e11b815260040160405180910390fd5b600260015414156121685760405162461bcd60e51b81526004016113c59061523e565b60026001558661217781613fc0565b61219457604051630d8b6eb760e01b815260040160405180910390fd5b8661219e81610bbe565b6121bb5760405163a596698b60e01b815260040160405180910390fd5b670de0b6b3a764000086116121e357604051631907e1ff60e21b815260040160405180910390fd5b612278896001600160a01b031663df011c416040518163ffffffff1660e01b815260040160206040518083038186803b15801561221f57600080fd5b505afa158015612233573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612257919061516b565b61226990670de0b6b3a764000061519a565b670de0b6b3a7640000906140f6565b86111561229857604051630a4f5a0760e01b815260040160405180910390fd5b6000601760009054906101000a90046001600160a01b0316905060008a6001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156122ed57600080fd5b505afa158015612301573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232591906151b1565b90506001600160a01b038c1661233957809b505b61234e6001600160a01b038d1633308c6143ac565b806001600160a01b03168c6001600160a01b03161461237857612375828d838c60006141af565b98505b6000612382613dd1565b6001600160a01b031663b6466384838d6123b08e670de0b6b3a76400008f6123aa919061519a565b9061412a565b6040518463ffffffff1660e01b81526004016123ce939291906151ce565b60206040518083038186803b1580156123e657600080fd5b505afa1580156123fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241e919061516b565b6001600160a01b03808d1660009081526016602052604090819020549051635fd0bb2b60e11b8152929350169063bfa176569061246190339085906004016151f2565b6040805180830381600087803b15801561247a57600080fd5b505af115801561248e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b29190615275565b50955060006124c4848d858a856141af565b6124ce908c61520b565b9050888110156124f15760405163c724afdf60e01b815260040160405180910390fd5b6125066001600160a01b0384168e600061440a565b61251a6001600160a01b0384168e8361440a565b604051636e553f6560e01b8152600481018290523360248201526001600160a01b038e1690636e553f65906044016040805180830381600087803b15801561256157600080fd5b505af1158015612575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125999190615275565b50975060006125a733613a00565b505050509050806125cb5760405163cfd3600360e01b815260040160405180910390fd5b5050505050505060018081905550965096945050505050565b606061137460116141a2565b6002546001600160a01b0316331461261b57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166126425760405163fb7566d760e01b815260040160405180910390fd5b61264d60198261451d565b61266a57604051631e577fa560e31b815260040160405180910390fd5b6040516001600160a01b038216907f5579b1eead2d904c2b05255a92f5a4a4f3e234ae0a4efe538adef3c1794e1cea90600090a250565b600354600090600160a01b900460ff16806113745750600c60009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561270557600080fd5b505afa158015612719573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190615313565b612745614532565b6001600160a01b0383166127625761275d828261455f565b505050565b61275d6001600160a01b0384168383614678565b6002546001600160a01b031633146127a157604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166127c85760405163fb7566d760e01b815260040160405180910390fd5b6127d3601982614697565b6127f0576040516362c4c75f60e01b815260040160405180910390fd5b6040516001600160a01b03821681527f5412e32b52c11e4b232ab59f3660d55b48eb20735ccb2c67a0a1ebea0d6fe0199060200160405180910390a150565b6002546001600160a01b0316331461285a57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166128815760405163fb7566d760e01b815260040160405180910390fd5b6000816001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b1580156128bc57600080fd5b505afa1580156128d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f491906151b1565b90506001600160a01b03811661291d5760405163013a1b4360e51b815260040160405180910390fd5b6001600160a01b0381811660009081526016602052604090205416156129565760405163fa9b809960e01b815260040160405180910390fd5b61296160118361451d565b61297e57604051631f477b5760e11b815260040160405180910390fd5b6001600160a01b0381811660009081526016602052604080822080546001600160a01b0319169386169384179055517fad48bee6bbb1b8ece321157ad29afc3c6baa177f8dc043132d65038cc601cdd69190a25050565b60008060006129e2613dd1565b6001600160a01b031663b646638487866001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015612a2a57600080fd5b505afa158015612a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6291906151b1565b886040518463ffffffff1660e01b8152600401612a81939291906151ce565b60206040518083038186803b158015612a9957600080fd5b505afa158015612aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad1919061516b565b6018546040805163cfc0c69f60e01b8152815193955060009384936001600160a01b03169263cfc0c69f9260048082019391829003018186803b158015612b1757600080fd5b505afa158015612b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4f91906152b5565b90925090506001600160801b03811615612b7957612b76846001600160801b03831661412a565b92505b6001600160801b03821615612ba857612b9b846001600160801b03841661412a565b612ba5908561520b565b93505b612bb2848461520b565b9450505093509350939050565b612bc833612109565b612be5576040516304f8b91760e51b815260040160405180910390fd5b612bf160148233614195565b6110cf576040516359c937f160e01b815260040160405180910390fd5b612c1733612109565b612c34576040516304f8b91760e51b815260040160405180910390fd5b80601e612c42601383614162565b612c4d601484614162565b612c57919061520b565b10612c75576040516306ceeb8360e21b815260040160405180910390fd5b612c816014833361437d565b61210557604051631f477b5760e11b815260040160405180910390fd5b6002546001600160a01b03163314612cc957604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116612cf05760405163fb7566d760e01b815260040160405180910390fd5b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015612d2b57600080fd5b505afa158015612d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6391906151b1565b6001600160a01b038082166000908152601060205260409020549192501615612d9f5760405163374f601360e11b815260040160405180910390fd5b601e612dab600e6146ac565b10612dc95760405163225b605b60e21b815260040160405180910390fd5b612dd4600e8361451d565b612df15760405163dd40dad960e01b815260040160405180910390fd5b6001600160a01b0381811660009081526010602052604080822080546001600160a01b0319169386169384179055517fdc705e658c7b6c6c01f5802457bf4ffb99f204bf1603e7b1ae3d4c7536611bc29190a25050565b60606121166013836146b6565b6002546001600160a01b03163314612e8057604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116612ea75760405163fb7566d760e01b815260040160405180910390fd5b600d546001600160a01b03908116908216811415612ed857604051630333a68160e41b815260040160405180910390fd5b6001600160a01b03811615612f43576040516326ed7c7960e11b81526001600160a01b038381166004830152821690634ddaf8f290602401600060405180830381600087803b158015612f2a57600080fd5b505af1158015612f3e573d6000803e3d6000fd5b505050505b816001600160a01b0316816001600160a01b03167f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a60405160405180910390a350600d80546001600160a01b0319166001600160a01b0392909216919091179055565b612fae6126a1565b15612fcc57604051631309a56360e01b815260040160405180910390fd5b6002546001600160a01b03163314612ff757604051634b98449160e11b815260040160405180910390fd5b6003805460ff60a01b1916600160a01b17905560405133907f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890600090a2565b60008061304384613a00565b505050509050801561305957600091505061318b565b6040516370a0823160e01b81526001600160a01b0385811660048301526000916130e2918891908716906370a082319060240160206040518083038186803b1580156130a457600080fd5b505afa1580156130b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130dc919061516b565b86611767565b5050600b546001600160a01b03888116600090815260166020526040908190205490516370a0823160e01b8152898316600482015293945061317a939116906370a082319060240160206040518083038186803b15801561314257600080fd5b505afa158015613156573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123aa919061516b565b925082811015613188578092505b50505b9392505050565b6002546001600160a01b031633146131bd57604051634b98449160e11b815260040160405180910390fd5b600c54604051600160a01b90910460ff1615808252907fc8011ac148e14ab1e8f93a022ebc29088beedc705027c8eb9514d6d69c5b23639060200160405180910390a1600c8054911515600160a01b0260ff60a01b19909216919091179055565b6002546001600160a01b0316331461324957604051634b98449160e11b815260040160405180910390fd5b6001600160a01b03811661327057604051634c267bfb60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600c54604080516331056e5760e21b815290516000926001600160a01b03169163c415b95c916004808301926020929190829003018186803b1580156132d757600080fd5b505afa1580156132eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137491906151b1565b600054610100900460ff1680613328575060005460ff16155b6133445760405162461bcd60e51b81526004016113c590615335565b600054610100900460ff16158015613366576000805461ffff19166101011790555b6001600160a01b03821661338d57604051637cb62f2b60e11b815260040160405180910390fd5b6133956146c4565b61339d614733565b600c80546001600160a81b0319166001600160a01b03841617600160a01b1790556706f05b59d3b20000600b558015612105576000805461ff00191690555050565b6002546001600160a01b0316331461340a57604051634b98449160e11b815260040160405180910390fd5b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561344557600080fd5b505afa158015613459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347d919061516b565b111561349c5760405163066097f160e31b815260040160405180910390fd5b6134a7601182614697565b6134c4576040516359c937f160e01b815260040160405180910390fd5b60166000826001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b15801561350157600080fd5b505afa158015613515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353991906151b1565b6001600160a01b03908116825260208201929092526040908101600090812080546001600160a01b03191690559051918316917f81e9205ee5a9e1289fad5baa5e74bd49d4613652eb4626bb15925bf9fdbc0feb9190a250565b60606121166014836146b6565b6000806135ab613dd1565b905060006135ba601485614162565b905060005b8181101561375b5760006135d560148784614180565b9050836001600160a01b0316638d0dba00826001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b15801561361f57600080fd5b505afa158015613633573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365791906151b1565b6040516370a0823160e01b81526001600160a01b038a811660048301528516906370a082319060240160206040518083038186803b15801561369857600080fd5b505afa1580156136ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d0919061516b565b6040518363ffffffff1660e01b81526004016136ed9291906151f2565b60206040518083038186803b15801561370557600080fd5b505afa158015613719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373d919061516b565b613747908661520b565b9450508061375490615223565b90506135bf565b505050919050565b6002546001600160a01b0316331461378e57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166137b55760405163fb7566d760e01b815260040160405180910390fd5b6017546001600160a01b039081169082168114156137e657604051630333a68160e41b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527ffb7a5f1d35a7022d9d6343bfc9a25035829d0ea72da06978793c945b1d94a17f910160405180910390a150601780546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b0316331461387757604051634b98449160e11b815260040160405180910390fd5b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156138b257600080fd5b505afa1580156138c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ea919061516b565b11156139095760405163066097f160e31b815260040160405180910390fd5b613914600e82614697565b6139315760405163a67d528360e01b815260040160405180910390fd5b60106000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561396e57600080fd5b505afa158015613982573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a691906151b1565b6001600160a01b03908116825260208201929092526040908101600090812080546001600160a01b03191690559051918316917fe5a19a76470297a1f85f9a38f3ff148b4c8cdc1209e074dbe59db5e22eb31a3a9190a250565b6000806000806000613a11866135a0565b9250613a1c86610e2f565b8085111596509094509150818310613a35576000613a3f565b613a3f838361519a565b905091939590929450565b600080613a55613e16565b15613a7357604051631b0e923f60e11b815260040160405180910390fd5b60026001541415613a965760405162461bcd60e51b81526004016113c59061523e565b600260015584613aa581610bbe565b613ac25760405163a596698b60e01b815260040160405180910390fd5b84613acc81610bbe565b613ae95760405163a596698b60e01b815260040160405180910390fd5b600c54600160a01b900460ff16613b1357604051633840404b60e21b815260040160405180910390fd5b841580613b9557506040516370a0823160e01b81523360048201526001600160a01b038816906370a082319060240160206040518083038186803b158015613b5a57600080fd5b505afa158015613b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b92919061516b565b85115b15613bb35760405163ca99073960e01b815260040160405180910390fd5b604051632770a7eb60e21b81526001600160a01b03881690639dc29fac90613be190339089906004016151f2565b600060405180830381600087803b158015613bfb57600080fd5b505af1158015613c0f573d6000803e3d6000fd5b50505050613c1e8787876110d2565b90945092508215613d0f57856001600160a01b03166340c10f19600c60009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c8657600080fd5b505afa158015613c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cbe91906151b1565b856040518363ffffffff1660e01b8152600401613cdc9291906151f2565b600060405180830381600087803b158015613cf657600080fd5b505af1158015613d0a573d6000803e3d6000fd5b505050505b6040516340c10f1960e01b81526001600160a01b038716906340c10f1990613d3d90339088906004016151f2565b600060405180830381600087803b158015613d5757600080fd5b505af1158015613d6b573d6000803e3d6000fd5b505060408051888152602081018890529081018690526001600160a01b03808a1693508a16915033907fafd74f009c0ff7627726f24b568ee5529cd297f6a7a1e43ec363443a13a584209060600160405180910390a45050600180559094909350915050565b600c5460408051637556d1c160e11b815290516000926001600160a01b03169163eaada382916004808301926020929190829003018186803b1580156132d757600080fd5b600354600090600160a81b900460ff16806113745750600c60009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561270557600080fd5b6002546001600160a01b03163314613ea557604051634b98449160e11b815260040160405180910390fd5b670de0b6b3a7640000811115613ece57604051633c2c00b560e21b815260040160405180910390fd5b600b5481811415613ef257604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f6d8ed4ad9ba67058e16e32fc3c8da2e3358da6cd1599e0e0fb2630d0a19fd49c910160405180910390a150600b55565b6003546001600160a01b0316338114613f5d5760405163038cdbad60e31b815260040160405180910390fd5b6002546040516001600160a01b038084169216907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600280546001600160a01b039092166001600160a01b0319928316179055600380549091169055565b6000612116600e8361438a565b6060611374600e6141a2565b613fe1613e16565b15613fff57604051631b0e923f60e11b815260040160405180910390fd5b6002546001600160a01b0316331461402a57604051634b98449160e11b815260040160405180910390fd5b6003805461ffff60a01b191661010160a01b17905560405133907f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a90600090a2565b614074613e16565b61409157604051636e2cff4560e01b815260040160405180910390fd5b6002546001600160a01b031633146140bc57604051634b98449160e11b815260040160405180910390fd5b6003805460ff60a81b1916905560405133907fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc90600090a2565b600081614104600282615383565b614116670de0b6b3a7640000866153a5565b614120919061520b565b61318b9190615383565b6000821580614137575081155b1561414457506000612116565b670de0b6b3a7640000614158600282615383565b61411684866153a5565b6001600160a01b03811660009081526020839052604081205461318b565b600061418d8484846147a6565b949350505050565b600061418d8484846147ed565b6060600061318b8361499a565b60006141c56001600160a01b038616878361440a565b6141d96001600160a01b038616878561440a565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b15801561421b57600080fd5b505afa15801561422f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614253919061516b565b604051636ccb2b0160e01b81526001600160a01b0388811660048301528781166024830152604482018790526064820186905230608483015291925090881690636ccb2b019060a401602060405180830381600087803b1580156142b657600080fd5b505af11580156142ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142ee919061516b565b506040516370a0823160e01b815230600482015281906001600160a01b038716906370a082319060240160206040518083038186803b15801561433057600080fd5b505afa158015614344573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614368919061516b565b614372919061519a565b979650505050505050565b600061418d8484846149f6565b6001600160a01b0381166000908152600183016020526040812054151561318b565b614404846323b872dd60e01b8585856040516024016143cd939291906151ce565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614a84565b50505050565b8015806144935750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561445957600080fd5b505afa15801561446d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614491919061516b565b155b6144fe5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016113c5565b61275d8363095ea7b360e01b84846040516024016143cd9291906151f2565b600061318b836001600160a01b038416614b56565b6002546001600160a01b0316331461455d57604051634b98449160e11b815260040160405180910390fd5b565b804710156145af5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016113c5565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146145fc576040519150601f19603f3d011682016040523d82523d6000602084013e614601565b606091505b505090508061275d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016113c5565b61275d8363a9059cbb60e01b84846040516024016143cd9291906151f2565b600061318b836001600160a01b038416614ba5565b6000612116825490565b6060600061418d8484614c98565b600054610100900460ff16806146dd575060005460ff16155b6146f95760405162461bcd60e51b81526004016113c590615335565b600054610100900460ff1615801561471b576000805461ffff19166101011790555b6001805580156110cf576000805461ff001916905550565b600054610100900460ff168061474c575060005460ff16155b6147685760405162461bcd60e51b81526004016113c590615335565b600054610100900460ff1615801561478a576000805461ffff19166101011790555b614792614d0d565b80156110cf576000805461ff001916905550565b6001600160a01b03821660009081526020849052604081208054839081106147d0576147d06153c4565b6000918252602090912001546001600160a01b0316949350505050565b6001600160a01b0380831660009081526020858152604080832093851683526001909301905290812054801561499057600061482a60018361519a565b6001600160a01b038616600090815260208890526040812054919250906148539060019061519a565b905081811461490f576001600160a01b0386166000908152602088905260408120805483908110614886576148866153c4565b60009182526020808320909101546001600160a01b038a81168452918b905260409092208054919092169250829190859081106148c5576148c56153c4565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905589831682528a8152604080832094909316825260019390930190925290208390555b6001600160a01b0386166000908152602088905260409020805480614936576149366153da565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03888116835289825260408084209189168452600191820190925290822091909155935061318b92505050565b600091505061318b565b6060816000018054806020026020016040519081016040528092919081815260200182805480156149ea57602002820191906000526020600020905b8154815260200190600101908083116149d6575b50505050509050919050565b6001600160a01b0380831660009081526020858152604080832093851683526001909301905290812054614a7c57506001600160a01b0382811660009081526020858152604080832080546001808201835582865284862090910180546001600160a01b031916968816968717905581549585529081019092529091209190915561318b565b50600061318b565b6000614ad9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614db89092919063ffffffff16565b80519091501561275d5780806020019051810190614af79190615313565b61275d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016113c5565b6000818152600183016020526040812054614b9d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155612116565b506000612116565b60008181526001830160205260408120548015614c8e576000614bc960018361519a565b8554909150600090614bdd9060019061519a565b9050818114614c42576000866000018281548110614bfd57614bfd6153c4565b9060005260206000200154905080876000018481548110614c2057614c206153c4565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614c5357614c536153da565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612116565b6000915050612116565b6001600160a01b03811660009081526020838152604091829020805483518184028101840190945280845260609392830182828015614d0057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614ce2575b5050505050905092915050565b600054610100900460ff1680614d26575060005460ff16155b614d425760405162461bcd60e51b81526004016113c590615335565b600054610100900460ff16158015614d64576000805461ffff19166101011790555b600280546001600160a01b031916339081179091556040516000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a380156110cf576000805461ff001916905550565b606061418d848460008585843b614e115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016113c5565b600080866001600160a01b03168587604051614e2d91906153f0565b60006040518083038185875af1925050503d8060008114614e6a576040519150601f19603f3d011682016040523d82523d6000602084013e614e6f565b606091505b509150915061437282828660608315614e8957508161318b565b825115614e995782518084602001fd5b8160405162461bcd60e51b81526004016113c59190615138565b6001600160a01b03811681146110cf57600080fd5b600060208284031215614eda57600080fd5b813561318b81614eb3565b600060208284031215614ef757600080fd5b5035919050565b600080600060608486031215614f1357600080fd5b8335614f1e81614eb3565b92506020840135614f2e81614eb3565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b81811015614f805783516001600160a01b031683529284019291840191600101614f5b565b50909695505050505050565b60008060008060808587031215614fa257600080fd5b8435614fad81614eb3565b93506020850135614fbd81614eb3565b93969395505050506040820135916060013590565b600080600060608486031215614fe757600080fd5b8335614ff281614eb3565b925060208401359150604084013561500981614eb3565b809150509250925092565b6000806000806080858703121561502a57600080fd5b843561503581614eb3565b9350602085013561504581614eb3565b925060408501359150606085013561505c81614eb3565b939692955090935050565b60008060008060008060c0878903121561508057600080fd5b863561508b81614eb3565b9550602087013561509b81614eb3565b945060408701356150ab81614eb3565b959894975094956060810135955060808101359460a0909101359350915050565b6000806000606084860312156150e157600080fd5b83356150ec81614eb3565b925060208401356150fc81614eb3565b9150604084013561500981614eb3565b60005b8381101561512757818101518382015260200161510f565b838111156144045750506000910152565b602081526000825180602084015261515781604085016020870161510c565b601f01601f19169190910160400192915050565b60006020828403121561517d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156151ac576151ac615184565b500390565b6000602082840312156151c357600080fd5b815161318b81614eb3565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000821982111561521e5761521e615184565b500190565b600060001982141561523757615237615184565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000806040838503121561528857600080fd5b505080516020909101519092909150565b80516001600160801b03811681146152b057600080fd5b919050565b600080604083850312156152c857600080fd5b6152d183615299565b91506152df60208401615299565b90509250929050565b60006001600160801b0380831681851680830382111561530a5761530a615184565b01949350505050565b60006020828403121561532557600080fd5b8151801515811461318b57600080fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000826153a057634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156153bf576153bf615184565b500290565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6000825161540281846020870161510c565b919091019291505056fea2646970667358221220ab50c378711b9359cf71e20e376a9d582561282bcf584e6279d3d7426fc1018464736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106103a65760003560e01c806379e40cba116101e7578063d283e75f1161010d578063f0c80d3b116100a0578063fb01600d1161006f578063fb01600d14610b41578063fc0e74d114610b56578063fcfff16f14610b6b578063ffa1ad7414610b80576103c4565b8063f0c80d3b14610ad6578063f3b27bc314610af6578063f609280914610b0b578063f8977b8414610b21576103c4565b8063df791e50116100dc578063df791e5014610a6b578063e35bff9614610a8b578063eaada38214610aac578063ecf3a3f914610ac1576103c4565b8063d283e75f146109c1578063d3033c39146109e1578063dbe466b114610a01578063dde3ab9514610a21576103c4565b80639ab620dd11610185578063c415b95c11610154578063c415b95c1461094c578063c4d66de814610961578063c4d68a1a14610981578063d176e05f146109a1576103c4565b80639ab620dd146108c15780639f8f0fa8146108d6578063afcff50f1461090c578063b6aa515b1461092c576103c4565b80638456cb59116101c15780638456cb591461083657806387cddc861461084b5780638a11a37014610881578063984a68b5146108a1576103c4565b806379e40cba146107d65780637d355163146107f65780637f51bb1f14610816576103c4565b80633f5fc131116102cc57806361d027b31161026a5780636b4f41af116102395780636b4f41af146107565780636c3393671461077657806375c6f8ec14610796578063770b69b4146107b6576103c4565b806361d027b3146106e157806362c067671461070157806363c56d421461072157806369c5dfd814610741576103c4565b80634d7e9a76116102a65780634d7e9a76146106775780634ff9b74a1461069757806356aaee2d146106ac5780635c975abb146106cc576103c4565b80633f5fc131146106175780634066fdea14610637578063450058f814610657576103c4565b80632b3297f911610344578063364fda0011610313578063364fda00146105875780633c2dc254146105a75780633de2f6b2146105e25780633f4ba83a14610602576103c4565b80632b3297f9146105015780632bcb849c146105215780632dd6adb5146105415780633605b51b14610565576103c4565b80631ccfbc4f116103805780631ccfbc4f1461046c57806323e3fbd5146104a1578063275038d0146104c15780632adcb0c6146104e1576103c4565b80630c340a24146103dd5780631a0dd00b1461041a5780631a4660ce1461044a576103c4565b366103c457604051636436c22d60e11b815260040160405180910390fd5b60405163a0152e6360e01b815260040160405180910390fd5b3480156103e957600080fd5b506002546103fd906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561042657600080fd5b5061043a610435366004614ec8565b610bbe565b6040519015158152602001610411565b34801561045657600080fd5b5061046a610465366004614ee5565b610bde565b005b34801561047857600080fd5b5061048c610487366004614efe565b610c6c565b60408051928352602083019190915201610411565b3480156104ad57600080fd5b5061048c6104bc366004614ec8565b610e2f565b3480156104cd57600080fd5b5061046a6104dc366004614ec8565b611080565b3480156104ed57600080fd5b5061048c6104fc366004614efe565b6110d2565b34801561050d57600080fd5b506017546103fd906001600160a01b031681565b34801561052d57600080fd5b5061046a61053c366004614ec8565b611282565b34801561054d57600080fd5b50610557600b5481565b604051908152602001610411565b34801561057157600080fd5b5061057a611368565b6040516104119190614f3f565b34801561059357600080fd5b5061048c6105a2366004614f8c565b611379565b3480156105b357600080fd5b506105c76105c2366004614fd2565b611767565b60408051938452602084019290925290820152606001610411565b3480156105ee57600080fd5b506105c76105fd366004615014565b61198c565b34801561060e57600080fd5b5061046a611fc5565b34801561062357600080fd5b5061046a610632366004614ec8565b612075565b34801561064357600080fd5b506018546103fd906001600160a01b031681565b34801561066357600080fd5b5061043a610672366004614ec8565b612109565b34801561068357600080fd5b5061048c610692366004615067565b61211c565b3480156106a357600080fd5b5061057a6125e4565b3480156106b857600080fd5b5061046a6106c7366004614ec8565b6125f0565b3480156106d857600080fd5b5061043a6126a1565b3480156106ed57600080fd5b50600d546103fd906001600160a01b031681565b34801561070d57600080fd5b5061046a61071c366004614efe565b61273d565b34801561072d57600080fd5b5061046a61073c366004614ec8565b612776565b34801561074d57600080fd5b50610557601e81565b34801561076257600080fd5b5061046a610771366004614ec8565b61282f565b34801561078257600080fd5b506105c7610791366004614fd2565b6129d5565b3480156107a257600080fd5b5061046a6107b1366004614ec8565b612bbf565b3480156107c257600080fd5b5061046a6107d1366004614ec8565b612c0e565b3480156107e257600080fd5b5061046a6107f1366004614ec8565b612c9e565b34801561080257600080fd5b5061057a610811366004614ec8565b612e48565b34801561082257600080fd5b5061046a610831366004614ec8565b612e55565b34801561084257600080fd5b5061046a612fa6565b34801561085757600080fd5b506103fd610866366004614ec8565b6010602052600090815260409020546001600160a01b031681565b34801561088d57600080fd5b506003546103fd906001600160a01b031681565b3480156108ad57600080fd5b506105576108bc3660046150cc565b613037565b3480156108cd57600080fd5b5061046a613192565b3480156108e257600080fd5b506103fd6108f1366004614ec8565b6016602052600090815260409020546001600160a01b031681565b34801561091857600080fd5b50600c546103fd906001600160a01b031681565b34801561093857600080fd5b5061046a610947366004614ec8565b61321e565b34801561095857600080fd5b506103fd613292565b34801561096d57600080fd5b5061046a61097c366004614ec8565b61330f565b34801561098d57600080fd5b5061046a61099c366004614ec8565b6133df565b3480156109ad57600080fd5b5061057a6109bc366004614ec8565b613593565b3480156109cd57600080fd5b506105576109dc366004614ec8565b6135a0565b3480156109ed57600080fd5b5061046a6109fc366004614ec8565b613763565b348015610a0d57600080fd5b5061046a610a1c366004614ec8565b61384c565b348015610a2d57600080fd5b50610a41610a3c366004614ec8565b613a00565b6040805195151586526020860194909452928401919091526060830152608082015260a001610411565b348015610a7757600080fd5b5061048c610a86366004614efe565b613a4a565b348015610a9757600080fd5b50600c5461043a90600160a01b900460ff1681565b348015610ab857600080fd5b506103fd613dd1565b348015610acd57600080fd5b5061043a613e16565b348015610ae257600080fd5b5061046a610af1366004614ee5565b613e7a565b348015610b0257600080fd5b5061046a613f31565b348015610b1757600080fd5b5061055760045481565b348015610b2d57600080fd5b5061043a610b3c366004614ec8565b613fc0565b348015610b4d57600080fd5b5061057a613fcd565b348015610b6257600080fd5b5061046a613fd9565b348015610b7757600080fd5b5061046a61406c565b348015610b8c57600080fd5b50610bb1604051806040016040528060058152602001640312e322e360dc1b81525081565b6040516104119190615138565b6001600160a01b0390811660009081526016602052604090205416151590565b6002546001600160a01b03163314610c0957604051634b98449160e11b815260040160405180910390fd5b60045481811415610c2d57604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f0662703672e57800b9439de3a419c9155283ad25ea7776c139c876bd8b93bb98910160405180910390a150600455565b60185460405163d2d6b5a360e01b8152336004820152600091829182916001600160a01b03169063d2d6b5a39060240160206040518083038186803b158015610cb457600080fd5b505afa158015610cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cec919061516b565b90508015610d1f57610d10610d0982670de0b6b3a764000061519a565b85906140f6565b9350610d1c848261412a565b91505b600c60009054906101000a90046001600160a01b03166001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6d57600080fd5b505afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906151b1565b6001600160a01b031663b64663848688876040518463ffffffff1660e01b8152600401610dd4939291906151ce565b60206040518083038186803b158015610dec57600080fd5b505afa158015610e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e24919061516b565b925050935093915050565b6000806000610e3c613dd1565b90506000610e4b601386614162565b905060005b81811015611078576000610e6660138884614180565b90506000846001600160a01b0316638d0dba00836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb257600080fd5b505afa158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea91906151b1565b6040516370a0823160e01b81526001600160a01b038c811660048301528616906370a082319060240160206040518083038186803b158015610f2b57600080fd5b505afa158015610f3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f63919061516b565b6040518363ffffffff1660e01b8152600401610f809291906151f2565b60206040518083038186803b158015610f9857600080fd5b505afa158015610fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd0919061516b565b9050610fdc818861520b565b9650611059826001600160a01b031663df011c416040518163ffffffff1660e01b815260040160206040518083038186803b15801561101a57600080fd5b505afa15801561102e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611052919061516b565b829061412a565b611063908761520b565b955050508061107190615223565b9050610e50565b505050915091565b61108933613fc0565b6110a6576040516326688ebb60e11b815260040160405180910390fd5b6110b260138233614195565b6110cf5760405163a67d528360e01b815260040160405180910390fd5b50565b600080600c60009054906101000a90046001600160a01b03166001600160a01b031663eaada3826040518163ffffffff1660e01b815260040160206040518083038186803b15801561112357600080fd5b505afa158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115b91906151b1565b6001600160a01b031663b64663848686866040518463ffffffff1660e01b815260040161118a939291906151ce565b60206040518083038186803b1580156111a257600080fd5b505afa1580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da919061516b565b60185460405163d2d6b5a360e01b81523360048201529193506000916001600160a01b039091169063d2d6b5a39060240160206040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b919061516b565b905080156112795761126d838261412a565b9150610e24828461519a565b50935093915050565b6002546001600160a01b031633146112ad57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166112d45760405163fb7566d760e01b815260040160405180910390fd5b6018546001600160a01b0390811690821681141561130557604051630333a68160e41b815260040160405180910390fd5b816001600160a01b0316816001600160a01b03167f66fa9df7ccacf7a0c110fd7dd4591f59c76a798409b4aeaf850002679baca45560405160405180910390a350601880546001600160a01b0319166001600160a01b0392909216919091179055565b606061137460196141a2565b905090565b600080611384613e16565b156113a257604051631b0e923f60e11b815260040160405180910390fd5b600260015414156113ce5760405162461bcd60e51b81526004016113c59061523e565b60405180910390fd5b6002600155846113dd81613fc0565b6113fa57604051630d8b6eb760e01b815260040160405180910390fd5b8661140481610bbe565b6114215760405163a596698b60e01b815260040160405180910390fd5b6040516370a0823160e01b81523360048201526001600160a01b038816906370a082319060240160206040518083038186803b15801561146057600080fd5b505afa158015611474573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611498919061516b565b8611156114b857604051635de1e54160e01b815260040160405180910390fd5b6001600160a01b03888116600090815260166020526040908190205490516370a0823160e01b815233600482015291169081906370a082319060240160206040518083038186803b15801561150c57600080fd5b505afa158015611520573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611544919061516b565b86111561156457604051635de1e54160e01b815260040160405180910390fd5b6040516336e1668760e11b81526001600160a01b03891690636dc2cd0e906115929033908b906004016151f2565b6040805180830381600087803b1580156115ab57600080fd5b505af11580156115bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e39190615275565b5080955050600061167d601760009054906101000a90046001600160a01b03168a6001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561163c57600080fd5b505afa158015611650573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167491906151b1565b8c8960006141af565b604051630450cfaf60e31b81529091506001600160a01b038316906322867d78906116ae90339085906004016151f2565b6040805180830381600087803b1580156116c757600080fd5b505af11580156116db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ff9190615275565b5094508685101561172357604051634394bddf60e11b815260040160405180910390fd5b600061172e33613a00565b505050509050806117525760405163cfd3600360e01b815260040160405180910390fd5b50505050506001808190555094509492505050565b6018546040805163cfc0c69f60e01b8152815160009384938493849384936001600160a01b03169263cfc0c69f9260048082019391829003018186803b1580156117b057600080fd5b505afa1580156117c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e891906152b5565b909250905060006117f983836152e8565b6001600160801b0316905087811561182a5761182761182083670de0b6b3a764000061520b565b82906140f6565b90505b611832613dd1565b6001600160a01b031663b6466384896001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561187957600080fd5b505afa15801561188d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b191906151b1565b8c846040518463ffffffff1660e01b81526004016118d1939291906151ce565b60206040518083038186803b1580156118e957600080fd5b505afa1580156118fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611921919061516b565b96506001600160801b0383161561194857611945816001600160801b03851661412a565b94505b6001600160801b0384161561197f5761197c61196c85670de0b6b3a76400006152e8565b82906001600160801b031661412a565b95505b5050505093509350939050565b6000806000611999613e16565b156119b757604051631b0e923f60e11b815260040160405180910390fd5b600260015414156119da5760405162461bcd60e51b81526004016113c59061523e565b6002600155866119e981610bbe565b611a065760405163a596698b60e01b815260040160405180910390fd5b84611a1081613fc0565b611a2d57604051630d8b6eb760e01b815260040160405180910390fd5b86611a4b576040516310eb483f60e21b815260040160405180910390fd5b336001600160a01b0389161415611a7557604051630ecda8a760e01b815260040160405180910390fd5b6001600160a01b03808a1660009081526016602052604080822054815163a6afed9560e01b81529151931692839263a6afed95926004808201939182900301818387803b158015611ac557600080fd5b505af1158015611ad9573d6000803e3d6000fd5b505050506000611ae88a613a00565b5050505090508015611b0d5760405163202881bd60e11b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b038b81166004830152600091908416906370a082319060240160206040518083038186803b158015611b5257600080fd5b505afa158015611b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8a919061516b565b600b54909150611b9a8b836140f6565b1115611bb95760405163e292f24f60e01b815260040160405180910390fd5b6000611bc3613dd1565b60045490915015611c8a5760006001600160a01b038216638d0dba008f611bea8f8761519a565b6040518363ffffffff1660e01b8152600401611c079291906151f2565b60206040518083038186803b158015611c1f57600080fd5b505afa158015611c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c57919061516b565b9050600081118015611c6a575060045481105b15611c88576040516332b9d47360e01b815260040160405180910390fd5b505b611c958d8c8c6129d5565b6040516370a0823160e01b8152929b5090995097506001600160a01b038b16906370a0823190611cd8908f906004016001600160a01b0391909116815260200190565b60206040518083038186803b158015611cf057600080fd5b505afa158015611d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d28919061516b565b891115611d4857604051635de1e54160e01b815260040160405180910390fd5b604051632770a7eb60e21b81526001600160a01b038e1690639dc29fac90611d769033908f906004016151f2565b600060405180830381600087803b158015611d9057600080fd5b505af1158015611da4573d6000803e3d6000fd5b5050604051632770a7eb60e21b81526001600160a01b0387169250639dc29fac9150611dd6908f908f906004016151f2565b600060405180830381600087803b158015611df057600080fd5b505af1158015611e04573d6000803e3d6000fd5b505060405163b2a02ff160e01b81526001600160a01b038d16925063b2a02ff19150611e38908f9033908d906004016151ce565b600060405180830381600087803b158015611e5257600080fd5b505af1158015611e66573d6000803e3d6000fd5b505050506000871115611f5b57896001600160a01b031663b2a02ff18d600c60009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ed157600080fd5b505afa158015611ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0991906151b1565b8a6040518463ffffffff1660e01b8152600401611f28939291906151ce565b600060405180830381600087803b158015611f4257600080fd5b505af1158015611f56573d6000803e3d6000fd5b505050505b604080518c8152602081018b90529081018890526001600160a01b03808f1691908e169033907fe1c3870e3d7d5199a16d200133088e6e3f7012d28571e442a110b4c83b5e3b949060600160405180910390a4505050505050600180819055509450945094915050565b611fcd6126a1565b611fea5760405163bc871ce560e01b815260040160405180910390fd5b611ff2613e16565b1561201057604051631b0e923f60e11b815260040160405180910390fd5b6002546001600160a01b0316331461203b57604051634b98449160e11b815260040160405180910390fd5b6003805460ff60a01b1916905560405133907f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90600090a2565b61207e33613fc0565b61209b576040516326688ebb60e11b815260040160405180910390fd5b80601e6120a9601383614162565b6120b4601484614162565b6120be919061520b565b106120dc576040516306ceeb8360e21b815260040160405180910390fd5b6120e86013833361437d565b6121055760405163dd40dad960e01b815260040160405180910390fd5b5050565b600061211660118361438a565b92915050565b600080612127613e16565b1561214557604051631b0e923f60e11b815260040160405180910390fd5b600260015414156121685760405162461bcd60e51b81526004016113c59061523e565b60026001558661217781613fc0565b61219457604051630d8b6eb760e01b815260040160405180910390fd5b8661219e81610bbe565b6121bb5760405163a596698b60e01b815260040160405180910390fd5b670de0b6b3a764000086116121e357604051631907e1ff60e21b815260040160405180910390fd5b612278896001600160a01b031663df011c416040518163ffffffff1660e01b815260040160206040518083038186803b15801561221f57600080fd5b505afa158015612233573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612257919061516b565b61226990670de0b6b3a764000061519a565b670de0b6b3a7640000906140f6565b86111561229857604051630a4f5a0760e01b815260040160405180910390fd5b6000601760009054906101000a90046001600160a01b0316905060008a6001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156122ed57600080fd5b505afa158015612301573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232591906151b1565b90506001600160a01b038c1661233957809b505b61234e6001600160a01b038d1633308c6143ac565b806001600160a01b03168c6001600160a01b03161461237857612375828d838c60006141af565b98505b6000612382613dd1565b6001600160a01b031663b6466384838d6123b08e670de0b6b3a76400008f6123aa919061519a565b9061412a565b6040518463ffffffff1660e01b81526004016123ce939291906151ce565b60206040518083038186803b1580156123e657600080fd5b505afa1580156123fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241e919061516b565b6001600160a01b03808d1660009081526016602052604090819020549051635fd0bb2b60e11b8152929350169063bfa176569061246190339085906004016151f2565b6040805180830381600087803b15801561247a57600080fd5b505af115801561248e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b29190615275565b50955060006124c4848d858a856141af565b6124ce908c61520b565b9050888110156124f15760405163c724afdf60e01b815260040160405180910390fd5b6125066001600160a01b0384168e600061440a565b61251a6001600160a01b0384168e8361440a565b604051636e553f6560e01b8152600481018290523360248201526001600160a01b038e1690636e553f65906044016040805180830381600087803b15801561256157600080fd5b505af1158015612575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125999190615275565b50975060006125a733613a00565b505050509050806125cb5760405163cfd3600360e01b815260040160405180910390fd5b5050505050505060018081905550965096945050505050565b606061137460116141a2565b6002546001600160a01b0316331461261b57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166126425760405163fb7566d760e01b815260040160405180910390fd5b61264d60198261451d565b61266a57604051631e577fa560e31b815260040160405180910390fd5b6040516001600160a01b038216907f5579b1eead2d904c2b05255a92f5a4a4f3e234ae0a4efe538adef3c1794e1cea90600090a250565b600354600090600160a01b900460ff16806113745750600c60009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561270557600080fd5b505afa158015612719573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190615313565b612745614532565b6001600160a01b0383166127625761275d828261455f565b505050565b61275d6001600160a01b0384168383614678565b6002546001600160a01b031633146127a157604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166127c85760405163fb7566d760e01b815260040160405180910390fd5b6127d3601982614697565b6127f0576040516362c4c75f60e01b815260040160405180910390fd5b6040516001600160a01b03821681527f5412e32b52c11e4b232ab59f3660d55b48eb20735ccb2c67a0a1ebea0d6fe0199060200160405180910390a150565b6002546001600160a01b0316331461285a57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166128815760405163fb7566d760e01b815260040160405180910390fd5b6000816001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b1580156128bc57600080fd5b505afa1580156128d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f491906151b1565b90506001600160a01b03811661291d5760405163013a1b4360e51b815260040160405180910390fd5b6001600160a01b0381811660009081526016602052604090205416156129565760405163fa9b809960e01b815260040160405180910390fd5b61296160118361451d565b61297e57604051631f477b5760e11b815260040160405180910390fd5b6001600160a01b0381811660009081526016602052604080822080546001600160a01b0319169386169384179055517fad48bee6bbb1b8ece321157ad29afc3c6baa177f8dc043132d65038cc601cdd69190a25050565b60008060006129e2613dd1565b6001600160a01b031663b646638487866001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015612a2a57600080fd5b505afa158015612a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6291906151b1565b886040518463ffffffff1660e01b8152600401612a81939291906151ce565b60206040518083038186803b158015612a9957600080fd5b505afa158015612aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad1919061516b565b6018546040805163cfc0c69f60e01b8152815193955060009384936001600160a01b03169263cfc0c69f9260048082019391829003018186803b158015612b1757600080fd5b505afa158015612b2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4f91906152b5565b90925090506001600160801b03811615612b7957612b76846001600160801b03831661412a565b92505b6001600160801b03821615612ba857612b9b846001600160801b03841661412a565b612ba5908561520b565b93505b612bb2848461520b565b9450505093509350939050565b612bc833612109565b612be5576040516304f8b91760e51b815260040160405180910390fd5b612bf160148233614195565b6110cf576040516359c937f160e01b815260040160405180910390fd5b612c1733612109565b612c34576040516304f8b91760e51b815260040160405180910390fd5b80601e612c42601383614162565b612c4d601484614162565b612c57919061520b565b10612c75576040516306ceeb8360e21b815260040160405180910390fd5b612c816014833361437d565b61210557604051631f477b5760e11b815260040160405180910390fd5b6002546001600160a01b03163314612cc957604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116612cf05760405163fb7566d760e01b815260040160405180910390fd5b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015612d2b57600080fd5b505afa158015612d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6391906151b1565b6001600160a01b038082166000908152601060205260409020549192501615612d9f5760405163374f601360e11b815260040160405180910390fd5b601e612dab600e6146ac565b10612dc95760405163225b605b60e21b815260040160405180910390fd5b612dd4600e8361451d565b612df15760405163dd40dad960e01b815260040160405180910390fd5b6001600160a01b0381811660009081526010602052604080822080546001600160a01b0319169386169384179055517fdc705e658c7b6c6c01f5802457bf4ffb99f204bf1603e7b1ae3d4c7536611bc29190a25050565b60606121166013836146b6565b6002546001600160a01b03163314612e8057604051634b98449160e11b815260040160405180910390fd5b6001600160a01b038116612ea75760405163fb7566d760e01b815260040160405180910390fd5b600d546001600160a01b03908116908216811415612ed857604051630333a68160e41b815260040160405180910390fd5b6001600160a01b03811615612f43576040516326ed7c7960e11b81526001600160a01b038381166004830152821690634ddaf8f290602401600060405180830381600087803b158015612f2a57600080fd5b505af1158015612f3e573d6000803e3d6000fd5b505050505b816001600160a01b0316816001600160a01b03167f4ab5be82436d353e61ca18726e984e561f5c1cc7c6d38b29d2553c790434705a60405160405180910390a350600d80546001600160a01b0319166001600160a01b0392909216919091179055565b612fae6126a1565b15612fcc57604051631309a56360e01b815260040160405180910390fd5b6002546001600160a01b03163314612ff757604051634b98449160e11b815260040160405180910390fd5b6003805460ff60a01b1916600160a01b17905560405133907f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890600090a2565b60008061304384613a00565b505050509050801561305957600091505061318b565b6040516370a0823160e01b81526001600160a01b0385811660048301526000916130e2918891908716906370a082319060240160206040518083038186803b1580156130a457600080fd5b505afa1580156130b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130dc919061516b565b86611767565b5050600b546001600160a01b03888116600090815260166020526040908190205490516370a0823160e01b8152898316600482015293945061317a939116906370a082319060240160206040518083038186803b15801561314257600080fd5b505afa158015613156573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123aa919061516b565b925082811015613188578092505b50505b9392505050565b6002546001600160a01b031633146131bd57604051634b98449160e11b815260040160405180910390fd5b600c54604051600160a01b90910460ff1615808252907fc8011ac148e14ab1e8f93a022ebc29088beedc705027c8eb9514d6d69c5b23639060200160405180910390a1600c8054911515600160a01b0260ff60a01b19909216919091179055565b6002546001600160a01b0316331461324957604051634b98449160e11b815260040160405180910390fd5b6001600160a01b03811661327057604051634c267bfb60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600c54604080516331056e5760e21b815290516000926001600160a01b03169163c415b95c916004808301926020929190829003018186803b1580156132d757600080fd5b505afa1580156132eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137491906151b1565b600054610100900460ff1680613328575060005460ff16155b6133445760405162461bcd60e51b81526004016113c590615335565b600054610100900460ff16158015613366576000805461ffff19166101011790555b6001600160a01b03821661338d57604051637cb62f2b60e11b815260040160405180910390fd5b6133956146c4565b61339d614733565b600c80546001600160a81b0319166001600160a01b03841617600160a01b1790556706f05b59d3b20000600b558015612105576000805461ff00191690555050565b6002546001600160a01b0316331461340a57604051634b98449160e11b815260040160405180910390fd5b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561344557600080fd5b505afa158015613459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347d919061516b565b111561349c5760405163066097f160e31b815260040160405180910390fd5b6134a7601182614697565b6134c4576040516359c937f160e01b815260040160405180910390fd5b60166000826001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b15801561350157600080fd5b505afa158015613515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353991906151b1565b6001600160a01b03908116825260208201929092526040908101600090812080546001600160a01b03191690559051918316917f81e9205ee5a9e1289fad5baa5e74bd49d4613652eb4626bb15925bf9fdbc0feb9190a250565b60606121166014836146b6565b6000806135ab613dd1565b905060006135ba601485614162565b905060005b8181101561375b5760006135d560148784614180565b9050836001600160a01b0316638d0dba00826001600160a01b0316638230ecd66040518163ffffffff1660e01b815260040160206040518083038186803b15801561361f57600080fd5b505afa158015613633573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365791906151b1565b6040516370a0823160e01b81526001600160a01b038a811660048301528516906370a082319060240160206040518083038186803b15801561369857600080fd5b505afa1580156136ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d0919061516b565b6040518363ffffffff1660e01b81526004016136ed9291906151f2565b60206040518083038186803b15801561370557600080fd5b505afa158015613719573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373d919061516b565b613747908661520b565b9450508061375490615223565b90506135bf565b505050919050565b6002546001600160a01b0316331461378e57604051634b98449160e11b815260040160405180910390fd5b6001600160a01b0381166137b55760405163fb7566d760e01b815260040160405180910390fd5b6017546001600160a01b039081169082168114156137e657604051630333a68160e41b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527ffb7a5f1d35a7022d9d6343bfc9a25035829d0ea72da06978793c945b1d94a17f910160405180910390a150601780546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b0316331461387757604051634b98449160e11b815260040160405180910390fd5b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156138b257600080fd5b505afa1580156138c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ea919061516b565b11156139095760405163066097f160e31b815260040160405180910390fd5b613914600e82614697565b6139315760405163a67d528360e01b815260040160405180910390fd5b60106000826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561396e57600080fd5b505afa158015613982573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a691906151b1565b6001600160a01b03908116825260208201929092526040908101600090812080546001600160a01b03191690559051918316917fe5a19a76470297a1f85f9a38f3ff148b4c8cdc1209e074dbe59db5e22eb31a3a9190a250565b6000806000806000613a11866135a0565b9250613a1c86610e2f565b8085111596509094509150818310613a35576000613a3f565b613a3f838361519a565b905091939590929450565b600080613a55613e16565b15613a7357604051631b0e923f60e11b815260040160405180910390fd5b60026001541415613a965760405162461bcd60e51b81526004016113c59061523e565b600260015584613aa581610bbe565b613ac25760405163a596698b60e01b815260040160405180910390fd5b84613acc81610bbe565b613ae95760405163a596698b60e01b815260040160405180910390fd5b600c54600160a01b900460ff16613b1357604051633840404b60e21b815260040160405180910390fd5b841580613b9557506040516370a0823160e01b81523360048201526001600160a01b038816906370a082319060240160206040518083038186803b158015613b5a57600080fd5b505afa158015613b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b92919061516b565b85115b15613bb35760405163ca99073960e01b815260040160405180910390fd5b604051632770a7eb60e21b81526001600160a01b03881690639dc29fac90613be190339089906004016151f2565b600060405180830381600087803b158015613bfb57600080fd5b505af1158015613c0f573d6000803e3d6000fd5b50505050613c1e8787876110d2565b90945092508215613d0f57856001600160a01b03166340c10f19600c60009054906101000a90046001600160a01b03166001600160a01b031663c415b95c6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c8657600080fd5b505afa158015613c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cbe91906151b1565b856040518363ffffffff1660e01b8152600401613cdc9291906151f2565b600060405180830381600087803b158015613cf657600080fd5b505af1158015613d0a573d6000803e3d6000fd5b505050505b6040516340c10f1960e01b81526001600160a01b038716906340c10f1990613d3d90339088906004016151f2565b600060405180830381600087803b158015613d5757600080fd5b505af1158015613d6b573d6000803e3d6000fd5b505060408051888152602081018890529081018690526001600160a01b03808a1693508a16915033907fafd74f009c0ff7627726f24b568ee5529cd297f6a7a1e43ec363443a13a584209060600160405180910390a45050600180559094909350915050565b600c5460408051637556d1c160e11b815290516000926001600160a01b03169163eaada382916004808301926020929190829003018186803b1580156132d757600080fd5b600354600090600160a81b900460ff16806113745750600c60009054906101000a90046001600160a01b03166001600160a01b031663ecf3a3f96040518163ffffffff1660e01b815260040160206040518083038186803b15801561270557600080fd5b6002546001600160a01b03163314613ea557604051634b98449160e11b815260040160405180910390fd5b670de0b6b3a7640000811115613ece57604051633c2c00b560e21b815260040160405180910390fd5b600b5481811415613ef257604051630333a68160e41b815260040160405180910390fd5b60408051828152602081018490527f6d8ed4ad9ba67058e16e32fc3c8da2e3358da6cd1599e0e0fb2630d0a19fd49c910160405180910390a150600b55565b6003546001600160a01b0316338114613f5d5760405163038cdbad60e31b815260040160405180910390fd5b6002546040516001600160a01b038084169216907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d090600090a3600280546001600160a01b039092166001600160a01b0319928316179055600380549091169055565b6000612116600e8361438a565b6060611374600e6141a2565b613fe1613e16565b15613fff57604051631b0e923f60e11b815260040160405180910390fd5b6002546001600160a01b0316331461402a57604051634b98449160e11b815260040160405180910390fd5b6003805461ffff60a01b191661010160a01b17905560405133907f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a90600090a2565b614074613e16565b61409157604051636e2cff4560e01b815260040160405180910390fd5b6002546001600160a01b031633146140bc57604051634b98449160e11b815260040160405180910390fd5b6003805460ff60a81b1916905560405133907fece7583a70a505ef0e36d4dec768f5ae597713e09c26011022599ee01abdabfc90600090a2565b600081614104600282615383565b614116670de0b6b3a7640000866153a5565b614120919061520b565b61318b9190615383565b6000821580614137575081155b1561414457506000612116565b670de0b6b3a7640000614158600282615383565b61411684866153a5565b6001600160a01b03811660009081526020839052604081205461318b565b600061418d8484846147a6565b949350505050565b600061418d8484846147ed565b6060600061318b8361499a565b60006141c56001600160a01b038616878361440a565b6141d96001600160a01b038616878561440a565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b15801561421b57600080fd5b505afa15801561422f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614253919061516b565b604051636ccb2b0160e01b81526001600160a01b0388811660048301528781166024830152604482018790526064820186905230608483015291925090881690636ccb2b019060a401602060405180830381600087803b1580156142b657600080fd5b505af11580156142ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142ee919061516b565b506040516370a0823160e01b815230600482015281906001600160a01b038716906370a082319060240160206040518083038186803b15801561433057600080fd5b505afa158015614344573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614368919061516b565b614372919061519a565b979650505050505050565b600061418d8484846149f6565b6001600160a01b0381166000908152600183016020526040812054151561318b565b614404846323b872dd60e01b8585856040516024016143cd939291906151ce565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614a84565b50505050565b8015806144935750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561445957600080fd5b505afa15801561446d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614491919061516b565b155b6144fe5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016113c5565b61275d8363095ea7b360e01b84846040516024016143cd9291906151f2565b600061318b836001600160a01b038416614b56565b6002546001600160a01b0316331461455d57604051634b98449160e11b815260040160405180910390fd5b565b804710156145af5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016113c5565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146145fc576040519150601f19603f3d011682016040523d82523d6000602084013e614601565b606091505b505090508061275d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016113c5565b61275d8363a9059cbb60e01b84846040516024016143cd9291906151f2565b600061318b836001600160a01b038416614ba5565b6000612116825490565b6060600061418d8484614c98565b600054610100900460ff16806146dd575060005460ff16155b6146f95760405162461bcd60e51b81526004016113c590615335565b600054610100900460ff1615801561471b576000805461ffff19166101011790555b6001805580156110cf576000805461ff001916905550565b600054610100900460ff168061474c575060005460ff16155b6147685760405162461bcd60e51b81526004016113c590615335565b600054610100900460ff1615801561478a576000805461ffff19166101011790555b614792614d0d565b80156110cf576000805461ff001916905550565b6001600160a01b03821660009081526020849052604081208054839081106147d0576147d06153c4565b6000918252602090912001546001600160a01b0316949350505050565b6001600160a01b0380831660009081526020858152604080832093851683526001909301905290812054801561499057600061482a60018361519a565b6001600160a01b038616600090815260208890526040812054919250906148539060019061519a565b905081811461490f576001600160a01b0386166000908152602088905260408120805483908110614886576148866153c4565b60009182526020808320909101546001600160a01b038a81168452918b905260409092208054919092169250829190859081106148c5576148c56153c4565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905589831682528a8152604080832094909316825260019390930190925290208390555b6001600160a01b0386166000908152602088905260409020805480614936576149366153da565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03888116835289825260408084209189168452600191820190925290822091909155935061318b92505050565b600091505061318b565b6060816000018054806020026020016040519081016040528092919081815260200182805480156149ea57602002820191906000526020600020905b8154815260200190600101908083116149d6575b50505050509050919050565b6001600160a01b0380831660009081526020858152604080832093851683526001909301905290812054614a7c57506001600160a01b0382811660009081526020858152604080832080546001808201835582865284862090910180546001600160a01b031916968816968717905581549585529081019092529091209190915561318b565b50600061318b565b6000614ad9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614db89092919063ffffffff16565b80519091501561275d5780806020019051810190614af79190615313565b61275d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016113c5565b6000818152600183016020526040812054614b9d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155612116565b506000612116565b60008181526001830160205260408120548015614c8e576000614bc960018361519a565b8554909150600090614bdd9060019061519a565b9050818114614c42576000866000018281548110614bfd57614bfd6153c4565b9060005260206000200154905080876000018481548110614c2057614c206153c4565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080614c5357614c536153da565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612116565b6000915050612116565b6001600160a01b03811660009081526020838152604091829020805483518184028101840190945280845260609392830182828015614d0057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614ce2575b5050505050905092915050565b600054610100900460ff1680614d26575060005460ff16155b614d425760405162461bcd60e51b81526004016113c590615335565b600054610100900460ff16158015614d64576000805461ffff19166101011790555b600280546001600160a01b031916339081179091556040516000907fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0908290a380156110cf576000805461ff001916905550565b606061418d848460008585843b614e115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016113c5565b600080866001600160a01b03168587604051614e2d91906153f0565b60006040518083038185875af1925050503d8060008114614e6a576040519150601f19603f3d011682016040523d82523d6000602084013e614e6f565b606091505b509150915061437282828660608315614e8957508161318b565b825115614e995782518084602001fd5b8160405162461bcd60e51b81526004016113c59190615138565b6001600160a01b03811681146110cf57600080fd5b600060208284031215614eda57600080fd5b813561318b81614eb3565b600060208284031215614ef757600080fd5b5035919050565b600080600060608486031215614f1357600080fd5b8335614f1e81614eb3565b92506020840135614f2e81614eb3565b929592945050506040919091013590565b6020808252825182820181905260009190848201906040850190845b81811015614f805783516001600160a01b031683529284019291840191600101614f5b565b50909695505050505050565b60008060008060808587031215614fa257600080fd5b8435614fad81614eb3565b93506020850135614fbd81614eb3565b93969395505050506040820135916060013590565b600080600060608486031215614fe757600080fd5b8335614ff281614eb3565b925060208401359150604084013561500981614eb3565b809150509250925092565b6000806000806080858703121561502a57600080fd5b843561503581614eb3565b9350602085013561504581614eb3565b925060408501359150606085013561505c81614eb3565b939692955090935050565b60008060008060008060c0878903121561508057600080fd5b863561508b81614eb3565b9550602087013561509b81614eb3565b945060408701356150ab81614eb3565b959894975094956060810135955060808101359460a0909101359350915050565b6000806000606084860312156150e157600080fd5b83356150ec81614eb3565b925060208401356150fc81614eb3565b9150604084013561500981614eb3565b60005b8381101561512757818101518382015260200161510f565b838111156144045750506000910152565b602081526000825180602084015261515781604085016020870161510c565b601f01601f19169190910160400192915050565b60006020828403121561517d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156151ac576151ac615184565b500390565b6000602082840312156151c357600080fd5b815161318b81614eb3565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000821982111561521e5761521e615184565b500190565b600060001982141561523757615237615184565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000806040838503121561528857600080fd5b505080516020909101519092909150565b80516001600160801b03811681146152b057600080fd5b919050565b600080604083850312156152c857600080fd5b6152d183615299565b91506152df60208401615299565b90509250929050565b60006001600160801b0380831681851680830382111561530a5761530a615184565b01949350505050565b60006020828403121561532557600080fd5b8151801515811461318b57600080fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000826153a057634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156153bf576153bf615184565b500290565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6000825161540281846020870161510c565b919091019291505056fea2646970667358221220ab50c378711b9359cf71e20e376a9d582561282bcf584e6279d3d7426fc1018464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addDebtToken(address)": {
        "details": "Must keep `debtTokenOf` mapping updated"
      },
      "addToDebtTokensOfAccount(address)": {
        "details": "This function is called from `DebtToken` when user's balance changes from `0`The caller should ensure to not pass `address(0)` as `_account`",
        "params": {
          "account_": "The account address"
        }
      },
      "addToDepositTokensOfAccount(address)": {
        "details": "This function is called from `DepositToken` when user's balance changes from `0`The caller should ensure to not pass `address(0)` as `_account`",
        "params": {
          "account_": "The account address"
        }
      },
      "debtOf(address)": {
        "params": {
          "account_": "The account to check"
        },
        "returns": {
          "_debtInUsd": "The debt value in USD"
        }
      },
      "debtPositionOf(address)": {
        "params": {
          "account_": "The account to check"
        },
        "returns": {
          "_debtInUsd": "The total debt in USD",
          "_depositInUsd": "The total collateral deposited in USD",
          "_isHealthy": "Whether the account's position is healthy",
          "_issuableInUsd": "The amount of debt (is USD) that is free (i.e. can be used to issue synthetic tokens)",
          "_issuableLimitInUsd": "The max amount of debt (is USD) that can be created (considering collateral factors)"
        }
      },
      "depositOf(address)": {
        "params": {
          "account_": "The account to check"
        },
        "returns": {
          "_depositInUsd": "The total deposit value in USD among all collaterals",
          "_issuableLimitInUsd": "The max value in USD that can be used to issue synthetic tokens"
        }
      },
      "doesDebtTokenExist(address)": {
        "params": {
          "debtToken_": "Asset to check"
        },
        "returns": {
          "_0": "true if exist"
        }
      },
      "doesDepositTokenExist(address)": {
        "params": {
          "depositToken_": "Asset to check"
        },
        "returns": {
          "_0": "true if exist"
        }
      },
      "doesSyntheticTokenExist(address)": {
        "params": {
          "syntheticToken_": "Asset to check"
        },
        "returns": {
          "_0": "true if exist"
        }
      },
      "flashRepay(address,address,uint256,uint256)": {
        "params": {
          "depositToken_": "The collateral to withdraw",
          "repayAmountMin_": "The minimum amount to repay (slippage check)",
          "syntheticToken_": "The debt token to repay",
          "withdrawAmount_": "The amount to withdraw"
        }
      },
      "getDebtTokens()": {
        "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees."
      },
      "getDebtTokensOfAccount(address)": {
        "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees."
      },
      "getDepositTokens()": {
        "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees."
      },
      "getDepositTokensOfAccount(address)": {
        "details": "WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees."
      },
      "leverage(address,address,address,uint256,uint256,uint256)": {
        "params": {
          "amountIn_": "The amount to deposit",
          "depositAmountMin_": "The min final deposit amount (slippage)",
          "depositToken_": "The collateral to deposit",
          "leverage_": "The leverage X param (e.g. 1.5e18 for 1.5X)",
          "syntheticToken_": "The msAsset to mint",
          "tokenIn_": "The token to transfer"
        }
      },
      "liquidate(address,address,uint256,address)": {
        "params": {
          "account_": "The account with an unhealthy position",
          "amountToRepay_": "The amount to repay in synthetic token",
          "depositToken_": "The collateral to seize from",
          "syntheticToken_": "The msAsset to use for repayment"
        },
        "returns": {
          "_fee": "Share of `_totalSeized` collected as fee",
          "_toLiquidator": "Share of `_totalSeized` sent to the liquidator",
          "_totalSeized": "Total deposit amount seized from the liquidated account"
        }
      },
      "open()": {
        "details": "Open contract operations, if contract is in shutdown state"
      },
      "pause()": {
        "details": "Suspend deposit feature, if contract is not paused."
      },
      "quoteLiquidateIn(address,uint256,address)": {
        "params": {
          "depositToken_": "Collateral's deposit token",
          "syntheticToken_": "Synth for repayment",
          "totalToSeize_": "Collateral total amount to size"
        },
        "returns": {
          "_amountToRepay": "Synth amount to burn",
          "_fee": "The fee amount to collect",
          "_toLiquidator": "Seized amount to the liquidator"
        }
      },
      "quoteLiquidateMax(address,address,address)": {
        "details": "I.e. Considers the min amount between collateral's balance and `maxLiquidable` param",
        "params": {
          "account_": "The account to liquidate",
          "depositToken_": "Collateral's deposit token",
          "syntheticToken_": "Synth for repayment"
        },
        "returns": {
          "_maxAmountToRepay": "Synth amount to burn"
        }
      },
      "quoteLiquidateOut(address,uint256,address)": {
        "params": {
          "amountToRepay_": "Synth amount to burn",
          "depositToken_": "Collateral's deposit token",
          "syntheticToken_": "Synth for repayment"
        },
        "returns": {
          "_fee": "The fee amount to collect",
          "_toLiquidator": "Seized amount to the liquidator",
          "_totalToSeize": "Collateral total amount to size"
        }
      },
      "quoteSwapIn(address,address,uint256)": {
        "params": {
          "amountOut_": "Amount out",
          "syntheticTokenIn_": "Synth in",
          "syntheticTokenOut_": "Synth out"
        },
        "returns": {
          "_amountIn": "Amount in",
          "_fee": "Fee to charge in `syntheticTokenOut_`"
        }
      },
      "quoteSwapOut(address,address,uint256)": {
        "params": {
          "amountIn_": "Amount in",
          "syntheticTokenIn_": "Synth in",
          "syntheticTokenOut_": "Synth out"
        },
        "returns": {
          "_amountOut": "Amount out",
          "_fee": "Fee to charge in `syntheticTokenOut_`"
        }
      },
      "removeDebtToken(address)": {
        "details": "Must keep `debtTokenOf` mapping updated"
      },
      "removeFromDebtTokensOfAccount(address)": {
        "details": "This function is called from `DebtToken` when user's balance changes to `0`The caller should ensure to not pass `address(0)` as `_account`",
        "params": {
          "account_": "The account address"
        }
      },
      "removeFromDepositTokensOfAccount(address)": {
        "details": "This function is called from `DepositToken` when user's balance changes to `0`The caller should ensure to not pass `address(0)` as `_account`",
        "params": {
          "account_": "The account address"
        }
      },
      "shutdown()": {
        "details": "Suspend all features (issue, repay, deposit, withdraw, liquidate and swap), if not already shutdown."
      },
      "swap(address,address,uint256)": {
        "params": {
          "amountIn_": "Amount to swap",
          "syntheticTokenIn_": "Synthetic token to sell",
          "syntheticTokenOut_": "Synthetic token to buy"
        }
      },
      "sweep(address,address,uint256)": {
        "params": {
          "amount_": "The amount to send",
          "to_": "The recipient of the transfer",
          "token_": "The token to transfer"
        }
      },
      "transferGovernorship(address)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "proposedGovernor_": "The new proposed governor"
        }
      },
      "unpause()": {
        "details": "Unpause contract operations, allow only if contract is paused and not shutdown."
      }
    },
    "title": "Pool contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DebtFloorUpdated(uint256,uint256)": {
        "notice": "Emitted when protocol liquidation fee is updated"
      },
      "DebtTokenAdded(address)": {
        "notice": "Emitted when debt token is enabled"
      },
      "DebtTokenRemoved(address)": {
        "notice": "Emitted when debt token is disabled"
      },
      "DepositTokenAdded(address)": {
        "notice": "Emitted when deposit token is enabled"
      },
      "DepositTokenRemoved(address)": {
        "notice": "Emitted when deposit token is disabled"
      },
      "FeeProviderUpdated(address,address)": {
        "notice": "Emitted when fee provider contract is updated"
      },
      "MaxLiquidableUpdated(uint256,uint256)": {
        "notice": "Emitted when maxLiquidable (liquidation cap) is updated"
      },
      "Open(address)": {
        "notice": "Emitted when contract is turned on"
      },
      "Paused(address)": {
        "notice": "Emitted when contract is paused"
      },
      "PositionLiquidated(address,address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when a position is liquidated"
      },
      "RewardsDistributorAdded(address)": {
        "notice": "Emitted when rewards distributor contract is added"
      },
      "RewardsDistributorRemoved(address)": {
        "notice": "Emitted when rewards distributor contract is removed"
      },
      "Shutdown(address)": {
        "notice": "Emitted when contract is shuted down"
      },
      "SwapActiveUpdated(bool)": {
        "notice": "Emitted when the swap active flag is updated"
      },
      "SwapperUpdated(address,address)": {
        "notice": "Emitted when swapper contract is updated"
      },
      "SyntheticTokenSwapped(address,address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when synthetic token is swapped"
      },
      "TreasuryUpdated(address,address)": {
        "notice": "Emitted when treasury contract is updated"
      },
      "Unpaused(address)": {
        "notice": "Emitted when contract is unpaused"
      }
    },
    "kind": "user",
    "methods": {
      "MAX_TOKENS_PER_USER()": {
        "notice": "Maximum tokens per pool a user may have"
      },
      "acceptGovernorship()": {
        "notice": "Allows new governor to accept governorship of the contract."
      },
      "addDebtToken(address)": {
        "notice": "Add debt token to offerings"
      },
      "addDepositToken(address)": {
        "notice": "Add deposit token (i.e. collateral) to Synth"
      },
      "addRewardsDistributor(address)": {
        "notice": "Add a RewardsDistributor contract"
      },
      "addToDebtTokensOfAccount(address)": {
        "notice": "Add a debt token to the per-account list"
      },
      "addToDepositTokensOfAccount(address)": {
        "notice": "Add a deposit token to the per-account list"
      },
      "debtFloorInUsd()": {
        "notice": "The debt floor (in USD) for each synthetic token This parameters is used to keep incentive for liquidators (i.e. cover gas and provide enough profit)"
      },
      "debtOf(address)": {
        "notice": "Get account's debt by querying latest prices from oracles"
      },
      "debtPositionOf(address)": {
        "notice": "Returns whether the debt position from an account is healthy"
      },
      "debtTokenOf(address)": {
        "notice": "Get the debt token's address from given synthetic asset"
      },
      "depositOf(address)": {
        "notice": "Get account's total collateral deposited by querying latest prices from oracles"
      },
      "depositTokenOf(address)": {
        "notice": "Get the deposit token's address from given underlying asset"
      },
      "doesDebtTokenExist(address)": {
        "notice": "Check if token is part of the debt offerings"
      },
      "doesDepositTokenExist(address)": {
        "notice": "Check if collateral is supported"
      },
      "doesSyntheticTokenExist(address)": {
        "notice": "Check if token is part of the synthetic offerings"
      },
      "everythingStopped()": {
        "notice": "Return `true` if contract is shutdown"
      },
      "feeCollector()": {
        "notice": "Returns fee collector address"
      },
      "feeProvider()": {
        "notice": "FeeProvider contract"
      },
      "flashRepay(address,address,uint256,uint256)": {
        "notice": "Flash debt repayment"
      },
      "getDebtTokens()": {
        "notice": "Get all debt tokens"
      },
      "getDebtTokensOfAccount(address)": {
        "notice": "Get all debt tokens"
      },
      "getDepositTokens()": {
        "notice": "Get all deposit tokens"
      },
      "getDepositTokensOfAccount(address)": {
        "notice": "Get deposit tokens of an account"
      },
      "getRewardsDistributors()": {
        "notice": "Get all rewards distributors"
      },
      "governor()": {
        "notice": "The governor"
      },
      "isSwapActive()": {
        "notice": "Swap feature on/off flag"
      },
      "leverage(address,address,address,uint256,uint256,uint256)": {
        "notice": "Leverage yield position"
      },
      "liquidate(address,address,uint256,address)": {
        "notice": "Burn synthetic token, unlock deposit token and send liquidator incentive"
      },
      "masterOracle()": {
        "notice": "Get MasterOracle contract"
      },
      "maxLiquidable()": {
        "notice": "The max percent of the debt allowed to liquidate"
      },
      "paused()": {
        "notice": "Return `true` if contract is paused"
      },
      "poolRegistry()": {
        "notice": "PoolRegistry"
      },
      "proposedGovernor()": {
        "notice": "The proposed governor"
      },
      "quoteLiquidateIn(address,uint256,address)": {
        "notice": "Quote synth  `_amountToRepay` in order to seize `totalToSeized_`"
      },
      "quoteLiquidateMax(address,address,address)": {
        "notice": "Quote max allowed synth to repay"
      },
      "quoteLiquidateOut(address,uint256,address)": {
        "notice": "Quote collateral  `totalToSeized_` by repaying `amountToRepay_`"
      },
      "quoteSwapIn(address,address,uint256)": {
        "notice": "Quote `_amountIn` to get `amountOut_`"
      },
      "quoteSwapOut(address,address,uint256)": {
        "notice": "Quote `amountOut_` get from `amountIn_`"
      },
      "removeDebtToken(address)": {
        "notice": "Remove debt token from offerings"
      },
      "removeDepositToken(address)": {
        "notice": "Remove deposit token (i.e. collateral) from Synth"
      },
      "removeFromDebtTokensOfAccount(address)": {
        "notice": "Remove a debt token from the per-account list"
      },
      "removeFromDepositTokensOfAccount(address)": {
        "notice": "Remove a deposit token from the per-account list"
      },
      "removeRewardsDistributor(address)": {
        "notice": "Remove a RewardsDistributor contract"
      },
      "swap(address,address,uint256)": {
        "notice": "Swap synthetic tokens"
      },
      "swapper()": {
        "notice": "Swapper contract"
      },
      "sweep(address,address,uint256)": {
        "notice": "ERC20 recovery in case of stuck tokens due direct transfers to the contract address."
      },
      "toggleIsSwapActive()": {
        "notice": "Turn swap on/off"
      },
      "transferGovernorship(address)": {
        "notice": "Transfers governorship of the contract to a new account (`proposedGovernor`)."
      },
      "treasury()": {
        "notice": "Treasury contract"
      },
      "updateDebtFloor(uint256)": {
        "notice": "Update debt floor"
      },
      "updateFeeProvider(address)": {
        "notice": "Update FeeProvider contract"
      },
      "updateMaxLiquidable(uint256)": {
        "notice": "Update maxLiquidable (liquidation cap)"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper contract"
      },
      "updateTreasury(address)": {
        "notice": "Update treasury contract - will migrate funds to the new contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10100,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10103,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10154,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8973,
        "contract": "contracts/Pool.sol:Pool",
        "label": "governor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8976,
        "contract": "contracts/Pool.sol:Pool",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 17085,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_paused",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 17087,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_everythingStopped",
        "offset": 21,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 15801,
        "contract": "contracts/Pool.sol:Pool",
        "label": "debtFloorInUsd",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 15803,
        "contract": "contracts/Pool.sol:Pool",
        "label": "depositFee__DEPRECATED",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 15805,
        "contract": "contracts/Pool.sol:Pool",
        "label": "issueFee__DEPRECATED",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15807,
        "contract": "contracts/Pool.sol:Pool",
        "label": "withdrawFee__DEPRECATED",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 15809,
        "contract": "contracts/Pool.sol:Pool",
        "label": "repayFee__DEPRECATED",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 15811,
        "contract": "contracts/Pool.sol:Pool",
        "label": "swapFee__DEPRECATED",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 15813,
        "contract": "contracts/Pool.sol:Pool",
        "label": "liquidationFees__DEPRECATED",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 15817,
        "contract": "contracts/Pool.sol:Pool",
        "label": "maxLiquidable",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 15822,
        "contract": "contracts/Pool.sol:Pool",
        "label": "poolRegistry",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IPoolRegistry)13318"
      },
      {
        "astId": 15826,
        "contract": "contracts/Pool.sol:Pool",
        "label": "isSwapActive",
        "offset": 20,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 15831,
        "contract": "contracts/Pool.sol:Pool",
        "label": "treasury",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(ITreasury)13519"
      },
      {
        "astId": 15835,
        "contract": "contracts/Pool.sol:Pool",
        "label": "depositTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(AddressSet)12230_storage"
      },
      {
        "astId": 15843,
        "contract": "contracts/Pool.sol:Pool",
        "label": "depositTokenOf",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_contract(IERC20)10809,t_contract(IDepositToken)12793)"
      },
      {
        "astId": 15847,
        "contract": "contracts/Pool.sol:Pool",
        "label": "debtTokens",
        "offset": 0,
        "slot": "17",
        "type": "t_struct(AddressSet)12230_storage"
      },
      {
        "astId": 15851,
        "contract": "contracts/Pool.sol:Pool",
        "label": "depositTokensOfAccount",
        "offset": 0,
        "slot": "19",
        "type": "t_struct(AddressSet)13742_storage"
      },
      {
        "astId": 15855,
        "contract": "contracts/Pool.sol:Pool",
        "label": "debtTokensOfAccount",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(AddressSet)13742_storage"
      },
      {
        "astId": 15860,
        "contract": "contracts/Pool.sol:Pool",
        "label": "rewardsDistributors__DEPRECATED",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_contract(IRewardsDistributor)13449)dyn_storage"
      },
      {
        "astId": 15868,
        "contract": "contracts/Pool.sol:Pool",
        "label": "debtTokenOf",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_contract(ISyntheticToken)13504,t_contract(IDebtToken)12661)"
      },
      {
        "astId": 15875,
        "contract": "contracts/Pool.sol:Pool",
        "label": "swapper",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(ISwapper)13685"
      },
      {
        "astId": 15880,
        "contract": "contracts/Pool.sol:Pool",
        "label": "feeProvider",
        "offset": 0,
        "slot": "24",
        "type": "t_contract(IFeeProvider)12841"
      },
      {
        "astId": 15884,
        "contract": "contracts/Pool.sol:Pool",
        "label": "rewardsDistributors",
        "offset": 0,
        "slot": "25",
        "type": "t_struct(AddressSet)12230_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IRewardsDistributor)13449)dyn_storage": {
        "base": "t_contract(IRewardsDistributor)13449",
        "encoding": "dynamic_array",
        "label": "contract IRewardsDistributor[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDebtToken)12661": {
        "encoding": "inplace",
        "label": "contract IDebtToken",
        "numberOfBytes": "20"
      },
      "t_contract(IDepositToken)12793": {
        "encoding": "inplace",
        "label": "contract IDepositToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)10809": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFeeProvider)12841": {
        "encoding": "inplace",
        "label": "contract IFeeProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolRegistry)13318": {
        "encoding": "inplace",
        "label": "contract IPoolRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsDistributor)13449": {
        "encoding": "inplace",
        "label": "contract IRewardsDistributor",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapper)13685": {
        "encoding": "inplace",
        "label": "contract ISwapper",
        "numberOfBytes": "20"
      },
      "t_contract(ISyntheticToken)13504": {
        "encoding": "inplace",
        "label": "contract ISyntheticToken",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)13519": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Set)13736_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MappedEnumerableSet.Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Set)13736_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)10809,t_contract(IDepositToken)12793)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)10809",
        "label": "mapping(contract IERC20 => contract IDepositToken)",
        "numberOfBytes": "32",
        "value": "t_contract(IDepositToken)12793"
      },
      "t_mapping(t_contract(ISyntheticToken)13504,t_contract(IDebtToken)12661)": {
        "encoding": "mapping",
        "key": "t_contract(ISyntheticToken)13504",
        "label": "mapping(contract ISyntheticToken => contract IDebtToken)",
        "numberOfBytes": "32",
        "value": "t_contract(IDebtToken)12661"
      },
      "t_struct(AddressSet)12230_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 12229,
            "contract": "contracts/Pool.sol:Pool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)11929_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AddressSet)13742_storage": {
        "encoding": "inplace",
        "label": "struct MappedEnumerableSet.AddressSet",
        "members": [
          {
            "astId": 13741,
            "contract": "contracts/Pool.sol:Pool",
            "label": "_ofAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(Set)13736_storage)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)11929_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 11924,
            "contract": "contracts/Pool.sol:Pool",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 11928,
            "contract": "contracts/Pool.sol:Pool",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)13736_storage": {
        "encoding": "inplace",
        "label": "struct MappedEnumerableSet.Set",
        "members": [
          {
            "astId": 13731,
            "contract": "contracts/Pool.sol:Pool",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 13735,
            "contract": "contracts/Pool.sol:Pool",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}